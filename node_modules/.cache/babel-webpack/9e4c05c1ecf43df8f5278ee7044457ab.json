{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @typedef {import('multiformats/cid').CIDVersion} CIDVersion\n */\n\n/**\n * @param {Object} config\n * @param {import('ipfs-core-utils/src/multicodecs')} config.codecs\n * @param {import('ipfs-core-utils/src/multihashes')} config.hashers\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n *\n */\n\n\nmodule.exports = ({\n  codecs,\n  hashers,\n  repo,\n  preload\n}) => {\n  /**\n   * @type {import('ipfs-core-types/src/block').API[\"put\"]}\n   */\n  function put(_x) {\n    return _put.apply(this, arguments);\n  }\n\n  function _put() {\n    _put = _asyncToGenerator(function* (block, options = {}) {\n      const release = options.pin ? yield repo.gcLock.readLock() : null;\n\n      try {\n        const cidVersion = options.version != null ? options.version : 0;\n        const codecName = options.format || (cidVersion === 0 ? 'dag-pb' : 'raw');\n        const hasher = yield hashers.getHasher(options.mhtype || 'sha2-256');\n        const hash = yield hasher.digest(block);\n        const codec = yield codecs.getCodec(codecName);\n        const cid = CID.create(cidVersion, codec.code, hash);\n        yield repo.blocks.put(cid, block, {\n          signal: options.signal\n        });\n\n        if (options.preload !== false) {\n          preload(cid);\n        }\n\n        if (options.pin === true) {\n          yield repo.pins.pinRecursively(cid, {\n            signal: options.signal\n          });\n        }\n\n        return cid;\n      } finally {\n        if (release) {\n          release();\n        }\n      }\n    });\n    return _put.apply(this, arguments);\n  }\n\n  return withTimeoutOption(put);\n};","map":null,"metadata":{},"sourceType":"script"}