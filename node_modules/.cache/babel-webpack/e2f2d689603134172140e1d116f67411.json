{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst mergeOptions = require('merge-options').bind({\n  ignoreUndefined: true\n});\n\nconst toMfsPath = require('./utils/to-mfs-path');\n\nconst {\n  exporter\n} = require('ipfs-unixfs-exporter');\n\nconst log = require('debug')('ipfs:mfs:stat');\n\nconst errCode = require('err-code');\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n\nconst dagPb = require('@ipld/dag-pb');\n/**\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {object} DefaultOptions\n * @property {boolean} withLocal\n * @property {AbortSignal} [signal]\n * @property {number} [timeout]\n */\n\n/**\n * @type {DefaultOptions}\n */\n\n\nconst defaultOptions = {\n  withLocal: false\n};\n/**\n * @typedef {import('ipfs-core-types/src/files').StatResult} StatResult\n */\n\n/**\n * @param {MfsContext} context\n */\n\nmodule.exports = context => {\n  /**\n   * @type {import('ipfs-core-types/src/files').API[\"stat\"]}\n   */\n  function mfsStat(_x) {\n    return _mfsStat.apply(this, arguments);\n  }\n\n  function _mfsStat() {\n    _mfsStat = _asyncToGenerator(function* (path, options = {}) {\n      /** @type {DefaultOptions} */\n      options = mergeOptions(defaultOptions, options);\n      log(`Fetching stats for ${path}`);\n      const {\n        type,\n        cid,\n        mfsPath\n      } = yield toMfsPath(context, path, options);\n      const exportPath = type === 'ipfs' && cid ? cid : mfsPath;\n      let file;\n\n      try {\n        file = yield exporter(exportPath, context.repo.blocks);\n      } catch (err) {\n        if (err.code === 'ERR_NOT_FOUND') {\n          throw errCode(new Error(`${path} does not exist`), 'ERR_NOT_FOUND');\n        }\n\n        throw err;\n      }\n\n      if (!statters[file.type]) {\n        throw new Error(`Cannot stat codec ${file.cid.code}`);\n      }\n\n      return statters[file.type](file);\n    });\n    return _mfsStat.apply(this, arguments);\n  }\n\n  return withTimeoutOption(mfsStat);\n};\n/** @type {Record<string, (file:any) => StatResult>} */\n\n\nconst statters = {\n  /**\n   * @param {import('ipfs-unixfs-exporter').RawNode} file\n   */\n  raw: file => {\n    return {\n      cid: file.cid,\n      size: file.node.length,\n      cumulativeSize: file.node.length,\n      blocks: 0,\n      type: 'file',\n      // for go compatibility\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false\n    };\n  },\n\n  /**\n   * @param {import('ipfs-unixfs-exporter').UnixFSFile} file\n   */\n  file: file => {\n    /** @type {StatResult} */\n    const stat = {\n      cid: file.cid,\n      type: 'file',\n      size: file.unixfs.fileSize(),\n      cumulativeSize: dagPb.encode(file.node).length + (file.node.Links || []).reduce((acc, curr) => acc + (curr.Tsize || 0), 0),\n      blocks: file.unixfs.blockSizes.length,\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false,\n      mode: file.unixfs.mode\n    };\n\n    if (file.unixfs.mtime) {\n      stat.mtime = file.unixfs.mtime;\n    }\n\n    return stat;\n  },\n\n  /**\n   * @param {import('ipfs-unixfs-exporter').UnixFSDirectory} file\n   */\n  directory: file => {\n    /** @type {StatResult} */\n    const stat = {\n      cid: file.cid,\n      type: 'directory',\n      size: 0,\n      cumulativeSize: dagPb.encode(file.node).length + (file.node.Links || []).reduce((acc, curr) => acc + (curr.Tsize || 0), 0),\n      blocks: file.node.Links.length,\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false,\n      mode: file.unixfs.mode\n    };\n\n    if (file.unixfs.mtime) {\n      stat.mtime = file.unixfs.mtime;\n    }\n\n    return stat;\n  },\n\n  /**\n   * @param {import('ipfs-unixfs-exporter').ObjectNode} file\n   */\n  object: file => {\n    /** @type {StatResult} */\n    return {\n      cid: file.cid,\n      size: file.node.length,\n      cumulativeSize: file.node.length,\n      type: 'file',\n      // for go compatibility\n      blocks: 0,\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false\n    };\n  },\n\n  /**\n   * @param {import('ipfs-unixfs-exporter').IdentityNode} file\n   */\n  identity: file => {\n    /** @type {StatResult} */\n    return {\n      cid: file.cid,\n      size: file.node.length,\n      cumulativeSize: file.node.length,\n      blocks: 0,\n      type: 'file',\n      // for go compatibility\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"script"}