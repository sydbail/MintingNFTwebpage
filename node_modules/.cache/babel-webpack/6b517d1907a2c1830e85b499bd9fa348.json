{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst multipartRequest = require('../../lib/multipart-request');\n\nconst configure = require('../../lib/configure');\n\nconst toUrlSearchParams = require('../../lib/to-url-search-params');\n\nconst abortSignal = require('../../lib/abort-signal');\n\nconst {\n  AbortController\n} = require('native-abort-controller');\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object/patch').API<HTTPClientExtraOptions>} ObjectPatchAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {ObjectPatchAPI[\"setData\"]}\n   */\n  function setData(_x, _x2) {\n    return _setData.apply(this, arguments);\n  }\n\n  function _setData() {\n    _setData = _asyncToGenerator(function* (cid, data, options = {}) {\n      // allow aborting requests on body errors\n      const controller = new AbortController();\n      const signal = abortSignal(controller.signal, options.signal);\n      const res = yield api.post('object/patch/set-data', {\n        timeout: options.timeout,\n        signal,\n        searchParams: toUrlSearchParams({\n          arg: [`${cid}`],\n          ...options\n        }),\n        ...(yield multipartRequest(data, controller, options.headers))\n      });\n      const {\n        Hash\n      } = yield res.json();\n      return CID.parse(Hash);\n    });\n    return _setData.apply(this, arguments);\n  }\n\n  return setData;\n});","map":null,"metadata":{},"sourceType":"script"}