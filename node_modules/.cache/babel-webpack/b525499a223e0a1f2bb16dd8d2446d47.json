{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nvar _awaitAsyncGenerator = require(\"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\").default;\n\nvar _wrapAsyncGenerator = require(\"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\").default;\n\nconst errcode = require('err-code');\n\nconst pTimeout = require('p-timeout');\n\nconst c = require('../constants');\n\nconst LimitedPeerList = require('../peer-list/limited-peer-list');\n\nconst Message = require('../message');\n\nconst Query = require('../query');\n\nconst utils = require('../utils');\n/**\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('multiaddr').Multiaddr} Multiaddr\n */\n\n/**\n * @param {import('../')} dht\n */\n\n\nmodule.exports = dht => {\n  /**\n   * Check for providers from a single node.\n   *\n   * @param {PeerId} peer\n   * @param {CID} key\n   *\n   * @private\n   */\n  const findProvidersSingle = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(function* (peer, key) {\n      // eslint-disable-line require-await\n      const msg = new Message(Message.TYPES.GET_PROVIDERS, key.bytes, 0);\n      return dht.network.sendRequest(peer, msg);\n    });\n\n    return function findProvidersSingle(_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return {\n    /**\n     * Announce to the network that we can provide the value for a given key\n     *\n     * @param {CID} key\n     */\n    provide(key) {\n      return _asyncToGenerator(function* () {\n        dht._log(`provide: ${key}`);\n        /** @type {Error[]} */\n\n\n        const errors = []; // Add peer as provider\n\n        yield dht.providers.addProvider(key, dht.peerId);\n        const multiaddrs = dht.libp2p ? dht.libp2p.multiaddrs : [];\n        const msg = new Message(Message.TYPES.ADD_PROVIDER, key.bytes, 0);\n        msg.providerPeers = [{\n          id: dht.peerId,\n          multiaddrs\n        }];\n        /**\n         * @param {PeerId} peer\n         */\n\n        function mapPeer(_x3) {\n          return _mapPeer.apply(this, arguments);\n        } // Notify closest peers\n\n\n        function _mapPeer() {\n          _mapPeer = _asyncToGenerator(function* (peer) {\n            dht._log(`putProvider ${key} to ${peer.toB58String()}`);\n\n            try {\n              yield dht.network.sendMessage(peer, msg);\n            } catch (err) {\n              errors.push(err);\n            }\n          });\n          return _mapPeer.apply(this, arguments);\n        }\n\n        yield utils.mapParallel(dht.getClosestPeers(key.bytes), mapPeer);\n\n        if (errors.length) {\n          // TODO:\n          // This should be infrequent. This means a peer we previously connected\n          // to failed to exchange the provide message. If getClosestPeers was an\n          // iterator, we could continue to pull until we announce to kBucketSize peers.\n          throw errcode(new Error(`Failed to provide to ${errors.length} of ${dht.kBucketSize} peers`), 'ERR_SOME_PROVIDES_FAILED', {\n            errors\n          });\n        }\n      })();\n    },\n\n    /**\n     * Search the dht for up to `K` providers of the given CID.\n     *\n     * @param {CID} key\n     * @param {Object} [options] - findProviders options\n     * @param {number} [options.timeout=60000] - how long the query should maximally run, in milliseconds\n     * @param {number} [options.maxNumProviders=5] - maximum number of providers to find\n     * @returns {AsyncIterable<{ id: PeerId, multiaddrs: Multiaddr[] }>}\n     */\n    findProviders(key, options = {\n      timeout: 60000,\n      maxNumProviders: 5\n    }) {\n      return _wrapAsyncGenerator(function* () {\n        const providerTimeout = options.timeout || c.minute;\n        const n = options.maxNumProviders || c.K;\n\n        dht._log(`findProviders ${key}`);\n\n        const out = new LimitedPeerList(n);\n        const provs = yield _awaitAsyncGenerator(dht.providers.getProviders(key));\n        provs.forEach(id => {\n          /** @type {{ id: PeerId, addresses: { multiaddr: Multiaddr }[] }} */\n          const peerData = dht.peerStore.get(id);\n\n          if (peerData) {\n            out.push({\n              id: peerData.id,\n              multiaddrs: peerData.addresses.map(address => address.multiaddr)\n            });\n          } else {\n            out.push({\n              id,\n              multiaddrs: []\n            });\n          }\n        }); // All done\n\n        if (out.length >= n) {\n          // yield values\n          for (const pData of out.toArray()) {\n            yield pData;\n          }\n\n          return;\n        } // need more, query the network\n\n        /** @type {LimitedPeerList[]} */\n\n\n        const paths = [];\n        /**\n         *\n         * @param {number} pathIndex\n         * @param {number} numPaths\n         */\n\n        function makePath(pathIndex, numPaths) {\n          // This function body runs once per disjoint path\n          const pathSize = utils.pathSize(n - out.length, numPaths);\n          const pathProviders = new LimitedPeerList(pathSize);\n          paths.push(pathProviders);\n          /**\n           * The query function to use on this particular disjoint path\n           *\n           * @param {PeerId} peer\n           */\n\n          function queryDisjointPath(_x4) {\n            return _queryDisjointPath.apply(this, arguments);\n          }\n\n          function _queryDisjointPath() {\n            _queryDisjointPath = _asyncToGenerator(function* (peer) {\n              const msg = yield findProvidersSingle(peer, key);\n              const provs = msg.providerPeers;\n\n              dht._log(`Found ${provs.length} provider entries for ${key}`);\n\n              provs.forEach(prov => {\n                pathProviders.push({ ...prov\n                });\n              }); // hooray we have all that we want\n\n              if (pathProviders.length >= pathSize) {\n                return {\n                  pathComplete: true\n                };\n              } // it looks like we want some more\n\n\n              return {\n                closerPeers: msg.closerPeers\n              };\n            });\n            return _queryDisjointPath.apply(this, arguments);\n          }\n\n          return queryDisjointPath;\n        }\n\n        const query = new Query(dht, key.bytes, makePath);\n        const peers = dht.routingTable.closestPeers(key.bytes, dht.kBucketSize);\n\n        try {\n          yield _awaitAsyncGenerator(pTimeout(query.run(peers), providerTimeout));\n        } catch (err) {\n          if (err.name !== pTimeout.TimeoutError.name) {\n            throw err;\n          }\n        } finally {\n          query.stop();\n        } // combine peers from each path\n\n\n        paths.forEach(path => {\n          path.toArray().forEach(peer => {\n            out.push(peer);\n          });\n        });\n\n        for (const pData of out.toArray()) {\n          yield pData;\n        }\n      })();\n    }\n\n  };\n};","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Demo/node_modules/libp2p-kad-dht/src/content-routing/index.js"],"names":["errcode","require","pTimeout","c","LimitedPeerList","Message","Query","utils","module","exports","dht","findProvidersSingle","peer","key","msg","TYPES","GET_PROVIDERS","bytes","network","sendRequest","provide","_log","errors","providers","addProvider","peerId","multiaddrs","libp2p","ADD_PROVIDER","providerPeers","id","mapPeer","toB58String","sendMessage","err","push","mapParallel","getClosestPeers","length","Error","kBucketSize","findProviders","options","timeout","maxNumProviders","providerTimeout","minute","n","K","out","provs","getProviders","forEach","peerData","peerStore","get","addresses","map","address","multiaddr","pData","toArray","paths","makePath","pathIndex","numPaths","pathSize","pathProviders","queryDisjointPath","prov","pathComplete","closerPeers","query","peers","routingTable","closestPeers","run","name","TimeoutError","stop","path"],"mappings":"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","sourcesContent":["'use strict'\n\nconst errcode = require('err-code')\nconst pTimeout = require('p-timeout')\n\nconst c = require('../constants')\nconst LimitedPeerList = require('../peer-list/limited-peer-list')\nconst Message = require('../message')\nconst Query = require('../query')\nconst utils = require('../utils')\n\n/**\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('multiaddr').Multiaddr} Multiaddr\n */\n\n/**\n * @param {import('../')} dht\n */\nmodule.exports = (dht) => {\n  /**\n   * Check for providers from a single node.\n   *\n   * @param {PeerId} peer\n   * @param {CID} key\n   *\n   * @private\n   */\n  const findProvidersSingle = async (peer, key) => { // eslint-disable-line require-await\n    const msg = new Message(Message.TYPES.GET_PROVIDERS, key.bytes, 0)\n    return dht.network.sendRequest(peer, msg)\n  }\n\n  return {\n    /**\n     * Announce to the network that we can provide the value for a given key\n     *\n     * @param {CID} key\n     */\n    async provide (key) {\n      dht._log(`provide: ${key}`)\n\n      /** @type {Error[]} */\n      const errors = []\n\n      // Add peer as provider\n      await dht.providers.addProvider(key, dht.peerId)\n\n      const multiaddrs = dht.libp2p ? dht.libp2p.multiaddrs : []\n      const msg = new Message(Message.TYPES.ADD_PROVIDER, key.bytes, 0)\n      msg.providerPeers = [{\n        id: dht.peerId,\n        multiaddrs\n      }]\n\n      /**\n       * @param {PeerId} peer\n       */\n      async function mapPeer (peer) {\n        dht._log(`putProvider ${key} to ${peer.toB58String()}`)\n        try {\n          await dht.network.sendMessage(peer, msg)\n        } catch (err) {\n          errors.push(err)\n        }\n      }\n\n      // Notify closest peers\n      await utils.mapParallel(dht.getClosestPeers(key.bytes), mapPeer)\n\n      if (errors.length) {\n        // TODO:\n        // This should be infrequent. This means a peer we previously connected\n        // to failed to exchange the provide message. If getClosestPeers was an\n        // iterator, we could continue to pull until we announce to kBucketSize peers.\n        throw errcode(new Error(`Failed to provide to ${errors.length} of ${dht.kBucketSize} peers`), 'ERR_SOME_PROVIDES_FAILED', { errors })\n      }\n    },\n\n    /**\n     * Search the dht for up to `K` providers of the given CID.\n     *\n     * @param {CID} key\n     * @param {Object} [options] - findProviders options\n     * @param {number} [options.timeout=60000] - how long the query should maximally run, in milliseconds\n     * @param {number} [options.maxNumProviders=5] - maximum number of providers to find\n     * @returns {AsyncIterable<{ id: PeerId, multiaddrs: Multiaddr[] }>}\n     */\n    async * findProviders (key, options = { timeout: 60000, maxNumProviders: 5 }) {\n      const providerTimeout = options.timeout || c.minute\n      const n = options.maxNumProviders || c.K\n\n      dht._log(`findProviders ${key}`)\n\n      const out = new LimitedPeerList(n)\n      const provs = await dht.providers.getProviders(key)\n\n      provs\n        .forEach(id => {\n          /** @type {{ id: PeerId, addresses: { multiaddr: Multiaddr }[] }} */\n          const peerData = dht.peerStore.get(id)\n\n          if (peerData) {\n            out.push({\n              id: peerData.id,\n              multiaddrs: peerData.addresses\n                .map((address) => address.multiaddr)\n            })\n          } else {\n            out.push({\n              id,\n              multiaddrs: []\n            })\n          }\n        })\n\n      // All done\n      if (out.length >= n) {\n        // yield values\n        for (const pData of out.toArray()) {\n          yield pData\n        }\n        return\n      }\n\n      // need more, query the network\n      /** @type {LimitedPeerList[]} */\n      const paths = []\n\n      /**\n       *\n       * @param {number} pathIndex\n       * @param {number} numPaths\n       */\n      function makePath (pathIndex, numPaths) {\n        // This function body runs once per disjoint path\n        const pathSize = utils.pathSize(n - out.length, numPaths)\n        const pathProviders = new LimitedPeerList(pathSize)\n        paths.push(pathProviders)\n\n        /**\n         * The query function to use on this particular disjoint path\n         *\n         * @param {PeerId} peer\n         */\n        async function queryDisjointPath (peer) {\n          const msg = await findProvidersSingle(peer, key)\n          const provs = msg.providerPeers\n          dht._log(`Found ${provs.length} provider entries for ${key}`)\n\n          provs.forEach((prov) => {\n            pathProviders.push({\n              ...prov\n            })\n          })\n\n          // hooray we have all that we want\n          if (pathProviders.length >= pathSize) {\n            return { pathComplete: true }\n          }\n\n          // it looks like we want some more\n          return { closerPeers: msg.closerPeers }\n        }\n\n        return queryDisjointPath\n      }\n\n      const query = new Query(dht, key.bytes, makePath)\n      const peers = dht.routingTable.closestPeers(key.bytes, dht.kBucketSize)\n\n      try {\n        await pTimeout(\n          query.run(peers),\n          providerTimeout\n        )\n      } catch (err) {\n        if (err.name !== pTimeout.TimeoutError.name) {\n          throw err\n        }\n      } finally {\n        query.stop()\n      }\n\n      // combine peers from each path\n      paths.forEach((path) => {\n        path.toArray().forEach((peer) => {\n          out.push(peer)\n        })\n      })\n\n      for (const pData of out.toArray()) {\n        yield pData\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}