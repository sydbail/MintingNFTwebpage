{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dag').API<HTTPClientExtraOptions>} DAGAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {DAGAPI[\"resolve\"]}\n   */\n  const resolve = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(function* (ipfsPath, options = {}) {\n      const res = yield api.post('dag/resolve', {\n        timeout: options.timeout,\n        signal: options.signal,\n        searchParams: toUrlSearchParams({\n          arg: `${ipfsPath}${options.path ? `/${options.path}`.replace(/\\/[/]+/g, '/') : ''}`,\n          ...options\n        }),\n        headers: options.headers\n      });\n      const data = yield res.json();\n      return {\n        cid: CID.parse(data.Cid['/']),\n        remainderPath: data.RemPath\n      };\n    });\n\n    return function resolve(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return resolve;\n});","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Demo/node_modules/ipfs-http-client/src/dag/resolve.js"],"names":["CID","require","configure","toUrlSearchParams","module","exports","api","resolve","ipfsPath","options","res","post","timeout","signal","searchParams","arg","path","replace","headers","data","json","cid","parse","Cid","remainderPath","RemPath"],"mappings":"AAAA;;;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAUC,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,6BAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AAEAG,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAACI,GAAG,IAAI;AAChC;AACF;AACA;AACE,QAAMC,OAAO;AAAA,iCAAG,WAAOC,QAAP,EAAiBC,OAAO,GAAG,EAA3B,EAAkC;AAChD,YAAMC,GAAG,SAASJ,GAAG,CAACK,IAAJ,CAAS,aAAT,EAAwB;AACxCC,QAAAA,OAAO,EAAEH,OAAO,CAACG,OADuB;AAExCC,QAAAA,MAAM,EAAEJ,OAAO,CAACI,MAFwB;AAGxCC,QAAAA,YAAY,EAAEX,iBAAiB,CAAC;AAC9BY,UAAAA,GAAG,EAAG,GAAEP,QAAS,GAAEC,OAAO,CAACO,IAAR,GAAgB,IAAGP,OAAO,CAACO,IAAK,EAAjB,CAAmBC,OAAnB,CAA2B,SAA3B,EAAsC,GAAtC,CAAf,GAA4D,EAAG,EADpD;AAE9B,aAAGR;AAF2B,SAAD,CAHS;AAOxCS,QAAAA,OAAO,EAAET,OAAO,CAACS;AAPuB,OAAxB,CAAlB;AAUA,YAAMC,IAAI,SAAST,GAAG,CAACU,IAAJ,EAAnB;AAEA,aAAO;AAAEC,QAAAA,GAAG,EAAErB,GAAG,CAACsB,KAAJ,CAAUH,IAAI,CAACI,GAAL,CAAS,GAAT,CAAV,CAAP;AAAiCC,QAAAA,aAAa,EAAEL,IAAI,CAACM;AAArD,OAAP;AACD,KAdY;;AAAA,oBAAPlB,OAAO;AAAA;AAAA;AAAA,KAAb;;AAgBA,SAAOA,OAAP;AACD,CArByB,CAA1B","sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dag').API<HTTPClientExtraOptions>} DAGAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {DAGAPI[\"resolve\"]}\n   */\n  const resolve = async (ipfsPath, options = {}) => {\n    const res = await api.post('dag/resolve', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${ipfsPath}${options.path ? `/${options.path}`.replace(/\\/[/]+/g, '/') : ''}`,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    const data = await res.json()\n\n    return { cid: CID.parse(data.Cid['/']), remainderPath: data.RemPath }\n  }\n\n  return resolve\n})\n"]},"metadata":{},"sourceType":"script"}