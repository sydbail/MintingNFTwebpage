{"ast":null,"code":"'use strict';\n\nvar _awaitAsyncGenerator = require(\"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\").default;\n\nvar _wrapAsyncGenerator = require(\"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst toCamelWithMetadata = require('../lib/object-to-camel-with-metadata');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {FilesAPI[\"ls\"]}\n   */\n  function ls(_x) {\n    return _ls.apply(this, arguments);\n  }\n\n  function _ls() {\n    _ls = _wrapAsyncGenerator(function* (path, options = {}) {\n      if (!path) {\n        throw new Error('ipfs.files.ls requires a path');\n      }\n\n      const res = yield _awaitAsyncGenerator(api.post('files/ls', {\n        timeout: options.timeout,\n        signal: options.signal,\n        searchParams: toUrlSearchParams({\n          arg: path instanceof CID ? `/ipfs/${path}` : path,\n          // default long to true, diverges from go-ipfs where its false by default\n          long: true,\n          ...options,\n          stream: true\n        }),\n        headers: options.headers\n      }));\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n\n      var _iteratorError;\n\n      try {\n        for (var _iterator = _asyncIterator(res.ndjson()), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n          const result = _value;\n\n          // go-ipfs does not yet support the \"stream\" option\n          if ('Entries' in result) {\n            for (const entry of result.Entries || []) {\n              yield toCoreInterface(toCamelWithMetadata(entry));\n            }\n          } else {\n            yield toCoreInterface(toCamelWithMetadata(result));\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            yield _awaitAsyncGenerator(_iterator.return());\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    });\n    return _ls.apply(this, arguments);\n  }\n\n  return ls;\n});\n/**\n * @param {*} entry\n */\n\nfunction toCoreInterface(entry) {\n  if (entry.hash) {\n    entry.cid = CID.parse(entry.hash);\n  }\n\n  delete entry.hash;\n  entry.type = entry.type === 1 ? 'directory' : 'file';\n  return entry;\n}","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Demo/node_modules/ipfs-http-client/src/files/ls.js"],"names":["CID","require","toCamelWithMetadata","configure","toUrlSearchParams","module","exports","api","ls","path","options","Error","res","post","timeout","signal","searchParams","arg","long","stream","headers","ndjson","result","entry","Entries","toCoreInterface","hash","cid","parse","type"],"mappings":"AAAA;;;;;;;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAUC,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAMC,mBAAmB,GAAGD,OAAO,CAAC,sCAAD,CAAnC;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,6BAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AACAI,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAACI,GAAG,IAAI;AAChC;AACF;AACA;AAHkC,WAIfC,EAJe;AAAA;AAAA;;AAAA;AAAA,8BAIhC,WAAqBC,IAArB,EAA2BC,OAAO,GAAG,EAArC,EAAyC;AACvC,UAAI,CAACD,IAAL,EAAW;AACT,cAAM,IAAIE,KAAJ,CAAU,+BAAV,CAAN;AACD;;AAED,YAAMC,GAAG,8BAASL,GAAG,CAACM,IAAJ,CAAS,UAAT,EAAqB;AACrCC,QAAAA,OAAO,EAAEJ,OAAO,CAACI,OADoB;AAErCC,QAAAA,MAAM,EAAEL,OAAO,CAACK,MAFqB;AAGrCC,QAAAA,YAAY,EAAEZ,iBAAiB,CAAC;AAC9Ba,UAAAA,GAAG,EAAER,IAAI,YAAYT,GAAhB,GAAuB,SAAQS,IAAK,EAApC,GAAwCA,IADf;AAE9B;AACAS,UAAAA,IAAI,EAAE,IAHwB;AAI9B,aAAGR,OAJ2B;AAK9BS,UAAAA,MAAM,EAAE;AALsB,SAAD,CAHM;AAUrCC,QAAAA,OAAO,EAAEV,OAAO,CAACU;AAVoB,OAArB,CAAT,CAAT;AALuC;AAAA;;AAAA;;AAAA;AAkBvC,4CAA2BR,GAAG,CAACS,MAAJ,EAA3B,gOAAyC;AAAA,gBAAxBC,MAAwB;;AACvC;AACA,cAAI,aAAaA,MAAjB,EAAyB;AACvB,iBAAK,MAAMC,KAAX,IAAoBD,MAAM,CAACE,OAAP,IAAkB,EAAtC,EAA0C;AACxC,oBAAMC,eAAe,CAACvB,mBAAmB,CAACqB,KAAD,CAApB,CAArB;AACD;AACF,WAJD,MAIO;AACL,kBAAME,eAAe,CAACvB,mBAAmB,CAACoB,MAAD,CAApB,CAArB;AACD;AACF;AA3BsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA4BxC,KAhC+B;AAAA;AAAA;;AAiChC,SAAOd,EAAP;AACD,CAlCyB,CAA1B;AAoCA;AACA;AACA;;AACA,SAASiB,eAAT,CAA0BF,KAA1B,EAAiC;AAC/B,MAAIA,KAAK,CAACG,IAAV,EAAgB;AACdH,IAAAA,KAAK,CAACI,GAAN,GAAY3B,GAAG,CAAC4B,KAAJ,CAAUL,KAAK,CAACG,IAAhB,CAAZ;AACD;;AAED,SAAOH,KAAK,CAACG,IAAb;AAEAH,EAAAA,KAAK,CAACM,IAAN,GAAaN,KAAK,CAACM,IAAN,KAAe,CAAf,GAAmB,WAAnB,GAAiC,MAA9C;AAEA,SAAON,KAAP;AACD","sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst toCamelWithMetadata = require('../lib/object-to-camel-with-metadata')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\nmodule.exports = configure(api => {\n  /**\n   * @type {FilesAPI[\"ls\"]}\n   */\n  async function * ls (path, options = {}) {\n    if (!path) {\n      throw new Error('ipfs.files.ls requires a path')\n    }\n\n    const res = await api.post('files/ls', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path instanceof CID ? `/ipfs/${path}` : path,\n        // default long to true, diverges from go-ipfs where its false by default\n        long: true,\n        ...options,\n        stream: true\n      }),\n      headers: options.headers\n    })\n\n    for await (const result of res.ndjson()) {\n      // go-ipfs does not yet support the \"stream\" option\n      if ('Entries' in result) {\n        for (const entry of result.Entries || []) {\n          yield toCoreInterface(toCamelWithMetadata(entry))\n        }\n      } else {\n        yield toCoreInterface(toCamelWithMetadata(result))\n      }\n    }\n  }\n  return ls\n})\n\n/**\n * @param {*} entry\n */\nfunction toCoreInterface (entry) {\n  if (entry.hash) {\n    entry.cid = CID.parse(entry.hash)\n  }\n\n  delete entry.hash\n\n  entry.type = entry.type === 1 ? 'directory' : 'file'\n\n  return entry\n}\n"]},"metadata":{},"sourceType":"script"}