{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nconst log = require('debug')('ipfs:mfs:utils:update-tree');\n\nconst addLink = require('./add-link');\n\nconst {\n  decode\n} = require('@ipld/dag-pb');\n\nconst defaultOptions = {\n  shardSplitThreshold: 1000\n};\n/**\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('multiformats/cid').CIDVersion} CIDVersion\n * @typedef {import('../').MfsContext} MfsContext\n * @typedef {import('./to-trail').MfsTrail} MfsTrail\n */\n\n/**\n * Loop backwards through the trail, replacing links of all components to update CIDs\n *\n * @param {MfsContext} context\n * @param {MfsTrail[]} trail\n * @param {object} options\n * @param {number} options.shardSplitThreshold\n * @param {string} options.hashAlg\n * @param {CIDVersion} options.cidVersion\n * @param {boolean} options.flush\n */\n\nconst updateTree = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (context, trail, options) {\n    options = Object.assign({}, defaultOptions, options);\n    log('Trail', trail);\n    trail = trail.slice().reverse();\n    let index = 0;\n    let child;\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n\n    var _iteratorError;\n\n    try {\n      for (var _iterator = _asyncIterator(context.repo.blocks.getMany(trail.map(node => node.cid))), _step, _value; _step = yield _iterator.next(), _iteratorNormalCompletion = _step.done, _value = yield _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n        const block = _value;\n        const node = decode(block);\n        const cid = trail[index].cid;\n        const name = trail[index].name;\n        index++;\n\n        if (!child) {\n          child = {\n            cid,\n            name,\n            size: block.length\n          };\n          continue;\n        }\n        /** @type {{ cid: CID, size: number }} */\n\n\n        const result = yield addLink(context, {\n          parent: node,\n          name: child.name,\n          cid: child.cid,\n          // TODO vmx 2021-04-05: check what to do with the size\n          size: child.size,\n          flush: options.flush,\n          shardSplitThreshold: options.shardSplitThreshold,\n          hashAlg: options.hashAlg,\n          cidVersion: options.cidVersion\n        }); // new child for next loop\n\n        child = {\n          cid: result.cid,\n          name,\n          // TODO vmx 2021-04-05: check what to do with the size\n          size: result.size\n        };\n      } // @ts-ignore - child is possibly undefined\n\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          yield _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    const {\n      cid\n    } = child;\n    log(`Final CID ${cid}`);\n    return cid;\n  });\n\n  return function updateTree(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nmodule.exports = updateTree;","map":{"version":3,"sources":["/Users/sydneybailey/Internship/contract-testing/node_modules/ipfs-core/src/components/files/utils/update-tree.js"],"names":["log","require","addLink","decode","defaultOptions","shardSplitThreshold","updateTree","context","trail","options","Object","assign","slice","reverse","index","child","repo","blocks","getMany","map","node","cid","block","name","size","length","result","parent","flush","hashAlg","cidVersion","module","exports"],"mappings":"AAAA;;;;;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,OAAD,CAAP,CAAiB,4BAAjB,CAAZ;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,YAAD,CAAvB;;AACA,MAAM;AACJE,EAAAA;AADI,IAEFF,OAAO,CAAC,cAAD,CAFX;;AAIA,MAAMG,cAAc,GAAG;AACrBC,EAAAA,mBAAmB,EAAE;AADA,CAAvB;AAIA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,UAAU;AAAA,+BAAG,WAAOC,OAAP,EAAgBC,KAAhB,EAAuBC,OAAvB,EAAmC;AACpDA,IAAAA,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBP,cAAlB,EAAkCK,OAAlC,CAAV;AAEAT,IAAAA,GAAG,CAAC,OAAD,EAAUQ,KAAV,CAAH;AACAA,IAAAA,KAAK,GAAGA,KAAK,CAACI,KAAN,GAAcC,OAAd,EAAR;AAEA,QAAIC,KAAK,GAAG,CAAZ;AACA,QAAIC,KAAJ;AAPoD;AAAA;;AAAA;;AAAA;AASpD,0CAA0BR,OAAO,CAACS,IAAR,CAAaC,MAAb,CAAoBC,OAApB,CAA4BV,KAAK,CAACW,GAAN,CAAUC,IAAI,IAAIA,IAAI,CAACC,GAAvB,CAA5B,CAA1B,oLAAoF;AAAA,cAAnEC,KAAmE;AAClF,cAAMF,IAAI,GAAGjB,MAAM,CAACmB,KAAD,CAAnB;AACA,cAAMD,GAAG,GAAGb,KAAK,CAACM,KAAD,CAAL,CAAaO,GAAzB;AACA,cAAME,IAAI,GAAGf,KAAK,CAACM,KAAD,CAAL,CAAaS,IAA1B;AACAT,QAAAA,KAAK;;AAEL,YAAI,CAACC,KAAL,EAAY;AACVA,UAAAA,KAAK,GAAG;AACNM,YAAAA,GADM;AAENE,YAAAA,IAFM;AAGNC,YAAAA,IAAI,EAAEF,KAAK,CAACG;AAHN,WAAR;AAMA;AACD;AAED;;;AACA,cAAMC,MAAM,SAASxB,OAAO,CAACK,OAAD,EAAU;AACpCoB,UAAAA,MAAM,EAAEP,IAD4B;AAEpCG,UAAAA,IAAI,EAAER,KAAK,CAACQ,IAFwB;AAGpCF,UAAAA,GAAG,EAAEN,KAAK,CAACM,GAHyB;AAIpC;AACAG,UAAAA,IAAI,EAAET,KAAK,CAACS,IALwB;AAMpCI,UAAAA,KAAK,EAAEnB,OAAO,CAACmB,KANqB;AAOpCvB,UAAAA,mBAAmB,EAAEI,OAAO,CAACJ,mBAPO;AAQpCwB,UAAAA,OAAO,EAAEpB,OAAO,CAACoB,OARmB;AASpCC,UAAAA,UAAU,EAAErB,OAAO,CAACqB;AATgB,SAAV,CAA5B,CAjBkF,CA6BlF;;AACAf,QAAAA,KAAK,GAAG;AACNM,UAAAA,GAAG,EAAEK,MAAM,CAACL,GADN;AAENE,UAAAA,IAFM;AAGN;AACAC,UAAAA,IAAI,EAAEE,MAAM,CAACF;AAJP,SAAR;AAMD,OA7CmD,CA+CpD;;AA/CoD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgDpD,UAAM;AAAEH,MAAAA;AAAF,QAAUN,KAAhB;AACAf,IAAAA,GAAG,CAAE,aAAYqB,GAAI,EAAlB,CAAH;AAEA,WAAOA,GAAP;AACD,GApDe;;AAAA,kBAAVf,UAAU;AAAA;AAAA;AAAA,GAAhB;;AAsDAyB,MAAM,CAACC,OAAP,GAAiB1B,UAAjB","sourcesContent":["'use strict'\n\nconst log = require('debug')('ipfs:mfs:utils:update-tree')\nconst addLink = require('./add-link')\nconst {\n  decode\n} = require('@ipld/dag-pb')\n\nconst defaultOptions = {\n  shardSplitThreshold: 1000\n}\n\n/**\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('multiformats/cid').CIDVersion} CIDVersion\n * @typedef {import('../').MfsContext} MfsContext\n * @typedef {import('./to-trail').MfsTrail} MfsTrail\n */\n\n/**\n * Loop backwards through the trail, replacing links of all components to update CIDs\n *\n * @param {MfsContext} context\n * @param {MfsTrail[]} trail\n * @param {object} options\n * @param {number} options.shardSplitThreshold\n * @param {string} options.hashAlg\n * @param {CIDVersion} options.cidVersion\n * @param {boolean} options.flush\n */\nconst updateTree = async (context, trail, options) => {\n  options = Object.assign({}, defaultOptions, options)\n\n  log('Trail', trail)\n  trail = trail.slice().reverse()\n\n  let index = 0\n  let child\n\n  for await (const block of context.repo.blocks.getMany(trail.map(node => node.cid))) {\n    const node = decode(block)\n    const cid = trail[index].cid\n    const name = trail[index].name\n    index++\n\n    if (!child) {\n      child = {\n        cid,\n        name,\n        size: block.length\n      }\n\n      continue\n    }\n\n    /** @type {{ cid: CID, size: number }} */\n    const result = await addLink(context, {\n      parent: node,\n      name: child.name,\n      cid: child.cid,\n      // TODO vmx 2021-04-05: check what to do with the size\n      size: child.size,\n      flush: options.flush,\n      shardSplitThreshold: options.shardSplitThreshold,\n      hashAlg: options.hashAlg,\n      cidVersion: options.cidVersion\n    })\n\n    // new child for next loop\n    child = {\n      cid: result.cid,\n      name,\n      // TODO vmx 2021-04-05: check what to do with the size\n      size: result.size\n    }\n  }\n\n  // @ts-ignore - child is possibly undefined\n  const { cid } = child\n  log(`Final CID ${cid}`)\n\n  return cid\n}\n\nmodule.exports = updateTree\n"]},"metadata":{},"sourceType":"script"}