{"ast":null,"code":"import _asyncToGenerator from \"/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _asyncIterator from \"/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/@babel/runtime/helpers/esm/asyncIterator\";\nimport batch from 'it-batch';\n\nfunction balanced(source, reduce, options) {\n  return reduceToParents(source, reduce, options);\n}\n\nfunction reduceToParents(_x, _x2, _x3) {\n  return _reduceToParents.apply(this, arguments);\n}\n\nfunction _reduceToParents() {\n  _reduceToParents = _asyncToGenerator(function* (source, reduce, options) {\n    const roots = [];\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n\n    var _iteratorError;\n\n    try {\n      for (var _iterator = _asyncIterator(batch(source, options.maxChildrenPerNode)), _step, _value; _step = yield _iterator.next(), _iteratorNormalCompletion = _step.done, _value = yield _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n        const chunked = _value;\n        roots.push(yield reduce(chunked));\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          yield _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    if (roots.length > 1) {\n      return reduceToParents(roots, reduce, options);\n    }\n\n    return roots[0];\n  });\n  return _reduceToParents.apply(this, arguments);\n}\n\nexport default balanced;","map":{"version":3,"sources":["/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/ipfs-unixfs-importer/esm/src/dag-builder/file/balanced.js"],"names":["batch","balanced","source","reduce","options","reduceToParents","roots","maxChildrenPerNode","chunked","push","length"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,UAAlB;;AACA,SAASC,QAAT,CAAkBC,MAAlB,EAA0BC,MAA1B,EAAkCC,OAAlC,EAA2C;AACzC,SAAOC,eAAe,CAACH,MAAD,EAASC,MAAT,EAAiBC,OAAjB,CAAtB;AACD;;SACcC,e;;;;;uCAAf,WAA+BH,MAA/B,EAAuCC,MAAvC,EAA+CC,OAA/C,EAAwD;AACtD,UAAME,KAAK,GAAG,EAAd;AADsD;AAAA;;AAAA;;AAAA;AAEtD,0CAA4BN,KAAK,CAACE,MAAD,EAASE,OAAO,CAACG,kBAAjB,CAAjC,oLAAuE;AAAA,cAAtDC,OAAsD;AACrEF,QAAAA,KAAK,CAACG,IAAN,OAAiBN,MAAM,CAACK,OAAD,CAAvB;AACD;AAJqD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKtD,QAAIF,KAAK,CAACI,MAAN,GAAe,CAAnB,EAAsB;AACpB,aAAOL,eAAe,CAACC,KAAD,EAAQH,MAAR,EAAgBC,OAAhB,CAAtB;AACD;;AACD,WAAOE,KAAK,CAAC,CAAD,CAAZ;AACD,G;;;;AACD,eAAeL,QAAf","sourcesContent":["import batch from 'it-batch';\nfunction balanced(source, reduce, options) {\n  return reduceToParents(source, reduce, options);\n}\nasync function reduceToParents(source, reduce, options) {\n  const roots = [];\n  for await (const chunked of batch(source, options.maxChildrenPerNode)) {\n    roots.push(await reduce(chunked));\n  }\n  if (roots.length > 1) {\n    return reduceToParents(roots, reduce, options);\n  }\n  return roots[0];\n}\nexport default balanced;"]},"metadata":{},"sourceType":"module"}