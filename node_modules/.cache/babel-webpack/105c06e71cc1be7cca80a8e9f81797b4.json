{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.assert = exports.check = void 0;\n\nconst Stream_1 = require(\"../../stream/Stream\");\n\nconst Shrinkable_1 = require(\"../arbitrary/definition/Shrinkable\");\n\nconst GlobalParameters_1 = require(\"./configuration/GlobalParameters\");\n\nconst QualifiedParameters_1 = require(\"./configuration/QualifiedParameters\");\n\nconst DecorateProperty_1 = require(\"./DecorateProperty\");\n\nconst RunnerIterator_1 = require(\"./RunnerIterator\");\n\nconst SourceValuesIterator_1 = require(\"./SourceValuesIterator\");\n\nconst Tosser_1 = require(\"./Tosser\");\n\nconst PathWalker_1 = require(\"./utils/PathWalker\");\n\nconst RunDetailsFormatter_1 = require(\"./utils/RunDetailsFormatter\");\n\nfunction runIt(property, sourceValues, verbose, interruptedAsFailure) {\n  const runner = new RunnerIterator_1.RunnerIterator(sourceValues, verbose, interruptedAsFailure);\n\n  for (const v of runner) {\n    const out = property.run(v);\n    runner.handleResult(out);\n  }\n\n  return runner.runExecution;\n}\n\nfunction asyncRunIt(_x, _x2, _x3, _x4) {\n  return _asyncRunIt.apply(this, arguments);\n}\n\nfunction _asyncRunIt() {\n  _asyncRunIt = _asyncToGenerator(function* (property, sourceValues, verbose, interruptedAsFailure) {\n    const runner = new RunnerIterator_1.RunnerIterator(sourceValues, verbose, interruptedAsFailure);\n\n    for (const v of runner) {\n      const out = yield property.run(v);\n      runner.handleResult(out);\n    }\n\n    return runner.runExecution;\n  });\n  return _asyncRunIt.apply(this, arguments);\n}\n\nfunction runnerPathWalker(valueProducers, path) {\n  const pathPoints = path.split(':');\n  const pathStream = Stream_1.stream(valueProducers).drop(pathPoints.length > 0 ? +pathPoints[0] : 0).map(producer => producer());\n  const adaptedPath = ['0', ...pathPoints.slice(1)].join(':');\n  return Stream_1.stream(PathWalker_1.pathWalk(adaptedPath, pathStream)).map(v => () => v);\n}\n\nfunction buildInitialValues(valueProducers, qParams) {\n  const rawValues = qParams.path.length === 0 ? Stream_1.stream(valueProducers) : runnerPathWalker(valueProducers, qParams.path);\n  if (!qParams.endOnFailure) return rawValues;\n  return rawValues.map(shrinkableGen => {\n    return () => {\n      const s = shrinkableGen();\n      return new Shrinkable_1.Shrinkable(s.value_);\n    };\n  });\n}\n\nfunction check(rawProperty, params) {\n  if (rawProperty == null || rawProperty.generate == null) throw new Error('Invalid property encountered, please use a valid property');\n  if (rawProperty.run == null) throw new Error('Invalid property encountered, please use a valid property not an arbitrary');\n  const qParams = QualifiedParameters_1.QualifiedParameters.read(Object.assign(Object.assign({}, GlobalParameters_1.readConfigureGlobal()), params));\n  if (qParams.reporter !== null && qParams.asyncReporter !== null) throw new Error('Invalid parameters encountered, reporter and asyncReporter cannot be specified together');\n  if (qParams.asyncReporter !== null && !rawProperty.isAsync()) throw new Error('Invalid parameters encountered, only asyncProperty can be used when asyncReporter specified');\n  const property = DecorateProperty_1.decorateProperty(rawProperty, qParams);\n  const generator = Tosser_1.toss(property, qParams.seed, qParams.randomType, qParams.examples);\n  const maxInitialIterations = qParams.path.indexOf(':') === -1 ? qParams.numRuns : -1;\n  const maxSkips = qParams.numRuns * qParams.maxSkipsPerRun;\n  const initialValues = buildInitialValues(generator, qParams);\n  const sourceValues = new SourceValuesIterator_1.SourceValuesIterator(initialValues, maxInitialIterations, maxSkips);\n  return property.isAsync() ? asyncRunIt(property, sourceValues, qParams.verbose, qParams.markInterruptAsFailure).then(e => e.toRunDetails(qParams.seed, qParams.path, maxSkips, qParams)) : runIt(property, sourceValues, qParams.verbose, qParams.markInterruptAsFailure).toRunDetails(qParams.seed, qParams.path, maxSkips, qParams);\n}\n\nexports.check = check;\n\nfunction assert(property, params) {\n  const out = check(property, params);\n  if (property.isAsync()) return out.then(RunDetailsFormatter_1.asyncReportRunDetails);else RunDetailsFormatter_1.reportRunDetails(out);\n}\n\nexports.assert = assert;","map":null,"metadata":{},"sourceType":"script"}