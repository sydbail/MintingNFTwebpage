{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getImports = void 0;\n\nconst debug_1 = __importDefault(require(\"debug\"));\n\nconst path_1 = __importDefault(require(\"path\"));\n\nconst debug = debug_1.default(\"compile-common:profiler:getImports\");\n\nfunction getImports({\n  source: {\n    filePath,\n    body,\n    source\n  },\n  shouldIncludePath,\n  parseImports\n}) {\n  return __awaiter(this, void 0, void 0, function* () {\n    if (!shouldIncludePath(filePath) || !parseImports) return [];\n    debug(\"filePath: %s\", filePath);\n    const imports = yield parseImports(body);\n    debug(\"imports: %O\", imports); // Convert relative dependencies of modules back into module paths.\n    // note: the check for what's a relative dependency has been removed from\n    // here, that's now the responsibility of the individual resolverSource to check\n\n    return (yield Promise.all(imports.map(dependencyPath => source.resolveDependencyPath(filePath, dependencyPath)))).filter(sourcePath => sourcePath) //filter out Vyper failures\n    .map(sourcePath => sourcePath.replace(/\\//g, path_1.default.sep)); //make sure to use\n    //backslash on Windows (for same reason as in requiredSources.ts)\n  });\n}\n\nexports.getImports = getImports; //# sourceMappingURL=getImports.js.map","map":null,"metadata":{},"sourceType":"script"}