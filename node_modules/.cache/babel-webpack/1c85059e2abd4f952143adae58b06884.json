{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst {\n  isValidMultiaddr\n} = require('./utils');\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @param {Object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\n\n\nmodule.exports = ({\n  repo\n}) => {\n  /**\n   * @type {import('ipfs-core-types/src/bootstrap').API[\"rm\"]}\n   */\n  function rm(_x) {\n    return _rm.apply(this, arguments);\n  }\n\n  function _rm() {\n    _rm = _asyncToGenerator(function* (multiaddr, options = {}) {\n      if (!isValidMultiaddr(multiaddr)) {\n        throw new Error(`${multiaddr} is not a valid Multiaddr`);\n      }\n      /** @type {import('ipfs-core-types/src/config').Config} */\n      // @ts-ignore repo returns type unknown\n\n\n      const config = yield repo.config.getAll(options);\n      config.Bootstrap = (config.Bootstrap || []).filter(ma => ma.toString() !== multiaddr.toString());\n      yield repo.config.replace(config);\n      return {\n        Peers: [multiaddr]\n      };\n    });\n    return _rm.apply(this, arguments);\n  }\n\n  return withTimeoutOption(rm);\n};","map":null,"metadata":{},"sourceType":"script"}