{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/Dapp/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst errCode = require('err-code');\n\nconst AbortController = require('abort-controller').default;\n\nconst {\n  anySignal\n} = require('any-signal'); // @ts-ignore p-fifo does not export types\n\n\nconst FIFO = require('p-fifo');\n\nconst pAny = require('p-any');\n/**\n * @typedef {import('libp2p-interfaces/src/connection').Connection} Connection\n * @typedef {import('./')} Dialer\n * @typedef {import('multiaddr').Multiaddr} Multiaddr\n */\n\n/**\n * @typedef {Object} DialOptions\n * @property {AbortSignal} signal\n *\n * @typedef {Object} DialRequestOptions\n * @property {Multiaddr[]} addrs\n * @property {(m: Multiaddr, options: DialOptions) => Promise<Connection>} dialAction\n * @property {Dialer} dialer\n */\n\n\nclass DialRequest {\n  /**\n   * Manages running the `dialAction` on multiple provided `addrs` in parallel\n   * up to a maximum determined by the number of tokens returned\n   * from `dialer.getTokens`. Once a DialRequest is created, it can be\n   * started using `DialRequest.run(options)`. Once a single dial has succeeded,\n   * all other dials in the request will be cancelled.\n   *\n   * @class\n   * @param {DialRequestOptions} options\n   */\n  constructor({\n    addrs,\n    dialAction,\n    dialer\n  }) {\n    this.addrs = addrs;\n    this.dialer = dialer;\n    this.dialAction = dialAction;\n  }\n  /**\n   * @async\n   * @param {object} [options]\n   * @param {AbortSignal} [options.signal] - An AbortController signal\n   * @returns {Promise<Connection>}\n   */\n\n\n  run(options = {}) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const tokens = _this.dialer.getTokens(_this.addrs.length); // If no tokens are available, throw\n\n\n      if (tokens.length < 1) {\n        throw errCode(new Error('No dial tokens available'), 'ERR_NO_DIAL_TOKENS');\n      }\n\n      const tokenHolder = new FIFO();\n      tokens.forEach(token => tokenHolder.push(token));\n\n      const dialAbortControllers = _this.addrs.map(() => new AbortController());\n\n      let completedDials = 0;\n\n      try {\n        return yield pAny(_this.addrs.map( /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(function* (addr, i) {\n            const token = yield tokenHolder.shift(); // get token\n\n            let conn;\n\n            try {\n              const signal = dialAbortControllers[i].signal;\n              conn = yield _this.dialAction(addr, { ...options,\n                signal: options.signal ? anySignal([signal, options.signal]) : signal\n              }); // Remove the successful AbortController so it is not aborted\n\n              dialAbortControllers.splice(i, 1);\n            } finally {\n              completedDials++; // If we have more or equal dials remaining than tokens, recycle the token, otherwise release it\n\n              if (_this.addrs.length - completedDials >= tokens.length) {\n                tokenHolder.push(token);\n              } else {\n                _this.dialer.releaseToken(tokens.splice(tokens.indexOf(token), 1)[0]);\n              }\n            }\n\n            return conn;\n          });\n\n          return function (_x, _x2) {\n            return _ref.apply(this, arguments);\n          };\n        }()));\n      } finally {\n        dialAbortControllers.map(c => c.abort()); // success/failure happened, abort everything else\n\n        tokens.forEach(token => _this.dialer.releaseToken(token)); // release tokens back to the dialer\n      }\n    })();\n  }\n\n}\n\nmodule.exports = DialRequest;","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Dapp/node_modules/libp2p/src/dialer/dial-request.js"],"names":["errCode","require","AbortController","default","anySignal","FIFO","pAny","DialRequest","constructor","addrs","dialAction","dialer","run","options","tokens","getTokens","length","Error","tokenHolder","forEach","token","push","dialAbortControllers","map","completedDials","addr","i","shift","conn","signal","splice","releaseToken","indexOf","c","abort","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst errCode = require('err-code')\nconst AbortController = require('abort-controller').default\nconst { anySignal } = require('any-signal')\n// @ts-ignore p-fifo does not export types\nconst FIFO = require('p-fifo')\nconst pAny = require('p-any')\n\n/**\n * @typedef {import('libp2p-interfaces/src/connection').Connection} Connection\n * @typedef {import('./')} Dialer\n * @typedef {import('multiaddr').Multiaddr} Multiaddr\n */\n\n/**\n * @typedef {Object} DialOptions\n * @property {AbortSignal} signal\n *\n * @typedef {Object} DialRequestOptions\n * @property {Multiaddr[]} addrs\n * @property {(m: Multiaddr, options: DialOptions) => Promise<Connection>} dialAction\n * @property {Dialer} dialer\n */\n\nclass DialRequest {\n  /**\n   * Manages running the `dialAction` on multiple provided `addrs` in parallel\n   * up to a maximum determined by the number of tokens returned\n   * from `dialer.getTokens`. Once a DialRequest is created, it can be\n   * started using `DialRequest.run(options)`. Once a single dial has succeeded,\n   * all other dials in the request will be cancelled.\n   *\n   * @class\n   * @param {DialRequestOptions} options\n   */\n  constructor ({\n    addrs,\n    dialAction,\n    dialer\n  }) {\n    this.addrs = addrs\n    this.dialer = dialer\n    this.dialAction = dialAction\n  }\n\n  /**\n   * @async\n   * @param {object} [options]\n   * @param {AbortSignal} [options.signal] - An AbortController signal\n   * @returns {Promise<Connection>}\n   */\n  async run (options = {}) {\n    const tokens = this.dialer.getTokens(this.addrs.length)\n    // If no tokens are available, throw\n    if (tokens.length < 1) {\n      throw errCode(new Error('No dial tokens available'), 'ERR_NO_DIAL_TOKENS')\n    }\n\n    const tokenHolder = new FIFO()\n    tokens.forEach(token => tokenHolder.push(token))\n    const dialAbortControllers = this.addrs.map(() => new AbortController())\n    let completedDials = 0\n\n    try {\n      return await pAny(this.addrs.map(async (addr, i) => {\n        const token = await tokenHolder.shift() // get token\n        let conn\n        try {\n          const signal = dialAbortControllers[i].signal\n          conn = await this.dialAction(addr, { ...options, signal: options.signal ? anySignal([signal, options.signal]) : signal })\n          // Remove the successful AbortController so it is not aborted\n          dialAbortControllers.splice(i, 1)\n        } finally {\n          completedDials++\n          // If we have more or equal dials remaining than tokens, recycle the token, otherwise release it\n          if (this.addrs.length - completedDials >= tokens.length) {\n            tokenHolder.push(token)\n          } else {\n            this.dialer.releaseToken(tokens.splice(tokens.indexOf(token), 1)[0])\n          }\n        }\n\n        return conn\n      }))\n    } finally {\n      dialAbortControllers.map(c => c.abort()) // success/failure happened, abort everything else\n      tokens.forEach(token => this.dialer.releaseToken(token)) // release tokens back to the dialer\n    }\n  }\n}\n\nmodule.exports = DialRequest\n"]},"metadata":{},"sourceType":"script"}