{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nvar _wrapAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\").default;\n\nvar _awaitAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nvar _asyncGeneratorDelegate = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncGeneratorDelegate\").default;\n\nconst Reader = require('it-reader');\n\nconst Writer = require('it-pushable');\n\nconst defer = require('p-defer'); // Convert a duplex stream into a reader and writer and rest stream\n\n\nmodule.exports = stream => {\n  const writer = Writer(); // Write bytes on demand to the sink\n\n  const reader = Reader(stream.source); // Read bytes on demand from the source\n  // Waits for a source to be passed to the rest stream's sink\n\n  const sourcePromise = defer();\n  let sinkErr;\n  const sinkPromise = stream.sink(_wrapAsyncGenerator(function* () {\n    yield* _asyncGeneratorDelegate(_asyncIterator(writer), _awaitAsyncGenerator);\n    const source = yield _awaitAsyncGenerator(sourcePromise.promise);\n    yield* _asyncGeneratorDelegate(_asyncIterator(source), _awaitAsyncGenerator);\n  })());\n  sinkPromise.catch(err => {\n    sinkErr = err;\n  });\n  const rest = {\n    sink: source => {\n      if (sinkErr) {\n        return Promise.reject(sinkErr);\n      }\n\n      sourcePromise.resolve(source);\n      return sinkPromise;\n    },\n    source: reader\n  };\n  return {\n    reader,\n    writer,\n    stream: rest,\n    rest: () => writer.end(),\n    write: writer.push,\n    read: function () {\n      var _ref2 = _asyncToGenerator(function* () {\n        return (yield reader.next()).value;\n      });\n\n      return function read() {\n        return _ref2.apply(this, arguments);\n      };\n    }()\n  };\n};","map":{"version":3,"sources":["/Users/sydneybailey/Internship/contract-testing/node_modules/it-handshake/src/index.js"],"names":["Reader","require","Writer","defer","module","exports","stream","writer","reader","source","sourcePromise","sinkErr","sinkPromise","sink","promise","catch","err","rest","Promise","reject","resolve","end","write","push","read","next","value"],"mappings":"AAAA;;;;;;;;;;;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,WAAD,CAAtB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,aAAD,CAAtB;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAC,SAAD,CAArB,C,CAEA;;;AACAG,MAAM,CAACC,OAAP,GAAiBC,MAAM,IAAI;AACzB,QAAMC,MAAM,GAAGL,MAAM,EAArB,CADyB,CACD;;AACxB,QAAMM,MAAM,GAAGR,MAAM,CAACM,MAAM,CAACG,MAAR,CAArB,CAFyB,CAEY;AAErC;;AACA,QAAMC,aAAa,GAAGP,KAAK,EAA3B;AACA,MAAIQ,OAAJ;AAEA,QAAMC,WAAW,GAAGN,MAAM,CAACO,IAAP,CAAY,oBAAC,aAAoB;AACnD,kDAAQN,MAAR;AACA,UAAME,MAAM,8BAASC,aAAa,CAACI,OAAvB,CAAZ;AACA,kDAAQL,MAAR;AACD,GAJ+B,GAAZ,CAApB;AAMAG,EAAAA,WAAW,CAACG,KAAZ,CAAkBC,GAAG,IAAI;AACvBL,IAAAA,OAAO,GAAGK,GAAV;AACD,GAFD;AAIA,QAAMC,IAAI,GAAG;AACXJ,IAAAA,IAAI,EAAEJ,MAAM,IAAI;AACd,UAAIE,OAAJ,EAAa;AACX,eAAOO,OAAO,CAACC,MAAR,CAAeR,OAAf,CAAP;AACD;;AAEDD,MAAAA,aAAa,CAACU,OAAd,CAAsBX,MAAtB;AACA,aAAOG,WAAP;AACD,KARU;AASXH,IAAAA,MAAM,EAAED;AATG,GAAb;AAYA,SAAO;AACLA,IAAAA,MADK;AAELD,IAAAA,MAFK;AAGLD,IAAAA,MAAM,EAAEW,IAHH;AAILA,IAAAA,IAAI,EAAE,MAAMV,MAAM,CAACc,GAAP,EAJP;AAKLC,IAAAA,KAAK,EAAEf,MAAM,CAACgB,IALT;AAMLC,IAAAA,IAAI;AAAA,oCAAE,aAAY;AAChB,eAAO,OAAOhB,MAAM,CAACiB,IAAP,EAAP,EAAsBC,KAA7B;AACD,OAFG;;AAAA;AAAA;AAAA;AAAA;AANC,GAAP;AAUD,CAxCD","sourcesContent":["'use strict'\n\nconst Reader = require('it-reader')\nconst Writer = require('it-pushable')\nconst defer = require('p-defer')\n\n// Convert a duplex stream into a reader and writer and rest stream\nmodule.exports = stream => {\n  const writer = Writer() // Write bytes on demand to the sink\n  const reader = Reader(stream.source) // Read bytes on demand from the source\n\n  // Waits for a source to be passed to the rest stream's sink\n  const sourcePromise = defer()\n  let sinkErr\n\n  const sinkPromise = stream.sink((async function * () {\n    yield * writer\n    const source = await sourcePromise.promise\n    yield * source\n  })())\n\n  sinkPromise.catch(err => {\n    sinkErr = err\n  })\n\n  const rest = {\n    sink: source => {\n      if (sinkErr) {\n        return Promise.reject(sinkErr)\n      }\n\n      sourcePromise.resolve(source)\n      return sinkPromise\n    },\n    source: reader\n  }\n\n  return {\n    reader,\n    writer,\n    stream: rest,\n    rest: () => writer.end(),\n    write: writer.push,\n    read: async () => {\n      return (await reader.next()).value\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}