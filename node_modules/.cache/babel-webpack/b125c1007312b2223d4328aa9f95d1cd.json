{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst configure = require('../lib/configure');\n\nconst multipartRequest = require('../lib/multipart-request');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nconst abortSignal = require('../lib/abort-signal');\n\nconst {\n  AbortController\n} = require('native-abort-controller');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dag').API<HTTPClientExtraOptions>} DAGAPI\n */\n\n/**\n * @param {import('ipfs-core-utils/src/multicodecs')} codecs\n * @param {import('../types').Options} options\n */\n\n\nmodule.exports = (codecs, options) => {\n  const fn = configure(api => {\n    /**\n     * @type {DAGAPI[\"put\"]}\n     */\n    const put = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (dagNode, options = {}) {\n        const settings = {\n          format: 'dag-cbor',\n          hashAlg: 'sha2-256',\n          inputEnc: 'raw',\n          ...options\n        };\n        const codec = yield codecs.getCodec(settings.format);\n        const serialized = codec.encode(dagNode); // allow aborting requests on body errors\n\n        const controller = new AbortController();\n        const signal = abortSignal(controller.signal, settings.signal);\n        const res = yield api.post('dag/put', {\n          timeout: settings.timeout,\n          signal,\n          searchParams: toUrlSearchParams(settings),\n          ...(yield multipartRequest(serialized, controller, settings.headers))\n        });\n        const data = yield res.json();\n        return CID.parse(data.Cid['/']);\n      });\n\n      return function put(_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return put;\n  });\n  return fn(options);\n};","map":null,"metadata":{},"sourceType":"script"}