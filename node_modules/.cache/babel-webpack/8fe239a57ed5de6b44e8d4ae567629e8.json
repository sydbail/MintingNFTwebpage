{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nconst {\n  fromString: uint8ArrayFromString\n} = require('uint8arrays/from-string');\n\nconst {\n  toString: uint8ArrayToString\n} = require('uint8arrays/to-string');\n\nconst log = require('debug')('ipfs-http-client:pubsub:subscribe');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pubsub').Message} Message\n * @typedef {(err: Error, fatal: boolean, msg?: Message) => void} ErrorHandlerFn\n * @typedef {import('ipfs-core-types/src/pubsub').API<HTTPClientExtraOptions & { onError?: ErrorHandlerFn }>} PubsubAPI\n * @typedef {import('../types').Options} Options\n */\n\n/**\n * @param {Options} options\n * @param {import('./subscription-tracker')} subsTracker\n */\n\n\nmodule.exports = (options, subsTracker) => {\n  return configure(api => {\n    /**\n     * @type {PubsubAPI[\"subscribe\"]}\n     */\n    function subscribe(_x, _x2) {\n      return _subscribe.apply(this, arguments);\n    }\n\n    function _subscribe() {\n      _subscribe = _asyncToGenerator(function* (topic, handler, options = {}) {\n        // eslint-disable-line require-await\n        options.signal = subsTracker.subscribe(topic, handler, options.signal);\n        /** @type {(value?: any) => void} */\n\n        let done;\n        /** @type {(error: Error) => void} */\n\n        let fail;\n        const result = new Promise((resolve, reject) => {\n          done = resolve;\n          fail = reject;\n        }); // In Firefox, the initial call to fetch does not resolve until some data\n        // is received. If this doesn't happen within 1 second assume success\n\n        const ffWorkaround = setTimeout(() => done(), 1000); // Do this async to not block Firefox\n\n        api.post('pubsub/sub', {\n          timeout: options.timeout,\n          signal: options.signal,\n          searchParams: toUrlSearchParams({\n            arg: topic,\n            ...options\n          }),\n          headers: options.headers\n        }).catch(err => {\n          // Initial subscribe fail, ensure we clean up\n          subsTracker.unsubscribe(topic, handler);\n          fail(err);\n        }).then(response => {\n          clearTimeout(ffWorkaround);\n\n          if (!response) {\n            // if there was no response, the subscribe failed\n            return;\n          }\n\n          readMessages(response, {\n            onMessage: handler,\n            onEnd: () => subsTracker.unsubscribe(topic, handler),\n            onError: options.onError\n          });\n          done();\n        });\n        return result;\n      });\n      return _subscribe.apply(this, arguments);\n    }\n\n    return subscribe;\n  })(options);\n};\n/**\n * @param {import('ipfs-utils/src/types').ExtendedResponse} response\n * @param {object} options\n * @param {(message: Message) => void} options.onMessage\n * @param {() => void} options.onEnd\n * @param {ErrorHandlerFn} [options.onError]\n */\n\n\nfunction readMessages(_x3, _x4) {\n  return _readMessages.apply(this, arguments);\n}\n/**\n * @param {Error & {type?:string}} error\n * @returns {boolean}\n */\n\n\nfunction _readMessages() {\n  _readMessages = _asyncToGenerator(function* (response, {\n    onMessage,\n    onEnd,\n    onError\n  }) {\n    onError = onError || log;\n\n    try {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n\n      var _iteratorError;\n\n      try {\n        for (var _iterator = _asyncIterator(response.ndjson()), _step, _value; _step = yield _iterator.next(), _iteratorNormalCompletion = _step.done, _value = yield _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n          const msg = _value;\n\n          try {\n            if (!msg.from) {\n              continue;\n            }\n\n            onMessage({\n              from: uint8ArrayToString(uint8ArrayFromString(msg.from, 'base64pad'), 'base58btc'),\n              data: uint8ArrayFromString(msg.data, 'base64pad'),\n              seqno: uint8ArrayFromString(msg.seqno, 'base64pad'),\n              topicIDs: msg.topicIDs\n            });\n          } catch (err) {\n            err.message = `Failed to parse pubsub message: ${err.message}`;\n            onError(err, false, msg); // Not fatal\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            yield _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    } catch (err) {\n      if (!isAbortError(err)) {\n        onError(err, true); // Fatal\n      }\n    } finally {\n      onEnd();\n    }\n  });\n  return _readMessages.apply(this, arguments);\n}\n\nconst isAbortError = error => {\n  switch (error.type) {\n    case 'aborted':\n      return true;\n    // It is `abort` in Electron instead of `aborted`\n\n    case 'abort':\n      return true;\n\n    default:\n      // FIXME: In testing with Chrome, err.type is undefined (should not be!)\n      // Temporarily use the name property instead.\n      return error.name === 'AbortError';\n  }\n};","map":{"version":3,"sources":["/Users/sydneybailey/Internship/contract-testing/node_modules/ipfs-http-client/src/pubsub/subscribe.js"],"names":["fromString","uint8ArrayFromString","require","toString","uint8ArrayToString","log","configure","toUrlSearchParams","module","exports","options","subsTracker","api","subscribe","topic","handler","signal","done","fail","result","Promise","resolve","reject","ffWorkaround","setTimeout","post","timeout","searchParams","arg","headers","catch","err","unsubscribe","then","response","clearTimeout","readMessages","onMessage","onEnd","onError","ndjson","msg","from","data","seqno","topicIDs","message","isAbortError","error","type","name"],"mappings":"AAAA;;;;;;AAEA,MAAM;AAAEA,EAAAA,UAAU,EAAEC;AAAd,IAAuCC,OAAO,CAAC,yBAAD,CAApD;;AACA,MAAM;AAAEC,EAAAA,QAAQ,EAAEC;AAAZ,IAAmCF,OAAO,CAAC,uBAAD,CAAhD;;AACA,MAAMG,GAAG,GAAGH,OAAO,CAAC,OAAD,CAAP,CAAiB,mCAAjB,CAAZ;;AACA,MAAMI,SAAS,GAAGJ,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAMK,iBAAiB,GAAGL,OAAO,CAAC,6BAAD,CAAjC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AACAM,MAAM,CAACC,OAAP,GAAiB,CAACC,OAAD,EAAUC,WAAV,KAA0B;AACzC,SAAOL,SAAS,CAAEM,GAAD,IAAS;AACxB;AACJ;AACA;AAH4B,aAITC,SAJS;AAAA;AAAA;;AAAA;AAAA,qCAIxB,WAA0BC,KAA1B,EAAiCC,OAAjC,EAA0CL,OAAO,GAAG,EAApD,EAAwD;AAAE;AACxDA,QAAAA,OAAO,CAACM,MAAR,GAAiBL,WAAW,CAACE,SAAZ,CAAsBC,KAAtB,EAA6BC,OAA7B,EAAsCL,OAAO,CAACM,MAA9C,CAAjB;AAEA;;AACA,YAAIC,IAAJ;AACA;;AACA,YAAIC,IAAJ;AAEA,cAAMC,MAAM,GAAG,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC9CL,UAAAA,IAAI,GAAGI,OAAP;AACAH,UAAAA,IAAI,GAAGI,MAAP;AACD,SAHc,CAAf,CARsD,CAatD;AACA;;AACA,cAAMC,YAAY,GAAGC,UAAU,CAAC,MAAMP,IAAI,EAAX,EAAe,IAAf,CAA/B,CAfsD,CAiBtD;;AACAL,QAAAA,GAAG,CAACa,IAAJ,CAAS,YAAT,EAAuB;AACrBC,UAAAA,OAAO,EAAEhB,OAAO,CAACgB,OADI;AAErBV,UAAAA,MAAM,EAAEN,OAAO,CAACM,MAFK;AAGrBW,UAAAA,YAAY,EAAEpB,iBAAiB,CAAC;AAC9BqB,YAAAA,GAAG,EAAEd,KADyB;AAE9B,eAAGJ;AAF2B,WAAD,CAHV;AAOrBmB,UAAAA,OAAO,EAAEnB,OAAO,CAACmB;AAPI,SAAvB,EASGC,KATH,CASUC,GAAD,IAAS;AACd;AACApB,UAAAA,WAAW,CAACqB,WAAZ,CAAwBlB,KAAxB,EAA+BC,OAA/B;AAEAG,UAAAA,IAAI,CAACa,GAAD,CAAJ;AACD,SAdH,EAeGE,IAfH,CAeSC,QAAD,IAAc;AAClBC,UAAAA,YAAY,CAACZ,YAAD,CAAZ;;AAEA,cAAI,CAACW,QAAL,EAAe;AACb;AACA;AACD;;AAEDE,UAAAA,YAAY,CAACF,QAAD,EAAW;AACrBG,YAAAA,SAAS,EAAEtB,OADU;AAErBuB,YAAAA,KAAK,EAAE,MAAM3B,WAAW,CAACqB,WAAZ,CAAwBlB,KAAxB,EAA+BC,OAA/B,CAFQ;AAGrBwB,YAAAA,OAAO,EAAE7B,OAAO,CAAC6B;AAHI,WAAX,CAAZ;AAMAtB,UAAAA,IAAI;AACL,SA9BH;AAgCA,eAAOE,MAAP;AACD,OAvDuB;AAAA;AAAA;;AAwDxB,WAAON,SAAP;AACD,GAzDe,CAAT,CAyDJH,OAzDI,CAAP;AA0DD,CA3DD;AA6DA;AACA;AACA;AACA;AACA;AACA;AACA;;;SACe0B,Y;;;AA8Bf;AACA;AACA;AACA;;;;oCAjCA,WAA6BF,QAA7B,EAAuC;AAAEG,IAAAA,SAAF;AAAaC,IAAAA,KAAb;AAAoBC,IAAAA;AAApB,GAAvC,EAAsE;AACpEA,IAAAA,OAAO,GAAGA,OAAO,IAAIlC,GAArB;;AAEA,QAAI;AAAA;AAAA;;AAAA;;AAAA;AACF,4CAAwB6B,QAAQ,CAACM,MAAT,EAAxB,oLAA2C;AAAA,gBAA1BC,GAA0B;;AACzC,cAAI;AACF,gBAAI,CAACA,GAAG,CAACC,IAAT,EAAe;AACb;AACD;;AAEDL,YAAAA,SAAS,CAAC;AACRK,cAAAA,IAAI,EAAEtC,kBAAkB,CAACH,oBAAoB,CAACwC,GAAG,CAACC,IAAL,EAAW,WAAX,CAArB,EAA8C,WAA9C,CADhB;AAERC,cAAAA,IAAI,EAAE1C,oBAAoB,CAACwC,GAAG,CAACE,IAAL,EAAW,WAAX,CAFlB;AAGRC,cAAAA,KAAK,EAAE3C,oBAAoB,CAACwC,GAAG,CAACG,KAAL,EAAY,WAAZ,CAHnB;AAIRC,cAAAA,QAAQ,EAAEJ,GAAG,CAACI;AAJN,aAAD,CAAT;AAMD,WAXD,CAWE,OAAOd,GAAP,EAAY;AACZA,YAAAA,GAAG,CAACe,OAAJ,GAAe,mCAAkCf,GAAG,CAACe,OAAQ,EAA7D;AACAP,YAAAA,OAAO,CAACR,GAAD,EAAM,KAAN,EAAaU,GAAb,CAAP,CAFY,CAEa;AAC1B;AACF;AAjBC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBH,KAlBD,CAkBE,OAAOV,GAAP,EAAY;AACZ,UAAI,CAACgB,YAAY,CAAChB,GAAD,CAAjB,EAAwB;AACtBQ,QAAAA,OAAO,CAACR,GAAD,EAAM,IAAN,CAAP,CADsB,CACH;AACpB;AACF,KAtBD,SAsBU;AACRO,MAAAA,KAAK;AACN;AACF,G;;;;AAMD,MAAMS,YAAY,GAAGC,KAAK,IAAI;AAC5B,UAAQA,KAAK,CAACC,IAAd;AACE,SAAK,SAAL;AACE,aAAO,IAAP;AACF;;AACA,SAAK,OAAL;AACE,aAAO,IAAP;;AACF;AACE;AACA;AACA,aAAOD,KAAK,CAACE,IAAN,KAAe,YAAtB;AATJ;AAWD,CAZD","sourcesContent":["'use strict'\n\nconst { fromString: uint8ArrayFromString } = require('uint8arrays/from-string')\nconst { toString: uint8ArrayToString } = require('uint8arrays/to-string')\nconst log = require('debug')('ipfs-http-client:pubsub:subscribe')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pubsub').Message} Message\n * @typedef {(err: Error, fatal: boolean, msg?: Message) => void} ErrorHandlerFn\n * @typedef {import('ipfs-core-types/src/pubsub').API<HTTPClientExtraOptions & { onError?: ErrorHandlerFn }>} PubsubAPI\n * @typedef {import('../types').Options} Options\n */\n\n/**\n * @param {Options} options\n * @param {import('./subscription-tracker')} subsTracker\n */\nmodule.exports = (options, subsTracker) => {\n  return configure((api) => {\n    /**\n     * @type {PubsubAPI[\"subscribe\"]}\n     */\n    async function subscribe (topic, handler, options = {}) { // eslint-disable-line require-await\n      options.signal = subsTracker.subscribe(topic, handler, options.signal)\n\n      /** @type {(value?: any) => void} */\n      let done\n      /** @type {(error: Error) => void} */\n      let fail\n\n      const result = new Promise((resolve, reject) => {\n        done = resolve\n        fail = reject\n      })\n\n      // In Firefox, the initial call to fetch does not resolve until some data\n      // is received. If this doesn't happen within 1 second assume success\n      const ffWorkaround = setTimeout(() => done(), 1000)\n\n      // Do this async to not block Firefox\n      api.post('pubsub/sub', {\n        timeout: options.timeout,\n        signal: options.signal,\n        searchParams: toUrlSearchParams({\n          arg: topic,\n          ...options\n        }),\n        headers: options.headers\n      })\n        .catch((err) => {\n          // Initial subscribe fail, ensure we clean up\n          subsTracker.unsubscribe(topic, handler)\n\n          fail(err)\n        })\n        .then((response) => {\n          clearTimeout(ffWorkaround)\n\n          if (!response) {\n            // if there was no response, the subscribe failed\n            return\n          }\n\n          readMessages(response, {\n            onMessage: handler,\n            onEnd: () => subsTracker.unsubscribe(topic, handler),\n            onError: options.onError\n          })\n\n          done()\n        })\n\n      return result\n    }\n    return subscribe\n  })(options)\n}\n\n/**\n * @param {import('ipfs-utils/src/types').ExtendedResponse} response\n * @param {object} options\n * @param {(message: Message) => void} options.onMessage\n * @param {() => void} options.onEnd\n * @param {ErrorHandlerFn} [options.onError]\n */\nasync function readMessages (response, { onMessage, onEnd, onError }) {\n  onError = onError || log\n\n  try {\n    for await (const msg of response.ndjson()) {\n      try {\n        if (!msg.from) {\n          continue\n        }\n\n        onMessage({\n          from: uint8ArrayToString(uint8ArrayFromString(msg.from, 'base64pad'), 'base58btc'),\n          data: uint8ArrayFromString(msg.data, 'base64pad'),\n          seqno: uint8ArrayFromString(msg.seqno, 'base64pad'),\n          topicIDs: msg.topicIDs\n        })\n      } catch (err) {\n        err.message = `Failed to parse pubsub message: ${err.message}`\n        onError(err, false, msg) // Not fatal\n      }\n    }\n  } catch (err) {\n    if (!isAbortError(err)) {\n      onError(err, true) // Fatal\n    }\n  } finally {\n    onEnd()\n  }\n}\n\n/**\n * @param {Error & {type?:string}} error\n * @returns {boolean}\n */\nconst isAbortError = error => {\n  switch (error.type) {\n    case 'aborted':\n      return true\n    // It is `abort` in Electron instead of `aborted`\n    case 'abort':\n      return true\n    default:\n      // FIXME: In testing with Chrome, err.type is undefined (should not be!)\n      // Temporarily use the name property instead.\n      return error.name === 'AbortError'\n  }\n}\n"]},"metadata":{},"sourceType":"script"}