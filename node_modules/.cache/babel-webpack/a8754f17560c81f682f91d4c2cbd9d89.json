{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst debug = require('debug');\n\nconst log = Object.assign(debug('libp2p:circuit'), {\n  error: debug('libp2p:circuit:err')\n});\n\nconst errCode = require('err-code');\n\nconst mafmt = require('mafmt');\n\nconst {\n  Multiaddr\n} = require('multiaddr');\n\nconst PeerId = require('peer-id');\n\nconst {\n  CircuitRelay: CircuitPB\n} = require('./protocol');\n\nconst {\n  codes\n} = require('../errors');\n\nconst toConnection = require('libp2p-utils/src/stream-to-ma-conn');\n\nconst {\n  relay: multicodec\n} = require('./multicodec');\n\nconst createListener = require('./listener');\n\nconst {\n  handleCanHop,\n  handleHop,\n  hop\n} = require('./circuit/hop');\n\nconst {\n  handleStop\n} = require('./circuit/stop');\n\nconst StreamHandler = require('./circuit/stream-handler');\n\nconst transportSymbol = Symbol.for('@libp2p/js-libp2p-circuit/circuit');\n/**\n * @typedef {import('libp2p-interfaces/src/connection').Connection} Connection\n * @typedef {import('libp2p-interfaces/src/stream-muxer/types').MuxedStream} MuxedStream\n */\n\nclass Circuit {\n  /**\n   * Creates an instance of the Circuit Transport.\n   *\n   * @class\n   * @param {object} options\n   * @param {import('../')} options.libp2p\n   * @param {import('../upgrader')} options.upgrader\n   */\n  constructor({\n    libp2p,\n    upgrader\n  }) {\n    this._dialer = libp2p.dialer;\n    this._registrar = libp2p.registrar;\n    this._connectionManager = libp2p.connectionManager;\n    this._upgrader = upgrader;\n    this._options = libp2p._config.relay;\n    this._libp2p = libp2p;\n    this.peerId = libp2p.peerId;\n\n    this._registrar.handle(multicodec, this._onProtocol.bind(this));\n  }\n  /**\n   * @param {Object} props\n   * @param {Connection} props.connection\n   * @param {MuxedStream} props.stream\n   */\n\n\n  _onProtocol({\n    connection,\n    stream\n  }) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      /** @type {import('./circuit/stream-handler')} */\n      const streamHandler = new StreamHandler({\n        stream\n      });\n      const request = yield streamHandler.read();\n\n      if (!request) {\n        return;\n      }\n\n      const circuit = _this;\n      let virtualConnection;\n\n      switch (request.type) {\n        case CircuitPB.Type.CAN_HOP:\n          {\n            log('received CAN_HOP request from %s', connection.remotePeer.toB58String());\n            yield handleCanHop({\n              circuit,\n              connection,\n              streamHandler\n            });\n            break;\n          }\n\n        case CircuitPB.Type.HOP:\n          {\n            log('received HOP request from %s', connection.remotePeer.toB58String());\n            virtualConnection = yield handleHop({\n              connection,\n              request,\n              streamHandler,\n              circuit\n            });\n            break;\n          }\n\n        case CircuitPB.Type.STOP:\n          {\n            log('received STOP request from %s', connection.remotePeer.toB58String());\n            virtualConnection = yield handleStop({\n              connection,\n              request,\n              streamHandler\n            });\n            break;\n          }\n\n        default:\n          {\n            log('Request of type %s not supported', request.type);\n          }\n      }\n\n      if (virtualConnection) {\n        // @ts-ignore dst peer will not be undefined\n        const remoteAddr = new Multiaddr(request.dstPeer.addrs[0]); // @ts-ignore src peer will not be undefined\n\n        const localAddr = new Multiaddr(request.srcPeer.addrs[0]);\n        const maConn = toConnection({\n          stream: virtualConnection,\n          remoteAddr,\n          localAddr\n        });\n        const type = request.type === CircuitPB.Type.HOP ? 'relay' : 'inbound';\n        log('new %s connection %s', type, maConn.remoteAddr);\n        const conn = yield _this._upgrader.upgradeInbound(maConn);\n        log('%s connection %s upgraded', type, maConn.remoteAddr);\n        _this.handler && _this.handler(conn);\n      }\n    })();\n  }\n  /**\n   * Dial a peer over a relay\n   *\n   * @param {Multiaddr} ma - the multiaddr of the peer to dial\n   * @param {Object} options - dial options\n   * @param {AbortSignal} [options.signal] - An optional abort signal\n   * @returns {Promise<Connection>} - the connection\n   */\n\n\n  dial(ma, options) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      // Check the multiaddr to see if it contains a relay and a destination peer\n      const addrs = ma.toString().split('/p2p-circuit');\n      const relayAddr = new Multiaddr(addrs[0]);\n      const destinationAddr = new Multiaddr(addrs[addrs.length - 1]);\n      const relayId = relayAddr.getPeerId();\n      const destinationId = destinationAddr.getPeerId();\n\n      if (!relayId || !destinationId) {\n        const errMsg = 'Circuit relay dial failed as addresses did not have peer id';\n        log.error(errMsg);\n        throw errCode(new Error(errMsg), codes.ERR_RELAYED_DIAL);\n      }\n\n      const relayPeer = PeerId.createFromB58String(relayId);\n      const destinationPeer = PeerId.createFromB58String(destinationId);\n      let disconnectOnFailure = false;\n\n      let relayConnection = _this2._connectionManager.get(relayPeer);\n\n      if (!relayConnection) {\n        relayConnection = yield _this2._dialer.connectToPeer(relayAddr, options);\n        disconnectOnFailure = true;\n      }\n\n      try {\n        const virtualConnection = yield hop({\n          connection: relayConnection,\n          request: {\n            type: CircuitPB.Type.HOP,\n            srcPeer: {\n              id: _this2.peerId.toBytes(),\n              addrs: _this2._libp2p.multiaddrs.map(addr => addr.bytes)\n            },\n            dstPeer: {\n              id: destinationPeer.toBytes(),\n              addrs: [new Multiaddr(destinationAddr).bytes]\n            }\n          }\n        });\n        const localAddr = relayAddr.encapsulate(`/p2p-circuit/p2p/${_this2.peerId.toB58String()}`);\n        const maConn = toConnection({\n          stream: virtualConnection,\n          remoteAddr: ma,\n          localAddr\n        });\n        log('new outbound connection %s', maConn.remoteAddr);\n        return _this2._upgrader.upgradeOutbound(maConn);\n      } catch (err) {\n        log.error('Circuit relay dial failed', err);\n        disconnectOnFailure && (yield relayConnection.close());\n        throw err;\n      }\n    })();\n  }\n  /**\n   * Create a listener\n   *\n   * @param {any} options\n   * @param {Function} handler\n   * @returns {import('libp2p-interfaces/src/transport/types').Listener}\n   */\n\n\n  createListener(options, handler) {\n    if (typeof options === 'function') {\n      handler = options;\n      options = {};\n    } // Called on successful HOP and STOP requests\n\n\n    this.handler = handler;\n    return createListener(this._libp2p);\n  }\n  /**\n   * Filter check for all Multiaddrs that this transport can dial on\n   *\n   * @param {Multiaddr[]} multiaddrs\n   * @returns {Multiaddr[]}\n   */\n\n\n  filter(multiaddrs) {\n    multiaddrs = Array.isArray(multiaddrs) ? multiaddrs : [multiaddrs];\n    return multiaddrs.filter(ma => {\n      return mafmt.Circuit.matches(ma);\n    });\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Circuit';\n  }\n  /**\n   * Checks if the given value is a Transport instance.\n   *\n   * @param {any} other\n   * @returns {other is Transport}\n   */\n\n\n  static isTransport(other) {\n    return Boolean(other && other[transportSymbol]);\n  }\n\n}\n\nmodule.exports = Circuit;","map":{"version":3,"sources":["/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/libp2p/src/circuit/transport.js"],"names":["debug","require","log","Object","assign","error","errCode","mafmt","Multiaddr","PeerId","CircuitRelay","CircuitPB","codes","toConnection","relay","multicodec","createListener","handleCanHop","handleHop","hop","handleStop","StreamHandler","transportSymbol","Symbol","for","Circuit","constructor","libp2p","upgrader","_dialer","dialer","_registrar","registrar","_connectionManager","connectionManager","_upgrader","_options","_config","_libp2p","peerId","handle","_onProtocol","bind","connection","stream","streamHandler","request","read","circuit","virtualConnection","type","Type","CAN_HOP","remotePeer","toB58String","HOP","STOP","remoteAddr","dstPeer","addrs","localAddr","srcPeer","maConn","conn","upgradeInbound","handler","dial","ma","options","toString","split","relayAddr","destinationAddr","length","relayId","getPeerId","destinationId","errMsg","Error","ERR_RELAYED_DIAL","relayPeer","createFromB58String","destinationPeer","disconnectOnFailure","relayConnection","get","connectToPeer","id","toBytes","multiaddrs","map","addr","bytes","encapsulate","upgradeOutbound","err","close","filter","Array","isArray","matches","toStringTag","isTransport","other","Boolean","module","exports"],"mappings":"AAAA;;;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMC,GAAG,GAAGC,MAAM,CAACC,MAAP,CAAcJ,KAAK,CAAC,gBAAD,CAAnB,EAAuC;AACjDK,EAAAA,KAAK,EAAEL,KAAK,CAAC,oBAAD;AADqC,CAAvC,CAAZ;;AAIA,MAAMM,OAAO,GAAGL,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAMM,KAAK,GAAGN,OAAO,CAAC,OAAD,CAArB;;AACA,MAAM;AAAEO,EAAAA;AAAF,IAAgBP,OAAO,CAAC,WAAD,CAA7B;;AACA,MAAMQ,MAAM,GAAGR,OAAO,CAAC,SAAD,CAAtB;;AACA,MAAM;AAAES,EAAAA,YAAY,EAAEC;AAAhB,IAA8BV,OAAO,CAAC,YAAD,CAA3C;;AACA,MAAM;AAAEW,EAAAA;AAAF,IAAYX,OAAO,CAAC,WAAD,CAAzB;;AAEA,MAAMY,YAAY,GAAGZ,OAAO,CAAC,oCAAD,CAA5B;;AAEA,MAAM;AAAEa,EAAAA,KAAK,EAAEC;AAAT,IAAwBd,OAAO,CAAC,cAAD,CAArC;;AACA,MAAMe,cAAc,GAAGf,OAAO,CAAC,YAAD,CAA9B;;AACA,MAAM;AAAEgB,EAAAA,YAAF;AAAgBC,EAAAA,SAAhB;AAA2BC,EAAAA;AAA3B,IAAmClB,OAAO,CAAC,eAAD,CAAhD;;AACA,MAAM;AAAEmB,EAAAA;AAAF,IAAiBnB,OAAO,CAAC,gBAAD,CAA9B;;AACA,MAAMoB,aAAa,GAAGpB,OAAO,CAAC,0BAAD,CAA7B;;AAEA,MAAMqB,eAAe,GAAGC,MAAM,CAACC,GAAP,CAAW,mCAAX,CAAxB;AAEA;AACA;AACA;AACA;;AAEA,MAAMC,OAAN,CAAc;AACZ;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,WAAW,CAAE;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,GAAF,EAAwB;AACjC,SAAKC,OAAL,GAAeF,MAAM,CAACG,MAAtB;AACA,SAAKC,UAAL,GAAkBJ,MAAM,CAACK,SAAzB;AACA,SAAKC,kBAAL,GAA0BN,MAAM,CAACO,iBAAjC;AACA,SAAKC,SAAL,GAAiBP,QAAjB;AACA,SAAKQ,QAAL,GAAgBT,MAAM,CAACU,OAAP,CAAevB,KAA/B;AACA,SAAKwB,OAAL,GAAeX,MAAf;AACA,SAAKY,MAAL,GAAcZ,MAAM,CAACY,MAArB;;AAEA,SAAKR,UAAL,CAAgBS,MAAhB,CAAuBzB,UAAvB,EAAmC,KAAK0B,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAnC;AACD;AAED;AACF;AACA;AACA;AACA;;;AACQD,EAAAA,WAAW,CAAE;AAAEE,IAAAA,UAAF;AAAcC,IAAAA;AAAd,GAAF,EAA0B;AAAA;;AAAA;AACzC;AACA,YAAMC,aAAa,GAAG,IAAIxB,aAAJ,CAAkB;AAAEuB,QAAAA;AAAF,OAAlB,CAAtB;AACA,YAAME,OAAO,SAASD,aAAa,CAACE,IAAd,EAAtB;;AAEA,UAAI,CAACD,OAAL,EAAc;AACZ;AACD;;AAED,YAAME,OAAO,GAAG,KAAhB;AACA,UAAIC,iBAAJ;;AAEA,cAAQH,OAAO,CAACI,IAAhB;AACE,aAAKvC,SAAS,CAACwC,IAAV,CAAeC,OAApB;AAA6B;AAC3BlD,YAAAA,GAAG,CAAC,kCAAD,EAAqCyC,UAAU,CAACU,UAAX,CAAsBC,WAAtB,EAArC,CAAH;AACA,kBAAMrC,YAAY,CAAC;AAAE+B,cAAAA,OAAF;AAAWL,cAAAA,UAAX;AAAuBE,cAAAA;AAAvB,aAAD,CAAlB;AACA;AACD;;AACD,aAAKlC,SAAS,CAACwC,IAAV,CAAeI,GAApB;AAAyB;AACvBrD,YAAAA,GAAG,CAAC,8BAAD,EAAiCyC,UAAU,CAACU,UAAX,CAAsBC,WAAtB,EAAjC,CAAH;AACAL,YAAAA,iBAAiB,SAAS/B,SAAS,CAAC;AAClCyB,cAAAA,UADkC;AAElCG,cAAAA,OAFkC;AAGlCD,cAAAA,aAHkC;AAIlCG,cAAAA;AAJkC,aAAD,CAAnC;AAMA;AACD;;AACD,aAAKrC,SAAS,CAACwC,IAAV,CAAeK,IAApB;AAA0B;AACxBtD,YAAAA,GAAG,CAAC,+BAAD,EAAkCyC,UAAU,CAACU,UAAX,CAAsBC,WAAtB,EAAlC,CAAH;AACAL,YAAAA,iBAAiB,SAAS7B,UAAU,CAAC;AACnCuB,cAAAA,UADmC;AAEnCG,cAAAA,OAFmC;AAGnCD,cAAAA;AAHmC,aAAD,CAApC;AAKA;AACD;;AACD;AAAS;AACP3C,YAAAA,GAAG,CAAC,kCAAD,EAAqC4C,OAAO,CAACI,IAA7C,CAAH;AACD;AA3BH;;AA8BA,UAAID,iBAAJ,EAAuB;AACrB;AACA,cAAMQ,UAAU,GAAG,IAAIjD,SAAJ,CAAcsC,OAAO,CAACY,OAAR,CAAgBC,KAAhB,CAAsB,CAAtB,CAAd,CAAnB,CAFqB,CAGrB;;AACA,cAAMC,SAAS,GAAG,IAAIpD,SAAJ,CAAcsC,OAAO,CAACe,OAAR,CAAgBF,KAAhB,CAAsB,CAAtB,CAAd,CAAlB;AACA,cAAMG,MAAM,GAAGjD,YAAY,CAAC;AAC1B+B,UAAAA,MAAM,EAAEK,iBADkB;AAE1BQ,UAAAA,UAF0B;AAG1BG,UAAAA;AAH0B,SAAD,CAA3B;AAKA,cAAMV,IAAI,GAAGJ,OAAO,CAACI,IAAR,KAAiBvC,SAAS,CAACwC,IAAV,CAAeI,GAAhC,GAAsC,OAAtC,GAAgD,SAA7D;AACArD,QAAAA,GAAG,CAAC,sBAAD,EAAyBgD,IAAzB,EAA+BY,MAAM,CAACL,UAAtC,CAAH;AAEA,cAAMM,IAAI,SAAS,KAAI,CAAC5B,SAAL,CAAe6B,cAAf,CAA8BF,MAA9B,CAAnB;AACA5D,QAAAA,GAAG,CAAC,2BAAD,EAA8BgD,IAA9B,EAAoCY,MAAM,CAACL,UAA3C,CAAH;AACA,QAAA,KAAI,CAACQ,OAAL,IAAgB,KAAI,CAACA,OAAL,CAAaF,IAAb,CAAhB;AACD;AA1DwC;AA2D1C;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AACQG,EAAAA,IAAI,CAAEC,EAAF,EAAMC,OAAN,EAAe;AAAA;;AAAA;AACvB;AACA,YAAMT,KAAK,GAAGQ,EAAE,CAACE,QAAH,GAAcC,KAAd,CAAoB,cAApB,CAAd;AACA,YAAMC,SAAS,GAAG,IAAI/D,SAAJ,CAAcmD,KAAK,CAAC,CAAD,CAAnB,CAAlB;AACA,YAAMa,eAAe,GAAG,IAAIhE,SAAJ,CAAcmD,KAAK,CAACA,KAAK,CAACc,MAAN,GAAe,CAAhB,CAAnB,CAAxB;AACA,YAAMC,OAAO,GAAGH,SAAS,CAACI,SAAV,EAAhB;AACA,YAAMC,aAAa,GAAGJ,eAAe,CAACG,SAAhB,EAAtB;;AAEA,UAAI,CAACD,OAAD,IAAY,CAACE,aAAjB,EAAgC;AAC9B,cAAMC,MAAM,GAAG,6DAAf;AACA3E,QAAAA,GAAG,CAACG,KAAJ,CAAUwE,MAAV;AACA,cAAMvE,OAAO,CAAC,IAAIwE,KAAJ,CAAUD,MAAV,CAAD,EAAoBjE,KAAK,CAACmE,gBAA1B,CAAb;AACD;;AAED,YAAMC,SAAS,GAAGvE,MAAM,CAACwE,mBAAP,CAA2BP,OAA3B,CAAlB;AACA,YAAMQ,eAAe,GAAGzE,MAAM,CAACwE,mBAAP,CAA2BL,aAA3B,CAAxB;AAEA,UAAIO,mBAAmB,GAAG,KAA1B;;AACA,UAAIC,eAAe,GAAG,MAAI,CAACnD,kBAAL,CAAwBoD,GAAxB,CAA4BL,SAA5B,CAAtB;;AACA,UAAI,CAACI,eAAL,EAAsB;AACpBA,QAAAA,eAAe,SAAS,MAAI,CAACvD,OAAL,CAAayD,aAAb,CAA2Bf,SAA3B,EAAsCH,OAAtC,CAAxB;AACAe,QAAAA,mBAAmB,GAAG,IAAtB;AACD;;AAED,UAAI;AACF,cAAMlC,iBAAiB,SAAS9B,GAAG,CAAC;AAClCwB,UAAAA,UAAU,EAAEyC,eADsB;AAElCtC,UAAAA,OAAO,EAAE;AACPI,YAAAA,IAAI,EAAEvC,SAAS,CAACwC,IAAV,CAAeI,GADd;AAEPM,YAAAA,OAAO,EAAE;AACP0B,cAAAA,EAAE,EAAE,MAAI,CAAChD,MAAL,CAAYiD,OAAZ,EADG;AAEP7B,cAAAA,KAAK,EAAE,MAAI,CAACrB,OAAL,CAAamD,UAAb,CAAwBC,GAAxB,CAA4BC,IAAI,IAAIA,IAAI,CAACC,KAAzC;AAFA,aAFF;AAMPlC,YAAAA,OAAO,EAAE;AACP6B,cAAAA,EAAE,EAAEL,eAAe,CAACM,OAAhB,EADG;AAEP7B,cAAAA,KAAK,EAAE,CAAC,IAAInD,SAAJ,CAAcgE,eAAd,EAA+BoB,KAAhC;AAFA;AANF;AAFyB,SAAD,CAAnC;AAeA,cAAMhC,SAAS,GAAGW,SAAS,CAACsB,WAAV,CAAuB,oBAAmB,MAAI,CAACtD,MAAL,CAAYe,WAAZ,EAA0B,EAApE,CAAlB;AACA,cAAMQ,MAAM,GAAGjD,YAAY,CAAC;AAC1B+B,UAAAA,MAAM,EAAEK,iBADkB;AAE1BQ,UAAAA,UAAU,EAAEU,EAFc;AAG1BP,UAAAA;AAH0B,SAAD,CAA3B;AAKA1D,QAAAA,GAAG,CAAC,4BAAD,EAA+B4D,MAAM,CAACL,UAAtC,CAAH;AAEA,eAAO,MAAI,CAACtB,SAAL,CAAe2D,eAAf,CAA+BhC,MAA/B,CAAP;AACD,OAzBD,CAyBE,OAAOiC,GAAP,EAAY;AACZ7F,QAAAA,GAAG,CAACG,KAAJ,CAAU,2BAAV,EAAuC0F,GAAvC;AACAZ,QAAAA,mBAAmB,WAAUC,eAAe,CAACY,KAAhB,EAAV,CAAnB;AACA,cAAMD,GAAN;AACD;AArDsB;AAsDxB;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACE/E,EAAAA,cAAc,CAAEoD,OAAF,EAAWH,OAAX,EAAoB;AAChC,QAAI,OAAOG,OAAP,KAAmB,UAAvB,EAAmC;AACjCH,MAAAA,OAAO,GAAGG,OAAV;AACAA,MAAAA,OAAO,GAAG,EAAV;AACD,KAJ+B,CAMhC;;;AACA,SAAKH,OAAL,GAAeA,OAAf;AAEA,WAAOjD,cAAc,CAAC,KAAKsB,OAAN,CAArB;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACE2D,EAAAA,MAAM,CAAER,UAAF,EAAc;AAClBA,IAAAA,UAAU,GAAGS,KAAK,CAACC,OAAN,CAAcV,UAAd,IAA4BA,UAA5B,GAAyC,CAACA,UAAD,CAAtD;AAEA,WAAOA,UAAU,CAACQ,MAAX,CAAmB9B,EAAD,IAAQ;AAC/B,aAAO5D,KAAK,CAACkB,OAAN,CAAc2E,OAAd,CAAsBjC,EAAtB,CAAP;AACD,KAFM,CAAP;AAGD;;AAEsB,OAAlB5C,MAAM,CAAC8E,WAAW,IAAK;AAC1B,WAAO,SAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACoB,SAAXC,WAAW,CAAEC,KAAF,EAAS;AACzB,WAAOC,OAAO,CAACD,KAAK,IAAIA,KAAK,CAACjF,eAAD,CAAf,CAAd;AACD;;AApMW;;AAuMdmF,MAAM,CAACC,OAAP,GAAiBjF,OAAjB","sourcesContent":["'use strict'\n\nconst debug = require('debug')\nconst log = Object.assign(debug('libp2p:circuit'), {\n  error: debug('libp2p:circuit:err')\n})\n\nconst errCode = require('err-code')\nconst mafmt = require('mafmt')\nconst { Multiaddr } = require('multiaddr')\nconst PeerId = require('peer-id')\nconst { CircuitRelay: CircuitPB } = require('./protocol')\nconst { codes } = require('../errors')\n\nconst toConnection = require('libp2p-utils/src/stream-to-ma-conn')\n\nconst { relay: multicodec } = require('./multicodec')\nconst createListener = require('./listener')\nconst { handleCanHop, handleHop, hop } = require('./circuit/hop')\nconst { handleStop } = require('./circuit/stop')\nconst StreamHandler = require('./circuit/stream-handler')\n\nconst transportSymbol = Symbol.for('@libp2p/js-libp2p-circuit/circuit')\n\n/**\n * @typedef {import('libp2p-interfaces/src/connection').Connection} Connection\n * @typedef {import('libp2p-interfaces/src/stream-muxer/types').MuxedStream} MuxedStream\n */\n\nclass Circuit {\n  /**\n   * Creates an instance of the Circuit Transport.\n   *\n   * @class\n   * @param {object} options\n   * @param {import('../')} options.libp2p\n   * @param {import('../upgrader')} options.upgrader\n   */\n  constructor ({ libp2p, upgrader }) {\n    this._dialer = libp2p.dialer\n    this._registrar = libp2p.registrar\n    this._connectionManager = libp2p.connectionManager\n    this._upgrader = upgrader\n    this._options = libp2p._config.relay\n    this._libp2p = libp2p\n    this.peerId = libp2p.peerId\n\n    this._registrar.handle(multicodec, this._onProtocol.bind(this))\n  }\n\n  /**\n   * @param {Object} props\n   * @param {Connection} props.connection\n   * @param {MuxedStream} props.stream\n   */\n  async _onProtocol ({ connection, stream }) {\n    /** @type {import('./circuit/stream-handler')} */\n    const streamHandler = new StreamHandler({ stream })\n    const request = await streamHandler.read()\n\n    if (!request) {\n      return\n    }\n\n    const circuit = this\n    let virtualConnection\n\n    switch (request.type) {\n      case CircuitPB.Type.CAN_HOP: {\n        log('received CAN_HOP request from %s', connection.remotePeer.toB58String())\n        await handleCanHop({ circuit, connection, streamHandler })\n        break\n      }\n      case CircuitPB.Type.HOP: {\n        log('received HOP request from %s', connection.remotePeer.toB58String())\n        virtualConnection = await handleHop({\n          connection,\n          request,\n          streamHandler,\n          circuit\n        })\n        break\n      }\n      case CircuitPB.Type.STOP: {\n        log('received STOP request from %s', connection.remotePeer.toB58String())\n        virtualConnection = await handleStop({\n          connection,\n          request,\n          streamHandler\n        })\n        break\n      }\n      default: {\n        log('Request of type %s not supported', request.type)\n      }\n    }\n\n    if (virtualConnection) {\n      // @ts-ignore dst peer will not be undefined\n      const remoteAddr = new Multiaddr(request.dstPeer.addrs[0])\n      // @ts-ignore src peer will not be undefined\n      const localAddr = new Multiaddr(request.srcPeer.addrs[0])\n      const maConn = toConnection({\n        stream: virtualConnection,\n        remoteAddr,\n        localAddr\n      })\n      const type = request.type === CircuitPB.Type.HOP ? 'relay' : 'inbound'\n      log('new %s connection %s', type, maConn.remoteAddr)\n\n      const conn = await this._upgrader.upgradeInbound(maConn)\n      log('%s connection %s upgraded', type, maConn.remoteAddr)\n      this.handler && this.handler(conn)\n    }\n  }\n\n  /**\n   * Dial a peer over a relay\n   *\n   * @param {Multiaddr} ma - the multiaddr of the peer to dial\n   * @param {Object} options - dial options\n   * @param {AbortSignal} [options.signal] - An optional abort signal\n   * @returns {Promise<Connection>} - the connection\n   */\n  async dial (ma, options) {\n    // Check the multiaddr to see if it contains a relay and a destination peer\n    const addrs = ma.toString().split('/p2p-circuit')\n    const relayAddr = new Multiaddr(addrs[0])\n    const destinationAddr = new Multiaddr(addrs[addrs.length - 1])\n    const relayId = relayAddr.getPeerId()\n    const destinationId = destinationAddr.getPeerId()\n\n    if (!relayId || !destinationId) {\n      const errMsg = 'Circuit relay dial failed as addresses did not have peer id'\n      log.error(errMsg)\n      throw errCode(new Error(errMsg), codes.ERR_RELAYED_DIAL)\n    }\n\n    const relayPeer = PeerId.createFromB58String(relayId)\n    const destinationPeer = PeerId.createFromB58String(destinationId)\n\n    let disconnectOnFailure = false\n    let relayConnection = this._connectionManager.get(relayPeer)\n    if (!relayConnection) {\n      relayConnection = await this._dialer.connectToPeer(relayAddr, options)\n      disconnectOnFailure = true\n    }\n\n    try {\n      const virtualConnection = await hop({\n        connection: relayConnection,\n        request: {\n          type: CircuitPB.Type.HOP,\n          srcPeer: {\n            id: this.peerId.toBytes(),\n            addrs: this._libp2p.multiaddrs.map(addr => addr.bytes)\n          },\n          dstPeer: {\n            id: destinationPeer.toBytes(),\n            addrs: [new Multiaddr(destinationAddr).bytes]\n          }\n        }\n      })\n\n      const localAddr = relayAddr.encapsulate(`/p2p-circuit/p2p/${this.peerId.toB58String()}`)\n      const maConn = toConnection({\n        stream: virtualConnection,\n        remoteAddr: ma,\n        localAddr\n      })\n      log('new outbound connection %s', maConn.remoteAddr)\n\n      return this._upgrader.upgradeOutbound(maConn)\n    } catch (err) {\n      log.error('Circuit relay dial failed', err)\n      disconnectOnFailure && await relayConnection.close()\n      throw err\n    }\n  }\n\n  /**\n   * Create a listener\n   *\n   * @param {any} options\n   * @param {Function} handler\n   * @returns {import('libp2p-interfaces/src/transport/types').Listener}\n   */\n  createListener (options, handler) {\n    if (typeof options === 'function') {\n      handler = options\n      options = {}\n    }\n\n    // Called on successful HOP and STOP requests\n    this.handler = handler\n\n    return createListener(this._libp2p)\n  }\n\n  /**\n   * Filter check for all Multiaddrs that this transport can dial on\n   *\n   * @param {Multiaddr[]} multiaddrs\n   * @returns {Multiaddr[]}\n   */\n  filter (multiaddrs) {\n    multiaddrs = Array.isArray(multiaddrs) ? multiaddrs : [multiaddrs]\n\n    return multiaddrs.filter((ma) => {\n      return mafmt.Circuit.matches(ma)\n    })\n  }\n\n  get [Symbol.toStringTag] () {\n    return 'Circuit'\n  }\n\n  /**\n   * Checks if the given value is a Transport instance.\n   *\n   * @param {any} other\n   * @returns {other is Transport}\n   */\n  static isTransport (other) {\n    return Boolean(other && other[transportSymbol])\n  }\n}\n\nmodule.exports = Circuit\n"]},"metadata":{},"sourceType":"script"}