{"ast":null,"code":"'use strict';\n\nconst mergeOptions = require('merge-options'); // @ts-ignore no types in multiaddr path\n\n\nconst {\n  dnsaddrResolver\n} = require('multiaddr/src/resolvers');\n\nconst Constants = require('./constants');\n\nconst {\n  AGENT_VERSION\n} = require('./identify/consts');\n\nconst RelayConstants = require('./circuit/constants');\n\nconst {\n  publicAddressesFirst\n} = require('libp2p-utils/src/address-sort');\n\nconst {\n  FaultTolerance\n} = require('./transport-manager');\n/**\n * @typedef {import('multiaddr').Multiaddr} Multiaddr\n * @typedef {import('.').Libp2pOptions} Libp2pOptions\n * @typedef {import('.').constructorOptions} constructorOptions\n */\n\n\nconst DefaultConfig = {\n  addresses: {\n    listen: [],\n    announce: [],\n    noAnnounce: [],\n    announceFilter: (\n    /** @type {Multiaddr[]} */\n    multiaddrs) => multiaddrs\n  },\n  connectionManager: {\n    minConnections: 25\n  },\n  transportManager: {\n    faultTolerance: FaultTolerance.FATAL_ALL\n  },\n  dialer: {\n    maxParallelDials: Constants.MAX_PARALLEL_DIALS,\n    maxDialsPerPeer: Constants.MAX_PER_PEER_DIALS,\n    dialTimeout: Constants.DIAL_TIMEOUT,\n    resolvers: {\n      dnsaddr: dnsaddrResolver\n    },\n    addressSorter: publicAddressesFirst\n  },\n  host: {\n    agentVersion: AGENT_VERSION\n  },\n  metrics: {\n    enabled: false\n  },\n  peerStore: {\n    persistence: false,\n    threshold: 5\n  },\n  peerRouting: {\n    refreshManager: {\n      enabled: true,\n      interval: 6e5,\n      bootDelay: 10e3\n    }\n  },\n  config: {\n    protocolPrefix: 'ipfs',\n    dht: {\n      enabled: false,\n      kBucketSize: 20,\n      randomWalk: {\n        enabled: false,\n        // disabled waiting for https://github.com/libp2p/js-libp2p-kad-dht/issues/86\n        queriesPerPeriod: 1,\n        interval: 300e3,\n        timeout: 10e3\n      }\n    },\n    nat: {\n      enabled: true,\n      ttl: 7200,\n      keepAlive: true,\n      gateway: null,\n      externalIp: null,\n      pmp: {\n        enabled: false\n      }\n    },\n    peerDiscovery: {\n      autoDial: true\n    },\n    pubsub: {\n      enabled: true\n    },\n    relay: {\n      enabled: true,\n      advertise: {\n        bootDelay: RelayConstants.ADVERTISE_BOOT_DELAY,\n        enabled: false,\n        ttl: RelayConstants.ADVERTISE_TTL\n      },\n      hop: {\n        enabled: false,\n        active: false\n      },\n      autoRelay: {\n        enabled: false,\n        maxListeners: 2\n      }\n    },\n    transport: {}\n  }\n};\n/**\n * @param {Libp2pOptions} opts\n * @returns {DefaultConfig & Libp2pOptions & constructorOptions}\n */\n\nmodule.exports.validate = opts => {\n  /** @type {DefaultConfig & Libp2pOptions & constructorOptions} */\n  const resultingOptions = mergeOptions(DefaultConfig, opts);\n  if (resultingOptions.modules.transport.length < 1) throw new Error(\"'options.modules.transport' must contain at least 1 transport\");\n  return resultingOptions;\n};","map":null,"metadata":{},"sourceType":"script"}