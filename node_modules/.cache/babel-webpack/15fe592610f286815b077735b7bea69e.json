{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst {\n  fromString: uint8ArrayFromString\n} = require('uint8arrays/from-string');\n\nconst multipartRequest = require('../lib/multipart-request');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nconst abortSignal = require('../lib/abort-signal');\n\nconst {\n  AbortController\n} = require('native-abort-controller');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/config').API<HTTPClientExtraOptions>} ConfigAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {ConfigAPI[\"replace\"]}\n   */\n  const replace = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(function* (config, options = {}) {\n      // allow aborting requests on body errors\n      const controller = new AbortController();\n      const signal = abortSignal(controller.signal, options.signal);\n      const res = yield api.post('config/replace', {\n        timeout: options.timeout,\n        signal,\n        searchParams: toUrlSearchParams(options),\n        ...(yield multipartRequest(uint8ArrayFromString(JSON.stringify(config)), controller, options.headers))\n      });\n      yield res.text();\n    });\n\n    return function replace(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return replace;\n});","map":{"version":3,"sources":["/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/ipfs-http-client/src/config/replace.js"],"names":["fromString","uint8ArrayFromString","require","multipartRequest","configure","toUrlSearchParams","abortSignal","AbortController","module","exports","api","replace","config","options","controller","signal","res","post","timeout","searchParams","JSON","stringify","headers","text"],"mappings":"AAAA;;;;AAEA,MAAM;AAAEA,EAAAA,UAAU,EAAEC;AAAd,IAAuCC,OAAO,CAAC,yBAAD,CAApD;;AACA,MAAMC,gBAAgB,GAAGD,OAAO,CAAC,0BAAD,CAAhC;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,6BAAD,CAAjC;;AACA,MAAMI,WAAW,GAAGJ,OAAO,CAAC,qBAAD,CAA3B;;AACA,MAAM;AAAEK,EAAAA;AAAF,IAAsBL,OAAO,CAAC,yBAAD,CAAnC;AAEA;AACA;AACA;AACA;;;AAEAM,MAAM,CAACC,OAAP,GAAiBL,SAAS,CAACM,GAAG,IAAI;AAChC;AACF;AACA;AACE,QAAMC,OAAO;AAAA,iCAAG,WAAOC,MAAP,EAAeC,OAAO,GAAG,EAAzB,EAAgC;AAC9C;AACA,YAAMC,UAAU,GAAG,IAAIP,eAAJ,EAAnB;AACA,YAAMQ,MAAM,GAAGT,WAAW,CAACQ,UAAU,CAACC,MAAZ,EAAoBF,OAAO,CAACE,MAA5B,CAA1B;AAEA,YAAMC,GAAG,SAASN,GAAG,CAACO,IAAJ,CAAS,gBAAT,EAA2B;AAC3CC,QAAAA,OAAO,EAAEL,OAAO,CAACK,OAD0B;AAE3CH,QAAAA,MAF2C;AAG3CI,QAAAA,YAAY,EAAEd,iBAAiB,CAACQ,OAAD,CAHY;AAI3C,kBACQV,gBAAgB,CAACF,oBAAoB,CAACmB,IAAI,CAACC,SAAL,CAAeT,MAAf,CAAD,CAArB,EAA+CE,UAA/C,EAA2DD,OAAO,CAACS,OAAnE,CADxB;AAJ2C,OAA3B,CAAlB;AASA,YAAMN,GAAG,CAACO,IAAJ,EAAN;AACD,KAfY;;AAAA,oBAAPZ,OAAO;AAAA;AAAA;AAAA,KAAb;;AAiBA,SAAOA,OAAP;AACD,CAtByB,CAA1B","sourcesContent":["'use strict'\n\nconst { fromString: uint8ArrayFromString } = require('uint8arrays/from-string')\nconst multipartRequest = require('../lib/multipart-request')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst abortSignal = require('../lib/abort-signal')\nconst { AbortController } = require('native-abort-controller')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/config').API<HTTPClientExtraOptions>} ConfigAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {ConfigAPI[\"replace\"]}\n   */\n  const replace = async (config, options = {}) => {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    const res = await api.post('config/replace', {\n      timeout: options.timeout,\n      signal,\n      searchParams: toUrlSearchParams(options),\n      ...(\n        await multipartRequest(uint8ArrayFromString(JSON.stringify(config)), controller, options.headers)\n      )\n    })\n\n    await res.text()\n  }\n\n  return replace\n})\n"]},"metadata":{},"sourceType":"script"}