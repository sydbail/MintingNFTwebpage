{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst dagPb = require('@ipld/dag-pb');\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst {\n  sha256\n} = require('multiformats/hashes/sha2');\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @param {Object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n */\n\n\nmodule.exports = ({\n  repo,\n  preload\n}) => {\n  /**\n   * @type {import('ipfs-core-types/src/object').API[\"put\"]}\n   */\n  function put(_x) {\n    return _put.apply(this, arguments);\n  }\n\n  function _put() {\n    _put = _asyncToGenerator(function* (obj, options = {}) {\n      const release = yield repo.gcLock.readLock();\n\n      try {\n        const buf = dagPb.encode(obj);\n        const hash = yield sha256.digest(buf);\n        const cid = CID.createV0(hash);\n        yield repo.blocks.put(cid, buf, {\n          signal: options.signal\n        });\n\n        if (options.preload !== false) {\n          preload(cid);\n        }\n\n        if (options.pin) {\n          yield repo.pins.pinRecursively(cid, {\n            signal: options.signal\n          });\n        }\n\n        return cid;\n      } finally {\n        release();\n      }\n    });\n    return _put.apply(this, arguments);\n  }\n\n  return withTimeoutOption(put);\n};","map":null,"metadata":{},"sourceType":"script"}