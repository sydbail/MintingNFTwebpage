{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.double = exports.float = void 0;\n\nconst DoubleNextArbitrary_1 = require(\"./DoubleNextArbitrary\");\n\nconst FloatNextArbitrary_1 = require(\"./FloatNextArbitrary\");\n\nconst integer_1 = require(\"../../arbitrary/integer\");\n\nconst tuple_1 = require(\"../../arbitrary/tuple\");\n\nfunction next(n) {\n  return integer_1.integer(0, (1 << n) - 1);\n}\n\nconst floatInternal = () => {\n  return next(24).map(v => v / (1 << 24));\n};\n\nfunction float(...args) {\n  if (typeof args[0] === 'object') {\n    if (args[0].next) {\n      return FloatNextArbitrary_1.floatNext(args[0]);\n    }\n\n    const min = args[0].min !== undefined ? args[0].min : 0;\n    const max = args[0].max !== undefined ? args[0].max : 1;\n    return floatInternal().map(v => min + v * (max - min)).filter(g => g !== max || g === min);\n  } else {\n    const a = args[0];\n    const b = args[1];\n    if (a === undefined) return floatInternal();\n    if (b === undefined) return floatInternal().map(v => v * a).filter(g => g !== a || g === 0);\n    return floatInternal().map(v => a + v * (b - a)).filter(g => g !== b || g === a);\n  }\n}\n\nexports.float = float;\nconst doubleFactor = Math.pow(2, 27);\nconst doubleDivisor = Math.pow(2, -53);\n\nconst doubleInternal = () => {\n  return tuple_1.tuple(next(26), next(27)).map(v => (v[0] * doubleFactor + v[1]) * doubleDivisor);\n};\n\nfunction double(...args) {\n  if (typeof args[0] === 'object') {\n    if (args[0].next) {\n      return DoubleNextArbitrary_1.doubleNext(args[0]);\n    }\n\n    const min = args[0].min !== undefined ? args[0].min : 0;\n    const max = args[0].max !== undefined ? args[0].max : 1;\n    return doubleInternal().map(v => min + v * (max - min)).filter(g => g !== max || g === min);\n  } else {\n    const a = args[0];\n    const b = args[1];\n    if (a === undefined) return doubleInternal();\n    if (b === undefined) return doubleInternal().map(v => v * a).filter(g => g !== a || g === 0);\n    return doubleInternal().map(v => a + v * (b - a)).filter(g => g !== b || g === a);\n  }\n}\n\nexports.double = double;","map":null,"metadata":{},"sourceType":"script"}