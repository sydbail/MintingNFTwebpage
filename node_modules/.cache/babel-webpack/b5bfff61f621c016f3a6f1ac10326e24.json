{"ast":null,"code":"'use strict';\n\nconst {\n  Record: PBRecord\n} = require('./record');\n\nconst utils = require('../utils');\n/**\n * @typedef {{ key: Uint8Array, value: Uint8Array, timeReceived: string }} ProtobufRecord\n */\n\n\nclass Record {\n  /**\n   * @param {Uint8Array} [key]\n   * @param {Uint8Array} [value]\n   * @param {Date} [timeReceived]\n   */\n  constructor(key, value, timeReceived) {\n    if (!(key instanceof Uint8Array)) {\n      throw new Error('key must be a Uint8Array');\n    }\n\n    if (!(value instanceof Uint8Array)) {\n      throw new Error('value must be a Uint8Array');\n    }\n\n    this.key = key;\n    this.value = value;\n    this.timeReceived = timeReceived;\n  }\n\n  serialize() {\n    return PBRecord.encode(this.prepareSerialize()).finish();\n  }\n  /**\n   * Return the object format ready to be given to the protobuf library.\n   */\n\n\n  prepareSerialize() {\n    return {\n      key: this.key,\n      value: this.value,\n      timeReceived: this.timeReceived && utils.toRFC3339(this.timeReceived)\n    };\n  }\n  /**\n   * Decode a protobuf encoded record.\n   *\n   * @param {Uint8Array} raw\n   */\n\n\n  static deserialize(raw) {\n    const message = PBRecord.decode(raw);\n    return Record.fromDeserialized(PBRecord.toObject(message, {\n      defaults: false,\n      arrays: true,\n      longs: Number,\n      objects: false\n    }));\n  }\n  /**\n   * Create a record from the raw object returned from the protobuf library.\n   *\n   * @param {{ [k: string]: any }} obj\n   */\n\n\n  static fromDeserialized(obj) {\n    let recvtime;\n\n    if (obj.timeReceived) {\n      recvtime = utils.parseRFC3339(obj.timeReceived);\n    }\n\n    const rec = new Record(obj.key, obj.value, recvtime);\n    return rec;\n  }\n\n}\n\nmodule.exports = Record;","map":null,"metadata":{},"sourceType":"script"}