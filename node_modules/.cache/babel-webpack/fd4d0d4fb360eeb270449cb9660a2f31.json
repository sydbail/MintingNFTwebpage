{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.bigInt = void 0;\n\nconst Converters_1 = require(\"../check/arbitrary/definition/Converters\");\n\nconst BigIntArbitrary_1 = require(\"./_internals/BigIntArbitrary\");\n\nfunction buildCompleteBigIntConstraints(constraints) {\n  const DefaultPow = 256;\n  const DefaultMin = BigInt(-1) << BigInt(DefaultPow - 1);\n  const DefaultMax = (BigInt(1) << BigInt(DefaultPow - 1)) - BigInt(1);\n  const min = constraints.min;\n  const max = constraints.max;\n  return {\n    min: min !== undefined ? min : DefaultMin - (max !== undefined && max < BigInt(0) ? max * max : BigInt(0)),\n    max: max !== undefined ? max : DefaultMax + (min !== undefined && min > BigInt(0) ? min * min : BigInt(0))\n  };\n}\n\nfunction extractBigIntConstraints(args) {\n  if (args[0] === undefined) {\n    return {};\n  }\n\n  if (args[1] === undefined) {\n    const constraints = args[0];\n    return constraints;\n  }\n\n  return {\n    min: args[0],\n    max: args[1]\n  };\n}\n\nfunction bigInt(...args) {\n  const constraints = buildCompleteBigIntConstraints(extractBigIntConstraints(args));\n\n  if (constraints.min > constraints.max) {\n    throw new Error('fc.bigInt expects max to be greater than or equal to min');\n  }\n\n  const arb = new BigIntArbitrary_1.BigIntArbitrary(constraints.min, constraints.max);\n  return Converters_1.convertFromNextWithShrunkOnce(arb, arb.defaultTarget());\n}\n\nexports.bigInt = bigInt;","map":null,"metadata":{},"sourceType":"script"}