{"ast":null,"code":"'use strict';\n/* eslint-env browser */\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst {\n  Multiaddr\n} = require('multiaddr');\n\nconst {\n  isBrowser,\n  isWebWorker,\n  isNode\n} = require('ipfs-utils/src/env');\n\nconst {\n  default: parseDuration\n} = require('parse-duration');\n\nconst log = require('debug')('ipfs-http-client:lib:error-handler');\n\nconst HTTP = require('ipfs-utils/src/http');\n\nconst merge = require('merge-options').bind({\n  ignoreUndefined: true\n});\n\nconst toUrlString = require('ipfs-core-utils/src/to-url-string');\n\nconst http = require('http');\n\nconst https = require('https');\n\nconst DEFAULT_PROTOCOL = isBrowser || isWebWorker ? location.protocol : 'http';\nconst DEFAULT_HOST = isBrowser || isWebWorker ? location.hostname : 'localhost';\nconst DEFAULT_PORT = isBrowser || isWebWorker ? location.port : '5001';\n/**\n * @typedef {import('ipfs-utils/src/types').HTTPOptions} HTTPOptions\n * @typedef {import('../types').Options} Options\n */\n\n/**\n * @param {Options|URL|Multiaddr|string} [options]\n * @returns {Options}\n */\n\nconst normalizeOptions = (options = {}) => {\n  let url;\n  /** @type {Options} */\n\n  let opts = {};\n  let agent;\n\n  if (typeof options === 'string' || Multiaddr.isMultiaddr(options)) {\n    url = new URL(toUrlString(options));\n  } else if (options instanceof URL) {\n    url = options;\n  } else if (typeof options.url === 'string' || Multiaddr.isMultiaddr(options.url)) {\n    url = new URL(toUrlString(options.url));\n    opts = options;\n  } else if (options.url instanceof URL) {\n    url = options.url;\n    opts = options;\n  } else {\n    opts = options || {};\n    const protocol = (opts.protocol || DEFAULT_PROTOCOL).replace(':', '');\n    const host = (opts.host || DEFAULT_HOST).split(':')[0];\n    const port = opts.port || DEFAULT_PORT;\n    url = new URL(`${protocol}://${host}:${port}`);\n  }\n\n  if (opts.apiPath) {\n    url.pathname = opts.apiPath;\n  } else if (url.pathname === '/' || url.pathname === undefined) {\n    url.pathname = 'api/v0';\n  }\n\n  if (isNode) {\n    const Agent = url.protocol.startsWith('https') ? https.Agent : http.Agent;\n    agent = opts.agent || new Agent({\n      keepAlive: true,\n      // Similar to browsers which limit connections to six per host\n      maxSockets: 6\n    });\n  }\n\n  return { ...opts,\n    host: url.host,\n    protocol: url.protocol.replace(':', ''),\n    port: Number(url.port),\n    apiPath: url.pathname,\n    url,\n    agent\n  };\n};\n/**\n * @param {Response} response\n */\n\n\nconst errorHandler = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (response) {\n    let msg;\n\n    try {\n      if ((response.headers.get('Content-Type') || '').startsWith('application/json')) {\n        const data = yield response.json();\n        log(data);\n        msg = data.Message || data.message;\n      } else {\n        msg = yield response.text();\n      }\n    } catch (err) {\n      log('Failed to parse error response', err); // Failed to extract/parse error message from response\n\n      msg = err.message;\n    }\n    /** @type {Error} */\n\n\n    let error = new HTTP.HTTPError(response); // This is what go-ipfs returns where there's a timeout\n\n    if (msg && msg.includes('context deadline exceeded')) {\n      error = new HTTP.TimeoutError('Request timed out');\n    } // This also gets returned\n\n\n    if (msg && msg.includes('request timed out')) {\n      error = new HTTP.TimeoutError('Request timed out');\n    } // If we managed to extract a message from the response, use it\n\n\n    if (msg) {\n      error.message = msg;\n    }\n\n    throw error;\n  });\n\n  return function errorHandler(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nconst KEBAB_REGEX = /[A-Z\\u00C0-\\u00D6\\u00D8-\\u00DE]/g;\n/**\n * @param {string} str\n */\n\nconst kebabCase = str => {\n  return str.replace(KEBAB_REGEX, function (match) {\n    return '-' + match.toLowerCase();\n  });\n};\n/**\n * @param {string | number} value\n */\n\n\nconst parseTimeout = value => {\n  return typeof value === 'string' ? parseDuration(value) : value;\n};\n\nclass Client extends HTTP {\n  /**\n   * @param {Options|URL|Multiaddr|string} [options]\n   */\n  constructor(options = {}) {\n    const opts = normalizeOptions(options);\n    super({\n      timeout: parseTimeout(opts.timeout || 0) || 60000 * 20,\n      headers: opts.headers,\n      base: `${opts.url}`,\n      handleError: errorHandler,\n      transformSearchParams: search => {\n        const out = new URLSearchParams(); // @ts-ignore https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams\n\n        for (const [key, value] of search) {\n          if (value !== 'undefined' && value !== 'null' && key !== 'signal') {\n            out.append(kebabCase(key), value);\n          } // @ts-ignore server timeouts are strings\n\n\n          if (key === 'timeout' && !isNaN(value)) {\n            out.append(kebabCase(key), value);\n          }\n        }\n\n        return out;\n      },\n      // @ts-ignore this can be a https agent or a http agent\n      agent: opts.agent\n    }); // @ts-ignore - cannot delete no-optional fields\n\n    delete this.get; // @ts-ignore - cannot delete no-optional fields\n\n    delete this.put; // @ts-ignore - cannot delete no-optional fields\n\n    delete this.delete; // @ts-ignore - cannot delete no-optional fields\n\n    delete this.options;\n    const fetch = this.fetch;\n    /**\n     * @param {string | Request} resource\n     * @param {HTTPOptions} options\n     */\n\n    this.fetch = (resource, options = {}) => {\n      if (typeof resource === 'string' && !resource.startsWith('/')) {\n        resource = `${opts.url}/${resource}`;\n      }\n\n      return fetch.call(this, resource, merge(options, {\n        method: 'POST'\n      }));\n    };\n  }\n\n}\n\nClient.errorHandler = errorHandler;\nmodule.exports = Client;","map":{"version":3,"sources":["/Users/sydneybailey/Internship/contract-testing/node_modules/ipfs-http-client/src/lib/core.js"],"names":["Multiaddr","require","isBrowser","isWebWorker","isNode","default","parseDuration","log","HTTP","merge","bind","ignoreUndefined","toUrlString","http","https","DEFAULT_PROTOCOL","location","protocol","DEFAULT_HOST","hostname","DEFAULT_PORT","port","normalizeOptions","options","url","opts","agent","isMultiaddr","URL","replace","host","split","apiPath","pathname","undefined","Agent","startsWith","keepAlive","maxSockets","Number","errorHandler","response","msg","headers","get","data","json","Message","message","text","err","error","HTTPError","includes","TimeoutError","KEBAB_REGEX","kebabCase","str","match","toLowerCase","parseTimeout","value","Client","constructor","timeout","base","handleError","transformSearchParams","search","out","URLSearchParams","key","append","isNaN","put","delete","fetch","resource","call","method","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n/* eslint-env browser */\nconst { Multiaddr } = require('multiaddr')\nconst { isBrowser, isWebWorker, isNode } = require('ipfs-utils/src/env')\nconst { default: parseDuration } = require('parse-duration')\nconst log = require('debug')('ipfs-http-client:lib:error-handler')\nconst HTTP = require('ipfs-utils/src/http')\nconst merge = require('merge-options').bind({ ignoreUndefined: true })\nconst toUrlString = require('ipfs-core-utils/src/to-url-string')\nconst http = require('http')\nconst https = require('https')\n\nconst DEFAULT_PROTOCOL = isBrowser || isWebWorker ? location.protocol : 'http'\nconst DEFAULT_HOST = isBrowser || isWebWorker ? location.hostname : 'localhost'\nconst DEFAULT_PORT = isBrowser || isWebWorker ? location.port : '5001'\n\n/**\n * @typedef {import('ipfs-utils/src/types').HTTPOptions} HTTPOptions\n * @typedef {import('../types').Options} Options\n */\n\n/**\n * @param {Options|URL|Multiaddr|string} [options]\n * @returns {Options}\n */\nconst normalizeOptions = (options = {}) => {\n  let url\n  /** @type {Options} */\n  let opts = {}\n  let agent\n\n  if (typeof options === 'string' || Multiaddr.isMultiaddr(options)) {\n    url = new URL(toUrlString(options))\n  } else if (options instanceof URL) {\n    url = options\n  } else if (typeof options.url === 'string' || Multiaddr.isMultiaddr(options.url)) {\n    url = new URL(toUrlString(options.url))\n    opts = options\n  } else if (options.url instanceof URL) {\n    url = options.url\n    opts = options\n  } else {\n    opts = options || {}\n\n    const protocol = (opts.protocol || DEFAULT_PROTOCOL).replace(':', '')\n    const host = (opts.host || DEFAULT_HOST).split(':')[0]\n    const port = (opts.port || DEFAULT_PORT)\n\n    url = new URL(`${protocol}://${host}:${port}`)\n  }\n\n  if (opts.apiPath) {\n    url.pathname = opts.apiPath\n  } else if (url.pathname === '/' || url.pathname === undefined) {\n    url.pathname = 'api/v0'\n  }\n\n  if (isNode) {\n    const Agent = url.protocol.startsWith('https') ? https.Agent : http.Agent\n\n    agent = opts.agent || new Agent({\n      keepAlive: true,\n      // Similar to browsers which limit connections to six per host\n      maxSockets: 6\n    })\n  }\n\n  return {\n    ...opts,\n    host: url.host,\n    protocol: url.protocol.replace(':', ''),\n    port: Number(url.port),\n    apiPath: url.pathname,\n    url,\n    agent\n  }\n}\n\n/**\n * @param {Response} response\n */\nconst errorHandler = async (response) => {\n  let msg\n\n  try {\n    if ((response.headers.get('Content-Type') || '').startsWith('application/json')) {\n      const data = await response.json()\n      log(data)\n      msg = data.Message || data.message\n    } else {\n      msg = await response.text()\n    }\n  } catch (err) {\n    log('Failed to parse error response', err)\n    // Failed to extract/parse error message from response\n    msg = err.message\n  }\n\n  /** @type {Error} */\n  let error = new HTTP.HTTPError(response)\n\n  // This is what go-ipfs returns where there's a timeout\n  if (msg && msg.includes('context deadline exceeded')) {\n    error = new HTTP.TimeoutError('Request timed out')\n  }\n\n  // This also gets returned\n  if (msg && msg.includes('request timed out')) {\n    error = new HTTP.TimeoutError('Request timed out')\n  }\n\n  // If we managed to extract a message from the response, use it\n  if (msg) {\n    error.message = msg\n  }\n\n  throw error\n}\n\nconst KEBAB_REGEX = /[A-Z\\u00C0-\\u00D6\\u00D8-\\u00DE]/g\n\n/**\n * @param {string} str\n */\nconst kebabCase = (str) => {\n  return str.replace(KEBAB_REGEX, function (match) {\n    return '-' + match.toLowerCase()\n  })\n}\n\n/**\n * @param {string | number} value\n */\nconst parseTimeout = (value) => {\n  return typeof value === 'string' ? parseDuration(value) : value\n}\n\nclass Client extends HTTP {\n  /**\n   * @param {Options|URL|Multiaddr|string} [options]\n   */\n  constructor (options = {}) {\n    const opts = normalizeOptions(options)\n\n    super({\n      timeout: parseTimeout(opts.timeout || 0) || 60000 * 20,\n      headers: opts.headers,\n      base: `${opts.url}`,\n      handleError: errorHandler,\n      transformSearchParams: (search) => {\n        const out = new URLSearchParams()\n\n        // @ts-ignore https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams\n        for (const [key, value] of search) {\n          if (\n            value !== 'undefined' &&\n            value !== 'null' &&\n            key !== 'signal'\n          ) {\n            out.append(kebabCase(key), value)\n          }\n\n          // @ts-ignore server timeouts are strings\n          if (key === 'timeout' && !isNaN(value)) {\n            out.append(kebabCase(key), value)\n          }\n        }\n\n        return out\n      },\n      // @ts-ignore this can be a https agent or a http agent\n      agent: opts.agent\n    })\n\n    // @ts-ignore - cannot delete no-optional fields\n    delete this.get\n    // @ts-ignore - cannot delete no-optional fields\n    delete this.put\n    // @ts-ignore - cannot delete no-optional fields\n    delete this.delete\n    // @ts-ignore - cannot delete no-optional fields\n    delete this.options\n\n    const fetch = this.fetch\n\n    /**\n     * @param {string | Request} resource\n     * @param {HTTPOptions} options\n     */\n    this.fetch = (resource, options = {}) => {\n      if (typeof resource === 'string' && !resource.startsWith('/')) {\n        resource = `${opts.url}/${resource}`\n      }\n\n      return fetch.call(this, resource, merge(options, {\n        method: 'POST'\n      }))\n    }\n  }\n}\n\nClient.errorHandler = errorHandler\n\nmodule.exports = Client\n"]},"metadata":{},"sourceType":"script"}