{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst Client = require('../../lib/core');\n\nconst toUrlSearchParams = require('../../lib/to-url-search-params');\n/**\n * @typedef {import('../../types').Options} Options\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n * @typedef {import('ipfs-core-types/src/pin/remote/service').Credentials} Credentials\n * @typedef {import('ipfs-core-types/src/pin/remote/service').RemotePinService} RemotePinService\n * @typedef {import('ipfs-core-types/src/pin/remote/service').RemotePinServiceWithStat} RemotePinServiceWithStat\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin/remote/service').API<HTTPClientExtraOptions>} RemotePiningServiceAPI\n * @typedef {import('ipfs-core-types/src/pin/remote/service').Stat} Stat\n */\n\n\nclass Service {\n  /**\n   * @param {Options} options\n   */\n  constructor(options) {\n    this.client = new Client(options);\n  }\n  /**\n   * @param {URL} url\n   */\n\n\n  static encodeEndpoint(url) {\n    const href = String(url);\n\n    if (href === 'undefined') {\n      throw Error('endpoint is required');\n    } // Workaround trailing `/` issue in go-ipfs\n    // @see https://github.com/ipfs/go-ipfs/issues/7826\n\n\n    return href[href.length - 1] === '/' ? href.slice(0, -1) : href;\n  }\n  /**\n   * @param {any} json\n   * @returns {RemotePinServiceWithStat}\n   */\n\n\n  static decodeRemoteService(json) {\n    return {\n      service: json.Service,\n      endpoint: new URL(json.ApiEndpoint),\n      ...(json.Stat && {\n        stat: Service.decodeStat(json.Stat)\n      })\n    };\n  }\n  /**\n   * @param {any} json\n   * @returns {import('ipfs-core-types/src/pin/remote/service').Stat}\n   */\n\n\n  static decodeStat(json) {\n    switch (json.Status) {\n      case 'valid':\n        {\n          const {\n            Pinning,\n            Pinned,\n            Queued,\n            Failed\n          } = json.PinCount;\n          return {\n            status: 'valid',\n            pinCount: {\n              queued: Queued,\n              pinning: Pinning,\n              pinned: Pinned,\n              failed: Failed\n            }\n          };\n        }\n\n      case 'invalid':\n        {\n          return {\n            status: 'invalid'\n          };\n        }\n\n      default:\n        {\n          return {\n            status: json.Status\n          };\n        }\n    }\n  }\n\n}\n/**\n * @type {RemotePiningServiceAPI[\"add\"]}\n */\n\n\nService.prototype.add = /*#__PURE__*/function () {\n  var _add = _asyncToGenerator(function* (name, options) {\n    const {\n      endpoint,\n      key,\n      headers,\n      timeout,\n      signal\n    } = options;\n    yield this.client.post('pin/remote/service/add', {\n      timeout,\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: [name, Service.encodeEndpoint(endpoint), key]\n      }),\n      headers\n    });\n  });\n\n  function add(_x, _x2) {\n    return _add.apply(this, arguments);\n  }\n\n  return add;\n}();\n/**\n * @type {RemotePiningServiceAPI[\"rm\"]}\n */\n\n\nService.prototype.rm = /*#__PURE__*/function () {\n  var _rm = _asyncToGenerator(function* (name, options = {}) {\n    yield this.client.post('pin/remote/service/rm', {\n      timeout: options.timeout,\n      signal: options.signal,\n      headers: options.headers,\n      searchParams: toUrlSearchParams({\n        arg: name\n      })\n    });\n  });\n\n  function rm(_x3) {\n    return _rm.apply(this, arguments);\n  }\n\n  return rm;\n}();\n/**\n * @type {RemotePiningServiceAPI[\"ls\"]}\n */\n\n\nService.prototype.ls = /*#__PURE__*/function () {\n  var _ls = _asyncToGenerator(function* (options = {}) {\n    // @ts-ignore cannot derive option type from typedef\n    const {\n      stat,\n      headers,\n      timeout,\n      signal\n    } = options;\n    const response = yield this.client.post('pin/remote/service/ls', {\n      timeout,\n      signal,\n      headers,\n      searchParams: stat === true ? toUrlSearchParams({\n        stat\n      }) : undefined\n    });\n    /** @type {{RemoteServices: Object[]}} */\n\n    const {\n      RemoteServices\n    } = yield response.json();\n    return RemoteServices.map(Service.decodeRemoteService);\n  });\n\n  function ls() {\n    return _ls.apply(this, arguments);\n  }\n\n  return ls;\n}();\n\nmodule.exports = Service;","map":null,"metadata":{},"sourceType":"script"}