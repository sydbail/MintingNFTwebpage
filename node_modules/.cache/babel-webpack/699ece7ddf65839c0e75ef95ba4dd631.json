{"ast":null,"code":"'use strict'; // @ts-ignore\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst debounce = require('just-debounce-it');\n\nconst Message = require('../types/message');\n\nconst logger = require('../utils').logger;\n\nconst {\n  wantlistSendDebounceMs\n} = require('../constants');\n/**\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('multiformats').CID} CID\n * @typedef {import('../network')} Network\n */\n\n\nmodule.exports = class MsgQueue {\n  /**\n   * @param {PeerId} selfPeerId\n   * @param {PeerId} otherPeerId\n   * @param {Network} network\n   */\n  constructor(selfPeerId, otherPeerId, network) {\n    this.peerId = otherPeerId;\n    this.network = network;\n    this.refcnt = 1;\n    /**\n     * @private\n     * @type {{cid:CID, priority:number, cancel?:boolean}[]}\n     */\n\n    this._entries = [];\n    /** @private */\n\n    this._log = logger(selfPeerId, 'msgqueue');\n    this.sendEntries = debounce(this._sendEntries.bind(this), wantlistSendDebounceMs);\n  }\n  /**\n   * @param {Message} msg\n   */\n\n\n  addMessage(msg) {\n    if (msg.empty) {\n      return;\n    }\n\n    this.send(msg);\n  }\n  /**\n   * @param {{cid:CID, priority:number}[]} entries\n   */\n\n\n  addEntries(entries) {\n    this._entries = this._entries.concat(entries);\n    this.sendEntries();\n  }\n  /**\n   * @private\n   */\n\n\n  _sendEntries() {\n    if (!this._entries.length) {\n      return;\n    }\n\n    const msg = new Message(false);\n\n    this._entries.forEach(entry => {\n      if (entry.cancel) {\n        msg.cancel(entry.cid);\n      } else {\n        msg.addEntry(entry.cid, entry.priority);\n      }\n    });\n\n    this._entries = [];\n    this.addMessage(msg);\n  }\n  /**\n   * @param {Message} msg\n   */\n\n\n  send(msg) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        yield _this.network.connectTo(_this.peerId);\n      } catch (err) {\n        _this._log.error('cant connect to peer %s: %s', _this.peerId.toB58String(), err.message);\n\n        return;\n      }\n\n      _this._log('sending message to peer %s', _this.peerId.toB58String()); // Note: Don't wait for sendMessage() to complete\n\n\n      _this.network.sendMessage(_this.peerId, msg).catch(err => {\n        _this._log.error('send error: %s', err.message);\n      });\n    })();\n  }\n\n};","map":null,"metadata":{},"sourceType":"script"}