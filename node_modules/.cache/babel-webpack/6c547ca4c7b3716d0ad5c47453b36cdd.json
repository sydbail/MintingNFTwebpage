{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nvar _wrapAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\").default;\n\nvar _awaitAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nvar _asyncGeneratorDelegate = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncGeneratorDelegate\").default;\n\nconst Adapter = require('./adapter');\n\nconst {\n  base32\n} = require('multiformats/bases/base32');\n\nconst raw = require('multiformats/codecs/raw');\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst Digest = require('multiformats/hashes/digest');\n\nconst Errors = require('./errors');\n/**\n * @typedef {import('./types').Pair} Pair\n * @typedef {import('./types').Blockstore} Blockstore\n * @typedef {import('interface-store').Options} Options\n */\n\n/**\n * @class MemoryBlockstore\n * @implements {Blockstore}\n */\n\n\nclass MemoryBlockstore extends Adapter {\n  constructor() {\n    super();\n    /** @type {Record<string, Uint8Array>} */\n\n    this.data = {};\n  }\n\n  open() {\n    return Promise.resolve();\n  }\n\n  close() {\n    return Promise.resolve();\n  }\n  /**\n   * @param {CID} key\n   * @param {Uint8Array} val\n   */\n\n\n  put(key, val) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      // eslint-disable-line require-await\n      _this3.data[base32.encode(key.multihash.bytes)] = val;\n    })();\n  }\n  /**\n   * @param {CID} key\n   */\n\n\n  get(key) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      const exists = yield _this4.has(key);\n      if (!exists) throw Errors.notFoundError();\n      return _this4.data[base32.encode(key.multihash.bytes)];\n    })();\n  }\n  /**\n   * @param {CID} key\n   */\n\n\n  has(key) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      // eslint-disable-line require-await\n      return _this5.data[base32.encode(key.multihash.bytes)] !== undefined;\n    })();\n  }\n  /**\n   * @param {CID} key\n   */\n\n\n  delete(key) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      // eslint-disable-line require-await\n      delete _this6.data[base32.encode(key.multihash.bytes)];\n    })();\n  }\n\n  _all() {\n    var _this = this;\n\n    return _wrapAsyncGenerator(function* () {\n      yield* _asyncGeneratorDelegate(_asyncIterator(Object.entries(_this.data).map(([key, value]) => ({\n        key: CID.createV1(raw.code, Digest.decode(base32.decode(key))),\n        value\n      }))), _awaitAsyncGenerator);\n    })();\n  }\n\n  _allKeys() {\n    var _this2 = this;\n\n    return _wrapAsyncGenerator(function* () {\n      yield* _asyncGeneratorDelegate(_asyncIterator(Object.entries(_this2.data).map(([key]) => CID.createV1(raw.code, Digest.decode(base32.decode(key))))), _awaitAsyncGenerator);\n    })();\n  }\n\n}\n\nmodule.exports = MemoryBlockstore;","map":{"version":3,"sources":["/Users/sydneybailey/Internship/contract-testing/node_modules/interface-blockstore/src/memory.js"],"names":["Adapter","require","base32","raw","CID","Digest","Errors","MemoryBlockstore","constructor","data","open","Promise","resolve","close","put","key","val","encode","multihash","bytes","get","exists","has","notFoundError","undefined","delete","_all","Object","entries","map","value","createV1","code","decode","_allKeys","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst Adapter = require('./adapter')\nconst { base32 } = require('multiformats/bases/base32')\nconst raw = require('multiformats/codecs/raw')\nconst { CID } = require('multiformats/cid')\nconst Digest = require('multiformats/hashes/digest')\nconst Errors = require('./errors')\n\n/**\n * @typedef {import('./types').Pair} Pair\n * @typedef {import('./types').Blockstore} Blockstore\n * @typedef {import('interface-store').Options} Options\n */\n\n/**\n * @class MemoryBlockstore\n * @implements {Blockstore}\n */\nclass MemoryBlockstore extends Adapter {\n  constructor () {\n    super()\n\n    /** @type {Record<string, Uint8Array>} */\n    this.data = {}\n  }\n\n  open () {\n    return Promise.resolve()\n  }\n\n  close () {\n    return Promise.resolve()\n  }\n\n  /**\n   * @param {CID} key\n   * @param {Uint8Array} val\n   */\n  async put (key, val) { // eslint-disable-line require-await\n    this.data[base32.encode(key.multihash.bytes)] = val\n  }\n\n  /**\n   * @param {CID} key\n   */\n  async get (key) {\n    const exists = await this.has(key)\n    if (!exists) throw Errors.notFoundError()\n    return this.data[base32.encode(key.multihash.bytes)]\n  }\n\n  /**\n   * @param {CID} key\n   */\n  async has (key) { // eslint-disable-line require-await\n    return this.data[base32.encode(key.multihash.bytes)] !== undefined\n  }\n\n  /**\n   * @param {CID} key\n   */\n  async delete (key) { // eslint-disable-line require-await\n    delete this.data[base32.encode(key.multihash.bytes)]\n  }\n\n  async * _all () {\n    yield * Object.entries(this.data)\n      .map(([key, value]) => ({ key: CID.createV1(raw.code, Digest.decode(base32.decode(key))), value }))\n  }\n\n  async * _allKeys () {\n    yield * Object.entries(this.data)\n      .map(([key]) => CID.createV1(raw.code, Digest.decode(base32.decode(key))))\n  }\n}\n\nmodule.exports = MemoryBlockstore\n"]},"metadata":{},"sourceType":"script"}