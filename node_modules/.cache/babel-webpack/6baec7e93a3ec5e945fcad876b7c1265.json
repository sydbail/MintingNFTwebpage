{"ast":null,"code":"'use strict';\n\nconst PeerId = require('peer-id');\n\nconst {\n  Multiaddr\n} = require('multiaddr');\n\nconst errCode = require('err-code');\n\nconst {\n  codes\n} = require('./errors');\n/**\n * Converts the given `peer` to a `Peer` object.\n * If a multiaddr is received, the addressBook is updated.\n *\n * @param {PeerId|Multiaddr|string} peer\n * @returns {{ id: PeerId, multiaddrs: Multiaddr[]|undefined }}\n */\n\n\nfunction getPeer(peer) {\n  if (typeof peer === 'string') {\n    peer = new Multiaddr(peer);\n  }\n\n  let addr;\n\n  if (Multiaddr.isMultiaddr(peer)) {\n    addr = peer;\n    const idStr = peer.getPeerId();\n\n    if (!idStr) {\n      throw errCode(new Error(`${peer} does not have a valid peer type`), codes.ERR_INVALID_MULTIADDR);\n    }\n\n    try {\n      peer = PeerId.createFromB58String(idStr);\n    } catch (err) {\n      throw errCode(new Error(`${peer} is not a valid peer type`), codes.ERR_INVALID_MULTIADDR);\n    }\n  }\n\n  return {\n    id: peer,\n    multiaddrs: addr ? [addr] : undefined\n  };\n}\n\nmodule.exports = getPeer;","map":null,"metadata":{},"sourceType":"script"}