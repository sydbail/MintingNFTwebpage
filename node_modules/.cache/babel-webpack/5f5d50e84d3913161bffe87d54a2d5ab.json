{"ast":null,"code":"'use strict';\n\nvar _wrapAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\").default;\n\nvar _awaitAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nvar _asyncGeneratorDelegate = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncGeneratorDelegate\").default;\n\nconst tempdir = require('ipfs-utils/src/temp-dir');\n\nconst all = require('it-all');\n/**\n * Collect all values from the iterable and sort them using\n * the passed sorter function\n *\n * @template T\n * @param {AsyncIterable<T> | Iterable<T>} iterable\n * @param {(a: T, b: T) => -1 | 0 | 1} sorter\n * @returns {AsyncIterable<T>}\n */\n\n\nconst sortAll = (iterable, sorter) => {\n  return _wrapAsyncGenerator(function* () {\n    const values = yield _awaitAsyncGenerator(all(iterable));\n    yield* _asyncGeneratorDelegate(_asyncIterator(values.sort(sorter)), _awaitAsyncGenerator);\n  })();\n};\n/**\n * @param {string} s\n * @param {string} r\n */\n\n\nconst replaceStartWith = (s, r) => {\n  const matcher = new RegExp('^' + r);\n  return s.replace(matcher, '');\n};\n\nmodule.exports = {\n  sortAll,\n  tmpdir: tempdir,\n  replaceStartWith\n};","map":null,"metadata":{},"sourceType":"script"}