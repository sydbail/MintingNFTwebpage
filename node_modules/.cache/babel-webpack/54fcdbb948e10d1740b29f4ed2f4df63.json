{"ast":null,"code":"var _awaitAsyncGenerator = require(\"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\").default;\n\nvar _wrapAsyncGenerator = require(\"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nconst {\n  Buffer\n} = require('buffer');\n\nconst BufferList = require('bl/BufferList');\n\nconst {\n  S_IFMT,\n  S_IFBLK,\n  S_IFCHR,\n  S_IFDIR,\n  S_IFIFO,\n  S_IFLNK\n} = require('iso-constants');\n\nconst concat = require('it-concat');\n\nconst Headers = require('./pack-headers');\n\nconst DMODE = parseInt('755', 8);\nconst FMODE = parseInt('644', 8);\nconst END_OF_TAR = Buffer.alloc(1024);\n\nfunction modeToType(mode) {\n  switch (mode & S_IFMT) {\n    case S_IFBLK:\n      return 'block-device';\n\n    case S_IFCHR:\n      return 'character-device';\n\n    case S_IFDIR:\n      return 'directory';\n\n    case S_IFIFO:\n      return 'fifo';\n\n    case S_IFLNK:\n      return 'symlink';\n  }\n\n  return 'file';\n}\n\nfunction getPadding(size) {\n  size &= 511;\n  if (size) return new BufferList(END_OF_TAR.slice(0, 512 - size));\n}\n\nfunction encode(header) {\n  if (!header.pax) {\n    const encoded = Headers.encode(header);\n    if (encoded) return encoded;\n  }\n\n  return encodePax(header);\n}\n\nfunction encodePax(header) {\n  const paxHeader = Headers.encodePax({\n    name: header.name,\n    linkname: header.linkname,\n    pax: header.pax\n  });\n  const newHeader = {\n    name: 'PaxHeader',\n    mode: header.mode,\n    uid: header.uid,\n    gid: header.gid,\n    size: paxHeader.length,\n    mtime: header.mtime,\n    type: 'pax-header',\n    linkname: header.linkname && 'PaxHeader',\n    uname: header.uname,\n    gname: header.gname,\n    devmajor: header.devmajor,\n    devminor: header.devminor\n  };\n  return new BufferList([Headers.encode(newHeader), paxHeader, getPadding(paxHeader.length), Headers.encode({ ...newHeader,\n    size: header.size,\n    type: header.type\n  })]);\n}\n\nmodule.exports = () => /*#__PURE__*/function () {\n  var _ref = _wrapAsyncGenerator(function* (source) {\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n\n    var _iteratorError;\n\n    try {\n      for (var _iterator = _asyncIterator(source), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n        let {\n          header,\n          body\n        } = _value;\n        if (!header.size || header.type === 'symlink') header.size = 0;\n        if (!header.type) header.type = modeToType(header.mode);\n        if (!header.mode) header.mode = header.type === 'directory' ? DMODE : FMODE;\n        if (!header.uid) header.uid = 0;\n        if (!header.gid) header.gid = 0;\n        if (!header.mtime) header.mtime = new Date();\n        if (typeof body === 'string') body = Buffer.from(body);\n\n        if (Buffer.isBuffer(body) || BufferList.isBufferList(body)) {\n          header.size = body.length;\n          yield new BufferList([encode(header), body, getPadding(header.size)]);\n          continue;\n        }\n\n        if (header.type === 'symlink' && !header.linkname) {\n          header.linkname = (yield _awaitAsyncGenerator(concat(body))).toString();\n          yield encode(header);\n          continue;\n        }\n\n        yield encode(header);\n\n        if (header.type !== 'file' && header.type !== 'contiguous-file') {\n          continue;\n        }\n\n        let written = 0;\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n\n        var _iteratorError2;\n\n        try {\n          for (var _iterator2 = _asyncIterator(body), _step2, _value2; _step2 = yield _awaitAsyncGenerator(_iterator2.next()), _iteratorNormalCompletion2 = _step2.done, _value2 = yield _awaitAsyncGenerator(_step2.value), !_iteratorNormalCompletion2; _iteratorNormalCompletion2 = true) {\n            const chunk = _value2;\n            written += chunk.length;\n            yield BufferList.isBufferList(chunk) ? chunk : new BufferList(chunk);\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n              yield _awaitAsyncGenerator(_iterator2.return());\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n\n        if (written !== header.size) {\n          // corrupting tar\n          throw new Error('size mismatch');\n        }\n\n        const overflow = getPadding(header.size);\n        if (overflow) yield overflow;\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          yield _awaitAsyncGenerator(_iterator.return());\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    yield new BufferList(END_OF_TAR);\n  });\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Demo/node_modules/it-tar/pack.js"],"names":["Buffer","require","BufferList","S_IFMT","S_IFBLK","S_IFCHR","S_IFDIR","S_IFIFO","S_IFLNK","concat","Headers","DMODE","parseInt","FMODE","END_OF_TAR","alloc","modeToType","mode","getPadding","size","slice","encode","header","pax","encoded","encodePax","paxHeader","name","linkname","newHeader","uid","gid","length","mtime","type","uname","gname","devmajor","devminor","module","exports","source","body","Date","from","isBuffer","isBufferList","toString","written","chunk","Error","overflow"],"mappings":"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","sourcesContent":["const { Buffer } = require('buffer')\nconst BufferList = require('bl/BufferList')\nconst { S_IFMT, S_IFBLK, S_IFCHR, S_IFDIR, S_IFIFO, S_IFLNK } = require('iso-constants')\nconst concat = require('it-concat')\nconst Headers = require('./pack-headers')\n\nconst DMODE = parseInt('755', 8)\nconst FMODE = parseInt('644', 8)\n\nconst END_OF_TAR = Buffer.alloc(1024)\n\nfunction modeToType (mode) {\n  switch (mode & S_IFMT) {\n    case S_IFBLK: return 'block-device'\n    case S_IFCHR: return 'character-device'\n    case S_IFDIR: return 'directory'\n    case S_IFIFO: return 'fifo'\n    case S_IFLNK: return 'symlink'\n  }\n  return 'file'\n}\n\nfunction getPadding (size) {\n  size &= 511\n  if (size) return new BufferList(END_OF_TAR.slice(0, 512 - size))\n}\n\nfunction encode (header) {\n  if (!header.pax) {\n    const encoded = Headers.encode(header)\n    if (encoded) return encoded\n  }\n  return encodePax(header)\n}\n\nfunction encodePax (header) {\n  const paxHeader = Headers.encodePax({\n    name: header.name,\n    linkname: header.linkname,\n    pax: header.pax\n  })\n\n  const newHeader = {\n    name: 'PaxHeader',\n    mode: header.mode,\n    uid: header.uid,\n    gid: header.gid,\n    size: paxHeader.length,\n    mtime: header.mtime,\n    type: 'pax-header',\n    linkname: header.linkname && 'PaxHeader',\n    uname: header.uname,\n    gname: header.gname,\n    devmajor: header.devmajor,\n    devminor: header.devminor\n  }\n\n  return new BufferList([\n    Headers.encode(newHeader),\n    paxHeader,\n    getPadding(paxHeader.length),\n    Headers.encode({ ...newHeader, size: header.size, type: header.type })\n  ])\n}\n\nmodule.exports = () => async function * (source) {\n  for await (let { header, body } of source) {\n    if (!header.size || header.type === 'symlink') header.size = 0\n    if (!header.type) header.type = modeToType(header.mode)\n    if (!header.mode) header.mode = header.type === 'directory' ? DMODE : FMODE\n    if (!header.uid) header.uid = 0\n    if (!header.gid) header.gid = 0\n    if (!header.mtime) header.mtime = new Date()\n\n    if (typeof body === 'string') body = Buffer.from(body)\n\n    if (Buffer.isBuffer(body) || BufferList.isBufferList(body)) {\n      header.size = body.length\n      yield new BufferList([encode(header), body, getPadding(header.size)])\n      continue\n    }\n\n    if (header.type === 'symlink' && !header.linkname) {\n      header.linkname = (await concat(body)).toString()\n      yield encode(header)\n      continue\n    }\n\n    yield encode(header)\n\n    if (header.type !== 'file' && header.type !== 'contiguous-file') {\n      continue\n    }\n\n    let written = 0\n    for await (const chunk of body) {\n      written += chunk.length\n      yield BufferList.isBufferList(chunk) ? chunk : new BufferList(chunk)\n    }\n\n    if (written !== header.size) { // corrupting tar\n      throw new Error('size mismatch')\n    }\n\n    const overflow = getPadding(header.size)\n    if (overflow) yield overflow\n  }\n\n  yield new BufferList(END_OF_TAR)\n}\n"]},"metadata":{},"sourceType":"script"}