{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst toCamel = require('./lib/object-to-camel');\n\nconst {\n  Multiaddr\n} = require('multiaddr');\n\nconst configure = require('./lib/configure');\n\nconst toUrlSearchParams = require('./lib/to-url-search-params');\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {RootAPI[\"id\"]}\n   */\n  function id() {\n    return _id.apply(this, arguments);\n  }\n\n  function _id() {\n    _id = _asyncToGenerator(function* (options = {}) {\n      const res = yield api.post('id', {\n        timeout: options.timeout,\n        signal: options.signal,\n        searchParams: toUrlSearchParams({\n          arg: options.peerId ? options.peerId.toString() : undefined,\n          ...options\n        }),\n        headers: options.headers\n      });\n      const data = yield res.json();\n      const output = { ...toCamel(data)\n      };\n\n      if (output.addresses) {\n        output.addresses = output.addresses.map((\n        /** @type {string} */\n        ma) => new Multiaddr(ma));\n      } // @ts-ignore server output is not typed\n\n\n      return output;\n    });\n    return _id.apply(this, arguments);\n  }\n\n  return id;\n});","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Demo/node_modules/ipfs-http-client/src/id.js"],"names":["toCamel","require","Multiaddr","configure","toUrlSearchParams","module","exports","api","id","options","res","post","timeout","signal","searchParams","arg","peerId","toString","undefined","headers","data","json","output","addresses","map","ma"],"mappings":"AAAA;;;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,uBAAD,CAAvB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAgBD,OAAO,CAAC,WAAD,CAA7B;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,iBAAD,CAAzB;;AACA,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,4BAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AAEAI,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAACI,GAAG,IAAI;AAChC;AACF;AACA;AAHkC,WAIjBC,EAJiB;AAAA;AAAA;;AAAA;AAAA,4BAIhC,WAAmBC,OAAO,GAAG,EAA7B,EAAiC;AAC/B,YAAMC,GAAG,SAASH,GAAG,CAACI,IAAJ,CAAS,IAAT,EAAe;AAC/BC,QAAAA,OAAO,EAAEH,OAAO,CAACG,OADc;AAE/BC,QAAAA,MAAM,EAAEJ,OAAO,CAACI,MAFe;AAG/BC,QAAAA,YAAY,EAAEV,iBAAiB,CAAC;AAC9BW,UAAAA,GAAG,EAAEN,OAAO,CAACO,MAAR,GAAiBP,OAAO,CAACO,MAAR,CAAeC,QAAf,EAAjB,GAA6CC,SADpB;AAE9B,aAAGT;AAF2B,SAAD,CAHA;AAO/BU,QAAAA,OAAO,EAAEV,OAAO,CAACU;AAPc,OAAf,CAAlB;AASA,YAAMC,IAAI,SAASV,GAAG,CAACW,IAAJ,EAAnB;AAEA,YAAMC,MAAM,GAAG,EACb,GAAGtB,OAAO,CAACoB,IAAD;AADG,OAAf;;AAIA,UAAIE,MAAM,CAACC,SAAX,EAAsB;AACpBD,QAAAA,MAAM,CAACC,SAAP,GAAmBD,MAAM,CAACC,SAAP,CAAiBC,GAAjB,CAAqB;AAAC;AAAsBC,QAAAA,EAAvB,KAA8B,IAAIvB,SAAJ,CAAcuB,EAAd,CAAnD,CAAnB;AACD,OAlB8B,CAoB/B;;;AACA,aAAOH,MAAP;AACD,KA1B+B;AAAA;AAAA;;AA2BhC,SAAOd,EAAP;AACD,CA5ByB,CAA1B","sourcesContent":["'use strict'\n\nconst toCamel = require('./lib/object-to-camel')\nconst { Multiaddr } = require('multiaddr')\nconst configure = require('./lib/configure')\nconst toUrlSearchParams = require('./lib/to-url-search-params')\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {RootAPI[\"id\"]}\n   */\n  async function id (options = {}) {\n    const res = await api.post('id', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: options.peerId ? options.peerId.toString() : undefined,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    const output = {\n      ...toCamel(data)\n    }\n\n    if (output.addresses) {\n      output.addresses = output.addresses.map((/** @type {string} */ ma) => new Multiaddr(ma))\n    }\n\n    // @ts-ignore server output is not typed\n    return output\n  }\n  return id\n})\n"]},"metadata":{},"sourceType":"script"}