{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/Dapp/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nvar _wrapAsyncGenerator = require(\"/Users/sydneybailey/Internship/Dapp/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\").default;\n\nvar _awaitAsyncGenerator = require(\"/Users/sydneybailey/Internship/Dapp/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/Dapp/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nvar _asyncGeneratorDelegate = require(\"/Users/sydneybailey/Internship/Dapp/node_modules/@babel/runtime/helpers/asyncGeneratorDelegate\").default;\n\nconst drain = require('it-drain');\n\nconst filter = require('it-filter');\n\nconst take = require('it-take');\n\nconst all = require('it-all');\n/**\n * Collect all values from the iterable and sort them using\n * the passed sorter function\n *\n * @template T\n * @param {AsyncIterable<T> | Iterable<T>} iterable\n * @param {(a: T, b: T) => -1 | 0 | 1} sorter\n * @returns {AsyncIterable<T>}\n */\n\n\nconst sortAll = (iterable, sorter) => {\n  return _wrapAsyncGenerator(function* () {\n    const values = yield _awaitAsyncGenerator(all(iterable));\n    yield* _asyncGeneratorDelegate(_asyncIterator(values.sort(sorter)), _awaitAsyncGenerator);\n  })();\n};\n/**\n * @typedef {import('./types').Options} Options\n * @typedef {import('./types').Pair} Pair\n * @typedef {import('./types').Blockstore} Blockstore\n * @typedef {import('./types').Query} Query\n * @typedef {import('./types').KeyQuery} KeyQuery\n * @typedef {import('./types').Batch} Batch\n *\n * @typedef {import('multiformats').CID} CID\n */\n\n/**\n * @template O\n * @typedef {import('interface-store').AwaitIterable<O>} AwaitIterable\n */\n\n/**\n * @implements {Blockstore}\n */\n\n\nclass BlockstoreAdapter {\n  /**\n   * @returns {Promise<void>}\n   */\n  open() {\n    return Promise.reject(new Error('.open is not implemented'));\n  }\n  /**\n   * @returns {Promise<void>}\n   */\n\n\n  close() {\n    return Promise.reject(new Error('.close is not implemented'));\n  }\n  /**\n   * @param {CID} key\n   * @param {Uint8Array} val\n   * @param {Options} [options]\n   * @returns {Promise<void>}\n   */\n\n\n  put(key, val, options) {\n    return Promise.reject(new Error('.put is not implemented'));\n  }\n  /**\n   * @param {CID} key\n   * @param {Options} [options]\n   * @returns {Promise<Uint8Array>}\n   */\n\n\n  get(key, options) {\n    return Promise.reject(new Error('.get is not implemented'));\n  }\n  /**\n   * @param {CID} key\n   * @param {Options} [options]\n   * @returns {Promise<boolean>}\n   */\n\n\n  has(key, options) {\n    return Promise.reject(new Error('.has is not implemented'));\n  }\n  /**\n   * @param {CID} key\n   * @param {Options} [options]\n   * @returns {Promise<void>}\n   */\n\n\n  delete(key, options) {\n    return Promise.reject(new Error('.delete is not implemented'));\n  }\n  /**\n   * @param {AwaitIterable<Pair>} source\n   * @param {Options} [options]\n   * @returns {AsyncIterable<Pair>}\n   */\n\n\n  putMany(source, options = {}) {\n    var _this = this;\n\n    return _wrapAsyncGenerator(function* () {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n\n      var _iteratorError;\n\n      try {\n        for (var _iterator = _asyncIterator(source), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n          const {\n            key,\n            value\n          } = _value;\n          yield _awaitAsyncGenerator(_this.put(key, value, options));\n          yield {\n            key,\n            value\n          };\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            yield _awaitAsyncGenerator(_iterator.return());\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    })();\n  }\n  /**\n   * @param {AwaitIterable<CID>} source\n   * @param {Options} [options]\n   * @returns {AsyncIterable<Uint8Array>}\n   */\n\n\n  getMany(source, options = {}) {\n    var _this2 = this;\n\n    return _wrapAsyncGenerator(function* () {\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n\n      var _iteratorError2;\n\n      try {\n        for (var _iterator2 = _asyncIterator(source), _step2, _value2; _step2 = yield _awaitAsyncGenerator(_iterator2.next()), _iteratorNormalCompletion2 = _step2.done, _value2 = yield _awaitAsyncGenerator(_step2.value), !_iteratorNormalCompletion2; _iteratorNormalCompletion2 = true) {\n          const key = _value2;\n          yield _this2.get(key, options);\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            yield _awaitAsyncGenerator(_iterator2.return());\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    })();\n  }\n  /**\n   * @param {AwaitIterable<CID>} source\n   * @param {Options} [options]\n   * @returns {AsyncIterable<CID>}\n   */\n\n\n  deleteMany(source, options = {}) {\n    var _this3 = this;\n\n    return _wrapAsyncGenerator(function* () {\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n\n      var _iteratorError3;\n\n      try {\n        for (var _iterator3 = _asyncIterator(source), _step3, _value3; _step3 = yield _awaitAsyncGenerator(_iterator3.next()), _iteratorNormalCompletion3 = _step3.done, _value3 = yield _awaitAsyncGenerator(_step3.value), !_iteratorNormalCompletion3; _iteratorNormalCompletion3 = true) {\n          const key = _value3;\n          yield _awaitAsyncGenerator(_this3.delete(key, options));\n          yield key;\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n            yield _awaitAsyncGenerator(_iterator3.return());\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n    })();\n  }\n  /**\n   * @returns {Batch}\n   */\n\n\n  batch() {\n    var _this4 = this;\n\n    /** @type {Pair[]} */\n    let puts = [];\n    /** @type {CID[]} */\n\n    let dels = [];\n    return {\n      put(key, value) {\n        puts.push({\n          key,\n          value\n        });\n      },\n\n      delete(key) {\n        dels.push(key);\n      },\n\n      commit: function () {\n        var _ref2 = _asyncToGenerator(function* (options) {\n          yield drain(_this4.putMany(puts, options));\n          puts = [];\n          yield drain(_this4.deleteMany(dels, options));\n          dels = [];\n        });\n\n        return function commit(_x) {\n          return _ref2.apply(this, arguments);\n        };\n      }()\n    };\n  }\n  /**\n   * Extending classes should override `query` or implement this method\n   *\n   * @param {Query} q\n   * @param {Options} [options]\n   * @returns {AsyncIterable<Pair>}\n   */\n  // eslint-disable-next-line require-yield\n\n\n  _all(q, options) {\n    return _wrapAsyncGenerator(function* () {\n      throw new Error('._all is not implemented');\n    })();\n  }\n  /**\n   * Extending classes should override `queryKeys` or implement this method\n   *\n   * @param {KeyQuery} q\n   * @param {Options} [options]\n   * @returns {AsyncIterable<CID>}\n   */\n  // eslint-disable-next-line require-yield\n\n\n  _allKeys(q, options) {\n    return _wrapAsyncGenerator(function* () {\n      throw new Error('._allKeys is not implemented');\n    })();\n  }\n  /**\n   * @param {Query} q\n   * @param {Options} [options]\n   */\n\n\n  query(q, options) {\n    let it = this._all(q, options);\n\n    if (q.prefix != null) {\n      it = filter(it, (\n      /** @type {Pair} */\n      e) => e.key.toString().startsWith(q.prefix || ''));\n    }\n\n    if (Array.isArray(q.filters)) {\n      it = q.filters.reduce((it, f) => filter(it, f), it);\n    }\n\n    if (Array.isArray(q.orders)) {\n      it = q.orders.reduce((it, f) => sortAll(it, f), it);\n    }\n\n    if (q.offset != null) {\n      let i = 0;\n      it = filter(it, () => i++ >= (q.offset || 0));\n    }\n\n    if (q.limit != null) {\n      it = take(it, q.limit);\n    }\n\n    return it;\n  }\n  /**\n   * @param {KeyQuery} q\n   * @param {Options} [options]\n   */\n\n\n  queryKeys(q, options) {\n    let it = this._allKeys(q, options);\n\n    if (q.prefix != null) {\n      it = filter(it, (\n      /** @type {CID} */\n      cid) => cid.toString().startsWith(q.prefix || ''));\n    }\n\n    if (Array.isArray(q.filters)) {\n      it = q.filters.reduce((it, f) => filter(it, f), it);\n    }\n\n    if (Array.isArray(q.orders)) {\n      it = q.orders.reduce((it, f) => sortAll(it, f), it);\n    }\n\n    if (q.offset != null) {\n      let i = 0;\n      it = filter(it, () => i++ >= q.offset);\n    }\n\n    if (q.limit != null) {\n      it = take(it, q.limit);\n    }\n\n    return it;\n  }\n\n}\n\nmodule.exports = BlockstoreAdapter;","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Dapp/node_modules/interface-blockstore/src/adapter.js"],"names":["drain","require","filter","take","all","sortAll","iterable","sorter","values","sort","BlockstoreAdapter","open","Promise","reject","Error","close","put","key","val","options","get","has","delete","putMany","source","value","getMany","deleteMany","batch","puts","dels","push","commit","_all","q","_allKeys","query","it","prefix","e","toString","startsWith","Array","isArray","filters","reduce","f","orders","offset","i","limit","queryKeys","cid","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst drain = require('it-drain')\nconst filter = require('it-filter')\nconst take = require('it-take')\nconst all = require('it-all')\n\n/**\n * Collect all values from the iterable and sort them using\n * the passed sorter function\n *\n * @template T\n * @param {AsyncIterable<T> | Iterable<T>} iterable\n * @param {(a: T, b: T) => -1 | 0 | 1} sorter\n * @returns {AsyncIterable<T>}\n */\nconst sortAll = (iterable, sorter) => {\n  return (async function * () {\n    const values = await all(iterable)\n    yield * values.sort(sorter)\n  })()\n}\n\n/**\n * @typedef {import('./types').Options} Options\n * @typedef {import('./types').Pair} Pair\n * @typedef {import('./types').Blockstore} Blockstore\n * @typedef {import('./types').Query} Query\n * @typedef {import('./types').KeyQuery} KeyQuery\n * @typedef {import('./types').Batch} Batch\n *\n * @typedef {import('multiformats').CID} CID\n */\n\n/**\n * @template O\n * @typedef {import('interface-store').AwaitIterable<O>} AwaitIterable\n */\n\n/**\n * @implements {Blockstore}\n */\nclass BlockstoreAdapter {\n  /**\n   * @returns {Promise<void>}\n   */\n  open () {\n    return Promise.reject(new Error('.open is not implemented'))\n  }\n\n  /**\n   * @returns {Promise<void>}\n   */\n  close () {\n    return Promise.reject(new Error('.close is not implemented'))\n  }\n\n  /**\n   * @param {CID} key\n   * @param {Uint8Array} val\n   * @param {Options} [options]\n   * @returns {Promise<void>}\n   */\n  put (key, val, options) {\n    return Promise.reject(new Error('.put is not implemented'))\n  }\n\n  /**\n   * @param {CID} key\n   * @param {Options} [options]\n   * @returns {Promise<Uint8Array>}\n   */\n  get (key, options) {\n    return Promise.reject(new Error('.get is not implemented'))\n  }\n\n  /**\n   * @param {CID} key\n   * @param {Options} [options]\n   * @returns {Promise<boolean>}\n   */\n  has (key, options) {\n    return Promise.reject(new Error('.has is not implemented'))\n  }\n\n  /**\n   * @param {CID} key\n   * @param {Options} [options]\n   * @returns {Promise<void>}\n   */\n  delete (key, options) {\n    return Promise.reject(new Error('.delete is not implemented'))\n  }\n\n  /**\n   * @param {AwaitIterable<Pair>} source\n   * @param {Options} [options]\n   * @returns {AsyncIterable<Pair>}\n   */\n  async * putMany (source, options = {}) {\n    for await (const { key, value } of source) {\n      await this.put(key, value, options)\n      yield { key, value }\n    }\n  }\n\n  /**\n   * @param {AwaitIterable<CID>} source\n   * @param {Options} [options]\n   * @returns {AsyncIterable<Uint8Array>}\n   */\n  async * getMany (source, options = {}) {\n    for await (const key of source) {\n      yield this.get(key, options)\n    }\n  }\n\n  /**\n   * @param {AwaitIterable<CID>} source\n   * @param {Options} [options]\n   * @returns {AsyncIterable<CID>}\n   */\n  async * deleteMany (source, options = {}) {\n    for await (const key of source) {\n      await this.delete(key, options)\n      yield key\n    }\n  }\n\n  /**\n   * @returns {Batch}\n   */\n  batch () {\n    /** @type {Pair[]} */\n    let puts = []\n    /** @type {CID[]} */\n    let dels = []\n\n    return {\n      put (key, value) {\n        puts.push({ key, value })\n      },\n\n      delete (key) {\n        dels.push(key)\n      },\n      commit: async (options) => {\n        await drain(this.putMany(puts, options))\n        puts = []\n        await drain(this.deleteMany(dels, options))\n        dels = []\n      }\n    }\n  }\n\n  /**\n   * Extending classes should override `query` or implement this method\n   *\n   * @param {Query} q\n   * @param {Options} [options]\n   * @returns {AsyncIterable<Pair>}\n   */\n  // eslint-disable-next-line require-yield\n  async * _all (q, options) {\n    throw new Error('._all is not implemented')\n  }\n\n  /**\n   * Extending classes should override `queryKeys` or implement this method\n   *\n   * @param {KeyQuery} q\n   * @param {Options} [options]\n   * @returns {AsyncIterable<CID>}\n   */\n  // eslint-disable-next-line require-yield\n  async * _allKeys (q, options) {\n    throw new Error('._allKeys is not implemented')\n  }\n\n  /**\n   * @param {Query} q\n   * @param {Options} [options]\n   */\n  query (q, options) {\n    let it = this._all(q, options)\n\n    if (q.prefix != null) {\n      it = filter(it, (/** @type {Pair} */ e) =>\n        e.key.toString().startsWith(q.prefix || '')\n      )\n    }\n\n    if (Array.isArray(q.filters)) {\n      it = q.filters.reduce((it, f) => filter(it, f), it)\n    }\n\n    if (Array.isArray(q.orders)) {\n      it = q.orders.reduce((it, f) => sortAll(it, f), it)\n    }\n\n    if (q.offset != null) {\n      let i = 0\n      it = filter(it, () => i++ >= (q.offset || 0))\n    }\n\n    if (q.limit != null) {\n      it = take(it, q.limit)\n    }\n\n    return it\n  }\n\n  /**\n   * @param {KeyQuery} q\n   * @param {Options} [options]\n   */\n  queryKeys (q, options) {\n    let it = this._allKeys(q, options)\n\n    if (q.prefix != null) {\n      it = filter(it, (/** @type {CID} */ cid) => cid.toString().startsWith(q.prefix || ''))\n    }\n\n    if (Array.isArray(q.filters)) {\n      it = q.filters.reduce((it, f) => filter(it, f), it)\n    }\n\n    if (Array.isArray(q.orders)) {\n      it = q.orders.reduce((it, f) => sortAll(it, f), it)\n    }\n\n    if (q.offset != null) {\n      let i = 0\n      it = filter(it, () => i++ >= /** @type {number} */ (q.offset))\n    }\n\n    if (q.limit != null) {\n      it = take(it, q.limit)\n    }\n\n    return it\n  }\n}\n\nmodule.exports = BlockstoreAdapter\n"]},"metadata":{},"sourceType":"script"}