{"ast":null,"code":"import _asyncToGenerator from \"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { Web3Service } from './web3.service';\n\nconst basicNFTArtifacts = require('../../../build/contracts/basicNFT.json');\n\nconst contract = require('@truffle/contract');\n\nlet BasicContractService = class BasicContractService {\n  web3Ser;\n  basicNFT = contract(basicNFTArtifacts);\n\n  constructor(web3Ser) {\n    this.web3Ser = web3Ser; // Use our web3 service as the provider for contract\n\n    this.basicNFT.setProvider(web3Ser.web3.currentProvider);\n  } //get contract address\n\n\n  getAddress() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      let basic = yield _this.basicNFT.deployed();\n      const contractaddr = basic.address;\n      return contractaddr;\n    })();\n  } //get the owner's address of an NFT by token ID\n\n\n  getOwner(id) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      let basic = yield _this2.basicNFT.deployed();\n      const value = yield basic.ownerOf.call(id, {\n        from: _this2.web3Ser.web3.eth.defaultAccount\n      });\n      return value;\n    })();\n  } //mint a coin to an address\n\n\n  mintCoin(to) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      let basic = yield _this3.basicNFT.deployed();\n      const value = yield basic.mint(to, {\n        from: _this3.web3Ser.web3.eth.defaultAccount\n      });\n      return value;\n    })();\n  }\n\n  static ctorParameters = () => [{\n    type: Web3Service\n  }];\n};\nBasicContractService = __decorate([Injectable({\n  providedIn: 'root'\n})], BasicContractService);\nexport { BasicContractService };","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Demo/src/app/services/basiccontract.service.ts"],"names":[],"mappings":";;AAAA,SAAS,UAAT,QAA2B,eAA3B;AAGA,SAAS,WAAT,QAA4B,gBAA5B;;AAEA,MAAM,iBAAiB,GAAG,OAAO,CAAC,wCAAD,CAAjC;;AACA,MAAM,QAAQ,GAAG,OAAO,CAAC,mBAAD,CAAxB;;IAKa,oBAAoB,GAAA,MAApB,oBAAoB,CAAA;AAKtB,EAAA,OAAA;AAHT,EAAA,QAAQ,GAAG,QAAQ,CAAC,iBAAD,CAAX;;AAER,EAAA,WAAA,CACS,OADT,EAC6B;AAApB,SAAA,OAAA,GAAA,OAAA,CAAoB,CAE5B;;AACA,SAAK,QAAL,CAAc,WAAd,CAA0B,OAAO,CAAC,IAAR,CAAa,eAAvC;AACA,GAT8B,CAW/B;;;AACM,EAAA,UAAU,GAAA;AAAA;;AAAA;AACd,UAAI,KAAK,SAAS,KAAI,CAAC,QAAL,CAAc,QAAd,EAAlB;AACA,YAAM,YAAY,GAAG,KAAK,CAAC,OAA3B;AACA,aAAO,YAAP;AAHc;AAIf,GAhB8B,CAkB/B;;;AACM,EAAA,QAAQ,CAAC,EAAD,EAAQ;AAAA;;AAAA;AACtB,UAAI,KAAK,SAAS,MAAI,CAAC,QAAL,CAAc,QAAd,EAAlB;AACE,YAAM,KAAK,SAAS,KAAK,CAAC,OAAN,CAAc,IAAd,CAAmB,EAAnB,EAAuB;AACzC,QAAA,IAAI,EAAE,MAAI,CAAC,OAAL,CAAa,IAAb,CAAkB,GAAlB,CAAsB;AADa,OAAvB,CAApB;AAGA,aAAO,KAAP;AALoB;AAMtB,GAzB+B,CA2B/B;;;AACK,EAAA,QAAQ,CAAC,EAAD,EAAQ;AAAA;;AAAA;AACnB,UAAI,KAAK,SAAS,MAAI,CAAC,QAAL,CAAc,QAAd,EAAlB;AACA,YAAM,KAAK,SAAS,KAAK,CAAC,IAAN,CAAW,EAAX,EAAe;AACjC,QAAA,IAAI,EAAE,MAAI,CAAC,OAAL,CAAa,IAAb,CAAkB,GAAlB,CAAsB;AADK,OAAf,CAApB;AAGA,aAAO,KAAP;AALmB;AAMrB;;;UA1CO;;AAQwB,C;AAApB,oBAAoB,GAAA,UAAA,CAAA,CAHhC,UAAU,CAAC;AACV,EAAA,UAAU,EAAE;AADF,CAAD,CAGsB,CAAA,EAApB,oBAAoB,CAApB;SAAA,oB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { from } from 'rxjs';\nimport { Web3Service } from './web3.service'\n\nconst basicNFTArtifacts = require('../../../build/contracts/basicNFT.json');\nconst contract = require('@truffle/contract');\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BasicContractService {\n\n  basicNFT = contract(basicNFTArtifacts);\n\n  constructor(\n  \tprivate web3Ser: Web3Service,\n  \t) {\n  \t// Use our web3 service as the provider for contract\n  \tthis.basicNFT.setProvider(web3Ser.web3.currentProvider);\n  }\n\n  //get contract address\n  async getAddress(): Promise<string> {\n    let basic = await this.basicNFT.deployed();\n    const contractaddr = basic.address;\n    return contractaddr;\n  }\n\n  //get the owner's address of an NFT by token ID\n  async getOwner(id: any): Promise<any> {\n\t\tlet basic = await this.basicNFT.deployed();\n    const value = await basic.ownerOf.call(id, {\n      from: this.web3Ser.web3.eth.defaultAccount\n    });\n    return value;\n\t}\n\n  //mint a coin to an address\n\tasync mintCoin(to: any): Promise<any>{\n    let basic = await this.basicNFT.deployed();\n    const value = await basic.mint(to, {\n      from: this.web3Ser.web3.eth.defaultAccount\n    });\n    return value;\n\t}\n\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}