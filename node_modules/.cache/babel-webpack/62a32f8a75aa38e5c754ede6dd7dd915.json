{"ast":null,"code":"'use strict';\n\nvar _wrapAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\").default;\n\nvar _awaitAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nvar _asyncGeneratorDelegate = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncGeneratorDelegate\").default;\n\nconst log = require('debug')('ipfs:repo:utils:walk-dag');\n\nconst Block = require('multiformats/block');\n/**\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('../types').loadCodec} loadCodec\n * @typedef {import('../types').AbortOptions} AbortOptions\n */\n\n/**\n * @param {CID} cid\n * @param {Blockstore} blockstore\n * @param {loadCodec} loadCodec\n * @param {AbortOptions} [options]\n * @returns {AsyncGenerator<CID, void, undefined>}\n */\n\n\nfunction walkDag(_x, _x2, _x3, _x4) {\n  return _walkDag.apply(this, arguments);\n}\n\nfunction _walkDag() {\n  _walkDag = _wrapAsyncGenerator(function* (cid, blockstore, loadCodec, options) {\n    try {\n      const bytes = yield _awaitAsyncGenerator(blockstore.get(cid, options));\n      const codec = yield _awaitAsyncGenerator(loadCodec(cid.code));\n      const block = Block.createUnsafe({\n        bytes,\n        cid,\n        codec\n      });\n\n      for (const [, childCid] of block.links()) {\n        yield childCid;\n        yield* _asyncGeneratorDelegate(_asyncIterator(walkDag(childCid, blockstore, loadCodec, options)), _awaitAsyncGenerator);\n      }\n    } catch (err) {\n      log('Could not walk DAG for CID', cid.toString(), err);\n      throw err;\n    }\n  });\n  return _walkDag.apply(this, arguments);\n}\n\nmodule.exports = walkDag;","map":null,"metadata":{},"sourceType":"script"}