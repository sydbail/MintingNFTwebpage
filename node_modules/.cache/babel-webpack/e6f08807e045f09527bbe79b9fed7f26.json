{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nconst {\n  fromString: uint8ArrayFromString\n} = require('uint8arrays/from-string');\n\nconst {\n  toString: uint8ArrayToString\n} = require('uint8arrays/to-string');\n\nconst log = require('debug')('ipfs-http-client:pubsub:subscribe');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pubsub').Message} Message\n * @typedef {(err: Error, fatal: boolean, msg?: Message) => void} ErrorHandlerFn\n * @typedef {import('ipfs-core-types/src/pubsub').API<HTTPClientExtraOptions & { onError?: ErrorHandlerFn }>} PubsubAPI\n * @typedef {import('../types').Options} Options\n */\n\n/**\n * @param {Options} options\n * @param {import('./subscription-tracker')} subsTracker\n */\n\n\nmodule.exports = (options, subsTracker) => {\n  return configure(api => {\n    /**\n     * @type {PubsubAPI[\"subscribe\"]}\n     */\n    function subscribe(_x, _x2) {\n      return _subscribe.apply(this, arguments);\n    }\n\n    function _subscribe() {\n      _subscribe = _asyncToGenerator(function* (topic, handler, options = {}) {\n        // eslint-disable-line require-await\n        options.signal = subsTracker.subscribe(topic, handler, options.signal);\n        /** @type {(value?: any) => void} */\n\n        let done;\n        /** @type {(error: Error) => void} */\n\n        let fail;\n        const result = new Promise((resolve, reject) => {\n          done = resolve;\n          fail = reject;\n        }); // In Firefox, the initial call to fetch does not resolve until some data\n        // is received. If this doesn't happen within 1 second assume success\n\n        const ffWorkaround = setTimeout(() => done(), 1000); // Do this async to not block Firefox\n\n        api.post('pubsub/sub', {\n          timeout: options.timeout,\n          signal: options.signal,\n          searchParams: toUrlSearchParams({\n            arg: topic,\n            ...options\n          }),\n          headers: options.headers\n        }).catch(err => {\n          // Initial subscribe fail, ensure we clean up\n          subsTracker.unsubscribe(topic, handler);\n          fail(err);\n        }).then(response => {\n          clearTimeout(ffWorkaround);\n\n          if (!response) {\n            // if there was no response, the subscribe failed\n            return;\n          }\n\n          readMessages(response, {\n            onMessage: handler,\n            onEnd: () => subsTracker.unsubscribe(topic, handler),\n            onError: options.onError\n          });\n          done();\n        });\n        return result;\n      });\n      return _subscribe.apply(this, arguments);\n    }\n\n    return subscribe;\n  })(options);\n};\n/**\n * @param {import('ipfs-utils/src/types').ExtendedResponse} response\n * @param {object} options\n * @param {(message: Message) => void} options.onMessage\n * @param {() => void} options.onEnd\n * @param {ErrorHandlerFn} [options.onError]\n */\n\n\nfunction readMessages(_x3, _x4) {\n  return _readMessages.apply(this, arguments);\n}\n/**\n * @param {Error & {type?:string}} error\n * @returns {boolean}\n */\n\n\nfunction _readMessages() {\n  _readMessages = _asyncToGenerator(function* (response, {\n    onMessage,\n    onEnd,\n    onError\n  }) {\n    onError = onError || log;\n\n    try {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n\n      var _iteratorError;\n\n      try {\n        for (var _iterator = _asyncIterator(response.ndjson()), _step, _value; _step = yield _iterator.next(), _iteratorNormalCompletion = _step.done, _value = yield _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n          const msg = _value;\n\n          try {\n            if (!msg.from) {\n              continue;\n            }\n\n            onMessage({\n              from: uint8ArrayToString(uint8ArrayFromString(msg.from, 'base64pad'), 'base58btc'),\n              data: uint8ArrayFromString(msg.data, 'base64pad'),\n              seqno: uint8ArrayFromString(msg.seqno, 'base64pad'),\n              topicIDs: msg.topicIDs\n            });\n          } catch (err) {\n            err.message = `Failed to parse pubsub message: ${err.message}`;\n            onError(err, false, msg); // Not fatal\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            yield _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    } catch (err) {\n      if (!isAbortError(err)) {\n        onError(err, true); // Fatal\n      }\n    } finally {\n      onEnd();\n    }\n  });\n  return _readMessages.apply(this, arguments);\n}\n\nconst isAbortError = error => {\n  switch (error.type) {\n    case 'aborted':\n      return true;\n    // It is `abort` in Electron instead of `aborted`\n\n    case 'abort':\n      return true;\n\n    default:\n      // FIXME: In testing with Chrome, err.type is undefined (should not be!)\n      // Temporarily use the name property instead.\n      return error.name === 'AbortError';\n  }\n};","map":null,"metadata":{},"sourceType":"script"}