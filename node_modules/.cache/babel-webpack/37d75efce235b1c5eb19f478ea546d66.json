{"ast":null,"code":"import _asyncToGenerator from \"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction noop() {}\n\nexport function create() {\n  const chunkQueue = [];\n  let drainer = null;\n  let drainerResolver = noop;\n  let ended = false;\n  let outWait = null;\n  let outWaitResolver = noop;\n\n  const makeDrainer = () => {\n    if (!drainer) {\n      drainer = new Promise(resolve => {\n        drainerResolver = () => {\n          drainer = null;\n          drainerResolver = noop;\n          resolve();\n        };\n      });\n    }\n\n    return drainer;\n  };\n\n  const writer = {\n    write(chunk) {\n      chunkQueue.push(chunk);\n      const drainer = makeDrainer();\n      outWaitResolver();\n      return drainer;\n    },\n\n    end() {\n      return _asyncToGenerator(function* () {\n        ended = true;\n        const drainer = makeDrainer();\n        outWaitResolver();\n        return drainer;\n      })();\n    }\n\n  };\n  const iterator = {\n    next() {\n      return _asyncToGenerator(function* () {\n        const chunk = chunkQueue.shift();\n\n        if (chunk) {\n          if (chunkQueue.length === 0) {\n            drainerResolver();\n          }\n\n          return {\n            done: false,\n            value: chunk\n          };\n        }\n\n        if (ended) {\n          drainerResolver();\n          return {\n            done: true,\n            value: undefined\n          };\n        }\n\n        if (!outWait) {\n          outWait = new Promise(resolve => {\n            outWaitResolver = () => {\n              outWait = null;\n              outWaitResolver = noop;\n              return resolve(iterator.next());\n            };\n          });\n        }\n\n        return outWait;\n      })();\n    }\n\n  };\n  return {\n    writer,\n    iterator\n  };\n}","map":null,"metadata":{},"sourceType":"module"}