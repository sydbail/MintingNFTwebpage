{"ast":null,"code":"/* eslint-disable no-unreachable */\n'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nvar _awaitAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\").default;\n\nvar _wrapAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nconst isIpfs = require('is-ipfs');\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst Key = require('interface-datastore').Key;\n\nconst errCode = require('err-code');\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n\nconst toCidAndPath = require('ipfs-core-utils/src/to-cid-and-path');\n\nconst dagPb = require('@ipld/dag-pb');\n/**\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n * @typedef {import('@ipld/dag-pb').PBLink} PBLink\n */\n\n\nconst ERR_BAD_PATH = 'ERR_BAD_PATH';\n/**\n * Returns a well-formed ipfs Path.\n * The returned path will always be prefixed with /ipfs/ or /ipns/.\n *\n * @param  {string | CID} pathStr - An ipfs-path, or ipns-path or a cid\n * @returns {string} - ipfs-path or ipns-path\n * @throws on an invalid @param pathStr\n */\n\nconst normalizePath = pathStr => {\n  if (pathStr instanceof CID) {\n    return `/ipfs/${pathStr}`;\n  }\n\n  try {\n    CID.parse(pathStr);\n    pathStr = `/ipfs/${pathStr}`;\n  } catch {}\n\n  if (isIpfs.path(pathStr)) {\n    return pathStr;\n  } else {\n    throw errCode(new Error(`invalid path: ${pathStr}`), ERR_BAD_PATH);\n  }\n}; // TODO: do we need both normalizePath and normalizeCidPath?\n// TODO: don't forget ipfs-core-utils/src/to-cid-and-path\n\n/**\n * @param {Uint8Array|CID|string} path\n * @returns {string}\n */\n\n\nconst normalizeCidPath = path => {\n  if (path instanceof Uint8Array) {\n    return CID.decode(path).toString();\n  }\n\n  if (path instanceof CID) {\n    return path.toString();\n  }\n\n  if (path.indexOf('/ipfs/') === 0) {\n    path = path.substring('/ipfs/'.length);\n  }\n\n  if (path.charAt(path.length - 1) === '/') {\n    path = path.substring(0, path.length - 1);\n  }\n\n  return path;\n};\n/**\n * Resolve various styles of an ipfs-path to the hash of the target node.\n * Follows links in the path\n *\n * @param {import('ipfs-repo').IPFSRepo} repo\n * @param {import('ipfs-core-utils/src/multicodecs')} codecs\n * @param {CID | string | Uint8Array} ipfsPath - A CID or IPFS path\n * @param {{ path?: string, signal?: AbortSignal }} [options] - Optional options passed directly to dag.resolve\n * @returns {Promise<{ cid: CID, remainderPath: string}>}\n */\n\n\nconst resolvePath = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator(function* (repo, codecs, ipfsPath, options = {}) {\n    const {\n      cid,\n      path\n    } = toCidAndPath(ipfsPath);\n\n    if (path) {\n      options.path = path;\n    }\n\n    let lastCid = cid;\n    let lastRemainderPath = options.path || '';\n\n    if (lastRemainderPath.startsWith('/')) {\n      lastRemainderPath = lastRemainderPath.substring(1);\n    }\n\n    if (options.path) {\n      try {\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n\n        var _iteratorError;\n\n        try {\n          for (var _iterator = _asyncIterator(resolve(cid, options.path, codecs, repo, {\n            signal: options.signal\n          })), _step, _value; _step = yield _iterator.next(), _iteratorNormalCompletion = _step.done, _value = yield _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n            const {\n              value,\n              remainderPath\n            } = _value;\n\n            if (!(value instanceof CID)) {\n              break;\n            }\n\n            lastRemainderPath = remainderPath;\n            lastCid = value;\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              yield _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      } catch (err) {\n        // TODO: add error codes to IPLD\n        if (err.message.startsWith('Object has no property')) {\n          err.message = `no link named \"${lastRemainderPath.split('/')[0]}\" under ${lastCid}`;\n          err.code = 'ERR_NO_LINK';\n        }\n\n        throw err;\n      }\n    }\n\n    return {\n      cid: lastCid,\n      remainderPath: lastRemainderPath || ''\n    };\n  });\n\n  return function resolvePath(_x6, _x7, _x8) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n/**\n * @typedef {import('ipfs-unixfs-exporter').UnixFSEntry} UnixFSEntry\n *\n * @param {UnixFSEntry} file\n */\n\n\nconst mapFile = file => {\n  if (file.type !== 'file' && file.type !== 'directory' && file.type !== 'raw') {\n    // file.type === object | identity not supported yet\n    throw new Error(`Unknown node type '${file.type}'`);\n  }\n  /** @type {import('ipfs-core-types/src/root').IPFSEntry} */\n\n\n  const output = {\n    cid: file.cid,\n    path: file.path,\n    name: file.name,\n    size: file.size,\n    type: 'file'\n  };\n\n  if (file.type === 'directory') {\n    // @ts-ignore - TS type can't be changed from File to Directory\n    output.type = 'dir';\n  }\n\n  if (file.type === 'file') {\n    output.size = file.unixfs.fileSize();\n  }\n\n  if (file.type === 'file' || file.type === 'directory') {\n    output.mode = file.unixfs.mode;\n\n    if (file.unixfs.mtime !== undefined) {\n      output.mtime = file.unixfs.mtime;\n    }\n  }\n\n  return output;\n};\n\nconst withTimeout = withTimeoutOption(\n/*#__PURE__*/\n\n/**\n * @template T\n * @param {Promise<T>|T} promise\n * @param {AbortOptions} [_options]\n * @returns {Promise<T>}\n */\nfunction () {\n  var _ref3 = _asyncToGenerator(function* (promise, _options) {\n    return yield promise;\n  });\n\n  return function (_x9, _x10) {\n    return _ref3.apply(this, arguments);\n  };\n}());\n/**\n * Retrieves IPLD Nodes along the `path` that is rooted at `cid`.\n *\n * @param {CID} cid - the CID where the resolving starts\n * @param {string} path - the path that should be resolved\n * @param {import('ipfs-core-utils/src/multicodecs')} codecs\n * @param {import('ipfs-repo').IPFSRepo} repo\n * @param {AbortOptions} [options]\n */\n\nconst resolve = /*#__PURE__*/function () {\n  var _ref = _wrapAsyncGenerator(function* (cid, path, codecs, repo, options) {\n    /**\n     * @param {CID} cid\n     */\n    const load = /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator(function* (cid) {\n        const codec = yield codecs.getCodec(cid.code);\n        const block = yield repo.blocks.get(cid, options);\n        return codec.decode(block);\n      });\n\n      return function load(_x11) {\n        return _ref4.apply(this, arguments);\n      };\n    }();\n\n    const parts = path.split('/').filter(Boolean);\n    let value = yield _awaitAsyncGenerator(load(cid));\n    let lastCid = cid;\n\n    if (!parts.length) {\n      yield {\n        value,\n        remainderPath: ''\n      };\n    } // End iteration if there isn't a CID to follow any more\n\n\n    while (parts.length) {\n      const key = parts.shift();\n\n      if (!key) {\n        throw errCode(new Error(`Could not resolve path \"${path}\"`), 'ERR_INVALID_PATH');\n      } // special case for dag-pb, use the link name as the path segment\n\n\n      if (cid.code === dagPb.code && Array.isArray(value.Links)) {\n        const link = value.Links.find((\n        /** @type {PBLink} */\n        l) => l.Name === key);\n\n        if (link) {\n          yield {\n            value: link.Hash,\n            remainderPath: parts.join('/')\n          };\n          value = yield _awaitAsyncGenerator(load(link.Hash));\n          lastCid = link.Hash;\n          continue;\n        }\n      }\n\n      if (Object.prototype.hasOwnProperty.call(value, key)) {\n        value = value[key];\n        yield {\n          value,\n          remainderPath: parts.join('/')\n        };\n      } else {\n        throw errCode(new Error(`no link named \"${key}\" under ${lastCid}`), 'ERR_NO_LINK');\n      }\n\n      if (value instanceof CID) {\n        lastCid = value;\n        value = yield _awaitAsyncGenerator(load(value));\n      }\n    }\n  });\n\n  return function resolve(_x, _x2, _x3, _x4, _x5) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nmodule.exports = {\n  normalizePath,\n  normalizeCidPath,\n  resolvePath,\n  mapFile,\n  withTimeout,\n  resolve,\n  OFFLINE_ERROR: 'This command must be run in online mode. Try running \\'ipfs daemon\\' first.',\n  MFS_ROOT_KEY: new Key('/local/filesroot'),\n  MFS_MAX_CHUNK_SIZE: 262144,\n  MFS_MAX_LINKS: 174\n};","map":null,"metadata":{},"sourceType":"script"}