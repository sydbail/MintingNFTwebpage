{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst errCode = require('err-code');\n\nconst AbortController = require('abort-controller').default;\n\nconst {\n  anySignal\n} = require('any-signal'); // @ts-ignore p-fifo does not export types\n\n\nconst FIFO = require('p-fifo');\n\nconst pAny = require('p-any');\n/**\n * @typedef {import('libp2p-interfaces/src/connection').Connection} Connection\n * @typedef {import('./')} Dialer\n * @typedef {import('multiaddr').Multiaddr} Multiaddr\n */\n\n/**\n * @typedef {Object} DialOptions\n * @property {AbortSignal} signal\n *\n * @typedef {Object} DialRequestOptions\n * @property {Multiaddr[]} addrs\n * @property {(m: Multiaddr, options: DialOptions) => Promise<Connection>} dialAction\n * @property {Dialer} dialer\n */\n\n\nclass DialRequest {\n  /**\n   * Manages running the `dialAction` on multiple provided `addrs` in parallel\n   * up to a maximum determined by the number of tokens returned\n   * from `dialer.getTokens`. Once a DialRequest is created, it can be\n   * started using `DialRequest.run(options)`. Once a single dial has succeeded,\n   * all other dials in the request will be cancelled.\n   *\n   * @class\n   * @param {DialRequestOptions} options\n   */\n  constructor({\n    addrs,\n    dialAction,\n    dialer\n  }) {\n    this.addrs = addrs;\n    this.dialer = dialer;\n    this.dialAction = dialAction;\n  }\n  /**\n   * @async\n   * @param {object} [options]\n   * @param {AbortSignal} [options.signal] - An AbortController signal\n   * @returns {Promise<Connection>}\n   */\n\n\n  run(options = {}) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const tokens = _this.dialer.getTokens(_this.addrs.length); // If no tokens are available, throw\n\n\n      if (tokens.length < 1) {\n        throw errCode(new Error('No dial tokens available'), 'ERR_NO_DIAL_TOKENS');\n      }\n\n      const tokenHolder = new FIFO();\n      tokens.forEach(token => tokenHolder.push(token));\n\n      const dialAbortControllers = _this.addrs.map(() => new AbortController());\n\n      let completedDials = 0;\n\n      try {\n        return yield pAny(_this.addrs.map( /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(function* (addr, i) {\n            const token = yield tokenHolder.shift(); // get token\n\n            let conn;\n\n            try {\n              const signal = dialAbortControllers[i].signal;\n              conn = yield _this.dialAction(addr, { ...options,\n                signal: options.signal ? anySignal([signal, options.signal]) : signal\n              }); // Remove the successful AbortController so it is not aborted\n\n              dialAbortControllers.splice(i, 1);\n            } finally {\n              completedDials++; // If we have more or equal dials remaining than tokens, recycle the token, otherwise release it\n\n              if (_this.addrs.length - completedDials >= tokens.length) {\n                tokenHolder.push(token);\n              } else {\n                _this.dialer.releaseToken(tokens.splice(tokens.indexOf(token), 1)[0]);\n              }\n            }\n\n            return conn;\n          });\n\n          return function (_x, _x2) {\n            return _ref.apply(this, arguments);\n          };\n        }()));\n      } finally {\n        dialAbortControllers.map(c => c.abort()); // success/failure happened, abort everything else\n\n        tokens.forEach(token => _this.dialer.releaseToken(token)); // release tokens back to the dialer\n      }\n    })();\n  }\n\n}\n\nmodule.exports = DialRequest;","map":null,"metadata":{},"sourceType":"script"}