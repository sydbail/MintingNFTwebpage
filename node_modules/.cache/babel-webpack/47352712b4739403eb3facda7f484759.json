{"ast":null,"code":"'use strict';\n\nvar _wrapAsyncGenerator = require(\"/Users/sydneybailey/Internship/Dapp/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\").default;\n\nvar _awaitAsyncGenerator = require(\"/Users/sydneybailey/Internship/Dapp/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/Dapp/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nvar _asyncGeneratorDelegate = require(\"/Users/sydneybailey/Internship/Dapp/node_modules/@babel/runtime/helpers/asyncGeneratorDelegate\").default;\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/repo').API<HTTPClientExtraOptions>} RepoAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {RepoAPI[\"gc\"]}\n   */\n  function gc() {\n    return _gc.apply(this, arguments);\n  }\n\n  function _gc() {\n    _gc = _wrapAsyncGenerator(function* (options = {}) {\n      const res = yield _awaitAsyncGenerator(api.post('repo/gc', {\n        timeout: options.timeout,\n        signal: options.signal,\n        searchParams: toUrlSearchParams(options),\n        headers: options.headers,\n        transform: res => {\n          return {\n            err: res.Error ? new Error(res.Error) : null,\n            cid: (res.Key || {})['/'] ? CID.parse(res.Key['/']) : null\n          };\n        }\n      }));\n      yield* _asyncGeneratorDelegate(_asyncIterator(res.ndjson()), _awaitAsyncGenerator);\n    });\n    return _gc.apply(this, arguments);\n  }\n\n  return gc;\n});","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Dapp/node_modules/ipfs-http-client/src/repo/gc.js"],"names":["CID","require","configure","toUrlSearchParams","module","exports","api","gc","options","res","post","timeout","signal","searchParams","headers","transform","err","Error","cid","Key","parse","ndjson"],"mappings":"AAAA;;;;;;;;;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAUC,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,6BAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AAEAG,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAACI,GAAG,IAAI;AAChC;AACF;AACA;AAHkC,WAIfC,EAJe;AAAA;AAAA;;AAAA;AAAA,8BAIhC,WAAqBC,OAAO,GAAG,EAA/B,EAAmC;AACjC,YAAMC,GAAG,8BAASH,GAAG,CAACI,IAAJ,CAAS,SAAT,EAAoB;AACpCC,QAAAA,OAAO,EAAEH,OAAO,CAACG,OADmB;AAEpCC,QAAAA,MAAM,EAAEJ,OAAO,CAACI,MAFoB;AAGpCC,QAAAA,YAAY,EAAEV,iBAAiB,CAACK,OAAD,CAHK;AAIpCM,QAAAA,OAAO,EAAEN,OAAO,CAACM,OAJmB;AAKpCC,QAAAA,SAAS,EAAGN,GAAD,IAAS;AAClB,iBAAO;AACLO,YAAAA,GAAG,EAAEP,GAAG,CAACQ,KAAJ,GAAY,IAAIA,KAAJ,CAAUR,GAAG,CAACQ,KAAd,CAAZ,GAAmC,IADnC;AAELC,YAAAA,GAAG,EAAE,CAACT,GAAG,CAACU,GAAJ,IAAW,EAAZ,EAAgB,GAAhB,IAAuBnB,GAAG,CAACoB,KAAJ,CAAUX,GAAG,CAACU,GAAJ,CAAQ,GAAR,CAAV,CAAvB,GAAiD;AAFjD,WAAP;AAID;AAVmC,OAApB,CAAT,CAAT;AAaA,oDAAQV,GAAG,CAACY,MAAJ,EAAR;AACD,KAnB+B;AAAA;AAAA;;AAoBhC,SAAOd,EAAP;AACD,CArByB,CAA1B","sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/repo').API<HTTPClientExtraOptions>} RepoAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {RepoAPI[\"gc\"]}\n   */\n  async function * gc (options = {}) {\n    const res = await api.post('repo/gc', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers,\n      transform: (res) => {\n        return {\n          err: res.Error ? new Error(res.Error) : null,\n          cid: (res.Key || {})['/'] ? CID.parse(res.Key['/']) : null\n        }\n      }\n    })\n\n    yield * res.ndjson()\n  }\n  return gc\n})\n"]},"metadata":{},"sourceType":"script"}