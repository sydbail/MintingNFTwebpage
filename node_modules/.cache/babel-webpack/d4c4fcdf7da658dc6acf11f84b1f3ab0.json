{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst debug = require('debug');\n\nconst log = Object.assign(debug('ipfs:mfs-preload'), {\n  error: debug('ipfs:mfs-preload:error')\n});\n/**\n * @typedef {PreloadOptions & MFSPreloadOptions} Options\n * @typedef {Object} MFSPreloadOptions\n * @property {number} [interval]\n * @typedef {import('./types').PreloadOptions} PreloadOptions\n */\n\n/**\n * @param {Object} config\n * @param {import('./types').Preload} config.preload\n * @param {import('ipfs-core-types/src/files').API} config.files\n * @param {Options} [config.options]\n */\n\nmodule.exports = ({\n  preload,\n  files,\n  options = {}\n}) => {\n  options.interval = options.interval || 30 * 1000;\n\n  if (!options.enabled) {\n    log('MFS preload disabled');\n\n    const noop = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* () {});\n\n      return function noop() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return {\n      start: noop,\n      stop: noop\n    };\n  }\n\n  let rootCid = '';\n  /** @type {any} */\n\n  let timeoutId;\n\n  const preloadMfs = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      try {\n        const stats = yield files.stat('/');\n        const nextRootCid = stats.cid.toString();\n\n        if (rootCid !== nextRootCid) {\n          log(`preloading updated MFS root ${rootCid} -> ${stats.cid}`);\n          yield preload(stats.cid);\n          rootCid = nextRootCid;\n        }\n      } catch (err) {\n        log.error('failed to preload MFS root', err);\n      } finally {\n        timeoutId = setTimeout(preloadMfs, options.interval);\n      }\n    });\n\n    return function preloadMfs() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return {\n    /**\n     * @returns {Promise<void>}\n     */\n    start() {\n      return _asyncToGenerator(function* () {\n        const stats = yield files.stat('/');\n        rootCid = stats.cid.toString();\n        log(`monitoring MFS root ${stats.cid}`);\n        timeoutId = setTimeout(preloadMfs, options.interval);\n      })();\n    },\n\n    /**\n     * @returns {void}\n     */\n    stop() {\n      clearTimeout(timeoutId);\n    }\n\n  };\n};","map":null,"metadata":{},"sourceType":"script"}