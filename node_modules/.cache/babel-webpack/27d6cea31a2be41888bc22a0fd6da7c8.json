{"ast":null,"code":"'use strict';\n\nvar _awaitAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\").default;\n\nvar _wrapAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nconst varint = require('varint');\n\nconst BufferList = require('bl/BufferList');\n\nconst POOL_SIZE = 10 * 1024;\n\nclass Encoder {\n  constructor() {\n    this._pool = new Uint8Array(POOL_SIZE);\n    this._poolOffset = 0;\n  }\n  /**\n   * Encodes the given message and returns it and its header\n   *\n   * @param {*} msg - The message object to encode\n   * @returns {Uint8Array|Uint8Array[]}\n   */\n\n\n  write(msg) {\n    const pool = this._pool;\n    let offset = this._poolOffset;\n    varint.encode(msg.id << 3 | msg.type, pool, offset);\n    offset += varint.encode.bytes;\n    varint.encode(msg.data ? msg.data.length : 0, pool, offset);\n    offset += varint.encode.bytes;\n    const header = pool.subarray(this._poolOffset, offset);\n\n    if (POOL_SIZE - offset < 100) {\n      this._pool = new Uint8Array(POOL_SIZE);\n      this._poolOffset = 0;\n    } else {\n      this._poolOffset = offset;\n    }\n\n    if (!msg.data) return header;\n    return [header, msg.data];\n  }\n\n}\n\nconst encoder = new Encoder(); // Encode one or more messages and yield a BufferList of encoded messages\n\nmodule.exports = source => function () {\n  var _encode = _wrapAsyncGenerator(function* () {\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n\n    var _iteratorError;\n\n    try {\n      for (var _iterator = _asyncIterator(source), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n        const msg = _value;\n\n        if (Array.isArray(msg)) {\n          yield new BufferList(msg.map(m => encoder.write(m)));\n        } else {\n          yield new BufferList(encoder.write(msg));\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          yield _awaitAsyncGenerator(_iterator.return());\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  });\n\n  function encode() {\n    return _encode.apply(this, arguments);\n  }\n\n  return encode;\n}()();","map":null,"metadata":{},"sourceType":"script"}