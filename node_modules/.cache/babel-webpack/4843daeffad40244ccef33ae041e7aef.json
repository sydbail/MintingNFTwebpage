{"ast":null,"code":"'use strict';\n\nvar _awaitAsyncGenerator = require(\"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\").default;\n\nvar _wrapAsyncGenerator = require(\"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nconst errCode = require('err-code');\n\nconst {\n  CID\n} = require('multiformats/cid');\n/**\n * @typedef {Object} Pinnable\n * @property {string | InstanceType<typeof window.String> | CID} [path]\n * @property {CID} [cid]\n * @property {boolean} [recursive]\n * @property {any} [metadata]\n *\n * @typedef {CID|string|InstanceType<typeof window.String>|Pinnable} ToPin\n * @typedef {ToPin|Iterable<ToPin>|AsyncIterable<ToPin>} Source\n *\n * @typedef {Object} Pin\n * @property {string|CID} path\n * @property {boolean} recursive\n * @property {any} [metadata]\n */\n\n/**\n * Transform one of:\n *\n * ```ts\n * CID\n * String\n * { cid: CID recursive, metadata }\n * { path: String recursive, metadata }\n * Iterable<CID>\n * Iterable<String>\n * Iterable<{ cid: CID recursive, metadata }>\n * Iterable<{ path: String recursive, metadata }>\n * AsyncIterable<CID>\n * AsyncIterable<String>\n * AsyncIterable<{ cid: CID recursive, metadata }>\n * AsyncIterable<{ path: String recursive, metadata }>\n * ```\n * Into:\n *\n * ```ts\n * AsyncIterable<{ path: CID|String, recursive:boolean, metadata }>\n * ```\n *\n * @param {Source} input\n * @returns {AsyncIterable<Pin>}\n */\n// eslint-disable-next-line complexity\n\n\nfunction normaliseInput(_x) {\n  return _normaliseInput.apply(this, arguments);\n}\n/**\n * @param {Pinnable} input\n */\n\n\nfunction _normaliseInput() {\n  _normaliseInput = _wrapAsyncGenerator(function* (input) {\n    // must give us something\n    if (input === null || input === undefined) {\n      throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT');\n    } // CID\n\n\n    if (input instanceof CID) {\n      yield toPin({\n        cid: input\n      });\n      return;\n    }\n\n    if (input instanceof String || typeof input === 'string') {\n      yield toPin({\n        path: input\n      });\n      return;\n    } // { cid: CID recursive, metadata }\n    // @ts-ignore - it still could be iterable or async iterable\n\n\n    if (input.cid != null || input.path != null) {\n      // @ts-ignore\n      return yield toPin(input);\n    } // Iterable<?>\n\n\n    if (Symbol.iterator in input) {\n      // @ts-ignore\n      const iterator = input[Symbol.iterator]();\n      const first = iterator.next();\n      if (first.done) return iterator; // Iterable<CID|String>\n\n      if (first.value instanceof CID || first.value instanceof String || typeof first.value === 'string') {\n        yield toPin({\n          cid: first.value\n        });\n\n        for (const cid of iterator) {\n          yield toPin({\n            cid\n          });\n        }\n\n        return;\n      } // Iterable<{ cid: CID recursive, metadata }>\n\n\n      if (first.value.cid != null || first.value.path != null) {\n        yield toPin(first.value);\n\n        for (const obj of iterator) {\n          yield toPin(obj);\n        }\n\n        return;\n      }\n\n      throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n    } // AsyncIterable<?>\n\n\n    if (Symbol.asyncIterator in input) {\n      // @ts-ignore\n      const iterator = input[Symbol.asyncIterator]();\n      const first = yield _awaitAsyncGenerator(iterator.next());\n      if (first.done) return iterator; // AsyncIterable<CID|String>\n\n      if (first.value instanceof CID || first.value instanceof String || typeof first.value === 'string') {\n        yield toPin({\n          cid: first.value\n        });\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n\n        var _iteratorError;\n\n        try {\n          for (var _iterator = _asyncIterator(iterator), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n            const cid = _value;\n            yield toPin({\n              cid\n            });\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              yield _awaitAsyncGenerator(_iterator.return());\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        return;\n      } // AsyncIterable<{ cid: CID|String recursive, metadata }>\n\n\n      if (first.value.cid != null || first.value.path != null) {\n        yield toPin(first.value);\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n\n        var _iteratorError2;\n\n        try {\n          for (var _iterator2 = _asyncIterator(iterator), _step2, _value2; _step2 = yield _awaitAsyncGenerator(_iterator2.next()), _iteratorNormalCompletion2 = _step2.done, _value2 = yield _awaitAsyncGenerator(_step2.value), !_iteratorNormalCompletion2; _iteratorNormalCompletion2 = true) {\n            const obj = _value2;\n            yield toPin(obj);\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n              yield _awaitAsyncGenerator(_iterator2.return());\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n\n        return;\n      }\n\n      throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n    }\n\n    throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n  });\n  return _normaliseInput.apply(this, arguments);\n}\n\nfunction toPin(input) {\n  const path = input.cid || `${input.path}`;\n\n  if (!path) {\n    throw errCode(new Error('Unexpected input: Please path either a CID or an IPFS path'), 'ERR_UNEXPECTED_INPUT');\n  }\n  /** @type {Pin} */\n\n\n  const pin = {\n    path,\n    recursive: input.recursive !== false\n  };\n\n  if (input.metadata != null) {\n    pin.metadata = input.metadata;\n  }\n\n  return pin;\n}\n\nmodule.exports = {\n  normaliseInput\n};","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Demo/node_modules/ipfs-core-utils/src/pins/normalise-input.js"],"names":["errCode","require","CID","normaliseInput","input","undefined","Error","toPin","cid","String","path","Symbol","iterator","first","next","done","value","obj","asyncIterator","pin","recursive","metadata","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst errCode = require('err-code')\nconst { CID } = require('multiformats/cid')\n\n/**\n * @typedef {Object} Pinnable\n * @property {string | InstanceType<typeof window.String> | CID} [path]\n * @property {CID} [cid]\n * @property {boolean} [recursive]\n * @property {any} [metadata]\n *\n * @typedef {CID|string|InstanceType<typeof window.String>|Pinnable} ToPin\n * @typedef {ToPin|Iterable<ToPin>|AsyncIterable<ToPin>} Source\n *\n * @typedef {Object} Pin\n * @property {string|CID} path\n * @property {boolean} recursive\n * @property {any} [metadata]\n */\n\n/**\n * Transform one of:\n *\n * ```ts\n * CID\n * String\n * { cid: CID recursive, metadata }\n * { path: String recursive, metadata }\n * Iterable<CID>\n * Iterable<String>\n * Iterable<{ cid: CID recursive, metadata }>\n * Iterable<{ path: String recursive, metadata }>\n * AsyncIterable<CID>\n * AsyncIterable<String>\n * AsyncIterable<{ cid: CID recursive, metadata }>\n * AsyncIterable<{ path: String recursive, metadata }>\n * ```\n * Into:\n *\n * ```ts\n * AsyncIterable<{ path: CID|String, recursive:boolean, metadata }>\n * ```\n *\n * @param {Source} input\n * @returns {AsyncIterable<Pin>}\n */\n// eslint-disable-next-line complexity\nasync function * normaliseInput (input) {\n  // must give us something\n  if (input === null || input === undefined) {\n    throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  // CID\n  if (input instanceof CID) {\n    yield toPin({ cid: input })\n    return\n  }\n\n  if (input instanceof String || typeof input === 'string') {\n    yield toPin({ path: input })\n    return\n  }\n\n  // { cid: CID recursive, metadata }\n  // @ts-ignore - it still could be iterable or async iterable\n  if (input.cid != null || input.path != null) {\n    // @ts-ignore\n    return yield toPin(input)\n  }\n\n  // Iterable<?>\n  if (Symbol.iterator in input) {\n    // @ts-ignore\n    const iterator = input[Symbol.iterator]()\n    const first = iterator.next()\n    if (first.done) return iterator\n\n    // Iterable<CID|String>\n    if (first.value instanceof CID || first.value instanceof String || typeof first.value === 'string') {\n      yield toPin({ cid: first.value })\n      for (const cid of iterator) {\n        yield toPin({ cid })\n      }\n      return\n    }\n\n    // Iterable<{ cid: CID recursive, metadata }>\n    if (first.value.cid != null || first.value.path != null) {\n      yield toPin(first.value)\n      for (const obj of iterator) {\n        yield toPin(obj)\n      }\n      return\n    }\n\n    throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  // AsyncIterable<?>\n  if (Symbol.asyncIterator in input) {\n    // @ts-ignore\n    const iterator = input[Symbol.asyncIterator]()\n    const first = await iterator.next()\n    if (first.done) return iterator\n\n    // AsyncIterable<CID|String>\n    if (first.value instanceof CID || first.value instanceof String || typeof first.value === 'string') {\n      yield toPin({ cid: first.value })\n      for await (const cid of iterator) {\n        yield toPin({ cid })\n      }\n      return\n    }\n\n    // AsyncIterable<{ cid: CID|String recursive, metadata }>\n    if (first.value.cid != null || first.value.path != null) {\n      yield toPin(first.value)\n      for await (const obj of iterator) {\n        yield toPin(obj)\n      }\n      return\n    }\n\n    throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT')\n}\n\n/**\n * @param {Pinnable} input\n */\nfunction toPin (input) {\n  const path = input.cid || `${input.path}`\n\n  if (!path) {\n    throw errCode(new Error('Unexpected input: Please path either a CID or an IPFS path'), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  /** @type {Pin} */\n  const pin = {\n    path,\n    recursive: input.recursive !== false\n  }\n\n  if (input.metadata != null) {\n    pin.metadata = input.metadata\n  }\n\n  return pin\n}\n\nmodule.exports = {\n  normaliseInput\n}\n"]},"metadata":{},"sourceType":"script"}