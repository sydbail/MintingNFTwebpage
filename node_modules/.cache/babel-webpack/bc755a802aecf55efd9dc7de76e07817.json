{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst PeerQueue = require('../peer-list/peer-queue');\n\nconst utils = require('../utils'); // TODO: Temporary until parallel dial in Switch have a proper\n// timeout. Requires async/await refactor of transports and\n// dial abort logic. This gives us 30s to complete the `queryFunc`.\n// This should help reduce the high end call times of queries\n\n\nconst QUERY_FUNC_TIMEOUT = 30e3;\n/**\n * @typedef {import('peer-id')} PeerId\n */\n\n/**\n * Manages a single Path through the DHT.\n */\n\nclass Path {\n  /**\n   * Creates a Path.\n   *\n   * @param {import('./run')} run\n   * @param {import('./index').QueryFunc} queryFunc\n   */\n  constructor(run, queryFunc) {\n    this.run = run;\n    this.queryFunc = utils.withTimeout(queryFunc, QUERY_FUNC_TIMEOUT);\n    if (!this.queryFunc) throw new Error('Path requires a `queryFn` to be specified');\n    if (typeof this.queryFunc !== 'function') throw new Error('Path expected `queryFn` to be a function. Got ' + typeof this.queryFunc);\n    /** @type {PeerId[]} */\n\n    this.initialPeers = [];\n    /** @type {PeerQueue | null} */\n\n    this.peersToQuery = null;\n    /** @type {import('./index').QueryResult | null} */\n\n    this.res = null;\n  }\n  /**\n   * Add a peer to the set of peers that are used to intialize the path.\n   *\n   * @param {PeerId} peer\n   */\n\n\n  addInitialPeer(peer) {\n    this.initialPeers.push(peer);\n  }\n  /**\n   * Execute the path\n   */\n\n\n  execute() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      // Create a queue of peers ordered by distance from the key\n      const queue = yield PeerQueue.fromKey(_this.run.query.key); // Add initial peers to the queue\n\n      _this.peersToQuery = queue;\n      yield Promise.all(_this.initialPeers.map(peer => _this.addPeerToQuery(peer)));\n      yield _this.run.workerQueue(_this);\n    })();\n  }\n  /**\n   * Add a peer to the peers to be queried.\n   *\n   * @param {PeerId} peer\n   */\n\n\n  addPeerToQuery(peer) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      // Don't add self\n      if (_this2.run.query.dht._isSelf(peer)) {\n        return;\n      } // The paths must be disjoint, meaning that no two paths in the Query may\n      // traverse the same peer\n\n\n      if (_this2.run.peersSeen.has(peer.toB58String())) {\n        return;\n      }\n\n      if (_this2.peersToQuery) {\n        yield _this2.peersToQuery.enqueue(peer);\n      }\n    })();\n  }\n\n}\n\nmodule.exports = Path;","map":null,"metadata":{},"sourceType":"script"}