{"ast":null,"code":"import _asyncToGenerator from \"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { CID } from 'multiformats/cid';\nimport * as dagPb from '@ipld/dag-pb';\nimport { sha256 } from 'multiformats/hashes/sha2';\n\nconst persist = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (buffer, blockstore, options) {\n    if (!options.codec) {\n      options.codec = dagPb;\n    }\n\n    if (!options.hasher) {\n      options.hasher = sha256;\n    }\n\n    if (options.cidVersion === undefined) {\n      options.cidVersion = 1;\n    }\n\n    if (options.codec === dagPb && options.hasher !== sha256) {\n      options.cidVersion = 1;\n    }\n\n    const multihash = yield options.hasher.digest(buffer);\n    const cid = CID.create(options.cidVersion, options.codec.code, multihash);\n\n    if (!options.onlyHash) {\n      yield blockstore.put(cid, buffer, {\n        signal: options.signal\n      });\n    }\n\n    return cid;\n  });\n\n  return function persist(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport default persist;","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Demo/node_modules/ipfs-unixfs-importer/esm/src/utils/persist.js"],"names":["CID","dagPb","sha256","persist","buffer","blockstore","options","codec","hasher","cidVersion","undefined","multihash","digest","cid","create","code","onlyHash","put","signal"],"mappings":";AAAA,SAASA,GAAT,QAAoB,kBAApB;AACA,OAAO,KAAKC,KAAZ,MAAuB,cAAvB;AACA,SAASC,MAAT,QAAuB,0BAAvB;;AACA,MAAMC,OAAO;AAAA,+BAAG,WAAOC,MAAP,EAAeC,UAAf,EAA2BC,OAA3B,EAAuC;AACrD,QAAI,CAACA,OAAO,CAACC,KAAb,EAAoB;AAClBD,MAAAA,OAAO,CAACC,KAAR,GAAgBN,KAAhB;AACD;;AACD,QAAI,CAACK,OAAO,CAACE,MAAb,EAAqB;AACnBF,MAAAA,OAAO,CAACE,MAAR,GAAiBN,MAAjB;AACD;;AACD,QAAII,OAAO,CAACG,UAAR,KAAuBC,SAA3B,EAAsC;AACpCJ,MAAAA,OAAO,CAACG,UAAR,GAAqB,CAArB;AACD;;AACD,QAAIH,OAAO,CAACC,KAAR,KAAkBN,KAAlB,IAA2BK,OAAO,CAACE,MAAR,KAAmBN,MAAlD,EAA0D;AACxDI,MAAAA,OAAO,CAACG,UAAR,GAAqB,CAArB;AACD;;AACD,UAAME,SAAS,SAASL,OAAO,CAACE,MAAR,CAAeI,MAAf,CAAsBR,MAAtB,CAAxB;AACA,UAAMS,GAAG,GAAGb,GAAG,CAACc,MAAJ,CAAWR,OAAO,CAACG,UAAnB,EAA+BH,OAAO,CAACC,KAAR,CAAcQ,IAA7C,EAAmDJ,SAAnD,CAAZ;;AACA,QAAI,CAACL,OAAO,CAACU,QAAb,EAAuB;AACrB,YAAMX,UAAU,CAACY,GAAX,CAAeJ,GAAf,EAAoBT,MAApB,EAA4B;AAAEc,QAAAA,MAAM,EAAEZ,OAAO,CAACY;AAAlB,OAA5B,CAAN;AACD;;AACD,WAAOL,GAAP;AACD,GAnBY;;AAAA,kBAAPV,OAAO;AAAA;AAAA;AAAA,GAAb;;AAoBA,eAAeA,OAAf","sourcesContent":["import { CID } from 'multiformats/cid';\nimport * as dagPb from '@ipld/dag-pb';\nimport { sha256 } from 'multiformats/hashes/sha2';\nconst persist = async (buffer, blockstore, options) => {\n  if (!options.codec) {\n    options.codec = dagPb;\n  }\n  if (!options.hasher) {\n    options.hasher = sha256;\n  }\n  if (options.cidVersion === undefined) {\n    options.cidVersion = 1;\n  }\n  if (options.codec === dagPb && options.hasher !== sha256) {\n    options.cidVersion = 1;\n  }\n  const multihash = await options.hasher.digest(buffer);\n  const cid = CID.create(options.cidVersion, options.codec.code, multihash);\n  if (!options.onlyHash) {\n    await blockstore.put(cid, buffer, { signal: options.signal });\n  }\n  return cid;\n};\nexport default persist;"]},"metadata":{},"sourceType":"module"}