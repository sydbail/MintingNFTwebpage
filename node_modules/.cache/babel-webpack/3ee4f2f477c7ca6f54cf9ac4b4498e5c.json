{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/web3.service\";\nimport * as i2 from \"../services/basiccontract.service\";\nimport * as i3 from \"../services/ipfscontract.service\";\nimport * as i4 from \"../services/notransfercontract.service\";\nimport * as i5 from \"../services/notransferipfscontract.service\";\nimport * as i6 from \"@angular/common\";\nimport * as i7 from \"@angular/forms\";\n\nfunction MintComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 3);\n    i0.ɵɵelementStart(1, \"h1\");\n    i0.ɵɵtext(2, \" Mint NFTs \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"label\", 4);\n    i0.ɵɵtext(4, \"To Address: \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"input\", 5, 6);\n    i0.ɵɵlistener(\"ngModelChange\", function MintComponent_div_0_Template_input_ngModelChange_5_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.recipientAddress = $event;\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"button\", 7);\n    i0.ɵɵlistener(\"click\", function MintComponent_div_0_Template_button_click_7_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return ctx_r6.mintCoin();\n    });\n    i0.ɵɵtext(8, \" Mint \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.recipientAddress);\n  }\n}\n\nfunction MintComponent_div_1_div_5_p_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const file_r8 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" Token Metadata: \", file_r8.tokenURI, \" \");\n  }\n}\n\nfunction MintComponent_div_1_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelementStart(1, \"p\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"p\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(5, MintComponent_div_1_div_5_p_5_Template, 2, 1, \"p\", 11);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const file_r8 = ctx.$implicit;\n    const i_r9 = ctx.index;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" Image: \", file_r8.name, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" TokenID: \", i_r9 + 1, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", file_r8.tokenURI);\n  }\n}\n\nfunction MintComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵelementStart(1, \"h1\");\n    i0.ɵɵtext(2, \" Minting Summary \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"p\", 9);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(5, MintComponent_div_1_div_5_Template, 6, 3, \"div\", 10);\n    i0.ɵɵelementStart(6, \"ul\");\n    i0.ɵɵtext(7, \" To view NFTs in wallet: \");\n    i0.ɵɵelementStart(8, \"li\");\n    i0.ɵɵtext(9, \" 1) Use add token button in metamask wallet \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"li\");\n    i0.ɵɵtext(11, \" 2) Enter contract address: 0x2910BbD2EA46b7857Ac04EC15E9d2368Ec0c5421 \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"li\");\n    i0.ɵɵtext(13, \" 3) Set token decimal to 0 \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"li\");\n    i0.ɵɵtext(15, \" 4) NFTs should now appear under assets in wallet \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate3(\" \", ctx_r1.filesList.length, \" \", ctx_r1.userContract, \" NFTs minted to account \", ctx_r1.recipientAddress, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.filesList);\n  }\n}\n\nfunction MintComponent_div_2_p_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r13 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\" Owner of NFT \", ctx_r13.tokenID, \" is account \", ctx_r13.ownerAddr, \" \");\n  }\n}\n\nfunction MintComponent_div_2_p_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r14 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\" Token URI for NFT \", ctx_r14.getID, \" is \", ctx_r14.tokenURI, \" \");\n  }\n}\n\nfunction MintComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r16 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 12);\n    i0.ɵɵelementStart(1, \"h1\");\n    i0.ɵɵtext(2, \" Check Owner \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"label\", 4);\n    i0.ɵɵtext(4, \"Token ID\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"p\", 13);\n    i0.ɵɵelementStart(6, \"input\", 14, 15);\n    i0.ɵɵlistener(\"ngModelChange\", function MintComponent_div_2_Template_input_ngModelChange_6_listener($event) {\n      i0.ɵɵrestoreView(_r16);\n      const ctx_r15 = i0.ɵɵnextContext();\n      return ctx_r15.getID = $event;\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"button\", 16);\n    i0.ɵɵlistener(\"click\", function MintComponent_div_2_Template_button_click_8_listener() {\n      i0.ɵɵrestoreView(_r16);\n      const ctx_r17 = i0.ɵɵnextContext();\n      return ctx_r17.getOwner();\n    });\n    i0.ɵɵtext(9, \" Check \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(10, MintComponent_div_2_p_10_Template, 2, 2, \"p\", 11);\n    i0.ɵɵelementStart(11, \"h1\");\n    i0.ɵɵtext(12, \" Get Token Metadata \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"label\", 4);\n    i0.ɵɵtext(14, \" Token ID \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"input\", 17);\n    i0.ɵɵlistener(\"ngModelChange\", function MintComponent_div_2_Template_input_ngModelChange_15_listener($event) {\n      i0.ɵɵrestoreView(_r16);\n      const ctx_r18 = i0.ɵɵnextContext();\n      return ctx_r18.getID = $event;\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(16, \"button\", 16);\n    i0.ɵɵlistener(\"click\", function MintComponent_div_2_Template_button_click_16_listener() {\n      i0.ɵɵrestoreView(_r16);\n      const ctx_r19 = i0.ɵɵnextContext();\n      return ctx_r19.getURI(ctx_r19.getID);\n    });\n    i0.ɵɵtext(17, \" Check \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(18, MintComponent_div_2_p_18_Template, 2, 2, \"p\", 11);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"ngModel\", ctx_r2.getID);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.ownerAddr);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngModel\", ctx_r2.getID);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.tokenURI);\n  }\n}\n\nexport class MintComponent {\n  _ngZone;\n  web3Service;\n  basicService;\n  ipfsconService;\n  ntbasicService;\n  ntipfsService;\n  filesList;\n  userContract;\n  window; //metamask info\n\n  account;\n  accounts;\n  balance;\n  tokenID;\n  getID;\n  tokenURI;\n  ownerAddr;\n  recipientAddress;\n  status;\n  finished = false; //ngOnInit(): void {}\n\n  constructor(_ngZone, web3Service, basicService, ipfsconService, ntbasicService, ntipfsService) {\n    this._ngZone = _ngZone;\n    this.web3Service = web3Service;\n    this.basicService = basicService;\n    this.ipfsconService = ipfsconService;\n    this.ntbasicService = ntbasicService;\n    this.ntipfsService = ntipfsService;\n    this.onReady();\n  }\n\n  onReady = () => {\n    // Get the initial account balance so it can be displayed.\n    this.web3Service.getAccounts().subscribe(accs => {\n      this.accounts = accs;\n      this.account = this.accounts[0];\n      console.log(\"Your contract is: \", this.userContract);\n      console.log(\"Your account is: \", this.account);\n    }, err => alert(err));\n  };\n\n  ngOnInit() {}\n\n  refreshBalance = () => {\n    if (this.userContract == 'basicNFT') {\n      this.basicService.getBalance(this.account).subscribe(value => {\n        this.balance = value;\n      }, e => {\n        this.setStatus('Error getting balance; see log.');\n      });\n    } else if (this.userContract == 'IPFSNFT') {\n      this.ipfsconService.getBalance(this.account).subscribe(value => {\n        this.balance = value;\n      }, e => {\n        this.setStatus('Error getting balance; see log.');\n      });\n    } else if (this.userContract == 'noTransferbasicNFT') {\n      this.ntbasicService.getBalance(this.account).subscribe(value => {\n        this.balance = value;\n      }, e => {\n        this.setStatus('Error getting balance; see log.');\n      });\n    } else {\n      this.ntipfsService.getBalance(this.account).subscribe(value => {\n        this.balance = value;\n      }, e => {\n        this.setStatus('Error getting balance; see log.');\n      });\n    }\n  };\n  setStatus = message => {\n    this.status = message;\n  };\n  getOwner = () => {\n    if (this.userContract == 'basicNFT') {\n      this.basicService.getOwner(this.getID).subscribe(value => {\n        this.ownerAddr = value;\n        console.log(\"owner is \", this.ownerAddr);\n      }, e => {\n        this.setStatus('Error getting Owner; see log');\n      });\n    } else if (this.userContract == 'IPFSNFT') {\n      this.ipfsconService.getOwner(this.getID).subscribe(value => {\n        this.ownerAddr = value;\n        console.log(\"owner is \", this.ownerAddr);\n      }, e => {\n        this.setStatus('Error getting Owner; see log');\n      });\n    } else if (this.userContract == 'noTransferbasicNFT') {\n      this.ntbasicService.getOwner(this.getID).subscribe(value => {\n        this.ownerAddr = value;\n        console.log(\"owner is \", this.ownerAddr);\n      }, e => {\n        this.setStatus('Error getting Owner; see log');\n      });\n    } else {\n      this.ntipfsService.getOwner(this.getID).subscribe(value => {\n        this.ownerAddr = value;\n        console.log(\"owner is \", this.ownerAddr);\n      }, e => {\n        this.setStatus('Error getting Owner; see log');\n      });\n    }\n  };\n  static ɵfac = function MintComponent_Factory(t) {\n    return new (t || MintComponent)(i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i1.Web3Service), i0.ɵɵdirectiveInject(i2.BasicContractService), i0.ɵɵdirectiveInject(i3.IpfscontractService), i0.ɵɵdirectiveInject(i4.NotransfercontractService), i0.ɵɵdirectiveInject(i5.NotransferipfscontractService));\n  };\n  static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MintComponent,\n    selectors: [[\"app-mint\"]],\n    inputs: {\n      filesList: \"filesList\",\n      userContract: \"userContract\"\n    },\n    decls: 3,\n    vars: 3,\n    consts: [[\"class\", \"minter\", 4, \"ngIf\"], [\"class\", \"summary\", 4, \"ngIf\"], [\"class\", \"Ownerbox\", 4, \"ngIf\"], [1, \"minter\"], [1, \"label\"], [\"name\", \"recipientAddress\", \"type\", \"text\", \"placeholder\", \"0x93e66d9baea28c17d9fc393b53e3fbdd76899dae\", \"name\", \"recipientAddress\", \"required\", \"\", 1, \"addressinput\", 3, \"ngModel\", \"ngModelChange\"], [\"recipientAddressModel\", \"ngModel\"], [1, \"mint-btn\", 3, \"click\"], [1, \"summary\"], [1, \"result\"], [4, \"ngFor\", \"ngForOf\"], [4, \"ngIf\"], [1, \"Ownerbox\"], [1, \"control\"], [\"name\", \"ID\", \"type\", \"text\", \"placeholder\", \"1\", \"required\", \"\", 1, \"input\", 3, \"ngModel\", \"ngModelChange\"], [\"tokenIDModel\", \"ngModel\"], [3, \"click\"], [\"type\", \"text\", 3, \"ngModel\", \"ngModelChange\"]],\n    template: function MintComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, MintComponent_div_0_Template, 9, 1, \"div\", 0);\n        i0.ɵɵtemplate(1, MintComponent_div_1_Template, 16, 4, \"div\", 1);\n        i0.ɵɵtemplate(2, MintComponent_div_2_Template, 19, 4, \"div\", 2);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.finished == false);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.finished);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.finished);\n      }\n    },\n    directives: [i6.NgIf, i7.DefaultValueAccessor, i7.RequiredValidator, i7.NgControlStatus, i7.NgModel, i6.NgForOf],\n    styles: [\".minter[_ngcontent-%COMP%], .summary[_ngcontent-%COMP%] {\\n  background-color: whitesmoke;\\n  width: 450px;\\n  border: 2px solid lightgrey;\\n  border-radius: 4px;\\n  padding: 10px;\\n  position: absolute;\\n  top: 150px;\\n  left: 100px;\\n}\\n\\n.addressinput[_ngcontent-%COMP%] {\\n  width: 325px;\\n}\\n\\n.mint-btn[_ngcontent-%COMP%] {\\n  font-size: 0.875rem;\\n  width: 75px;\\n  border: 2px solid #2196F3;\\n  color: #2196F3;\\n  background-color: whitesmoke;\\n  border-radius: 3px;\\n  padding: 5px;\\n  vertical-align: middle;\\n }\\n\\n.mint-btn[_ngcontent-%COMP%]:hover {\\n  background-color: #2196F3;\\n  color: white;\\n  border-color: #2196F3;\\n}\\n\\n.result[_ngcontent-%COMP%] {\\n  color: black;\\n  font-family: 'Lato', sans-serif;\\n  font-size: 100%;\\n}\\n\\n.Ownerbox[_ngcontent-%COMP%] {\\n  text-align: left;\\n  background-color: whitesmoke;\\n  \\n  width: 450px;\\n  border: 2px solid lightgrey;\\n  border-radius: 4px;\\n  padding: 10px;\\n  position: absolute;\\n  left: 800px;\\n  top: 150px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1pbnQuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLDRCQUE0QjtFQUM1QixZQUFZO0VBQ1osMkJBQTJCO0VBQzNCLGtCQUFrQjtFQUNsQixhQUFhO0VBQ2Isa0JBQWtCO0VBQ2xCLFVBQVU7RUFDVixXQUFXO0FBQ2I7O0FBRUE7RUFDRSxZQUFZO0FBQ2Q7O0FBQ0E7RUFDRSxtQkFBbUI7RUFDbkIsV0FBVztFQUNYLHlCQUF5QjtFQUN6QixjQUFjO0VBQ2QsNEJBQTRCO0VBQzVCLGtCQUFrQjtFQUNsQixZQUFZO0VBQ1osc0JBQXNCO0NBQ3ZCOztBQUNEO0VBQ0UseUJBQXlCO0VBQ3pCLFlBQVk7RUFDWixxQkFBcUI7QUFDdkI7O0FBQ0E7RUFDRSxZQUFZO0VBQ1osK0JBQStCO0VBQy9CLGVBQWU7QUFDakI7O0FBQ0E7RUFDRSxnQkFBZ0I7RUFDaEIsNEJBQTRCO0VBQzVCLGtCQUFrQjtFQUNsQixZQUFZO0VBQ1osMkJBQTJCO0VBQzNCLGtCQUFrQjtFQUNsQixhQUFhO0VBQ2Isa0JBQWtCO0VBQ2xCLFdBQVc7RUFDWCxVQUFVO0FBQ1oiLCJmaWxlIjoibWludC5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLm1pbnRlciwgLnN1bW1hcnkge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZXNtb2tlO1xuICB3aWR0aDogNDUwcHg7XG4gIGJvcmRlcjogMnB4IHNvbGlkIGxpZ2h0Z3JleTtcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xuICBwYWRkaW5nOiAxMHB4O1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogMTUwcHg7XG4gIGxlZnQ6IDEwMHB4O1xufVxuXG4uYWRkcmVzc2lucHV0IHtcbiAgd2lkdGg6IDMyNXB4O1xufVxuLm1pbnQtYnRuIHtcbiAgZm9udC1zaXplOiAwLjg3NXJlbTtcbiAgd2lkdGg6IDc1cHg7XG4gIGJvcmRlcjogMnB4IHNvbGlkICMyMTk2RjM7XG4gIGNvbG9yOiAjMjE5NkYzO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZXNtb2tlO1xuICBib3JkZXItcmFkaXVzOiAzcHg7XG4gIHBhZGRpbmc6IDVweDtcbiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcbiB9XG4ubWludC1idG46aG92ZXIge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjE5NkYzO1xuICBjb2xvcjogd2hpdGU7XG4gIGJvcmRlci1jb2xvcjogIzIxOTZGMztcbn1cbi5yZXN1bHQge1xuICBjb2xvcjogYmxhY2s7XG4gIGZvbnQtZmFtaWx5OiAnTGF0bycsIHNhbnMtc2VyaWY7XG4gIGZvbnQtc2l6ZTogMTAwJTtcbn1cbi5Pd25lcmJveCB7XG4gIHRleHQtYWxpZ246IGxlZnQ7XG4gIGJhY2tncm91bmQtY29sb3I6IHdoaXRlc21va2U7XG4gIC8qaGVpZ2h0OiAxMTVweDsgKi9cbiAgd2lkdGg6IDQ1MHB4O1xuICBib3JkZXI6IDJweCBzb2xpZCBsaWdodGdyZXk7XG4gIGJvcmRlci1yYWRpdXM6IDRweDtcbiAgcGFkZGluZzogMTBweDtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBsZWZ0OiA4MDBweDtcbiAgdG9wOiAxNTBweDtcbn1cbiJdfQ== */\"]\n  });\n} //  mintCoin = async () => {\n\nfunction async() {}\n\nmintCoin();\n{\n  if (this.userContract == 'basicNFT') {\n    for (let i = 0; i < this.filesList.length; i++) {\n      this.setStatus('Initiating transaction... (please wait)');\n      const response = await this.basicService.mintCoin(this.account).toPromise();\n      /*  this.basicService.mintCoin(this.account)\n          .subscribe((value: any) =>{\n            this.setStatus('Transaction complete!');\n            this.refreshBalance();\n            //this.finished = true;\n          }, e => this.setStatus('Error sending coin; see log.')) */\n    }\n  } else if (this.userContract == 'IPFSNFT') {\n    for (let i = 0; i < this.filesList.length; i++) {\n      this.setStatus('Initiating transaction... (please wait)');\n      this.ipfsconService.mintCoin(this.account, this.filesList[i].imghash, this.filesList[i].metaHash).subscribe(value => {\n        this.setStatus('Transaction complete!');\n        this.refreshBalance();\n        this.filesList[i].tokenURI = this.getURI(value); //this.finished = true;\n      }, e => this.setStatus('Error sending coin; see log.'));\n    }\n\n    ;\n  } else if (this.userContract == 'noTransferbasicNFT') {\n    for (let i = 0; i < this.filesList.length; i++) {\n      this.setStatus('Initiating transaction... (please wait)');\n      this.ntbasicService.mintCoin(this.account).subscribe(value => {\n        this.setStatus('Transaction complete!');\n        this.refreshBalance(); //this.finished = true;\n      }, e => this.setStatus('Error sending coin; see log.'));\n    }\n\n    ;\n  } else {\n    for (let i = 0; i < this.filesList.length; i++) {\n      this.setStatus('Initiating transaction... (please wait)');\n      this.ntipfsService.mintCoin(this.account, this.filesList[i].imghash, this.filesList[i].metaHash).subscribe(value => {\n        this.setStatus('Transaction complete!');\n        this.refreshBalance();\n        this.filesList[i].tokenURI = this.getURI(value); //this.finished = true;\n      }, e => this.setStatus('Error sending coin; see log.'));\n    }\n\n    ;\n  }\n\n  this.finished = true;\n}\n; //end mint coin\n//METADATA ONLY contracts\n\ngetURI = nftID => {\n  if (this.userContract == 'IPFSNFT') {\n    this.ipfsconService.getTokenUri(nftID).subscribe(value => {\n      this.tokenURI = value;\n      console.log(\"URI is \", this.tokenURI);\n    }, e => {\n      this.setStatus('Error getting URI; see log');\n    });\n  } else if (this.userContract == 'noTransferIPFSNFT') {\n    this.ntipfsService.getTokenUri(nftID).subscribe(value => {\n      this.tokenURI = value;\n      console.log(\"URI is \", this.tokenURI);\n    }, e => {\n      this.setStatus('Error getting Owner; see log');\n    });\n  } else {\n    console.log(\"Your tokens do not contain Metadata\");\n  }\n};","map":{"version":3,"sources":["/Users/sydneybailey/Internship/contract-testing/src/app/mint/mint.component.ts","/Users/sydneybailey/Internship/contract-testing/src/app/mint/mint.component.html"],"names":[],"mappings":"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","sourcesContent":["import { Component, HostListener, NgZone, OnInit, Input } from '@angular/core';\nimport { Web3Service } from '../services/web3.service';\n//contract services\nimport { BasicContractService } from '../services/basiccontract.service';\nimport { IpfscontractService } from '../services/ipfscontract.service';\nimport { NotransfercontractService } from '../services/notransfercontract.service';\nimport { NotransferipfscontractService } from '../services/notransferipfscontract.service';\n\n@Component({\n  selector: 'app-mint',\n  templateUrl: './mint.component.html',\n  styleUrls: ['./mint.component.css']\n})\nexport class MintComponent implements OnInit {\n  @Input() filesList: any;\n  @Input() userContract: any;\n  window: any\n  //metamask info\n  account?: any;\n  accounts?: any;\n\n  balance?: number;\n  tokenID?: number;\n  getID?: any;\n  tokenURI?: any;\n  ownerAddr?: number;\n  recipientAddress?: string;\n  status?: string;\n  finished: boolean = false;\n\n  //ngOnInit(): void {}\n\n  constructor(\n    private _ngZone: NgZone,\n    private web3Service: Web3Service,\n    private basicService: BasicContractService,\n    private ipfsconService: IpfscontractService,\n    private ntbasicService: NotransfercontractService,\n    private ntipfsService: NotransferipfscontractService\n    ) {\n    this.onReady();\n  }\n\n  onReady = () => {\n    // Get the initial account balance so it can be displayed.\n    this.web3Service.getAccounts().subscribe(accs => {\n      this.accounts = accs;\n      this.account = this.accounts[0];\n      console.log(\"Your contract is: \", this.userContract);\n      console.log(\"Your account is: \", this.account);\n    }, err => alert(err))\n  };\n\n  ngOnInit(): void {}\n\n  refreshBalance = () => {\n    if (this.userContract == 'basicNFT'){\n      this.basicService.getBalance(this.account)\n      .subscribe((value: any) => {\n        this.balance = value\n      }, e => {this.setStatus('Error getting balance; see log.')})\n    } else if (this.userContract == 'IPFSNFT'){\n        this.ipfsconService.getBalance(this.account)\n        .subscribe((value: any) => {\n          this.balance = value\n      }, e => {this.setStatus('Error getting balance; see log.')})\n    } else if (this.userContract == 'noTransferbasicNFT'){\n        this.ntbasicService.getBalance(this.account)\n        .subscribe((value: any) => {\n          this.balance = value\n        }, e => {this.setStatus('Error getting balance; see log.')})\n    } else {\n        this.ntipfsService.getBalance(this.account)\n        .subscribe((value: any) => {\n          this.balance = value\n        }, e => {this.setStatus('Error getting balance; see log.')})\n     }\n  };\n\n  setStatus = (message: any) => {\n    this.status = message;\n  };\n\n  getOwner = () => {\n    if(this.userContract == 'basicNFT'){\n      this.basicService.getOwner(this.getID)\n      .subscribe(value => {\n        this.ownerAddr = value\n        console.log(\"owner is \", this.ownerAddr)\n     }, e => {this.setStatus('Error getting Owner; see log')})\n   } else if (this.userContract == 'IPFSNFT'){\n      this.ipfsconService.getOwner(this.getID)\n      .subscribe(value => {\n        this.ownerAddr = value\n        console.log(\"owner is \", this.ownerAddr)\n      }, e => {this.setStatus('Error getting Owner; see log')})\n   } else if (this.userContract == 'noTransferbasicNFT'){\n      this.ntbasicService.getOwner(this.getID)\n      .subscribe(value => {\n        this.ownerAddr = value\n        console.log(\"owner is \", this.ownerAddr)\n      }, e => {this.setStatus('Error getting Owner; see log')})\n  } else {\n      this.ntipfsService.getOwner(this.getID)\n      .subscribe(value => {\n        this.ownerAddr = value\n        console.log(\"owner is \", this.ownerAddr)\n      }, e => {this.setStatus('Error getting Owner; see log')})\n    }\n  };\n\n//  mintCoin = async () => {\n function async mintCoin () {\n    if(this.userContract == 'basicNFT'){\n      for(let i=0; i < this.filesList.length; i++ ){\n        this.setStatus('Initiating transaction... (please wait)');\n        const response = await this.basicService.mintCoin(this.account).toPromise();\n\n      /*  this.basicService.mintCoin(this.account)\n          .subscribe((value: any) =>{\n            this.setStatus('Transaction complete!');\n            this.refreshBalance();\n            //this.finished = true;\n          }, e => this.setStatus('Error sending coin; see log.')) */\n      }\n    } else if (this.userContract == 'IPFSNFT'){\n      for(let i=0; i < this.filesList.length; i++ ){\n        this.setStatus('Initiating transaction... (please wait)');\n\n        this.ipfsconService.mintCoin(this.account, this.filesList[i].imghash, this.filesList[i].metaHash)\n          .subscribe((value: any) =>{\n            this.setStatus('Transaction complete!');\n            this.refreshBalance();\n            this.filesList[i].tokenURI = this.getURI(value);\n            //this.finished = true;\n          }, e => this.setStatus('Error sending coin; see log.'))\n        };\n    } else if (this.userContract == 'noTransferbasicNFT'){\n      for(let i=0; i < this.filesList.length; i++ ){\n        this.setStatus('Initiating transaction... (please wait)');\n\n        this.ntbasicService.mintCoin(this.account)\n          .subscribe((value: any) =>{\n            this.setStatus('Transaction complete!');\n            this.refreshBalance();\n            //this.finished = true;\n          }, e => this.setStatus('Error sending coin; see log.'))\n        };\n    } else {\n      for(let i=0; i < this.filesList.length; i++ ){\n        this.setStatus('Initiating transaction... (please wait)');\n\n        this.ntipfsService.mintCoin(this.account, this.filesList[i].imghash, this.filesList[i].metaHash)\n          .subscribe((value: any) =>{\n            this.setStatus('Transaction complete!');\n            this.refreshBalance();\n            this.filesList[i].tokenURI = this.getURI(value);\n            //this.finished = true;\n          }, e => this.setStatus('Error sending coin; see log.'))\n        };\n    }\n    this.finished = true;\n  };//end mint coin\n\n  //METADATA ONLY contracts\n  getURI = (nftID: number) => {\n    if(this.userContract == 'IPFSNFT'){\n      this.ipfsconService.getTokenUri(nftID)\n       .subscribe(value => {\n         this.tokenURI = value\n         console.log(\"URI is \", this.tokenURI)\n       }, e => {this.setStatus('Error getting URI; see log')})\n\n    } else if(this.userContract == 'noTransferIPFSNFT') {\n      this.ntipfsService.getTokenUri(nftID)\n       .subscribe(value => {\n         this.tokenURI = value\n         console.log(\"URI is \", this.tokenURI)\n       }, e => {this.setStatus('Error getting Owner; see log')})\n    } else {\n      console.log(\"Your tokens do not contain Metadata\");\n    }\n  };\n\n}\n","<div class=\"minter\" *ngIf=\"finished==false\">\n  <h1> Mint NFTs </h1>\n  <label class=\"label\">To Address: </label>\n    <input [(ngModel)]=\"recipientAddress\" name=\"recipientAddress\"\n      class=\"addressinput\"\n      type=\"text\"\n      placeholder=\"0x93e66d9baea28c17d9fc393b53e3fbdd76899dae\"\n      name=\"recipientAddress\"\n      required\n      #recipientAddressModel=\"ngModel\">\n  <button class=\"mint-btn\" (click)=\"mintCoin()\"> Mint </button>\n  </div>\n\n  <div class=\"summary\" *ngIf=\"finished\">\n    <h1> Minting Summary </h1>\n      <p class=\"result\"> {{ filesList.length }} {{ userContract }} NFTs minted\n        to account {{ recipientAddress }} </p>\n          <div *ngFor=\"let file of filesList; index as i\">\n              <p> Image: {{ file.name }} </p>\n              <p> TokenID: {{ i+1 }} </p>\n              <p *ngIf=\"file.tokenURI\"> Token Metadata: {{ file.tokenURI }} </p>\n            </div>\n\n      <ul> To view NFTs in wallet:\n        <li> 1) Use add token button in metamask wallet </li>\n        <li> 2) Enter contract address: 0x2910BbD2EA46b7857Ac04EC15E9d2368Ec0c5421 </li>\n        <li> 3) Set token decimal to 0 </li>\n        <li> 4) NFTs should now appear under assets in wallet </li>\n      </ul>\n  </div>\n\n<div class=\"Ownerbox\" *ngIf=\"finished\">\n    <h1> Check Owner </h1>\n    <label class=\"label\">Token ID</label>\n    <p class=\"control\">\n      <input\n        [(ngModel)]=\"getID\"\n        name=\"ID\"\n        class=\"input\"\n        type=\"text\"\n        placeholder=\"1\"\n        required\n        #tokenIDModel=\"ngModel\"\n      >\n    </p>\n    <button (click)=\"getOwner()\"> Check </button>\n    <p *ngIf=\"ownerAddr\"> Owner of NFT {{ tokenID }} is account {{ this.ownerAddr }} </p>\n\n    <h1> Get Token Metadata </h1>\n    <label class=\"label\"> Token ID </label>\n    <input [(ngModel)]=\"getID\" type=\"text\">\n    <button (click)=\"getURI(getID)\"> Check </button>\n    <p *ngIf=\"tokenURI\"> Token URI for NFT {{ getID }} is {{ tokenURI }} </p>\n\n  </div>\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}