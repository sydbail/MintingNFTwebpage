{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst errcode = require('err-code');\n\nconst webcrypto = require('../webcrypto');\n\nconst {\n  base64urlToBuffer\n} = require('../util');\n\nconst validateCurveType = require('./validate-curve-type');\n\nconst {\n  toString: uint8ArrayToString\n} = require('uint8arrays/to-string');\n\nconst {\n  concat: uint8ArrayConcat\n} = require('uint8arrays/concat');\n\nconst {\n  equals: uint8ArrayEquals\n} = require('uint8arrays/equals');\n\nconst bits = {\n  'P-256': 256,\n  'P-384': 384,\n  'P-521': 521\n};\n\nexports.generateEphmeralKeyPair = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (curve) {\n    validateCurveType(Object.keys(bits), curve);\n    const pair = yield webcrypto.get().subtle.generateKey({\n      name: 'ECDH',\n      namedCurve: curve\n    }, true, ['deriveBits']); // forcePrivate is used for testing only\n\n    const genSharedKey = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(function* (theirPub, forcePrivate) {\n        let privateKey;\n\n        if (forcePrivate) {\n          privateKey = yield webcrypto.get().subtle.importKey('jwk', unmarshalPrivateKey(curve, forcePrivate), {\n            name: 'ECDH',\n            namedCurve: curve\n          }, false, ['deriveBits']);\n        } else {\n          privateKey = pair.privateKey;\n        }\n\n        const keys = [yield webcrypto.get().subtle.importKey('jwk', unmarshalPublicKey(curve, theirPub), {\n          name: 'ECDH',\n          namedCurve: curve\n        }, false, []), privateKey];\n        const buffer = yield webcrypto.get().subtle.deriveBits({\n          name: 'ECDH',\n          namedCurve: curve,\n          public: keys[0]\n        }, keys[1], bits[curve]);\n        return new Uint8Array(buffer, buffer.byteOffset, buffer.byteLength);\n      });\n\n      return function genSharedKey(_x2, _x3) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    const publicKey = yield webcrypto.get().subtle.exportKey('jwk', pair.publicKey);\n    return {\n      key: marshalPublicKey(publicKey),\n      genSharedKey\n    };\n  });\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nconst curveLengths = {\n  'P-256': 32,\n  'P-384': 48,\n  'P-521': 66\n}; // Marshal converts a jwk encodec ECDH public key into the\n// form specified in section 4.3.6 of ANSI X9.62. (This is the format\n// go-ipfs uses)\n\nfunction marshalPublicKey(jwk) {\n  const byteLen = curveLengths[jwk.crv];\n  return uint8ArrayConcat([Uint8Array.from([4]), // uncompressed point\n  base64urlToBuffer(jwk.x, byteLen), base64urlToBuffer(jwk.y, byteLen)], 1 + byteLen * 2);\n} // Unmarshal converts a point, serialized by Marshal, into an jwk encoded key\n\n\nfunction unmarshalPublicKey(curve, key) {\n  const byteLen = curveLengths[curve];\n\n  if (uint8ArrayEquals(!key.slice(0, 1), Uint8Array.from([4]))) {\n    throw errcode(new Error('Cannot unmarshal public key - invalid key format'), 'ERR_INVALID_KEY_FORMAT');\n  }\n\n  return {\n    kty: 'EC',\n    crv: curve,\n    x: uint8ArrayToString(key.slice(1, byteLen + 1), 'base64url'),\n    y: uint8ArrayToString(key.slice(1 + byteLen), 'base64url'),\n    ext: true\n  };\n}\n\nconst unmarshalPrivateKey = (curve, key) => ({ ...unmarshalPublicKey(curve, key.public),\n  d: uint8ArrayToString(key.private, 'base64url')\n});","map":null,"metadata":{},"sourceType":"script"}