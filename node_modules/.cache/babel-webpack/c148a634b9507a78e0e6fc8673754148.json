{"ast":null,"code":"var _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nconst ready = require('./ready');\n\nmodule.exports = (socket, options) => {\n  options = options || {};\n  options.closeOnEnd = options.closeOnEnd !== false;\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(function* (source) {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n\n      var _iteratorError;\n\n      try {\n        for (var _iterator = _asyncIterator(source), _step, _value; _step = yield _iterator.next(), _iteratorNormalCompletion = _step.done, _value = yield _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n          const data = _value;\n\n          try {\n            yield ready(socket);\n          } catch (err) {\n            if (err.message === 'socket closed') break;\n            throw err;\n          }\n\n          socket.send(data);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            yield _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      if (options.closeOnEnd && socket.readyState <= 1) {\n        return new Promise((resolve, reject) => {\n          socket.addEventListener('close', event => {\n            if (event.wasClean || event.code === 1006) {\n              resolve();\n            } else {\n              const err = Object.assign(new Error('ws error'), {\n                event\n              });\n              reject(err);\n            }\n          });\n          setTimeout(() => socket.close());\n        });\n      }\n    });\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};","map":null,"metadata":{},"sourceType":"script"}