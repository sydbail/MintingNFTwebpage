{"ast":null,"code":"'use strict';\n\nvar _awaitAsyncGenerator = require(\"/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\").default;\n\nvar _wrapAsyncGenerator = require(\"/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nconst {\n  Multiaddr\n} = require('multiaddr');\n\nconst toCamel = require('../lib/object-to-camel');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n * @typedef {import('multiformats/cid').CID} CID\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {DHTAPI[\"provide\"]}\n   */\n  function provide(_x) {\n    return _provide.apply(this, arguments);\n  }\n\n  function _provide() {\n    _provide = _wrapAsyncGenerator(function* (cids, options = {\n      recursive: false\n    }) {\n      /** @type {CID[]} */\n      const cidArr = Array.isArray(cids) ? cids : [cids];\n      const res = yield _awaitAsyncGenerator(api.post('dht/provide', {\n        timeout: options.timeout,\n        signal: options.signal,\n        searchParams: toUrlSearchParams({\n          arg: cidArr.map(cid => cid.toString()),\n          ...options\n        }),\n        headers: options.headers\n      }));\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n\n      var _iteratorError;\n\n      try {\n        for (var _iterator = _asyncIterator(res.ndjson()), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n          let message = _value;\n          message = toCamel(message);\n\n          if (message.responses) {\n            message.responses = message.responses.map((\n            /** @type {{ ID: string, Addrs: string[] }} */\n            {\n              ID,\n              Addrs\n            }) => ({\n              id: ID,\n              addrs: (Addrs || []).map((\n              /** @type {string} **/\n              a) => new Multiaddr(a))\n            }));\n          } else {\n            message.responses = [];\n          }\n\n          yield message;\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            yield _awaitAsyncGenerator(_iterator.return());\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    });\n    return _provide.apply(this, arguments);\n  }\n\n  return provide;\n});","map":{"version":3,"sources":["/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/ipfs-http-client/src/dht/provide.js"],"names":["Multiaddr","require","toCamel","configure","toUrlSearchParams","module","exports","api","provide","cids","options","recursive","cidArr","Array","isArray","res","post","timeout","signal","searchParams","arg","map","cid","toString","headers","ndjson","message","responses","ID","Addrs","id","addrs","a"],"mappings":"AAAA;;;;;;;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAgBC,OAAO,CAAC,WAAD,CAA7B;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,wBAAD,CAAvB;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,6BAAD,CAAjC;AAEA;AACA;AACA;AACA;AACA;;;AAEAI,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAACI,GAAG,IAAI;AAChC;AACF;AACA;AAHkC,WAIfC,OAJe;AAAA;AAAA;;AAAA;AAAA,mCAIhC,WAA0BC,IAA1B,EAAgCC,OAAO,GAAG;AAAEC,MAAAA,SAAS,EAAE;AAAb,KAA1C,EAAgE;AAC9D;AACA,YAAMC,MAAM,GAAGC,KAAK,CAACC,OAAN,CAAcL,IAAd,IAAsBA,IAAtB,GAA6B,CAACA,IAAD,CAA5C;AAEA,YAAMM,GAAG,8BAASR,GAAG,CAACS,IAAJ,CAAS,aAAT,EAAwB;AACxCC,QAAAA,OAAO,EAAEP,OAAO,CAACO,OADuB;AAExCC,QAAAA,MAAM,EAAER,OAAO,CAACQ,MAFwB;AAGxCC,QAAAA,YAAY,EAAEf,iBAAiB,CAAC;AAC9BgB,UAAAA,GAAG,EAAER,MAAM,CAACS,GAAP,CAAWC,GAAG,IAAIA,GAAG,CAACC,QAAJ,EAAlB,CADyB;AAE9B,aAAGb;AAF2B,SAAD,CAHS;AAOxCc,QAAAA,OAAO,EAAEd,OAAO,CAACc;AAPuB,OAAxB,CAAT,CAAT;AAJ8D;AAAA;;AAAA;;AAAA;AAc9D,4CAA0BT,GAAG,CAACU,MAAJ,EAA1B,gOAAwC;AAAA,cAAzBC,OAAyB;AACtCA,UAAAA,OAAO,GAAGxB,OAAO,CAACwB,OAAD,CAAjB;;AACA,cAAIA,OAAO,CAACC,SAAZ,EAAuB;AACrBD,YAAAA,OAAO,CAACC,SAAR,GAAoBD,OAAO,CAACC,SAAR,CAAkBN,GAAlB,CAAsB;AAAC;AAA+C;AAAEO,cAAAA,EAAF;AAAMC,cAAAA;AAAN,aAAhD,MAAmE;AAC3GC,cAAAA,EAAE,EAAEF,EADuG;AAE3GG,cAAAA,KAAK,EAAE,CAACF,KAAK,IAAI,EAAV,EAAcR,GAAd,CAAkB;AAAC;AAAuBW,cAAAA,CAAxB,KAA8B,IAAIhC,SAAJ,CAAcgC,CAAd,CAAhD;AAFoG,aAAnE,CAAtB,CAApB;AAID,WALD,MAKO;AACLN,YAAAA,OAAO,CAACC,SAAR,GAAoB,EAApB;AACD;;AACD,gBAAMD,OAAN;AACD;AAzB6D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA0B/D,KA9B+B;AAAA;AAAA;;AAgChC,SAAOlB,OAAP;AACD,CAjCyB,CAA1B","sourcesContent":["'use strict'\n\nconst { Multiaddr } = require('multiaddr')\nconst toCamel = require('../lib/object-to-camel')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n * @typedef {import('multiformats/cid').CID} CID\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {DHTAPI[\"provide\"]}\n   */\n  async function * provide (cids, options = { recursive: false }) {\n    /** @type {CID[]} */\n    const cidArr = Array.isArray(cids) ? cids : [cids]\n\n    const res = await api.post('dht/provide', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cidArr.map(cid => cid.toString()),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (let message of res.ndjson()) {\n      message = toCamel(message)\n      if (message.responses) {\n        message.responses = message.responses.map((/** @type {{ ID: string, Addrs: string[] }} */ { ID, Addrs }) => ({\n          id: ID,\n          addrs: (Addrs || []).map((/** @type {string} **/ a) => new Multiaddr(a))\n        }))\n      } else {\n        message.responses = []\n      }\n      yield message\n    }\n  }\n\n  return provide\n})\n"]},"metadata":{},"sourceType":"script"}