{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst repoInit = require('./init');\n\nconst {\n  MissingRepoOptionsError,\n  NotInitializedRepoError\n} = require('../errors');\n\nconst {\n  VERSION_KEY\n} = require('../utils');\n\nconst {\n  fromString: uint8ArrayFromString\n} = require('uint8arrays/from-string');\n\nconst {\n  toString: uint8ArrayToString\n} = require('uint8arrays/to-string');\n/**\n * Function that has responsibility to retrieve version of repo from its root datastore's instance.\n * This function needs to be cross-repo-version functional to be able to fetch any version number,\n * even in case of change of repo's versioning.\n *\n * @param {import('../types').Backends} backends\n */\n\n\nfunction getVersion(_x) {\n  return _getVersion.apply(this, arguments);\n}\n/**\n * Function for setting a version in cross-repo-version manner.\n *\n * @param {number} version\n * @param {import('../types').Backends} backends\n */\n\n\nfunction _getVersion() {\n  _getVersion = _asyncToGenerator(function* (backends) {\n    if (!(yield repoInit.isRepoInitialized(backends))) {\n      throw new NotInitializedRepoError('Repo is not initialized!');\n    }\n\n    const store = backends.root;\n    yield store.open();\n\n    try {\n      return parseInt(uint8ArrayToString(yield store.get(VERSION_KEY)));\n    } finally {\n      yield store.close();\n    }\n  });\n  return _getVersion.apply(this, arguments);\n}\n\nfunction setVersion(_x2, _x3) {\n  return _setVersion.apply(this, arguments);\n}\n\nfunction _setVersion() {\n  _setVersion = _asyncToGenerator(function* (version, backends) {\n    if (!backends) {\n      throw new MissingRepoOptionsError('Please pass repo options when trying to open a repo');\n    }\n\n    const store = backends.root;\n    yield store.open();\n    yield store.put(VERSION_KEY, uint8ArrayFromString(String(version)));\n    yield store.close();\n  });\n  return _setVersion.apply(this, arguments);\n}\n\nmodule.exports = {\n  getVersion,\n  setVersion\n};","map":{"version":3,"sources":["/Users/sydneybailey/Internship/contract-testing/node_modules/ipfs-repo-migrations/src/repo/version.js"],"names":["repoInit","require","MissingRepoOptionsError","NotInitializedRepoError","VERSION_KEY","fromString","uint8ArrayFromString","toString","uint8ArrayToString","getVersion","backends","isRepoInitialized","store","root","open","parseInt","get","close","setVersion","version","put","String","module","exports"],"mappings":"AAAA;;;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,QAAD,CAAxB;;AACA,MAAM;AAAEC,EAAAA,uBAAF;AAA2BC,EAAAA;AAA3B,IAAuDF,OAAO,CAAC,WAAD,CAApE;;AACA,MAAM;AAAEG,EAAAA;AAAF,IAAkBH,OAAO,CAAC,UAAD,CAA/B;;AACA,MAAM;AAAEI,EAAAA,UAAU,EAAEC;AAAd,IAAuCL,OAAO,CAAC,yBAAD,CAApD;;AACA,MAAM;AAAEM,EAAAA,QAAQ,EAAEC;AAAZ,IAAmCP,OAAO,CAAC,uBAAD,CAAhD;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;SACeQ,U;;;AAef;AACA;AACA;AACA;AACA;AACA;;;;kCApBA,WAA2BC,QAA3B,EAAqC;AACnC,QAAI,QAAQV,QAAQ,CAACW,iBAAT,CAA2BD,QAA3B,CAAR,CAAJ,EAAmD;AACjD,YAAM,IAAIP,uBAAJ,CAA4B,0BAA5B,CAAN;AACD;;AAED,UAAMS,KAAK,GAAGF,QAAQ,CAACG,IAAvB;AACA,UAAMD,KAAK,CAACE,IAAN,EAAN;;AAEA,QAAI;AACF,aAAOC,QAAQ,CAACP,kBAAkB,OAAOI,KAAK,CAACI,GAAN,CAAUZ,WAAV,CAAP,CAAnB,CAAf;AACD,KAFD,SAEU;AACR,YAAMQ,KAAK,CAACK,KAAN,EAAN;AACD;AACF,G;;;;SAQcC,U;;;;;kCAAf,WAA2BC,OAA3B,EAAoCT,QAApC,EAA8C;AAC5C,QAAI,CAACA,QAAL,EAAe;AACb,YAAM,IAAIR,uBAAJ,CAA4B,qDAA5B,CAAN;AACD;;AAED,UAAMU,KAAK,GAAGF,QAAQ,CAACG,IAAvB;AACA,UAAMD,KAAK,CAACE,IAAN,EAAN;AACA,UAAMF,KAAK,CAACQ,GAAN,CAAUhB,WAAV,EAAuBE,oBAAoB,CAACe,MAAM,CAACF,OAAD,CAAP,CAA3C,CAAN;AACA,UAAMP,KAAK,CAACK,KAAN,EAAN;AACD,G;;;;AAEDK,MAAM,CAACC,OAAP,GAAiB;AACfd,EAAAA,UADe;AAEfS,EAAAA;AAFe,CAAjB","sourcesContent":["'use strict'\n\nconst repoInit = require('./init')\nconst { MissingRepoOptionsError, NotInitializedRepoError } = require('../errors')\nconst { VERSION_KEY } = require('../utils')\nconst { fromString: uint8ArrayFromString } = require('uint8arrays/from-string')\nconst { toString: uint8ArrayToString } = require('uint8arrays/to-string')\n\n/**\n * Function that has responsibility to retrieve version of repo from its root datastore's instance.\n * This function needs to be cross-repo-version functional to be able to fetch any version number,\n * even in case of change of repo's versioning.\n *\n * @param {import('../types').Backends} backends\n */\nasync function getVersion (backends) {\n  if (!(await repoInit.isRepoInitialized(backends))) {\n    throw new NotInitializedRepoError('Repo is not initialized!')\n  }\n\n  const store = backends.root\n  await store.open()\n\n  try {\n    return parseInt(uint8ArrayToString(await store.get(VERSION_KEY)))\n  } finally {\n    await store.close()\n  }\n}\n\n/**\n * Function for setting a version in cross-repo-version manner.\n *\n * @param {number} version\n * @param {import('../types').Backends} backends\n */\nasync function setVersion (version, backends) {\n  if (!backends) {\n    throw new MissingRepoOptionsError('Please pass repo options when trying to open a repo')\n  }\n\n  const store = backends.root\n  await store.open()\n  await store.put(VERSION_KEY, uint8ArrayFromString(String(version)))\n  await store.close()\n}\n\nmodule.exports = {\n  getVersion,\n  setVersion\n}\n"]},"metadata":{},"sourceType":"script"}