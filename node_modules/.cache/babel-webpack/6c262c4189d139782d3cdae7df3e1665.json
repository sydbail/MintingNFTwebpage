{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nvar _wrapAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\").default;\n\nvar _awaitAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nvar _asyncGeneratorDelegate = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncGeneratorDelegate\").default;\n\nconst Adapter = require('./adapter');\n\nconst {\n  base32\n} = require('multiformats/bases/base32');\n\nconst raw = require('multiformats/codecs/raw');\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst Digest = require('multiformats/hashes/digest');\n\nconst Errors = require('./errors');\n/**\n * @typedef {import('./types').Pair} Pair\n * @typedef {import('./types').Blockstore} Blockstore\n * @typedef {import('interface-store').Options} Options\n */\n\n/**\n * @class MemoryBlockstore\n * @implements {Blockstore}\n */\n\n\nclass MemoryBlockstore extends Adapter {\n  constructor() {\n    super();\n    /** @type {Record<string, Uint8Array>} */\n\n    this.data = {};\n  }\n\n  open() {\n    return Promise.resolve();\n  }\n\n  close() {\n    return Promise.resolve();\n  }\n  /**\n   * @param {CID} key\n   * @param {Uint8Array} val\n   */\n\n\n  put(key, val) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      // eslint-disable-line require-await\n      _this3.data[base32.encode(key.multihash.bytes)] = val;\n    })();\n  }\n  /**\n   * @param {CID} key\n   */\n\n\n  get(key) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      const exists = yield _this4.has(key);\n      if (!exists) throw Errors.notFoundError();\n      return _this4.data[base32.encode(key.multihash.bytes)];\n    })();\n  }\n  /**\n   * @param {CID} key\n   */\n\n\n  has(key) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      // eslint-disable-line require-await\n      return _this5.data[base32.encode(key.multihash.bytes)] !== undefined;\n    })();\n  }\n  /**\n   * @param {CID} key\n   */\n\n\n  delete(key) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      // eslint-disable-line require-await\n      delete _this6.data[base32.encode(key.multihash.bytes)];\n    })();\n  }\n\n  _all() {\n    var _this = this;\n\n    return _wrapAsyncGenerator(function* () {\n      yield* _asyncGeneratorDelegate(_asyncIterator(Object.entries(_this.data).map(([key, value]) => ({\n        key: CID.createV1(raw.code, Digest.decode(base32.decode(key))),\n        value\n      }))), _awaitAsyncGenerator);\n    })();\n  }\n\n  _allKeys() {\n    var _this2 = this;\n\n    return _wrapAsyncGenerator(function* () {\n      yield* _asyncGeneratorDelegate(_asyncIterator(Object.entries(_this2.data).map(([key]) => CID.createV1(raw.code, Digest.decode(base32.decode(key))))), _awaitAsyncGenerator);\n    })();\n  }\n\n}\n\nmodule.exports = MemoryBlockstore;","map":null,"metadata":{},"sourceType":"script"}