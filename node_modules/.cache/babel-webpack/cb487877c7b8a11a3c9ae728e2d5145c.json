{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst modeToString = require('../lib/mode-to-string');\n\nconst parseMtime = require('../lib/parse-mtime');\n\nconst configure = require('../lib/configure');\n\nconst multipartRequest = require('../lib/multipart-request');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nconst abortSignal = require('../lib/abort-signal');\n\nconst {\n  AbortController\n} = require('native-abort-controller');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {FilesAPI[\"write\"]}\n   */\n  function write(_x, _x2) {\n    return _write.apply(this, arguments);\n  }\n\n  function _write() {\n    _write = _asyncToGenerator(function* (path, input, options = {}) {\n      // allow aborting requests on body errors\n      const controller = new AbortController();\n      const signal = abortSignal(controller.signal, options.signal);\n      const res = yield api.post('files/write', {\n        timeout: options.timeout,\n        signal,\n        searchParams: toUrlSearchParams({\n          arg: path,\n          streamChannels: true,\n          count: options.length,\n          ...options\n        }),\n        ...(yield multipartRequest({\n          content: input,\n          path: 'arg',\n          mode: modeToString(options.mode),\n          mtime: parseMtime(options.mtime)\n        }, controller, options.headers))\n      });\n      yield res.text();\n    });\n    return _write.apply(this, arguments);\n  }\n\n  return write;\n});","map":null,"metadata":{},"sourceType":"script"}