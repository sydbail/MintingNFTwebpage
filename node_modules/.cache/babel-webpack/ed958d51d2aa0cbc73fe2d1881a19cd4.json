{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @param {Object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('ipfs-core-utils/src/multicodecs')} config.codecs\n * @param {import('ipfs-core-utils/src/multihashes')} config.hashers\n * @param {import('../../types').Preload} config.preload\n */\n\n\nmodule.exports = ({\n  repo,\n  codecs,\n  hashers,\n  preload\n}) => {\n  /**\n   * @type {import('ipfs-core-types/src/dag').API[\"put\"]}\n   */\n  function put(_x) {\n    return _put.apply(this, arguments);\n  }\n\n  function _put() {\n    _put = _asyncToGenerator(function* (dagNode, options = {}) {\n      const release = options.pin ? yield repo.gcLock.readLock() : null;\n\n      try {\n        const codecName = options.format || 'dag-cbor';\n        const cidVersion = options.version != null ? options.version : codecName === 'dag-pb' ? 0 : 1;\n        const codec = yield codecs.getCodec(codecName);\n\n        if (!codec) {\n          throw new Error(`Unknown codec ${options.format}, please configure additional BlockCodecs for this IPFS instance`);\n        }\n\n        const hasher = yield hashers.getHasher(options.hashAlg || 'sha2-256');\n\n        if (!hasher) {\n          throw new Error(`Unknown hash algorithm ${options.hashAlg}, please configure additional MultihashHashers for this IPFS instance`);\n        }\n\n        const buf = codec.encode(dagNode);\n        const hash = yield hasher.digest(buf);\n        const cid = CID.create(cidVersion, codec.code, hash);\n        yield repo.blocks.put(cid, buf, {\n          signal: options.signal\n        });\n\n        if (options.pin) {\n          yield repo.pins.pinRecursively(cid);\n        }\n\n        if (options.preload !== false) {\n          preload(cid);\n        }\n\n        return cid;\n      } finally {\n        if (release) {\n          release();\n        }\n      }\n    });\n    return _put.apply(this, arguments);\n  }\n\n  return withTimeoutOption(put);\n};","map":{"version":3,"sources":["/Users/sydneybailey/Internship/contract-testing/node_modules/ipfs-core/src/components/dag/put.js"],"names":["CID","require","withTimeoutOption","module","exports","repo","codecs","hashers","preload","put","dagNode","options","release","pin","gcLock","readLock","codecName","format","cidVersion","version","codec","getCodec","Error","hasher","getHasher","hashAlg","buf","encode","hash","digest","cid","create","code","blocks","signal","pins","pinRecursively"],"mappings":"AAAA;;;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAUC,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAMC,iBAAiB,GAAGD,OAAO,CAAC,yCAAD,CAAjC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAE,MAAM,CAACC,OAAP,GAAiB,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,MAAR;AAAgBC,EAAAA,OAAhB;AAAyBC,EAAAA;AAAzB,CAAD,KAAwC;AACvD;AACF;AACA;AAHyD,WAIxCC,GAJwC;AAAA;AAAA;;AAAA;AAAA,6BAIvD,WAAoBC,OAApB,EAA6BC,OAAO,GAAG,EAAvC,EAA2C;AACzC,YAAMC,OAAO,GAAGD,OAAO,CAACE,GAAR,SAAoBR,IAAI,CAACS,MAAL,CAAYC,QAAZ,EAApB,GAA6C,IAA7D;;AAEA,UAAI;AACF,cAAMC,SAAS,GAAGL,OAAO,CAACM,MAAR,IAAkB,UAApC;AACA,cAAMC,UAAU,GAAGP,OAAO,CAACQ,OAAR,IAAmB,IAAnB,GAA0BR,OAAO,CAACQ,OAAlC,GAA6CH,SAAS,KAAK,QAAd,GAAyB,CAAzB,GAA6B,CAA7F;AACA,cAAMI,KAAK,SAASd,MAAM,CAACe,QAAP,CAAgBL,SAAhB,CAApB;;AAEA,YAAI,CAACI,KAAL,EAAY;AACV,gBAAM,IAAIE,KAAJ,CAAW,iBAAgBX,OAAO,CAACM,MAAO,kEAA1C,CAAN;AACD;;AAED,cAAMM,MAAM,SAAShB,OAAO,CAACiB,SAAR,CAAkBb,OAAO,CAACc,OAAR,IAAmB,UAArC,CAArB;;AAEA,YAAI,CAACF,MAAL,EAAa;AACX,gBAAM,IAAID,KAAJ,CAAW,0BAAyBX,OAAO,CAACc,OAAQ,uEAApD,CAAN;AACD;;AAED,cAAMC,GAAG,GAAGN,KAAK,CAACO,MAAN,CAAajB,OAAb,CAAZ;AACA,cAAMkB,IAAI,SAASL,MAAM,CAACM,MAAP,CAAcH,GAAd,CAAnB;AACA,cAAMI,GAAG,GAAG9B,GAAG,CAAC+B,MAAJ,CAAWb,UAAX,EAAuBE,KAAK,CAACY,IAA7B,EAAmCJ,IAAnC,CAAZ;AAEA,cAAMvB,IAAI,CAAC4B,MAAL,CAAYxB,GAAZ,CAAgBqB,GAAhB,EAAqBJ,GAArB,EAA0B;AAC9BQ,UAAAA,MAAM,EAAEvB,OAAO,CAACuB;AADc,SAA1B,CAAN;;AAIA,YAAIvB,OAAO,CAACE,GAAZ,EAAiB;AACf,gBAAMR,IAAI,CAAC8B,IAAL,CAAUC,cAAV,CAAyBN,GAAzB,CAAN;AACD;;AAED,YAAInB,OAAO,CAACH,OAAR,KAAoB,KAAxB,EAA+B;AAC7BA,UAAAA,OAAO,CAACsB,GAAD,CAAP;AACD;;AAED,eAAOA,GAAP;AACD,OAhCD,SAgCU;AACR,YAAIlB,OAAJ,EAAa;AACXA,UAAAA,OAAO;AACR;AACF;AACF,KA5CsD;AAAA;AAAA;;AA8CvD,SAAOV,iBAAiB,CAACO,GAAD,CAAxB;AACD,CA/CD","sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\n\n/**\n * @param {Object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('ipfs-core-utils/src/multicodecs')} config.codecs\n * @param {import('ipfs-core-utils/src/multihashes')} config.hashers\n * @param {import('../../types').Preload} config.preload\n */\nmodule.exports = ({ repo, codecs, hashers, preload }) => {\n  /**\n   * @type {import('ipfs-core-types/src/dag').API[\"put\"]}\n   */\n  async function put (dagNode, options = {}) {\n    const release = options.pin ? await repo.gcLock.readLock() : null\n\n    try {\n      const codecName = options.format || 'dag-cbor'\n      const cidVersion = options.version != null ? options.version : (codecName === 'dag-pb' ? 0 : 1)\n      const codec = await codecs.getCodec(codecName)\n\n      if (!codec) {\n        throw new Error(`Unknown codec ${options.format}, please configure additional BlockCodecs for this IPFS instance`)\n      }\n\n      const hasher = await hashers.getHasher(options.hashAlg || 'sha2-256')\n\n      if (!hasher) {\n        throw new Error(`Unknown hash algorithm ${options.hashAlg}, please configure additional MultihashHashers for this IPFS instance`)\n      }\n\n      const buf = codec.encode(dagNode)\n      const hash = await hasher.digest(buf)\n      const cid = CID.create(cidVersion, codec.code, hash)\n\n      await repo.blocks.put(cid, buf, {\n        signal: options.signal\n      })\n\n      if (options.pin) {\n        await repo.pins.pinRecursively(cid)\n      }\n\n      if (options.preload !== false) {\n        preload(cid)\n      }\n\n      return cid\n    } finally {\n      if (release) {\n        release()\n      }\n    }\n  }\n\n  return withTimeoutOption(put)\n}\n"]},"metadata":{},"sourceType":"script"}