{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nvar _awaitAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\").default;\n\nvar _wrapAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\").default;\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst errCode = require('err-code');\n/**\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n/**\n * Retrieves IPLD Nodes along the `path` that is rooted at `cid`.\n *\n * @param {CID} cid - the CID where the resolving starts\n * @param {string} path - the path that should be resolved\n * @param {import('ipfs-core-utils/src/multicodecs')} codecs\n * @param {(cid: CID, options?: AbortOptions) => Promise<Uint8Array>} getBlock\n * @param {AbortOptions} [options]\n */\n\n\nconst resolve = /*#__PURE__*/function () {\n  var _ref = _wrapAsyncGenerator(function* (cid, path, codecs, getBlock, options) {\n    /**\n     * @param {CID} cid\n     */\n    const load = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(function* (cid) {\n        const codec = yield codecs.getCodec(cid.code);\n        const block = yield getBlock(cid, options);\n        return codec.decode(block);\n      });\n\n      return function load(_x6) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    const parts = path.split('/').filter(Boolean);\n    let value = yield _awaitAsyncGenerator(load(cid));\n    let lastCid = cid;\n\n    if (!parts.length) {\n      yield {\n        value,\n        remainderPath: ''\n      };\n    } // End iteration if there isn't a CID to follow any more\n\n\n    while (parts.length) {\n      const key = parts.shift();\n\n      if (!key) {\n        throw errCode(new Error(`Could not resolve path \"${path}\"`), 'ERR_INVALID_PATH');\n      }\n\n      if (Object.prototype.hasOwnProperty.call(value, key)) {\n        value = value[key];\n        yield {\n          value,\n          remainderPath: parts.join('/')\n        };\n      } else {\n        throw errCode(new Error(`no link named \"${key}\" under ${lastCid}`), 'ERR_NO_LINK');\n      }\n\n      if (value instanceof CID) {\n        lastCid = value;\n        value = yield _awaitAsyncGenerator(load(value));\n      }\n    }\n  });\n\n  return function resolve(_x, _x2, _x3, _x4, _x5) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nmodule.exports = resolve;","map":null,"metadata":{},"sourceType":"script"}