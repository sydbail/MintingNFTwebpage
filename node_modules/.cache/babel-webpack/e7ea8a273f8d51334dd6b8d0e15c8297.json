{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.unicodeJson = exports.json = exports.unicodeJsonObject = exports.jsonObject = exports.object = exports.anything = exports.boxArbitrary = void 0;\n\nconst stringify_1 = require(\"../../utils/stringify\");\n\nconst array_1 = require(\"../../arbitrary/array\");\n\nconst boolean_1 = require(\"../../arbitrary/boolean\");\n\nconst constant_1 = require(\"../../arbitrary/constant\");\n\nconst dictionary_1 = require(\"../../arbitrary/dictionary\");\n\nconst FloatingPointArbitrary_1 = require(\"./FloatingPointArbitrary\");\n\nconst frequency_1 = require(\"../../arbitrary/frequency\");\n\nconst maxSafeInteger_1 = require(\"../../arbitrary/maxSafeInteger\");\n\nconst memo_1 = require(\"../../arbitrary/memo\");\n\nconst oneof_1 = require(\"../../arbitrary/oneof\");\n\nconst set_1 = require(\"../../arbitrary/set\");\n\nconst string_1 = require(\"../../arbitrary/string\");\n\nconst unicodeString_1 = require(\"../../arbitrary/unicodeString\");\n\nconst tuple_1 = require(\"../../arbitrary/tuple\");\n\nconst bigInt_1 = require(\"../../arbitrary/bigInt\");\n\nconst date_1 = require(\"../../arbitrary/date\");\n\nconst float32Array_1 = require(\"../../arbitrary/float32Array\");\n\nconst float64Array_1 = require(\"../../arbitrary/float64Array\");\n\nconst int16Array_1 = require(\"../../arbitrary/int16Array\");\n\nconst int32Array_1 = require(\"../../arbitrary/int32Array\");\n\nconst int8Array_1 = require(\"../../arbitrary/int8Array\");\n\nconst uint16Array_1 = require(\"../../arbitrary/uint16Array\");\n\nconst uint32Array_1 = require(\"../../arbitrary/uint32Array\");\n\nconst uint8Array_1 = require(\"../../arbitrary/uint8Array\");\n\nconst uint8ClampedArray_1 = require(\"../../arbitrary/uint8ClampedArray\");\n\nconst SparseArrayArbitrary_1 = require(\"./SparseArrayArbitrary\");\n\nconst KeyValuePairsToObject_1 = require(\"../../arbitrary/_internals/mappers/KeyValuePairsToObject\");\n\nfunction boxArbitrary(arb) {\n  return arb.map(v => {\n    switch (typeof v) {\n      case 'boolean':\n        return new Boolean(v);\n\n      case 'number':\n        return new Number(v);\n\n      case 'string':\n        return new String(v);\n\n      default:\n        return v;\n    }\n  });\n}\n\nexports.boxArbitrary = boxArbitrary;\n\nclass QualifiedObjectConstraints {\n  constructor(key, values, maxDepth, maxKeys, withSet, withMap, withObjectString, withNullPrototype, withBigInt, withDate, withTypedArray, withSparseArray) {\n    this.key = key;\n    this.values = values;\n    this.maxDepth = maxDepth;\n    this.maxKeys = maxKeys;\n    this.withSet = withSet;\n    this.withMap = withMap;\n    this.withObjectString = withObjectString;\n    this.withNullPrototype = withNullPrototype;\n    this.withBigInt = withBigInt;\n    this.withDate = withDate;\n    this.withTypedArray = withTypedArray;\n    this.withSparseArray = withSparseArray;\n  }\n\n  static defaultValues() {\n    return [boolean_1.boolean(), maxSafeInteger_1.maxSafeInteger(), FloatingPointArbitrary_1.double({\n      next: true\n    }), string_1.string(), oneof_1.oneof(string_1.string(), constant_1.constant(null), constant_1.constant(undefined))];\n  }\n\n  static boxArbitraries(arbs) {\n    return arbs.map(arb => boxArbitrary(arb));\n  }\n\n  static boxArbitrariesIfNeeded(arbs, boxEnabled) {\n    return boxEnabled ? QualifiedObjectConstraints.boxArbitraries(arbs).concat(arbs) : arbs;\n  }\n\n  static from(settings = {}) {\n    function orDefault(optionalValue, defaultValue) {\n      return optionalValue !== undefined ? optionalValue : defaultValue;\n    }\n\n    return new QualifiedObjectConstraints(orDefault(settings.key, string_1.string()), QualifiedObjectConstraints.boxArbitrariesIfNeeded(orDefault(settings.values, QualifiedObjectConstraints.defaultValues()), orDefault(settings.withBoxedValues, false)), orDefault(settings.maxDepth, 2), orDefault(settings.maxKeys, 5), orDefault(settings.withSet, false), orDefault(settings.withMap, false), orDefault(settings.withObjectString, false), orDefault(settings.withNullPrototype, false), orDefault(settings.withBigInt, false), orDefault(settings.withDate, false), orDefault(settings.withTypedArray, false), orDefault(settings.withSparseArray, false));\n  }\n\n}\n\nconst anythingInternal = constraints => {\n  const arbKeys = constraints.withObjectString ? memo_1.memo(n => frequency_1.frequency({\n    arbitrary: constraints.key,\n    weight: 10\n  }, {\n    arbitrary: anythingArb(n).map(o => stringify_1.stringify(o)),\n    weight: 1\n  })) : memo_1.memo(() => constraints.key);\n  const arbitrariesForBase = constraints.values;\n  const maxDepth = constraints.maxDepth;\n  const maxKeys = constraints.maxKeys;\n\n  const entriesOf = (keyArb, valueArb) => set_1.set(tuple_1.tuple(keyArb, valueArb), {\n    maxLength: maxKeys,\n    compare: (t1, t2) => t1[0] === t2[0]\n  });\n\n  const mapOf = (ka, va) => entriesOf(ka, va).map(v => new Map(v));\n\n  const dictOf = (ka, va) => entriesOf(ka, va).map(v => KeyValuePairsToObject_1.keyValuePairsToObjectMapper(v));\n\n  const baseArb = oneof_1.oneof(...arbitrariesForBase);\n  const arrayBaseArb = oneof_1.oneof(...arbitrariesForBase.map(arb => array_1.array(arb, {\n    maxLength: maxKeys\n  })));\n\n  const objectBaseArb = n => oneof_1.oneof(...arbitrariesForBase.map(arb => dictOf(arbKeys(n), arb)));\n\n  const setBaseArb = () => oneof_1.oneof(...arbitrariesForBase.map(arb => set_1.set(arb, {\n    maxLength: maxKeys\n  }).map(v => new Set(v))));\n\n  const mapBaseArb = n => oneof_1.oneof(...arbitrariesForBase.map(arb => mapOf(arbKeys(n), arb)));\n\n  const arrayArb = memo_1.memo(n => oneof_1.oneof(arrayBaseArb, array_1.array(anythingArb(n), {\n    maxLength: maxKeys\n  })));\n  const setArb = memo_1.memo(n => oneof_1.oneof(setBaseArb(), set_1.set(anythingArb(n), {\n    maxLength: maxKeys\n  }).map(v => new Set(v))));\n  const mapArb = memo_1.memo(n => oneof_1.oneof(mapBaseArb(n), oneof_1.oneof(mapOf(arbKeys(n), anythingArb(n)), mapOf(anythingArb(n), anythingArb(n)))));\n  const objectArb = memo_1.memo(n => oneof_1.oneof(objectBaseArb(n), dictOf(arbKeys(n), anythingArb(n))));\n  const anythingArb = memo_1.memo(n => {\n    if (n <= 0) return oneof_1.oneof(baseArb);\n    return oneof_1.oneof(baseArb, arrayArb(), objectArb(), ...(constraints.withMap ? [mapArb()] : []), ...(constraints.withSet ? [setArb()] : []), ...(constraints.withObjectString ? [anythingArb().map(o => stringify_1.stringify(o))] : []), ...(constraints.withNullPrototype ? [objectArb().map(o => Object.assign(Object.create(null), o))] : []), ...(constraints.withBigInt ? [bigInt_1.bigInt()] : []), ...(constraints.withDate ? [date_1.date()] : []), ...(constraints.withTypedArray ? [oneof_1.oneof(int8Array_1.int8Array(), uint8Array_1.uint8Array(), uint8ClampedArray_1.uint8ClampedArray(), int16Array_1.int16Array(), uint16Array_1.uint16Array(), int32Array_1.int32Array(), uint32Array_1.uint32Array(), float32Array_1.float32Array(), float64Array_1.float64Array())] : []), ...(constraints.withSparseArray ? [SparseArrayArbitrary_1.sparseArray(anythingArb())] : []));\n  });\n  return anythingArb(maxDepth);\n};\n\nconst objectInternal = constraints => {\n  return dictionary_1.dictionary(constraints.key, anythingInternal(constraints));\n};\n\nfunction anything(constraints) {\n  return anythingInternal(QualifiedObjectConstraints.from(constraints));\n}\n\nexports.anything = anything;\n\nfunction object(constraints) {\n  return objectInternal(QualifiedObjectConstraints.from(constraints));\n}\n\nexports.object = object;\n\nfunction jsonSettings(stringArbitrary, constraints) {\n  const key = stringArbitrary;\n  const values = [boolean_1.boolean(), maxSafeInteger_1.maxSafeInteger(), FloatingPointArbitrary_1.double({\n    next: true,\n    noDefaultInfinity: true,\n    noNaN: true\n  }), stringArbitrary, constant_1.constant(null)];\n  return constraints != null ? typeof constraints === 'number' ? {\n    key,\n    values,\n    maxDepth: constraints\n  } : {\n    key,\n    values,\n    maxDepth: constraints.maxDepth\n  } : {\n    key,\n    values\n  };\n}\n\nfunction jsonObject(constraints) {\n  return anything(jsonSettings(string_1.string(), constraints));\n}\n\nexports.jsonObject = jsonObject;\n\nfunction unicodeJsonObject(constraints) {\n  return anything(jsonSettings(unicodeString_1.unicodeString(), constraints));\n}\n\nexports.unicodeJsonObject = unicodeJsonObject;\n\nfunction json(constraints) {\n  const arb = constraints != null ? jsonObject(constraints) : jsonObject();\n  return arb.map(JSON.stringify);\n}\n\nexports.json = json;\n\nfunction unicodeJson(constraints) {\n  const arb = constraints != null ? unicodeJsonObject(constraints) : unicodeJsonObject();\n  return arb.map(JSON.stringify);\n}\n\nexports.unicodeJson = unicodeJson;","map":null,"metadata":{},"sourceType":"script"}