{"ast":null,"code":"'use strict'; // @ts-ignore\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst distance = require('xor-distance');\n\nconst utils = require('../utils');\n\nconst pMap = require('p-map');\n\nconst {\n  equals: uint8ArrayEquals\n} = require('uint8arrays/equals');\n/**\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('../').PeerData} PeerData\n */\n\n/**\n * Maintains a list of peerIds sorted by distance from a DHT key.\n */\n\n\nclass PeerDistanceList {\n  /**\n   * Creates a new PeerDistanceList.\n   *\n   * @param {Uint8Array} originDhtKey - the DHT key from which distance is calculated\n   * @param {number} capacity - the maximum size of the list\n   */\n  constructor(originDhtKey, capacity) {\n    this.originDhtKey = originDhtKey;\n    this.capacity = capacity;\n    /** @type {{ peerId: PeerId, distance: Uint8Array }[]} */\n\n    this.peerDistances = [];\n  }\n  /**\n   * The length of the list\n   */\n\n\n  get length() {\n    return this.peerDistances.length;\n  }\n  /**\n   * The peerIds in the list, in order of distance from the origin key\n   */\n\n\n  get peers() {\n    return this.peerDistances.map(pd => pd.peerId);\n  }\n  /**\n   * Add a peerId to the list.\n   *\n   * @param {PeerId} peerId\n   */\n\n\n  add(peerId) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this.peerDistances.find(pd => uint8ArrayEquals(pd.peerId.id, peerId.id))) {\n        return;\n      }\n\n      const dhtKey = yield utils.convertPeerId(peerId);\n      const el = {\n        peerId,\n        distance: distance(_this.originDhtKey, dhtKey)\n      };\n\n      _this.peerDistances.push(el);\n\n      _this.peerDistances.sort((a, b) => distance.compare(a.distance, b.distance));\n\n      _this.peerDistances = _this.peerDistances.slice(0, _this.capacity);\n    })();\n  }\n  /**\n   * Indicates whether any of the peerIds passed as a parameter are closer\n   * to the origin key than the furthest peerId in the PeerDistanceList.\n   *\n   * @param {PeerId[]} peerIds\n   */\n\n\n  anyCloser(peerIds) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      if (!peerIds.length) {\n        return false;\n      }\n\n      if (!_this2.length) {\n        return true;\n      }\n\n      const dhtKeys = yield pMap(peerIds, peerId => utils.convertPeerId(peerId));\n      const furthestDistance = _this2.peerDistances[_this2.peerDistances.length - 1].distance;\n\n      for (const dhtKey of dhtKeys) {\n        const keyDistance = distance(_this2.originDhtKey, dhtKey);\n\n        if (distance.compare(keyDistance, furthestDistance) < 0) {\n          return true;\n        }\n      }\n\n      return false;\n    })();\n  }\n\n}\n\nmodule.exports = PeerDistanceList;","map":null,"metadata":{},"sourceType":"script"}