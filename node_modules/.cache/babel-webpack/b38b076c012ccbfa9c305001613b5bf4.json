{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/Dapp/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @param {Object} config\n * @param {import('../../types').NetworkService} config.network\n */\n\n\nmodule.exports = ({\n  network\n}) => {\n  /**\n   * @type {import('ipfs-core-types/src/bitswap').API[\"unwant\"]}\n   */\n  function unwant(_x) {\n    return _unwant.apply(this, arguments);\n  }\n\n  function _unwant() {\n    _unwant = _asyncToGenerator(function* (cids, options = {}) {\n      const {\n        bitswap\n      } = yield network.use(options);\n\n      if (!Array.isArray(cids)) {\n        cids = [cids];\n      }\n\n      return bitswap.unwant(cids);\n    });\n    return _unwant.apply(this, arguments);\n  }\n\n  return withTimeoutOption(unwant);\n};","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Dapp/node_modules/ipfs-core/src/components/bitswap/unwant.js"],"names":["withTimeoutOption","require","module","exports","network","unwant","cids","options","bitswap","use","Array","isArray"],"mappings":"AAAA;;;;AAEA,MAAMA,iBAAiB,GAAGC,OAAO,CAAC,yCAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAiB;AAChC;AACF;AACA;AAHkC,WAIjBC,MAJiB;AAAA;AAAA;;AAAA;AAAA,gCAIhC,WAAuBC,IAAvB,EAA6BC,OAAO,GAAG,EAAvC,EAA2C;AACzC,YAAM;AAAEC,QAAAA;AAAF,gBAAoBJ,OAAO,CAACK,GAAR,CAAYF,OAAZ,CAA1B;;AAEA,UAAI,CAACG,KAAK,CAACC,OAAN,CAAcL,IAAd,CAAL,EAA0B;AACxBA,QAAAA,IAAI,GAAG,CAACA,IAAD,CAAP;AACD;;AAED,aAAOE,OAAO,CAACH,MAAR,CAAeC,IAAf,CAAP;AACD,KAZ+B;AAAA;AAAA;;AAchC,SAAON,iBAAiB,CAACK,MAAD,CAAxB;AACD,CAfD","sourcesContent":["'use strict'\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\n\n/**\n * @param {Object} config\n * @param {import('../../types').NetworkService} config.network\n */\nmodule.exports = ({ network }) => {\n  /**\n   * @type {import('ipfs-core-types/src/bitswap').API[\"unwant\"]}\n   */\n  async function unwant (cids, options = {}) {\n    const { bitswap } = await network.use(options)\n\n    if (!Array.isArray(cids)) {\n      cids = [cids]\n    }\n\n    return bitswap.unwant(cids)\n  }\n\n  return withTimeoutOption(unwant)\n}\n"]},"metadata":{},"sourceType":"script"}