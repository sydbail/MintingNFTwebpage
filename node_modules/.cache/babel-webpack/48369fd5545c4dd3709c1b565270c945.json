{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ipV6 = void 0;\n\nconst array_1 = require(\"./array\");\n\nconst Converters_1 = require(\"../check/arbitrary/definition/Converters\");\n\nconst oneof_1 = require(\"./oneof\");\n\nconst hexaString_1 = require(\"./hexaString\");\n\nconst tuple_1 = require(\"./tuple\");\n\nconst ipV4_1 = require(\"./ipV4\");\n\nconst EntitiesToIPv6_1 = require(\"./_internals/mappers/EntitiesToIPv6\");\n\nfunction h16sTol32Mapper([a, b]) {\n  return `${a}:${b}`;\n}\n\nfunction h16sTol32Unmapper(value) {\n  if (typeof value !== 'string') throw new Error('Invalid type');\n  if (!value.includes(':')) throw new Error('Invalid value');\n  return value.split(':', 2);\n}\n\nfunction ipV6() {\n  const h16Arb = hexaString_1.hexaString({\n    minLength: 1,\n    maxLength: 4\n  });\n  const ls32Arb = oneof_1.oneof(Converters_1.convertFromNext(Converters_1.convertToNext(tuple_1.tuple(h16Arb, h16Arb)).map(h16sTol32Mapper, h16sTol32Unmapper)), ipV4_1.ipV4());\n  return oneof_1.oneof(Converters_1.convertFromNext(Converters_1.convertToNext(tuple_1.tuple(array_1.array(h16Arb, {\n    minLength: 6,\n    maxLength: 6\n  }), ls32Arb)).map(EntitiesToIPv6_1.fullySpecifiedMapper, EntitiesToIPv6_1.fullySpecifiedUnmapper)), Converters_1.convertFromNext(Converters_1.convertToNext(tuple_1.tuple(array_1.array(h16Arb, {\n    minLength: 5,\n    maxLength: 5\n  }), ls32Arb)).map(EntitiesToIPv6_1.onlyTrailingMapper, EntitiesToIPv6_1.onlyTrailingUnmapper)), Converters_1.convertFromNext(Converters_1.convertToNext(tuple_1.tuple(array_1.array(h16Arb, {\n    minLength: 0,\n    maxLength: 1\n  }), array_1.array(h16Arb, {\n    minLength: 4,\n    maxLength: 4\n  }), ls32Arb)).map(EntitiesToIPv6_1.multiTrailingMapper, EntitiesToIPv6_1.multiTrailingUnmapper)), Converters_1.convertFromNext(Converters_1.convertToNext(tuple_1.tuple(array_1.array(h16Arb, {\n    minLength: 0,\n    maxLength: 2\n  }), array_1.array(h16Arb, {\n    minLength: 3,\n    maxLength: 3\n  }), ls32Arb)).map(EntitiesToIPv6_1.multiTrailingMapper, EntitiesToIPv6_1.multiTrailingUnmapper)), Converters_1.convertFromNext(Converters_1.convertToNext(tuple_1.tuple(array_1.array(h16Arb, {\n    minLength: 0,\n    maxLength: 3\n  }), array_1.array(h16Arb, {\n    minLength: 2,\n    maxLength: 2\n  }), ls32Arb)).map(EntitiesToIPv6_1.multiTrailingMapper, EntitiesToIPv6_1.multiTrailingUnmapper)), Converters_1.convertFromNext(Converters_1.convertToNext(tuple_1.tuple(array_1.array(h16Arb, {\n    minLength: 0,\n    maxLength: 4\n  }), h16Arb, ls32Arb)).map(EntitiesToIPv6_1.multiTrailingMapperOne, EntitiesToIPv6_1.multiTrailingUnmapperOne)), Converters_1.convertFromNext(Converters_1.convertToNext(tuple_1.tuple(array_1.array(h16Arb, {\n    minLength: 0,\n    maxLength: 5\n  }), ls32Arb)).map(EntitiesToIPv6_1.singleTrailingMapper, EntitiesToIPv6_1.singleTrailingUnmapper)), Converters_1.convertFromNext(Converters_1.convertToNext(tuple_1.tuple(array_1.array(h16Arb, {\n    minLength: 0,\n    maxLength: 6\n  }), h16Arb)).map(EntitiesToIPv6_1.singleTrailingMapper, EntitiesToIPv6_1.singleTrailingUnmapper)), Converters_1.convertFromNext(Converters_1.convertToNext(tuple_1.tuple(array_1.array(h16Arb, {\n    minLength: 0,\n    maxLength: 7\n  }))).map(EntitiesToIPv6_1.noTrailingMapper, EntitiesToIPv6_1.noTrailingUnmapper)));\n}\n\nexports.ipV6 = ipV6;","map":null,"metadata":{},"sourceType":"script"}