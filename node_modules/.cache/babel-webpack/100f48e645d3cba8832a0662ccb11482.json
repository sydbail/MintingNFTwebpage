{"ast":null,"code":"var _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst {\n  default: ENSJS,\n  getEnsAddress\n} = require(\"@ensdomains/ensjs\");\n\nconst {\n  isAddress\n} = require(\"web3-utils\");\n\nmodule.exports = {\n  convertENSNames: function () {\n    var _ref = _asyncToGenerator(function* ({\n      ens,\n      inputArgs,\n      methodABI,\n      inputParams,\n      web3,\n      networkId\n    }) {\n      const {\n        registryAddress\n      } = ens;\n      let args;\n\n      if (inputArgs.length && methodABI) {\n        args = yield this.convertENSArgsNames({\n          inputArgs,\n          methodABI,\n          web3,\n          registryAddress,\n          networkId\n        });\n      } else {\n        args = inputArgs;\n      }\n\n      let params;\n\n      if (inputParams) {\n        params = yield this.convertENSParamsNames({\n          inputParams,\n          web3,\n          registryAddress,\n          networkId\n        });\n      }\n\n      return {\n        args,\n        params\n      };\n    });\n\n    return function convertENSNames(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }(),\n  getNewENSJS: function ({\n    provider,\n    registryAddress,\n    networkId\n  }) {\n    return new ENSJS({\n      provider,\n      ensAddress: registryAddress || getEnsAddress(networkId)\n    });\n  },\n  resolveNameToAddress: function () {\n    var _ref2 = _asyncToGenerator(function* ({\n      name,\n      provider,\n      registryAddress,\n      networkId\n    }) {\n      let ensjs;\n\n      try {\n        ensjs = this.getNewENSJS({\n          provider,\n          registryAddress,\n          networkId\n        });\n      } catch (error) {\n        const message = \"There was a problem initializing the ENS library.\" + \"Please ensure you have the address of the registry set correctly.\" + ` Truffle is currently using ${registryAddress}.`;\n        throw new Error(`${message} - ${error.message}`);\n      }\n\n      return yield ensjs.name(name).getAddress(\"ETH\");\n    });\n\n    return function resolveNameToAddress(_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }(),\n  convertENSArgsNames: function ({\n    inputArgs,\n    methodABI,\n    web3,\n    registryAddress,\n    networkId\n  }) {\n    if (methodABI.inputs.length === 0) return inputArgs;\n    const convertedNames = inputArgs.map((argument, index) => {\n      if (index + 1 > methodABI.inputs.length) {\n        return argument;\n      } else if (methodABI.inputs[index].type === \"address\") {\n        // Check all address arguments for ENS names\n        const argIsAddress = isAddress(argument);\n        if (argIsAddress) return argument;\n        return this.resolveNameToAddress({\n          name: argument,\n          provider: web3.currentProvider,\n          registryAddress,\n          networkId\n        });\n      } else {\n        return argument;\n      }\n    });\n    return Promise.all(convertedNames);\n  },\n  convertENSParamsNames: function () {\n    var _ref3 = _asyncToGenerator(function* ({\n      inputParams,\n      web3,\n      registryAddress,\n      networkId\n    }) {\n      if (inputParams.from && !isAddress(inputParams.from)) {\n        const newFrom = yield this.resolveNameToAddress({\n          name: inputParams.from,\n          provider: web3.currentProvider,\n          networkId,\n          registryAddress\n        });\n        return { ...inputParams,\n          from: newFrom\n        };\n      } else {\n        return inputParams;\n      }\n    });\n\n    return function convertENSParamsNames(_x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }()\n};","map":null,"metadata":{},"sourceType":"script"}