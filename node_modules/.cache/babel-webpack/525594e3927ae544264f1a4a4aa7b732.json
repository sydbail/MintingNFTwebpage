{"ast":null,"code":"'use strict';\n\nvar _wrapAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\").default;\n\nvar _awaitAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nvar _asyncGeneratorDelegate = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncGeneratorDelegate\").default;\n\nconst {\n  exporter\n} = require('ipfs-unixfs-exporter');\n\nconst {\n  normalizeCidPath\n} = require('../utils');\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n\nconst {\n  CID\n} = require('multiformats/cid');\n/**\n * @typedef {Object} Context\n * @property {import('ipfs-repo').IPFSRepo} repo\n * @property {import('../types').Preload} preload\n *\n * @param {Context} context\n */\n\n\nmodule.exports = function ({\n  repo,\n  preload\n}) {\n  /**\n   * @type {import('ipfs-core-types/src/root').API[\"cat\"]}\n   */\n  function cat(_x) {\n    return _cat.apply(this, arguments);\n  }\n\n  function _cat() {\n    _cat = _wrapAsyncGenerator(function* (ipfsPath, options = {}) {\n      ipfsPath = normalizeCidPath(ipfsPath);\n\n      if (options.preload !== false) {\n        const pathComponents = ipfsPath.split('/');\n        preload(CID.parse(pathComponents[0]));\n      }\n\n      const file = yield _awaitAsyncGenerator(exporter(ipfsPath, repo.blocks, options)); // File may not have unixfs prop if small & imported with rawLeaves true\n\n      if (file.type === 'directory') {\n        throw new Error('this dag node is a directory');\n      }\n\n      if (!file.content) {\n        throw new Error('this dag node has no content');\n      }\n\n      yield* _asyncGeneratorDelegate(_asyncIterator(file.content(options)), _awaitAsyncGenerator);\n    });\n    return _cat.apply(this, arguments);\n  }\n\n  return withTimeoutOption(cat);\n};","map":null,"metadata":{},"sourceType":"script"}