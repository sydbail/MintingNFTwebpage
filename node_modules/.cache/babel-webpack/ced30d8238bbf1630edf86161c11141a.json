{"ast":null,"code":"var _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nconst BufferList = require('bl/BufferList');\n\nconst TypeDefault = {\n  string: () => '',\n  buffer: () => BufferList()\n};\n\nmodule.exports = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (source, options) {\n    options = options || {};\n\n    if (options.type && !TypeDefault[options.type]) {\n      throw new Error(`invalid type \"${options.type}\"`);\n    }\n\n    let res, type;\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n\n    var _iteratorError;\n\n    try {\n      for (var _iterator = _asyncIterator(source), _step, _value; _step = yield _iterator.next(), _iteratorNormalCompletion = _step.done, _value = yield _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n        const chunk = _value;\n\n        if (!res) {\n          type = options.type || (typeof chunk === 'string' ? 'string' : 'buffer');\n          res = TypeDefault[type]();\n        }\n\n        if (type === 'string') {\n          res += chunk;\n        } else {\n          res.append(chunk);\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          yield _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return res || TypeDefault[options.type || 'buffer']();\n  });\n\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":null,"metadata":{},"sourceType":"script"}