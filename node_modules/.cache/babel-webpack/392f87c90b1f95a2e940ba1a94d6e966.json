{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst addAll = require('./add-all');\n\nconst last = require('it-last');\n\nconst configure = require('../lib/configure');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin').API<HTTPClientExtraOptions>} PinAPI\n */\n\n/**\n * @param {import('../types').Options} config\n */\n\n\nmodule.exports = config => {\n  const all = addAll(config);\n  return configure(() => {\n    /**\n     * @type {PinAPI[\"add\"]}\n     */\n    function add(_x) {\n      return _add.apply(this, arguments);\n    }\n\n    function _add() {\n      _add = _asyncToGenerator(function* (path, options = {}) {\n        // @ts-ignore last can return undefined\n        return last(all([{\n          path,\n          ...options\n        }], options));\n      });\n      return _add.apply(this, arguments);\n    }\n\n    return add;\n  })(config);\n};","map":{"version":3,"sources":["/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/ipfs-http-client/src/pin/add.js"],"names":["addAll","require","last","configure","module","exports","config","all","add","path","options"],"mappings":"AAAA;;;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,WAAD,CAAtB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,SAAD,CAApB;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,kBAAD,CAAzB;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AACAG,MAAM,CAACC,OAAP,GAAkBC,MAAD,IAAY;AAC3B,QAAMC,GAAG,GAAGP,MAAM,CAACM,MAAD,CAAlB;AAEA,SAAOH,SAAS,CAAC,MAAM;AACrB;AACJ;AACA;AAHyB,aAINK,GAJM;AAAA;AAAA;;AAAA;AAAA,+BAIrB,WAAoBC,IAApB,EAA0BC,OAAO,GAAG,EAApC,EAAwC;AACtC;AACA,eAAOR,IAAI,CAACK,GAAG,CAAC,CAAC;AACfE,UAAAA,IADe;AAEf,aAAGC;AAFY,SAAD,CAAD,EAGXA,OAHW,CAAJ,CAAX;AAID,OAVoB;AAAA;AAAA;;AAWrB,WAAOF,GAAP;AACD,GAZe,CAAT,CAYJF,MAZI,CAAP;AAaD,CAhBD","sourcesContent":["'use strict'\n\nconst addAll = require('./add-all')\nconst last = require('it-last')\nconst configure = require('../lib/configure')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin').API<HTTPClientExtraOptions>} PinAPI\n */\n\n/**\n * @param {import('../types').Options} config\n */\nmodule.exports = (config) => {\n  const all = addAll(config)\n\n  return configure(() => {\n    /**\n     * @type {PinAPI[\"add\"]}\n     */\n    async function add (path, options = {}) {\n      // @ts-ignore last can return undefined\n      return last(all([{\n        path,\n        ...options\n      }], options))\n    }\n    return add\n  })(config)\n}\n"]},"metadata":{},"sourceType":"script"}