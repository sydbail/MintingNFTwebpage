{"ast":null,"code":"import _asyncToGenerator from \"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { Observable } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./web3.service\";\n\nconst noTipfsNFTArtifacts = require('../../../build/contracts/noTransferIPFSNFT.json');\n\nconst contract = require('@truffle/contract');\n\nexport class NotransferipfscontractService {\n  web3Ser;\n  noTipfs = contract(noTipfsNFTArtifacts);\n\n  constructor(web3Ser) {\n    this.web3Ser = web3Ser;\n    this.noTipfs.setProvider(web3Ser.web3.currentProvider);\n  }\n\n  getBalance(account) {\n    let not;\n    return Observable.create(observer => {\n      this.noTipfs.deployed().then(instance => {\n        not = instance; //we use call here so the call doesn't try and write, making it free\n\n        return not.balanceOf.call(account, {\n          from: account\n        });\n      }).then(value => {\n        observer.next(value);\n        observer.complete();\n      }).catch(e => {\n        console.log(e);\n        observer.error(e);\n      });\n    });\n  }\n\n  getOwner(id) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      let not = _this.noTipfs.deployed();\n\n      const owner = not.ownerOf.call(id, {\n        from: _this.web3Ser.web3.eth.defaultAccount\n      });\n      return owner;\n    })();\n  }\n\n  getTokenUri(id) {\n    let not;\n    return Observable.create(observer => {\n      this.noTipfs.deployed().then(instance => {\n        not = instance; //we use call here so the call doesn't try and write, making it free\n\n        return not.tokenURI.call(id, {\n          from: this.web3Ser.web3.eth.defaultAccount\n        });\n      }).then(value => {\n        observer.next(value);\n        observer.complete();\n      }).catch(e => {\n        console.log(e);\n        observer.error(e);\n      });\n    });\n  }\n\n  mintCoin(to, imagehash, metahash) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      let not = yield _this2.noTipfs.deployed();\n      const value = yield not.mint(to, imagehash, metahash, {\n        from: _this2.web3Ser.web3.eth.defaultAccount\n      });\n      return value;\n    })();\n  }\n\n  static ɵfac = function NotransferipfscontractService_Factory(t) {\n    return new (t || NotransferipfscontractService)(i0.ɵɵinject(i1.Web3Service));\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: NotransferipfscontractService,\n    factory: NotransferipfscontractService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"sources":["/Users/sydneybailey/Internship/contract-testing/src/app/services/notransferipfscontract.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { from } from 'rxjs';\nimport { Web3Service } from './web3.service'\n\nconst noTipfsNFTArtifacts = require('../../../build/contracts/noTransferIPFSNFT.json');\nconst contract = require('@truffle/contract');\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NotransferipfscontractService {\n\n  noTipfs = contract(noTipfsNFTArtifacts);\n\n  constructor(private web3Ser: Web3Service) {\n    this.noTipfs.setProvider(web3Ser.web3.currentProvider);\n  }\n\n  getBalance(account: any): Observable<number> {\n  let not;\n\n  return Observable.create((observer: any) => {\n    this.noTipfs\n      .deployed()\n      .then((instance: any) => {\n        not = instance;\n        //we use call here so the call doesn't try and write, making it free\n        return not.balanceOf.call(account, {\n          from: account\n        });\n      })\n      .then((value: any) => {\n        observer.next(value)\n        observer.complete()\n      })\n      .catch((e: any) => {\n        console.log(e);\n        observer.error(e)\n      });\n    })\n  }\n\n  async getOwner(id: any): Promise<any> {\n    let not = this.noTipfs.deployed();\n    const owner = not.ownerOf.call(id, {\n      from: this.web3Ser.web3.eth.defaultAccount\n    });\n    return owner;\n  }\n\n  getTokenUri(id: any): Observable<number> {\n    let not;\n\n    return Observable.create((observer: any) => {\n      this.noTipfs\n        .deployed()\n        .then((instance: any) => {\n          not = instance;\n          //we use call here so the call doesn't try and write, making it free\n          return not.tokenURI.call(id, {\n            from: this.web3Ser.web3.eth.defaultAccount\n          });\n        })\n        .then((value: any) => {\n          observer.next(value)\n          observer.complete()\n        })\n        .catch((e: any) => {\n          console.log(e);\n          observer.error(e)\n        });\n    })\n  }\n\n  async mintCoin(to: any, imagehash: string, metahash: string): Promise<any>{\n    let not = await this.noTipfs.deployed();\n    const value = await not.mint(to, imagehash, metahash, {from: this.web3Ser.web3.eth.defaultAccount});\n    return value;\n  }\n\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}