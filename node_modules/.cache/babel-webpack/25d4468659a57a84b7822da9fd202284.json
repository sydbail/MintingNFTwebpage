{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nconst errCode = require('err-code');\n\nconst itPeekable = require('it-peekable');\n\nconst browserStreamToIt = require('browser-readablestream-to-it');\n\nconst all = require('it-all');\n\nconst {\n  isBytes,\n  isBlob,\n  isReadableStream\n} = require('./utils');\n/**\n * @param {import('./normalise-input').ToContent} input\n */\n\n\nfunction toBlob(_x) {\n  return _toBlob.apply(this, arguments);\n}\n/**\n * @param {AsyncIterable<BlobPart>|Iterable<BlobPart>} stream\n */\n\n\nfunction _toBlob() {\n  _toBlob = _asyncToGenerator(function* (input) {\n    // Bytes\n    if (isBytes(input)) {\n      return new Blob([input]);\n    } // String\n\n\n    if (typeof input === 'string' || input instanceof String) {\n      return new Blob([input.toString()]);\n    } // Blob | File\n\n\n    if (isBlob(input)) {\n      return input;\n    } // Browser stream\n\n\n    if (isReadableStream(input)) {\n      input = browserStreamToIt(input);\n    } // (Async)Iterator<?>\n\n\n    if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n      /** @type {any} peekable */\n      const peekable = itPeekable(input);\n      /** @type {any} value **/\n\n      const {\n        value,\n        done\n      } = yield peekable.peek();\n\n      if (done) {\n        // make sure empty iterators result in empty files\n        return itToBlob(peekable);\n      }\n\n      peekable.push(value); // (Async)Iterable<Number>\n\n      if (Number.isInteger(value)) {\n        return new Blob([Uint8Array.from(yield all(peekable))]);\n      } // (Async)Iterable<Bytes|String>\n\n\n      if (isBytes(value) || typeof value === 'string' || value instanceof String) {\n        return itToBlob(peekable);\n      }\n    }\n\n    throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT');\n  });\n  return _toBlob.apply(this, arguments);\n}\n\nfunction itToBlob(_x2) {\n  return _itToBlob.apply(this, arguments);\n}\n\nfunction _itToBlob() {\n  _itToBlob = _asyncToGenerator(function* (stream) {\n    const parts = [];\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n\n    var _iteratorError;\n\n    try {\n      for (var _iterator = _asyncIterator(stream), _step, _value; _step = yield _iterator.next(), _iteratorNormalCompletion = _step.done, _value = yield _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n        const chunk = _value;\n        parts.push(chunk);\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          yield _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return new Blob(parts);\n  });\n  return _itToBlob.apply(this, arguments);\n}\n\nmodule.exports = toBlob;","map":null,"metadata":{},"sourceType":"script"}