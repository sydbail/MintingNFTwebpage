{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst Key = require('interface-datastore').Key;\n\nconst debug = require('debug');\n\nconst log = debug('ipfs:repo:version');\n\nconst {\n  toString: uint8ArrayToString\n} = require('uint8arrays/to-string');\n\nconst {\n  fromString: uint8ArrayFromString\n} = require('uint8arrays/from-string');\n\nconst {\n  hasWithFallback,\n  getWithFallback // @ts-ignore\n\n} = require('ipfs-repo-migrations/src/utils');\n\nconst versionKey = new Key('version');\n/**\n *\n * @param {import('interface-datastore').Datastore} store\n */\n\nmodule.exports = store => {\n  return {\n    /**\n     * Check if a version file exists.\n     *\n     */\n    exists() {\n      return _asyncToGenerator(function* () {\n        // eslint-disable-line require-await\n        // level-js@5.x cannot read keys from level-js@4.x dbs so fall back to\n        // using IndexedDB API with string keys - only necessary until we do\n        // the migratiion to v10 or above\n        return hasWithFallback(versionKey, store.has.bind(store), store);\n      })();\n    },\n\n    /**\n     * Get the current version.\n     *\n     * @returns {Promise<number>}\n     */\n    get() {\n      return _asyncToGenerator(function* () {\n        // level-js@5.x cannot read keys from level-js@4.x dbs so fall back to\n        // using IndexedDB API with string keys - only necessary until we do\n        // the migratiion to v10 or above\n        const buf = yield getWithFallback(versionKey, store.get.bind(store), store.has.bind(store), store);\n        return parseInt(uint8ArrayToString(buf), 10);\n      })();\n    },\n\n    /**\n     * Set the version of the repo, writing it to the underlying store.\n     *\n     * @param {number} version\n     * @returns {Promise<void>}\n     */\n    set(version) {\n      return store.put(versionKey, uint8ArrayFromString(String(version)));\n    },\n\n    /**\n     * Check the current version, and returns true if versions matches\n     *\n     * @param {number} expected\n     */\n    check(expected) {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        const version = yield _this.get();\n        log('comparing version: %s and %s', version, expected); // Version 6 and 7 are the same\n        // TODO: Clean up the compatibility logic. Repo feature detection would be ideal, or a better version schema\n\n        const compatibleVersion = version === 6 && expected === 7 || expected === 6 && version === 7;\n        return version === expected || compatibleVersion;\n      })();\n    }\n\n  };\n};","map":null,"metadata":{},"sourceType":"script"}