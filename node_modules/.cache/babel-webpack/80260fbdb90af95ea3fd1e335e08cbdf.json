{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst {\n  UnixFS\n} = require('ipfs-unixfs');\n\nconst dagPb = require('@ipld/dag-pb');\n\nconst {\n  sha256\n} = require('multiformats/hashes/sha2');\n\nconst log = require('debug')('ipfs:mfs:utils:with-mfs-root');\n\nconst errCode = require('err-code');\n\nconst {\n  MFS_ROOT_KEY\n} = require('../../../utils');\n/**\n * @typedef {import('../').MfsContext} MfsContext\n */\n\n/**\n * @param {MfsContext} context\n * @param {import('ipfs-core-types/src/utils').AbortOptions} [options]\n */\n\n\nconst loadMfsRoot = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (context, options) {\n    if (options && options.signal && options.signal.aborted) {\n      throw errCode(new Error('Request aborted'), 'ERR_ABORTED', {\n        name: 'Aborted'\n      });\n    } // Open the repo if it's been closed\n\n\n    yield context.repo.datastore.open(); // Load the MFS root CID\n\n    let cid;\n\n    try {\n      const buf = yield context.repo.datastore.get(MFS_ROOT_KEY);\n      cid = CID.decode(buf);\n    } catch (err) {\n      if (err.code !== 'ERR_NOT_FOUND') {\n        throw err;\n      }\n\n      log('Creating new MFS root');\n      const buf = dagPb.encode({\n        Data: new UnixFS({\n          type: 'directory'\n        }).marshal(),\n        Links: []\n      });\n      const hash = yield sha256.digest(buf);\n      cid = CID.createV0(hash);\n      yield context.repo.blocks.put(cid, buf);\n\n      if (options && options.signal && options.signal.aborted) {\n        throw errCode(new Error('Request aborted'), 'ERR_ABORTED', {\n          name: 'Aborted'\n        });\n      }\n\n      yield context.repo.datastore.put(MFS_ROOT_KEY, cid.bytes);\n    }\n\n    log(`Loaded MFS root /ipfs/${cid}`);\n    return cid;\n  });\n\n  return function loadMfsRoot(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nmodule.exports = loadMfsRoot;","map":null,"metadata":{},"sourceType":"script"}