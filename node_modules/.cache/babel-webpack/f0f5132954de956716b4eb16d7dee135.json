{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst {\n  fromString: uint8ArrayFromString\n} = require('uint8arrays/from-string');\n\nconst multipartRequest = require('../lib/multipart-request');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nconst abortSignal = require('../lib/abort-signal');\n\nconst {\n  AbortController\n} = require('native-abort-controller');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/config').API<HTTPClientExtraOptions>} ConfigAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {ConfigAPI[\"replace\"]}\n   */\n  const replace = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(function* (config, options = {}) {\n      // allow aborting requests on body errors\n      const controller = new AbortController();\n      const signal = abortSignal(controller.signal, options.signal);\n      const res = yield api.post('config/replace', {\n        timeout: options.timeout,\n        signal,\n        searchParams: toUrlSearchParams(options),\n        ...(yield multipartRequest(uint8ArrayFromString(JSON.stringify(config)), controller, options.headers))\n      });\n      yield res.text();\n    });\n\n    return function replace(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return replace;\n});","map":null,"metadata":{},"sourceType":"script"}