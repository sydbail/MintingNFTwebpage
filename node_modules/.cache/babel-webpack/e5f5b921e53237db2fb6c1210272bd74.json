{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst Key = require('interface-datastore').Key;\n\nconst log = require('debug')('ipfs:repo:migrator:migration-8');\n\nconst length = require('it-length');\n\nconst {\n  base32\n} = require('multiformats/bases/base32');\n\nconst raw = require('multiformats/codecs/raw');\n\nconst mhd = require('multiformats/hashes/digest');\n/**\n * @typedef {import('../../src/types').Migration} Migration\n * @typedef {import('interface-datastore').Datastore} Datastore\n */\n\n/**\n * @param {*} blockstore\n * @returns {Datastore}\n */\n\n\nfunction unwrap(blockstore) {\n  if (blockstore.child) {\n    return unwrap(blockstore.child);\n  }\n\n  return blockstore;\n}\n/**\n * @param {Key} key\n */\n\n\nfunction keyToMultihash(key) {\n  try {\n    const buf = base32.decode(`b${key.toString().toLowerCase().slice(1)}`); // Extract multihash from CID\n\n    const multihash = CID.decode(buf).multihash.bytes; // Encode and slice off multibase codec\n    // Should be uppercase for interop with go\n\n    const multihashStr = base32.encode(multihash).slice(1).toUpperCase();\n    return new Key(`/${multihashStr}`, false);\n  } catch (err) {\n    return key;\n  }\n}\n/**\n * @param {Key} key\n */\n\n\nfunction keyToCid(key) {\n  try {\n    const buf = base32.decode(`b${key.toString().toLowerCase().slice(1)}`);\n    const digest = mhd.decode(buf); // CID to Key\n\n    const multihash = base32.encode(CID.createV1(raw.code, digest).bytes).slice(1);\n    return new Key(`/${multihash.toUpperCase()}`, false);\n  } catch {\n    return key;\n  }\n}\n/**\n * @param {import('../../src/types').Backends} backends\n * @param {(percent: number, message: string) => void} onProgress\n * @param {(key: Key) => Key} keyFunction\n */\n\n\nfunction process(_x, _x2, _x3) {\n  return _process.apply(this, arguments);\n}\n/** @type {Migration} */\n\n\nfunction _process() {\n  _process = _asyncToGenerator(function* (backends, onProgress, keyFunction) {\n    const blockstore = backends.blocks;\n    yield blockstore.open();\n    const unwrapped = unwrap(blockstore);\n    const blockCount = yield length(unwrapped.queryKeys({\n      filters: [key => {\n        const newKey = keyFunction(key);\n        return newKey.toString() !== key.toString();\n      }]\n    }));\n\n    try {\n      let counter = 0;\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n\n      var _iteratorError;\n\n      try {\n        for (var _iterator = _asyncIterator(unwrapped.query({})), _step, _value; _step = yield _iterator.next(), _iteratorNormalCompletion = _step.done, _value = yield _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n          const block = _value;\n          const newKey = keyFunction(block.key); // If the Key is base32 CIDv0 then there's nothing to do\n\n          if (newKey.toString() !== block.key.toString()) {\n            counter += 1;\n            log(`Migrating Block from ${block.key} to ${newKey}`, yield unwrapped.has(block.key));\n            yield unwrapped.delete(block.key);\n            yield unwrapped.put(newKey, block.value);\n            onProgress(counter / blockCount * 100, `Migrated Block from ${block.key} to ${newKey}`);\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            yield _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    } finally {\n      yield blockstore.close();\n    }\n  });\n  return _process.apply(this, arguments);\n}\n\nmodule.exports = {\n  version: 8,\n  description: 'Transforms key names into base32 encoding and converts Block store to use bare multihashes encoded as base32',\n  migrate: (backends, onProgress = () => {}) => {\n    return process(backends, onProgress, keyToMultihash);\n  },\n  revert: (backends, onProgress = () => {}) => {\n    return process(backends, onProgress, keyToCid);\n  }\n};","map":null,"metadata":{},"sourceType":"script"}