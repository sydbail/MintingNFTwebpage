{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object').API<HTTPClientExtraOptions>} ObjectAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {ObjectAPI[\"data\"]}\n   */\n  function data(_x) {\n    return _data.apply(this, arguments);\n  }\n\n  function _data() {\n    _data = _asyncToGenerator(function* (cid, options = {}) {\n      const res = yield api.post('object/data', {\n        timeout: options.timeout,\n        signal: options.signal,\n        searchParams: toUrlSearchParams({\n          arg: `${cid instanceof Uint8Array ? CID.decode(cid) : cid}`,\n          ...options\n        }),\n        headers: options.headers\n      });\n      const data = yield res.arrayBuffer();\n      return new Uint8Array(data, 0, data.byteLength);\n    });\n    return _data.apply(this, arguments);\n  }\n\n  return data;\n});","map":{"version":3,"sources":["/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/ipfs-http-client/src/object/data.js"],"names":["CID","require","configure","toUrlSearchParams","module","exports","api","data","cid","options","res","post","timeout","signal","searchParams","arg","Uint8Array","decode","headers","arrayBuffer","byteLength"],"mappings":"AAAA;;;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAUC,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,6BAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AAEAG,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAACI,GAAG,IAAI;AAChC;AACF;AACA;AAHkC,WAIjBC,IAJiB;AAAA;AAAA;;AAAA;AAAA,8BAIhC,WAAqBC,GAArB,EAA0BC,OAAO,GAAG,EAApC,EAAwC;AACtC,YAAMC,GAAG,SAASJ,GAAG,CAACK,IAAJ,CAAS,aAAT,EAAwB;AACxCC,QAAAA,OAAO,EAAEH,OAAO,CAACG,OADuB;AAExCC,QAAAA,MAAM,EAAEJ,OAAO,CAACI,MAFwB;AAGxCC,QAAAA,YAAY,EAAEX,iBAAiB,CAAC;AAC9BY,UAAAA,GAAG,EAAG,GAAEP,GAAG,YAAYQ,UAAf,GAA4BhB,GAAG,CAACiB,MAAJ,CAAWT,GAAX,CAA5B,GAA8CA,GAAI,EAD5B;AAE9B,aAAGC;AAF2B,SAAD,CAHS;AAOxCS,QAAAA,OAAO,EAAET,OAAO,CAACS;AAPuB,OAAxB,CAAlB;AASA,YAAMX,IAAI,SAASG,GAAG,CAACS,WAAJ,EAAnB;AAEA,aAAO,IAAIH,UAAJ,CAAeT,IAAf,EAAqB,CAArB,EAAwBA,IAAI,CAACa,UAA7B,CAAP;AACD,KAjB+B;AAAA;AAAA;;AAkBhC,SAAOb,IAAP;AACD,CAnByB,CAA1B","sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object').API<HTTPClientExtraOptions>} ObjectAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {ObjectAPI[\"data\"]}\n   */\n  async function data (cid, options = {}) {\n    const res = await api.post('object/data', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${cid instanceof Uint8Array ? CID.decode(cid) : cid}`,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.arrayBuffer()\n\n    return new Uint8Array(data, 0, data.byteLength)\n  }\n  return data\n})\n"]},"metadata":{},"sourceType":"script"}