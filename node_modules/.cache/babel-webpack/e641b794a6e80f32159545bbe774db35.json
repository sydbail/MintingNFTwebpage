{"ast":null,"code":"'use strict';\n/**\n * Error raised when there is lock already in place when repo is being opened.\n */\n\nlet LockExistsError = /*#__PURE__*/(() => {\n  class LockExistsError extends Error {\n    /**\n     * @param {string} [message]\n     */\n    constructor(message) {\n      super(message);\n      this.name = 'LockExistsError';\n      this.code = LockExistsError.code;\n    }\n\n  }\n\n  LockExistsError.code = 'ERR_LOCK_EXISTS';\n  return LockExistsError;\n})();\nexports.LockExistsError = LockExistsError;\n/**\n * Error raised when requested item is not found.\n */\n\nlet NotFoundError = /*#__PURE__*/(() => {\n  class NotFoundError extends Error {\n    /**\n     * @param {string} [message]\n     */\n    constructor(message) {\n      super(message);\n      this.name = 'NotFoundError';\n      this.code = NotFoundError.code;\n    }\n\n  }\n\n  NotFoundError.code = 'ERR_NOT_FOUND';\n  return NotFoundError;\n})();\nexports.NotFoundError = NotFoundError;\n/**\n * Error raised when version of the stored repo is not compatible with version of this package.\n */\n\nlet InvalidRepoVersionError = /*#__PURE__*/(() => {\n  class InvalidRepoVersionError extends Error {\n    /**\n     * @param {string} [message]\n     */\n    constructor(message) {\n      super(message);\n      this.name = 'InvalidRepoVersionError';\n      this.code = InvalidRepoVersionError.code;\n    }\n\n  }\n\n  InvalidRepoVersionError.code = 'ERR_INVALID_REPO_VERSION';\n  return InvalidRepoVersionError;\n})();\nexports.InvalidRepoVersionError = InvalidRepoVersionError;\nexports.ERR_REPO_NOT_INITIALIZED = 'ERR_REPO_NOT_INITIALIZED';\nexports.ERR_REPO_ALREADY_OPEN = 'ERR_REPO_ALREADY_OPEN';\nexports.ERR_REPO_ALREADY_CLOSED = 'ERR_REPO_ALREADY_CLOSED';","map":null,"metadata":{},"sourceType":"script"}