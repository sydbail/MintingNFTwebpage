{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst errcode = require('err-code');\n\nconst utils = require('../../utils');\n/**\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('../../message')} Message\n */\n\n/**\n * @param {import('../../index')} dht\n */\n\n\nmodule.exports = dht => {\n  const log = utils.logger(dht.peerId, 'rpc:add-provider');\n  /**\n   * Process `AddProvider` DHT messages.\n   *\n   * @param {PeerId} peerId\n   * @param {Message} msg\n   */\n\n  function addProvider(_x, _x2) {\n    return _addProvider.apply(this, arguments);\n  }\n\n  function _addProvider() {\n    _addProvider = _asyncToGenerator(function* (peerId, msg) {\n      // eslint-disable-line require-await\n      log('start');\n\n      if (!msg.key || msg.key.length === 0) {\n        throw errcode(new Error('Missing key'), 'ERR_MISSING_KEY');\n      }\n      /** @type {CID} */\n\n\n      let cid;\n\n      try {\n        cid = CID.decode(msg.key);\n      } catch (err) {\n        const errMsg = `Invalid CID: ${err.message}`;\n        throw errcode(new Error(errMsg), 'ERR_INVALID_CID');\n      }\n\n      msg.providerPeers.forEach(pi => {\n        // Ignore providers not from the originator\n        if (!pi.id.isEqual(peerId)) {\n          log('invalid provider peer %s from %s', pi.id.toB58String(), peerId.toB58String());\n          return;\n        }\n\n        if (pi.multiaddrs.length < 1) {\n          log('no valid addresses for provider %s. Ignore', peerId.toB58String());\n          return;\n        }\n\n        log('received provider %s for %s (addrs %s)', peerId.toB58String(), cid.toString(), pi.multiaddrs.map(m => m.toString()));\n\n        if (!dht._isSelf(pi.id)) {\n          // Add known address to peer store\n          dht.peerStore.addressBook.add(pi.id, pi.multiaddrs);\n          return dht.providers.addProvider(cid, pi.id);\n        }\n      }); // Previous versions of the JS DHT sent erroneous providers in the\n      // `providerPeers` field. In order to accommodate older clients that have\n      // this bug, we fall back to assuming the originator is the provider if\n      // we can't find any valid providers in the payload.\n      // https://github.com/libp2p/js-libp2p-kad-dht/pull/127\n      // https://github.com/libp2p/js-libp2p-kad-dht/issues/128\n\n      return dht.providers.addProvider(cid, peerId);\n    });\n    return _addProvider.apply(this, arguments);\n  }\n\n  return addProvider;\n};","map":null,"metadata":{},"sourceType":"script"}