{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nvar _asyncGeneratorDelegate = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncGeneratorDelegate\").default;\n\nvar _awaitAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\").default;\n\nvar _wrapAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nconst drain = require('it-drain');\n\nconst pushable = require('it-pushable');\n\nconst {\n  Key\n} = require('interface-datastore');\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst raw = require('multiformats/codecs/raw');\n\nconst Digest = require('multiformats/hashes/digest');\n\nconst {\n  base32,\n  base32pad\n} = require('multiformats/bases/base32');\n\nconst {\n  base58btc\n} = require('multiformats/bases/base58');\n\nconst errcode = require('err-code');\n\nconst {\n  BlockstoreAdapter\n} = require('interface-blockstore');\n/**\n * Transform a cid to the appropriate datastore key.\n *\n * @param {CID} cid\n * @returns {Key}\n */\n\n\nfunction cidToKey(cid) {\n  if (!(cid instanceof CID)) {\n    throw errcode(new Error('Not a valid cid'), 'ERR_INVALID_CID');\n  }\n\n  return new Key('/' + base32.encode(cid.multihash.bytes).slice(1).toUpperCase(), false);\n}\n/**\n * Transform a datastore Key instance to a CID\n * As Key is a multihash of the CID, it is reconstructed using IPLD's RAW codec.\n * Hence it is highly probable that stored CID will differ from a CID retrieved from blockstore.\n *\n * @param {Key} key\n * @returns {CID}\n */\n\n\nfunction keyToCid(key) {\n  // Block key is of the form <base32 encoded string>\n  return CID.createV1(raw.code, Digest.decode(base32.decode('b' + key.toString().slice(1).toLowerCase())));\n}\n/**\n * Tries to decode a prefix as the first part of a CID and then\n * strip off the version and codec bytes to just leave part of\n * the multihash.\n *\n * Only really works if the prefix length aligns with the byte\n * boundaries of the encoding.\n *\n * @param {string} prefix\n * @returns {string}\n */\n\n\nfunction convertPrefix(prefix) {\n  let bytes;\n  const firstChar = prefix.substring(0, 1);\n\n  if (firstChar === '/') {\n    return convertPrefix(prefix.substring(1));\n  }\n\n  if (firstChar.toLowerCase() === 'b') {\n    // v1 cid prefix, remove version and codec bytes\n    bytes = base32.decode(prefix.toLowerCase()).subarray(2);\n  } else if (firstChar.toLowerCase() === 'c') {\n    // v1 cid prefix, remove version and codec bytes\n    bytes = base32pad.decode(prefix.toLowerCase()).subarray(2);\n  } else if (firstChar === 'z') {\n    // v1 cid\n    bytes = base58btc.decode(prefix).subarray(2);\n  } else if (firstChar === 'Q') {\n    // v0 cid prefix\n    bytes = base58btc.decode('z' + prefix);\n  } else {\n    bytes = base32.decode('b' + prefix.toLowerCase()).subarray(2);\n  }\n\n  const str = base32.encode(bytes).substring(1).toUpperCase();\n  return str || 'C';\n}\n/**\n * @param {import('interface-blockstore').Query} query\n * @returns {import('interface-datastore').Query}\n */\n\n\nfunction convertQuery(query) {\n  return { ...query,\n    prefix: query.prefix ? `/${convertPrefix(query.prefix)}` : undefined,\n    filters: query.filters ? query.filters.map(filter => pair => {\n      return filter({\n        key: keyToCid(pair.key),\n        value: pair.value\n      });\n    }) : undefined,\n    orders: query.orders ? query.orders.map(order => (a, b) => {\n      return order({\n        key: keyToCid(a.key),\n        value: a.value\n      }, {\n        key: keyToCid(b.key),\n        value: b.value\n      });\n    }) : undefined\n  };\n}\n/**\n * @param {import('interface-blockstore').KeyQuery} query\n * @returns {import('interface-datastore').KeyQuery}\n */\n\n\nfunction convertKeyQuery(query) {\n  return { ...query,\n    prefix: query.prefix ? `/${convertPrefix(query.prefix)}` : undefined,\n    filters: query.filters ? query.filters.map(filter => key => {\n      return filter(keyToCid(key));\n    }) : undefined,\n    orders: query.orders ? query.orders.map(order => (a, b) => {\n      return order(keyToCid(a), keyToCid(b));\n    }) : undefined\n  };\n}\n/**\n * @typedef {import('interface-blockstore').Query} Query\n * @typedef {import('interface-blockstore').KeyQuery} KeyQuery\n * @typedef {import('interface-blockstore').Pair} Pair\n * @typedef {import('interface-blockstore').Options} Options\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n */\n\n/**\n * @implements {Blockstore}\n */\n\n\nclass BlockstoreDatastoreAdapter extends BlockstoreAdapter {\n  /**\n   * @param {Datastore} datastore\n   */\n  constructor(datastore) {\n    super();\n    this.child = datastore;\n  }\n\n  open() {\n    return this.child.open();\n  }\n\n  close() {\n    return this.child.close();\n  }\n  /**\n   * @param {Query} query\n   * @param {Options} [options]\n   */\n\n\n  query(query, options) {\n    var _this = this;\n\n    return _wrapAsyncGenerator(function* () {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n\n      var _iteratorError;\n\n      try {\n        for (var _iterator = _asyncIterator(_this.child.query(convertQuery(query), options)), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n          const {\n            key,\n            value\n          } = _value;\n          yield {\n            key: keyToCid(key),\n            value\n          };\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            yield _awaitAsyncGenerator(_iterator.return());\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    })();\n  }\n  /**\n   * @param {KeyQuery} query\n   * @param {Options} [options]\n   */\n\n\n  queryKeys(query, options) {\n    var _this2 = this;\n\n    return _wrapAsyncGenerator(function* () {\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n\n      var _iteratorError2;\n\n      try {\n        for (var _iterator2 = _asyncIterator(_this2.child.queryKeys(convertKeyQuery(query), options)), _step2, _value2; _step2 = yield _awaitAsyncGenerator(_iterator2.next()), _iteratorNormalCompletion2 = _step2.done, _value2 = yield _awaitAsyncGenerator(_step2.value), !_iteratorNormalCompletion2; _iteratorNormalCompletion2 = true) {\n          const key = _value2;\n          yield keyToCid(key);\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            yield _awaitAsyncGenerator(_iterator2.return());\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    })();\n  }\n  /**\n   * @param {CID} cid\n   * @param {Options} [options]\n   * @returns\n   */\n\n\n  get(cid, options) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this5.child.get(cidToKey(cid), options);\n    })();\n  }\n  /**\n   * @param {AsyncIterable<CID> | Iterable<CID>} cids\n   * @param {Options} [options]\n   */\n\n\n  getMany(cids, options) {\n    var _this3 = this;\n\n    return _wrapAsyncGenerator(function* () {\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n\n      var _iteratorError3;\n\n      try {\n        for (var _iterator3 = _asyncIterator(cids), _step3, _value3; _step3 = yield _awaitAsyncGenerator(_iterator3.next()), _iteratorNormalCompletion3 = _step3.done, _value3 = yield _awaitAsyncGenerator(_step3.value), !_iteratorNormalCompletion3; _iteratorNormalCompletion3 = true) {\n          const cid = _value3;\n          yield _this3.get(cid, options);\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n            yield _awaitAsyncGenerator(_iterator3.return());\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n    })();\n  }\n  /**\n   * @param {CID} cid\n   * @param {Uint8Array} value\n   * @param {Options} [options]\n   */\n\n\n  put(cid, value, options) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this6.child.put(cidToKey(cid), value, options);\n    })();\n  }\n  /**\n   * @param {AsyncIterable<Pair> | Iterable<Pair>} blocks\n   * @param {Options} [options]\n   */\n\n\n  putMany(blocks, options) {\n    var _this4 = this;\n\n    return _wrapAsyncGenerator(function* () {\n      // eslint-disable-line require-await\n      // we cannot simply chain to `store.putMany` because we convert a CID into\n      // a key based on the multihash only, so we lose the version & codec and\n      // cannot give the user back the CID they used to create the block, so yield\n      // to `store.putMany` but return the actual block the user passed in.\n      //\n      // nb. we want to use `store.putMany` here so bitswap can control batching\n      // up block HAVEs to send to the network - if we use multiple `store.put`s\n      // it will not be able to guess we are about to `store.put` more blocks\n      const output = pushable(); // process.nextTick runs on the microtask queue, setImmediate runs on the next\n      // event loop iteration so is slower. Use process.nextTick if it is available.\n\n      const runner = process && process.nextTick ? process.nextTick : setImmediate;\n      runner( /*#__PURE__*/_asyncToGenerator(function* () {\n        try {\n          const store = _this4.child;\n          yield drain(_this4.child.putMany(_wrapAsyncGenerator(function* () {\n            var _iteratorNormalCompletion4 = true;\n            var _didIteratorError4 = false;\n\n            var _iteratorError4;\n\n            try {\n              for (var _iterator4 = _asyncIterator(blocks), _step4, _value4; _step4 = yield _awaitAsyncGenerator(_iterator4.next()), _iteratorNormalCompletion4 = _step4.done, _value4 = yield _awaitAsyncGenerator(_step4.value), !_iteratorNormalCompletion4; _iteratorNormalCompletion4 = true) {\n                const block = _value4;\n                const key = cidToKey(block.key);\n                const exists = yield _awaitAsyncGenerator(store.has(key, options));\n\n                if (!exists) {\n                  yield {\n                    key,\n                    value: block.value\n                  };\n                } // there is an assumption here that after the yield has completed\n                // the underlying datastore has finished writing the block\n\n\n                output.push(block);\n              }\n            } catch (err) {\n              _didIteratorError4 = true;\n              _iteratorError4 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n                  yield _awaitAsyncGenerator(_iterator4.return());\n                }\n              } finally {\n                if (_didIteratorError4) {\n                  throw _iteratorError4;\n                }\n              }\n            }\n          })()));\n          output.end();\n        } catch (err) {\n          output.end(err);\n        }\n      }));\n      yield* _asyncGeneratorDelegate(_asyncIterator(output), _awaitAsyncGenerator);\n    })();\n  }\n  /**\n   * @param {CID} cid\n   * @param {Options} [options]\n   */\n\n\n  has(cid, options) {\n    return this.child.has(cidToKey(cid), options);\n  }\n  /**\n   * @param {CID} cid\n   * @param {Options} [options]\n   */\n\n\n  delete(cid, options) {\n    return this.child.delete(cidToKey(cid), options);\n  }\n  /**\n   * @param {AsyncIterable<CID> | Iterable<CID>} cids\n   * @param {Options} [options]\n   */\n\n\n  deleteMany(cids, options) {\n    const out = pushable();\n    drain(this.child.deleteMany(_wrapAsyncGenerator(function* () {\n      var _iteratorNormalCompletion5 = true;\n      var _didIteratorError5 = false;\n\n      var _iteratorError5;\n\n      try {\n        for (var _iterator5 = _asyncIterator(cids), _step5, _value5; _step5 = yield _awaitAsyncGenerator(_iterator5.next()), _iteratorNormalCompletion5 = _step5.done, _value5 = yield _awaitAsyncGenerator(_step5.value), !_iteratorNormalCompletion5; _iteratorNormalCompletion5 = true) {\n          const cid = _value5;\n          yield cidToKey(cid);\n          out.push(cid);\n        }\n      } catch (err) {\n        _didIteratorError5 = true;\n        _iteratorError5 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion5 && _iterator5.return != null) {\n            yield _awaitAsyncGenerator(_iterator5.return());\n          }\n        } finally {\n          if (_didIteratorError5) {\n            throw _iteratorError5;\n          }\n        }\n      }\n\n      out.end();\n    })(), options)).catch(err => {\n      out.end(err);\n    });\n    return out;\n  }\n\n}\n\nmodule.exports = BlockstoreDatastoreAdapter;","map":null,"metadata":{},"sourceType":"script"}