{"ast":null,"code":"'use strict';\n\nvar _awaitAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\").default;\n\nvar _wrapAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nconst {\n  exporter\n} = require('ipfs-unixfs-exporter');\n\nconst mergeOptions = require('merge-options').bind({\n  ignoreUndefined: true\n});\n\nconst toMfsPath = require('./utils/to-mfs-path');\n\nconst errCode = require('err-code');\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {object} DefaultOptions\n * @property {number} offset\n * @property {number} length\n * @property {AbortSignal} [signal]\n * @property {number} [timeout]\n */\n\n/**\n * @type {DefaultOptions}\n */\n\n\nconst defaultOptions = {\n  offset: 0,\n  length: Infinity\n};\n/**\n * @param {MfsContext} context\n */\n\nmodule.exports = context => {\n  /**\n   * @type {import('ipfs-core-types/src/files').API[\"read\"]}\n   */\n  function mfsRead(path, options = {}) {\n    /** @type {DefaultOptions} */\n    options = mergeOptions(defaultOptions, options);\n    return {\n      [Symbol.asyncIterator]: function () {\n        var _read = _wrapAsyncGenerator(function* () {\n          const mfsPath = yield _awaitAsyncGenerator(toMfsPath(context, path, options));\n          const result = yield _awaitAsyncGenerator(exporter(mfsPath.mfsPath, context.repo.blocks));\n\n          if (result.type !== 'file') {\n            throw errCode(new Error(`${path} was not a file`), 'ERR_NOT_FILE');\n          }\n\n          if (!result.content) {\n            throw errCode(new Error(`Could not load content stream from ${path}`), 'ERR_NO_CONTENT');\n          }\n\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n\n          var _iteratorError;\n\n          try {\n            for (var _iterator = _asyncIterator(result.content({\n              offset: options.offset,\n              length: options.length\n            })), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n              const buf = _value;\n              yield buf;\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return != null) {\n                yield _awaitAsyncGenerator(_iterator.return());\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n        });\n\n        function read() {\n          return _read.apply(this, arguments);\n        }\n\n        return read;\n      }()\n    };\n  }\n\n  return withTimeoutOption(mfsRead);\n};","map":{"version":3,"sources":["/Users/sydneybailey/Internship/contract-testing/node_modules/ipfs-core/src/components/files/read.js"],"names":["exporter","require","mergeOptions","bind","ignoreUndefined","toMfsPath","errCode","withTimeoutOption","defaultOptions","offset","length","Infinity","module","exports","context","mfsRead","path","options","Symbol","asyncIterator","mfsPath","result","repo","blocks","type","Error","content","buf","read"],"mappings":"AAAA;;;;;;;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAeC,OAAO,CAAC,sBAAD,CAA5B;;AACA,MAAMC,YAAY,GAAGD,OAAO,CAAC,eAAD,CAAP,CAAyBE,IAAzB,CAA8B;AAAEC,EAAAA,eAAe,EAAE;AAAnB,CAA9B,CAArB;;AACA,MAAMC,SAAS,GAAGJ,OAAO,CAAC,qBAAD,CAAzB;;AACA,MAAMK,OAAO,GAAGL,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAMM,iBAAiB,GAAGN,OAAO,CAAC,yCAAD,CAAjC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AACA,MAAMO,cAAc,GAAG;AACrBC,EAAAA,MAAM,EAAE,CADa;AAErBC,EAAAA,MAAM,EAAEC;AAFa,CAAvB;AAKA;AACA;AACA;;AACAC,MAAM,CAACC,OAAP,GAAkBC,OAAD,IAAa;AAC5B;AACF;AACA;AACE,WAASC,OAAT,CAAkBC,IAAlB,EAAwBC,OAAO,GAAG,EAAlC,EAAsC;AACpC;AACAA,IAAAA,OAAO,GAAGf,YAAY,CAACM,cAAD,EAAiBS,OAAjB,CAAtB;AAEA,WAAO;AACL,OAACC,MAAM,CAACC,aAAR;AAAA,wCAAwB,aAAyB;AAC/C,gBAAMC,OAAO,8BAASf,SAAS,CAACS,OAAD,EAAUE,IAAV,EAAgBC,OAAhB,CAAlB,CAAb;AACA,gBAAMI,MAAM,8BAASrB,QAAQ,CAACoB,OAAO,CAACA,OAAT,EAAkBN,OAAO,CAACQ,IAAR,CAAaC,MAA/B,CAAjB,CAAZ;;AAEA,cAAIF,MAAM,CAACG,IAAP,KAAgB,MAApB,EAA4B;AAC1B,kBAAMlB,OAAO,CAAC,IAAImB,KAAJ,CAAW,GAAET,IAAK,iBAAlB,CAAD,EAAsC,cAAtC,CAAb;AACD;;AAED,cAAI,CAACK,MAAM,CAACK,OAAZ,EAAqB;AACnB,kBAAMpB,OAAO,CAAC,IAAImB,KAAJ,CAAW,sCAAqCT,IAAK,EAArD,CAAD,EAA0D,gBAA1D,CAAb;AACD;;AAV8C;AAAA;;AAAA;;AAAA;AAY/C,gDAAwBK,MAAM,CAACK,OAAP,CAAe;AACrCjB,cAAAA,MAAM,EAAEQ,OAAO,CAACR,MADqB;AAErCC,cAAAA,MAAM,EAAEO,OAAO,CAACP;AAFqB,aAAf,CAAxB,gOAGI;AAAA,oBAHaiB,GAGb;AACF,oBAAMA,GAAN;AACD;AAjB8C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBhD,SAlBD;;AAAA,iBAAyCC,IAAzC;AAAA;AAAA;;AAAA,eAAyCA,IAAzC;AAAA;AADK,KAAP;AAqBD;;AAED,SAAOrB,iBAAiB,CAACQ,OAAD,CAAxB;AACD,CAhCD","sourcesContent":["'use strict'\n\nconst { exporter } = require('ipfs-unixfs-exporter')\nconst mergeOptions = require('merge-options').bind({ ignoreUndefined: true })\nconst toMfsPath = require('./utils/to-mfs-path')\nconst errCode = require('err-code')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\n\n/**\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {object} DefaultOptions\n * @property {number} offset\n * @property {number} length\n * @property {AbortSignal} [signal]\n * @property {number} [timeout]\n */\n\n/**\n * @type {DefaultOptions}\n */\nconst defaultOptions = {\n  offset: 0,\n  length: Infinity\n}\n\n/**\n * @param {MfsContext} context\n */\nmodule.exports = (context) => {\n  /**\n   * @type {import('ipfs-core-types/src/files').API[\"read\"]}\n   */\n  function mfsRead (path, options = {}) {\n    /** @type {DefaultOptions} */\n    options = mergeOptions(defaultOptions, options)\n\n    return {\n      [Symbol.asyncIterator]: async function * read () {\n        const mfsPath = await toMfsPath(context, path, options)\n        const result = await exporter(mfsPath.mfsPath, context.repo.blocks)\n\n        if (result.type !== 'file') {\n          throw errCode(new Error(`${path} was not a file`), 'ERR_NOT_FILE')\n        }\n\n        if (!result.content) {\n          throw errCode(new Error(`Could not load content stream from ${path}`), 'ERR_NO_CONTENT')\n        }\n\n        for await (const buf of result.content({\n          offset: options.offset,\n          length: options.length\n        })) {\n          yield buf\n        }\n      }\n    }\n  }\n\n  return withTimeoutOption(mfsRead)\n}\n"]},"metadata":{},"sourceType":"script"}