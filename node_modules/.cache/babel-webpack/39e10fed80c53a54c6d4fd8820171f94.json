{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst stat = require('./stat');\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n\nconst mergeOptions = require('merge-options').bind({\n  ignoreUndefined: true\n});\n/**\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {object} DefaultOptions\n * @property {AbortSignal} [signal]\n * @property {number} [timeout]\n */\n\n/**\n * @type {DefaultOptions}\n */\n\n\nconst defaultOptions = {};\n/**\n * @param {MfsContext} context\n */\n\nmodule.exports = context => {\n  /**\n   * @type {import('ipfs-core-types/src/files').API[\"flush\"]}\n   */\n  function mfsFlush(_x) {\n    return _mfsFlush.apply(this, arguments);\n  }\n\n  function _mfsFlush() {\n    _mfsFlush = _asyncToGenerator(function* (path, options = {}) {\n      /** @type {DefaultOptions} */\n      options = mergeOptions(defaultOptions, options);\n      const {\n        cid\n      } = yield stat(context)(path, options);\n      return cid;\n    });\n    return _mfsFlush.apply(this, arguments);\n  }\n\n  return withTimeoutOption(mfsFlush);\n};","map":null,"metadata":{},"sourceType":"script"}