{"ast":null,"code":"'use strict';\n\nvar _awaitAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\").default;\n\nvar _wrapAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst configure = require('../lib/configure');\n\nconst {\n  normaliseInput\n} = require('ipfs-core-utils/src/pins/normalise-input');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin').API<HTTPClientExtraOptions>} PinAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {PinAPI[\"addAll\"]}\n   */\n  function addAll(_x) {\n    return _addAll.apply(this, arguments);\n  }\n\n  function _addAll() {\n    _addAll = _wrapAsyncGenerator(function* (source, options = {}) {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n\n      var _iteratorError;\n\n      try {\n        for (var _iterator = _asyncIterator(normaliseInput(source)), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n          const {\n            path,\n            recursive,\n            metadata\n          } = _value;\n          const res = yield _awaitAsyncGenerator(api.post('pin/add', {\n            timeout: options.timeout,\n            signal: options.signal,\n            searchParams: toUrlSearchParams({ ...options,\n              arg: path,\n              recursive,\n              metadata: metadata ? JSON.stringify(metadata) : undefined,\n              stream: true\n            }),\n            headers: options.headers\n          }));\n          var _iteratorNormalCompletion2 = true;\n          var _didIteratorError2 = false;\n\n          var _iteratorError2;\n\n          try {\n            for (var _iterator2 = _asyncIterator(res.ndjson()), _step2, _value2; _step2 = yield _awaitAsyncGenerator(_iterator2.next()), _iteratorNormalCompletion2 = _step2.done, _value2 = yield _awaitAsyncGenerator(_step2.value), !_iteratorNormalCompletion2; _iteratorNormalCompletion2 = true) {\n              const pin = _value2;\n\n              if (pin.Pins) {\n                // non-streaming response\n                for (const cid of pin.Pins) {\n                  yield CID.parse(cid);\n                }\n\n                continue;\n              }\n\n              yield CID.parse(pin);\n            }\n          } catch (err) {\n            _didIteratorError2 = true;\n            _iteratorError2 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                yield _awaitAsyncGenerator(_iterator2.return());\n              }\n            } finally {\n              if (_didIteratorError2) {\n                throw _iteratorError2;\n              }\n            }\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            yield _awaitAsyncGenerator(_iterator.return());\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    });\n    return _addAll.apply(this, arguments);\n  }\n\n  return addAll;\n});","map":null,"metadata":{},"sourceType":"script"}