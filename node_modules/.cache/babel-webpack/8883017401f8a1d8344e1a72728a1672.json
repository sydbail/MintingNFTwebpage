{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst configure = require('../lib/configure');\n\nconst resolve = require('../lib/resolve');\n\nconst first = require('it-first');\n\nconst last = require('it-last');\n\nconst errCode = require('err-code');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dag').API<HTTPClientExtraOptions>} DAGAPI\n */\n\n/**\n * @param {import('ipfs-core-utils/src/multicodecs')} codecs\n * @param {import('../types').Options} options\n */\n\n\nmodule.exports = (codecs, options) => {\n  const fn = configure((api, opts) => {\n    const getBlock = require('../block/get')(opts);\n    /**\n     * @type {DAGAPI[\"get\"]}\n     */\n\n\n    const get = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (cid, options = {}) {\n        if (options.path) {\n          const entry = options.localResolve ? yield first(resolve(cid, options.path, codecs, getBlock, options)) : yield last(resolve(cid, options.path, codecs, getBlock, options));\n          /** @type {import('ipfs-core-types/src/dag').GetResult} - first and last will return undefined when empty */\n\n          const result = entry;\n\n          if (!result) {\n            throw errCode(new Error('Not found'), 'ERR_NOT_FOUND');\n          }\n\n          return result;\n        }\n\n        const codec = yield codecs.getCodec(cid.code);\n        const block = yield getBlock(cid, options);\n        const node = codec.decode(block);\n        return {\n          value: node,\n          remainderPath: ''\n        };\n      });\n\n      return function get(_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return get;\n  });\n  return fn(options);\n};","map":null,"metadata":{},"sourceType":"script"}