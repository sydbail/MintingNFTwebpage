{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IgnoreEqualValuesProperty = void 0;\n\nconst stringify_1 = require(\"../../utils/stringify\");\n\nconst PreconditionFailure_1 = require(\"../precondition/PreconditionFailure\");\n\nfunction fromSyncCached(cachedValue) {\n  return cachedValue === null ? new PreconditionFailure_1.PreconditionFailure() : cachedValue;\n}\n\nfunction fromCached(...data) {\n  if (data[1]) return data[0].then(fromSyncCached);\n  return fromSyncCached(data[0]);\n}\n\nfunction fromCachedUnsafe(cachedValue, isAsync) {\n  return fromCached(cachedValue, isAsync);\n}\n\nclass IgnoreEqualValuesProperty {\n  constructor(property, skipRuns) {\n    this.property = property;\n    this.skipRuns = skipRuns;\n    this.coveredCases = new Map();\n\n    this.isAsync = () => this.property.isAsync();\n\n    this.generate = (mrng, runId) => this.property.generate(mrng, runId);\n\n    this.run = v => {\n      const stringifiedValue = stringify_1.stringify(v);\n\n      if (this.coveredCases.has(stringifiedValue)) {\n        const lastOutput = this.coveredCases.get(stringifiedValue);\n\n        if (!this.skipRuns) {\n          return lastOutput;\n        }\n\n        return fromCachedUnsafe(lastOutput, this.property.isAsync());\n      }\n\n      const out = this.property.run(v);\n      this.coveredCases.set(stringifiedValue, out);\n      return out;\n    };\n  }\n\n}\n\nexports.IgnoreEqualValuesProperty = IgnoreEqualValuesProperty;","map":null,"metadata":{},"sourceType":"script"}