{"ast":null,"code":"import { Observable } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./web3.service\";\n\nconst basicNFTArtifacts = require('../../../build/contracts/basicNFT.json');\n\nconst contract = require('@truffle/contract');\n\nexport class ContractsService {\n  web3Ser;\n  basicNFT = contract(basicNFTArtifacts);\n\n  constructor(web3Ser) {\n    this.web3Ser = web3Ser; // Bootstrap the MetaCoin abstraction for Use\n\n    this.basicNFT.setProvider(web3Ser.web3.currentProvider);\n  }\n\n  getBalance(account) {\n    let basic;\n    return Observable.create(observer => {\n      this.basicNFT.deployed().then(instance => {\n        basic = instance; //we use call here so the call doesn't try and write, making it free\n\n        return basic.balanceOf.call(account, {\n          from: account\n        });\n      }).then(value => {\n        observer.next(value);\n        observer.complete();\n      }).catch(e => {\n        console.log(e);\n        observer.error(e);\n      });\n    });\n  }\n\n  getOwner(id) {\n    let basic;\n    return Observable.create(observer => {\n      this.basicNFT.deployed().then(instance => {\n        basic = instance; //we use call here so the call doesn't try and write, making it free\n\n        return basic.ownerOf.call(id, {\n          from: this.web3Ser.web3.eth.defaultAccount\n        });\n      }).then(value => {\n        observer.next(value);\n        observer.complete();\n      }).catch(e => {\n        console.log(e);\n        observer.error(e);\n      });\n    });\n  }\n\n  mintCoin(to) {\n    let basic;\n    return Observable.create(observer => {\n      this.basicNFT.deployed().then(instance => {\n        basic = instance;\n        return basic.mint(to, {\n          from: this.web3Ser.web3.eth.defaultAccount\n        });\n      }).then(() => {\n        observer.next();\n        observer.next();\n      }).catch(e => {\n        console.log(e);\n        observer.error(e);\n      });\n    });\n  }\n\n  static ɵfac = function ContractsService_Factory(t) {\n    return new (t || ContractsService)(i0.ɵɵinject(i1.Web3Service));\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ContractsService,\n    factory: ContractsService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":null,"metadata":{},"sourceType":"module"}