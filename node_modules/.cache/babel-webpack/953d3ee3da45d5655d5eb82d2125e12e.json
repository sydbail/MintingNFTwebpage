{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst toCamel = require('./lib/object-to-camel');\n\nconst {\n  Multiaddr\n} = require('multiaddr');\n\nconst configure = require('./lib/configure');\n\nconst toUrlSearchParams = require('./lib/to-url-search-params');\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {RootAPI[\"id\"]}\n   */\n  function id() {\n    return _id.apply(this, arguments);\n  }\n\n  function _id() {\n    _id = _asyncToGenerator(function* (options = {}) {\n      const res = yield api.post('id', {\n        timeout: options.timeout,\n        signal: options.signal,\n        searchParams: toUrlSearchParams({\n          arg: options.peerId ? options.peerId.toString() : undefined,\n          ...options\n        }),\n        headers: options.headers\n      });\n      const data = yield res.json();\n      const output = { ...toCamel(data)\n      };\n\n      if (output.addresses) {\n        output.addresses = output.addresses.map((\n        /** @type {string} */\n        ma) => new Multiaddr(ma));\n      } // @ts-ignore server output is not typed\n\n\n      return output;\n    });\n    return _id.apply(this, arguments);\n  }\n\n  return id;\n});","map":null,"metadata":{},"sourceType":"script"}