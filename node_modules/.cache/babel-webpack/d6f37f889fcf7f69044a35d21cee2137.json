{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst multipartRequest = require('../lib/multipart-request');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nconst abortSignal = require('../lib/abort-signal');\n\nconst {\n  AbortController\n} = require('native-abort-controller');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/block').API<HTTPClientExtraOptions>} BlockAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {BlockAPI[\"put\"]}\n   */\n  function put(_x) {\n    return _put.apply(this, arguments);\n  }\n\n  function _put() {\n    _put = _asyncToGenerator(function* (data, options = {}) {\n      // allow aborting requests on body errors\n      const controller = new AbortController();\n      const signal = abortSignal(controller.signal, options.signal);\n      let res;\n\n      try {\n        const response = yield api.post('block/put', {\n          timeout: options.timeout,\n          signal: signal,\n          searchParams: toUrlSearchParams(options),\n          ...(yield multipartRequest(data, controller, options.headers))\n        });\n        res = yield response.json();\n      } catch (err) {\n        // Retry with \"protobuf\"/\"cbor\" format for go-ipfs\n        // TODO: remove when https://github.com/ipfs/go-cid/issues/75 resolved\n        if (options.format === 'dag-pb') {\n          return put(data, { ...options,\n            format: 'protobuf'\n          });\n        } else if (options.format === 'dag-cbor') {\n          return put(data, { ...options,\n            format: 'cbor'\n          });\n        }\n\n        throw err;\n      }\n\n      return CID.parse(res.Key);\n    });\n    return _put.apply(this, arguments);\n  }\n\n  return put;\n});","map":null,"metadata":{},"sourceType":"script"}