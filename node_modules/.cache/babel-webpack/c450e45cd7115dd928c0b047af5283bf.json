{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst dagPb = require('@ipld/dag-pb');\n\nconst {\n  sha256\n} = require('multiformats/hashes/sha2');\n/**\n * @typedef {object} PersistOptions\n * @property {import('multiformats/codecs/interface').BlockCodec<any, any>} [codec]\n * @property {import('multiformats/hashes/interface').MultihashHasher} [hasher]\n * @property {import('multiformats/cid').CIDVersion} [cidVersion]\n * @property {boolean} [onlyHash]\n * @property {AbortSignal} [signal]\n */\n\n/**\n * @param {Uint8Array} buffer\n * @param {import('interface-blockstore').Blockstore} blockstore\n * @param {PersistOptions} options\n */\n\n\nconst persist = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (buffer, blockstore, options) {\n    if (!options.codec) {\n      options.codec = dagPb;\n    }\n\n    if (!options.hasher) {\n      options.hasher = sha256;\n    }\n\n    if (options.cidVersion === undefined) {\n      options.cidVersion = 1;\n    }\n\n    if (options.codec === dagPb && options.hasher !== sha256) {\n      options.cidVersion = 1;\n    }\n\n    const multihash = yield options.hasher.digest(buffer);\n    const cid = CID.create(options.cidVersion, options.codec.code, multihash);\n\n    if (!options.onlyHash) {\n      yield blockstore.put(cid, buffer, {\n        signal: options.signal\n      });\n    }\n\n    return cid;\n  });\n\n  return function persist(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nmodule.exports = persist;","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Demo/node_modules/ipfs-core/src/components/files/utils/persist.js"],"names":["CID","require","dagPb","sha256","persist","buffer","blockstore","options","codec","hasher","cidVersion","undefined","multihash","digest","cid","create","code","onlyHash","put","signal","module","exports"],"mappings":"AAAA;;;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAUC,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,cAAD,CAArB;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAaF,OAAO,CAAC,0BAAD,CAA1B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AACA,MAAMG,OAAO;AAAA,+BAAG,WAAOC,MAAP,EAAeC,UAAf,EAA2BC,OAA3B,EAAuC;AACrD,QAAI,CAACA,OAAO,CAACC,KAAb,EAAoB;AAClBD,MAAAA,OAAO,CAACC,KAAR,GAAgBN,KAAhB;AACD;;AAED,QAAI,CAACK,OAAO,CAACE,MAAb,EAAqB;AACnBF,MAAAA,OAAO,CAACE,MAAR,GAAiBN,MAAjB;AACD;;AAED,QAAII,OAAO,CAACG,UAAR,KAAuBC,SAA3B,EAAsC;AACpCJ,MAAAA,OAAO,CAACG,UAAR,GAAqB,CAArB;AACD;;AAED,QAAIH,OAAO,CAACC,KAAR,KAAkBN,KAAlB,IAA2BK,OAAO,CAACE,MAAR,KAAmBN,MAAlD,EAA0D;AACxDI,MAAAA,OAAO,CAACG,UAAR,GAAqB,CAArB;AACD;;AAED,UAAME,SAAS,SAASL,OAAO,CAACE,MAAR,CAAeI,MAAf,CAAsBR,MAAtB,CAAxB;AACA,UAAMS,GAAG,GAAGd,GAAG,CAACe,MAAJ,CAAWR,OAAO,CAACG,UAAnB,EAA+BH,OAAO,CAACC,KAAR,CAAcQ,IAA7C,EAAmDJ,SAAnD,CAAZ;;AAEA,QAAI,CAACL,OAAO,CAACU,QAAb,EAAuB;AACrB,YAAMX,UAAU,CAACY,GAAX,CAAeJ,GAAf,EAAoBT,MAApB,EAA4B;AAChCc,QAAAA,MAAM,EAAEZ,OAAO,CAACY;AADgB,OAA5B,CAAN;AAGD;;AAED,WAAOL,GAAP;AACD,GA3BY;;AAAA,kBAAPV,OAAO;AAAA;AAAA;AAAA,GAAb;;AA6BAgB,MAAM,CAACC,OAAP,GAAiBjB,OAAjB","sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst dagPb = require('@ipld/dag-pb')\nconst { sha256 } = require('multiformats/hashes/sha2')\n\n/**\n * @typedef {object} PersistOptions\n * @property {import('multiformats/codecs/interface').BlockCodec<any, any>} [codec]\n * @property {import('multiformats/hashes/interface').MultihashHasher} [hasher]\n * @property {import('multiformats/cid').CIDVersion} [cidVersion]\n * @property {boolean} [onlyHash]\n * @property {AbortSignal} [signal]\n */\n\n/**\n * @param {Uint8Array} buffer\n * @param {import('interface-blockstore').Blockstore} blockstore\n * @param {PersistOptions} options\n */\nconst persist = async (buffer, blockstore, options) => {\n  if (!options.codec) {\n    options.codec = dagPb\n  }\n\n  if (!options.hasher) {\n    options.hasher = sha256\n  }\n\n  if (options.cidVersion === undefined) {\n    options.cidVersion = 1\n  }\n\n  if (options.codec === dagPb && options.hasher !== sha256) {\n    options.cidVersion = 1\n  }\n\n  const multihash = await options.hasher.digest(buffer)\n  const cid = CID.create(options.cidVersion, options.codec.code, multihash)\n\n  if (!options.onlyHash) {\n    await blockstore.put(cid, buffer, {\n      signal: options.signal\n    })\n  }\n\n  return cid\n}\n\nmodule.exports = persist\n"]},"metadata":{},"sourceType":"script"}