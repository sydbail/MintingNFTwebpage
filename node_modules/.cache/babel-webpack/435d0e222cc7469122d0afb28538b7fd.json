{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.QualifiedParameters = void 0;\n\nconst pure_rand_1 = require(\"pure-rand\");\n\nconst VerbosityLevel_1 = require(\"./VerbosityLevel\");\n\nclass QualifiedParameters {\n  constructor(op) {\n    const p = op || {};\n    this.seed = QualifiedParameters.readSeed(p);\n    this.randomType = QualifiedParameters.readRandomType(p);\n    this.numRuns = QualifiedParameters.readNumRuns(p);\n    this.verbose = QualifiedParameters.readVerbose(p);\n    this.maxSkipsPerRun = QualifiedParameters.readOrDefault(p, 'maxSkipsPerRun', 100);\n    this.timeout = QualifiedParameters.readOrDefault(p, 'timeout', null);\n    this.skipAllAfterTimeLimit = QualifiedParameters.readOrDefault(p, 'skipAllAfterTimeLimit', null);\n    this.interruptAfterTimeLimit = QualifiedParameters.readOrDefault(p, 'interruptAfterTimeLimit', null);\n    this.markInterruptAsFailure = QualifiedParameters.readBoolean(p, 'markInterruptAsFailure');\n    this.skipEqualValues = QualifiedParameters.readBoolean(p, 'skipEqualValues');\n    this.ignoreEqualValues = QualifiedParameters.readBoolean(p, 'ignoreEqualValues');\n    this.logger = QualifiedParameters.readOrDefault(p, 'logger', v => {\n      console.log(v);\n    });\n    this.path = QualifiedParameters.readOrDefault(p, 'path', '');\n    this.unbiased = QualifiedParameters.readBoolean(p, 'unbiased');\n    this.examples = QualifiedParameters.readOrDefault(p, 'examples', []);\n    this.endOnFailure = QualifiedParameters.readBoolean(p, 'endOnFailure');\n    this.reporter = QualifiedParameters.readOrDefault(p, 'reporter', null);\n    this.asyncReporter = QualifiedParameters.readOrDefault(p, 'asyncReporter', null);\n  }\n\n  toParameters() {\n    const orUndefined = value => value !== null ? value : undefined;\n\n    return {\n      seed: this.seed,\n      randomType: this.randomType,\n      numRuns: this.numRuns,\n      maxSkipsPerRun: this.maxSkipsPerRun,\n      timeout: orUndefined(this.timeout),\n      skipAllAfterTimeLimit: orUndefined(this.skipAllAfterTimeLimit),\n      interruptAfterTimeLimit: orUndefined(this.interruptAfterTimeLimit),\n      markInterruptAsFailure: this.markInterruptAsFailure,\n      skipEqualValues: this.skipEqualValues,\n      ignoreEqualValues: this.ignoreEqualValues,\n      path: this.path,\n      logger: this.logger,\n      unbiased: this.unbiased,\n      verbose: this.verbose,\n      examples: this.examples,\n      endOnFailure: this.endOnFailure,\n      reporter: orUndefined(this.reporter),\n      asyncReporter: orUndefined(this.asyncReporter)\n    };\n  }\n\n  static read(op) {\n    return new QualifiedParameters(op);\n  }\n\n}\n\nexports.QualifiedParameters = QualifiedParameters;\n\nQualifiedParameters.readSeed = p => {\n  if (p.seed == null) return Date.now() ^ Math.random() * 0x100000000;\n  const seed32 = p.seed | 0;\n  if (p.seed === seed32) return seed32;\n  const gap = p.seed - seed32;\n  return seed32 ^ gap * 0x100000000;\n};\n\nQualifiedParameters.readRandomType = p => {\n  if (p.randomType == null) return pure_rand_1.default.xorshift128plus;\n\n  if (typeof p.randomType === 'string') {\n    switch (p.randomType) {\n      case 'mersenne':\n        return pure_rand_1.default.mersenne;\n\n      case 'congruential':\n        return pure_rand_1.default.congruential;\n\n      case 'congruential32':\n        return pure_rand_1.default.congruential32;\n\n      case 'xorshift128plus':\n        return pure_rand_1.default.xorshift128plus;\n\n      case 'xoroshiro128plus':\n        return pure_rand_1.default.xoroshiro128plus;\n\n      default:\n        throw new Error(`Invalid random specified: '${p.randomType}'`);\n    }\n  }\n\n  return p.randomType;\n};\n\nQualifiedParameters.readNumRuns = p => {\n  const defaultValue = 100;\n  if (p.numRuns != null) return p.numRuns;\n  if (p.num_runs != null) return p.num_runs;\n  return defaultValue;\n};\n\nQualifiedParameters.readVerbose = p => {\n  if (p.verbose == null) return VerbosityLevel_1.VerbosityLevel.None;\n\n  if (typeof p.verbose === 'boolean') {\n    return p.verbose === true ? VerbosityLevel_1.VerbosityLevel.Verbose : VerbosityLevel_1.VerbosityLevel.None;\n  }\n\n  if (p.verbose <= VerbosityLevel_1.VerbosityLevel.None) {\n    return VerbosityLevel_1.VerbosityLevel.None;\n  }\n\n  if (p.verbose >= VerbosityLevel_1.VerbosityLevel.VeryVerbose) {\n    return VerbosityLevel_1.VerbosityLevel.VeryVerbose;\n  }\n\n  return p.verbose | 0;\n};\n\nQualifiedParameters.readBoolean = (p, key) => p[key] === true;\n\nQualifiedParameters.readOrDefault = (p, key, defaultValue) => {\n  const value = p[key];\n  return value != null ? value : defaultValue;\n};","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Demo/node_modules/fast-check/lib/check/runner/configuration/QualifiedParameters.js"],"names":["Object","defineProperty","exports","value","QualifiedParameters","pure_rand_1","require","VerbosityLevel_1","constructor","op","p","seed","readSeed","randomType","readRandomType","numRuns","readNumRuns","verbose","readVerbose","maxSkipsPerRun","readOrDefault","timeout","skipAllAfterTimeLimit","interruptAfterTimeLimit","markInterruptAsFailure","readBoolean","skipEqualValues","ignoreEqualValues","logger","v","console","log","path","unbiased","examples","endOnFailure","reporter","asyncReporter","toParameters","orUndefined","undefined","read","Date","now","Math","random","seed32","gap","default","xorshift128plus","mersenne","congruential","congruential32","xoroshiro128plus","Error","defaultValue","num_runs","VerbosityLevel","None","Verbose","VeryVerbose","key"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.QualifiedParameters = void 0;\nconst pure_rand_1 = require(\"pure-rand\");\nconst VerbosityLevel_1 = require(\"./VerbosityLevel\");\nclass QualifiedParameters {\n    constructor(op) {\n        const p = op || {};\n        this.seed = QualifiedParameters.readSeed(p);\n        this.randomType = QualifiedParameters.readRandomType(p);\n        this.numRuns = QualifiedParameters.readNumRuns(p);\n        this.verbose = QualifiedParameters.readVerbose(p);\n        this.maxSkipsPerRun = QualifiedParameters.readOrDefault(p, 'maxSkipsPerRun', 100);\n        this.timeout = QualifiedParameters.readOrDefault(p, 'timeout', null);\n        this.skipAllAfterTimeLimit = QualifiedParameters.readOrDefault(p, 'skipAllAfterTimeLimit', null);\n        this.interruptAfterTimeLimit = QualifiedParameters.readOrDefault(p, 'interruptAfterTimeLimit', null);\n        this.markInterruptAsFailure = QualifiedParameters.readBoolean(p, 'markInterruptAsFailure');\n        this.skipEqualValues = QualifiedParameters.readBoolean(p, 'skipEqualValues');\n        this.ignoreEqualValues = QualifiedParameters.readBoolean(p, 'ignoreEqualValues');\n        this.logger = QualifiedParameters.readOrDefault(p, 'logger', (v) => {\n            console.log(v);\n        });\n        this.path = QualifiedParameters.readOrDefault(p, 'path', '');\n        this.unbiased = QualifiedParameters.readBoolean(p, 'unbiased');\n        this.examples = QualifiedParameters.readOrDefault(p, 'examples', []);\n        this.endOnFailure = QualifiedParameters.readBoolean(p, 'endOnFailure');\n        this.reporter = QualifiedParameters.readOrDefault(p, 'reporter', null);\n        this.asyncReporter = QualifiedParameters.readOrDefault(p, 'asyncReporter', null);\n    }\n    toParameters() {\n        const orUndefined = (value) => (value !== null ? value : undefined);\n        return {\n            seed: this.seed,\n            randomType: this.randomType,\n            numRuns: this.numRuns,\n            maxSkipsPerRun: this.maxSkipsPerRun,\n            timeout: orUndefined(this.timeout),\n            skipAllAfterTimeLimit: orUndefined(this.skipAllAfterTimeLimit),\n            interruptAfterTimeLimit: orUndefined(this.interruptAfterTimeLimit),\n            markInterruptAsFailure: this.markInterruptAsFailure,\n            skipEqualValues: this.skipEqualValues,\n            ignoreEqualValues: this.ignoreEqualValues,\n            path: this.path,\n            logger: this.logger,\n            unbiased: this.unbiased,\n            verbose: this.verbose,\n            examples: this.examples,\n            endOnFailure: this.endOnFailure,\n            reporter: orUndefined(this.reporter),\n            asyncReporter: orUndefined(this.asyncReporter),\n        };\n    }\n    static read(op) {\n        return new QualifiedParameters(op);\n    }\n}\nexports.QualifiedParameters = QualifiedParameters;\nQualifiedParameters.readSeed = (p) => {\n    if (p.seed == null)\n        return Date.now() ^ (Math.random() * 0x100000000);\n    const seed32 = p.seed | 0;\n    if (p.seed === seed32)\n        return seed32;\n    const gap = p.seed - seed32;\n    return seed32 ^ (gap * 0x100000000);\n};\nQualifiedParameters.readRandomType = (p) => {\n    if (p.randomType == null)\n        return pure_rand_1.default.xorshift128plus;\n    if (typeof p.randomType === 'string') {\n        switch (p.randomType) {\n            case 'mersenne':\n                return pure_rand_1.default.mersenne;\n            case 'congruential':\n                return pure_rand_1.default.congruential;\n            case 'congruential32':\n                return pure_rand_1.default.congruential32;\n            case 'xorshift128plus':\n                return pure_rand_1.default.xorshift128plus;\n            case 'xoroshiro128plus':\n                return pure_rand_1.default.xoroshiro128plus;\n            default:\n                throw new Error(`Invalid random specified: '${p.randomType}'`);\n        }\n    }\n    return p.randomType;\n};\nQualifiedParameters.readNumRuns = (p) => {\n    const defaultValue = 100;\n    if (p.numRuns != null)\n        return p.numRuns;\n    if (p.num_runs != null)\n        return p.num_runs;\n    return defaultValue;\n};\nQualifiedParameters.readVerbose = (p) => {\n    if (p.verbose == null)\n        return VerbosityLevel_1.VerbosityLevel.None;\n    if (typeof p.verbose === 'boolean') {\n        return p.verbose === true ? VerbosityLevel_1.VerbosityLevel.Verbose : VerbosityLevel_1.VerbosityLevel.None;\n    }\n    if (p.verbose <= VerbosityLevel_1.VerbosityLevel.None) {\n        return VerbosityLevel_1.VerbosityLevel.None;\n    }\n    if (p.verbose >= VerbosityLevel_1.VerbosityLevel.VeryVerbose) {\n        return VerbosityLevel_1.VerbosityLevel.VeryVerbose;\n    }\n    return p.verbose | 0;\n};\nQualifiedParameters.readBoolean = (p, key) => p[key] === true;\nQualifiedParameters.readOrDefault = (p, key, defaultValue) => {\n    const value = p[key];\n    return value != null ? value : defaultValue;\n};\n"]},"metadata":{},"sourceType":"script"}