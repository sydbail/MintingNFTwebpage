{"ast":null,"code":"'use strict';\n\nvar _wrapAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\").default;\n\nvar _awaitAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nvar _asyncGeneratorDelegate = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncGeneratorDelegate\").default;\n\nconst errCode = require('err-code');\n\nconst {\n  fromString: uint8ArrayFromString\n} = require('uint8arrays/from-string');\n\nconst browserStreamToIt = require('browser-readablestream-to-it');\n\nconst blobToIt = require('blob-to-it');\n\nconst itPeekable = require('it-peekable');\n\nconst all = require('it-all');\n\nconst map = require('it-map');\n\nconst {\n  isBytes,\n  isReadableStream,\n  isBlob\n} = require('./utils');\n/**\n * @param {import('./normalise-input').ToContent} input\n */\n\n\nfunction toAsyncIterable(_x) {\n  return _toAsyncIterable.apply(this, arguments);\n}\n/**\n * @param {ArrayBuffer | ArrayBufferView | string | InstanceType<typeof window.String> | number[]} chunk\n */\n\n\nfunction _toAsyncIterable() {\n  _toAsyncIterable = _wrapAsyncGenerator(function* (input) {\n    // Bytes | String\n    if (isBytes(input)) {\n      yield toBytes(input);\n      return;\n    }\n\n    if (typeof input === 'string' || input instanceof String) {\n      yield toBytes(input.toString());\n      return;\n    } // Blob\n\n\n    if (isBlob(input)) {\n      yield* _asyncGeneratorDelegate(_asyncIterator(blobToIt(input)), _awaitAsyncGenerator);\n      return;\n    } // Browser stream\n\n\n    if (isReadableStream(input)) {\n      input = browserStreamToIt(input);\n    } // (Async)Iterator<?>\n\n\n    if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n      /** @type {any} peekable */\n      const peekable = itPeekable(input);\n      /** @type {any} value */\n\n      const {\n        value,\n        done\n      } = yield _awaitAsyncGenerator(peekable.peek());\n\n      if (done) {\n        // make sure empty iterators result in empty files\n        yield* _asyncGeneratorDelegate(_asyncIterator([]), _awaitAsyncGenerator);\n        return;\n      }\n\n      peekable.push(value); // (Async)Iterable<Number>\n\n      if (Number.isInteger(value)) {\n        yield Uint8Array.from(yield _awaitAsyncGenerator(all(peekable)));\n        return;\n      } // (Async)Iterable<Bytes|String>\n\n\n      if (isBytes(value) || typeof value === 'string' || value instanceof String) {\n        yield* _asyncGeneratorDelegate(_asyncIterator(map(peekable, toBytes)), _awaitAsyncGenerator);\n        return;\n      }\n    }\n\n    throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT');\n  });\n  return _toAsyncIterable.apply(this, arguments);\n}\n\nfunction toBytes(chunk) {\n  if (chunk instanceof Uint8Array) {\n    return chunk;\n  }\n\n  if (ArrayBuffer.isView(chunk)) {\n    return new Uint8Array(chunk.buffer, chunk.byteOffset, chunk.byteLength);\n  }\n\n  if (chunk instanceof ArrayBuffer) {\n    return new Uint8Array(chunk);\n  }\n\n  if (Array.isArray(chunk)) {\n    return Uint8Array.from(chunk);\n  }\n\n  return uint8ArrayFromString(chunk.toString());\n}\n\nmodule.exports = toAsyncIterable;","map":null,"metadata":{},"sourceType":"script"}