{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nvar _awaitAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\").default;\n\nvar _wrapAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\").default;\n\nconst errcode = require('err-code');\n\nconst pTimeout = require('p-timeout');\n\nconst c = require('../constants');\n\nconst LimitedPeerList = require('../peer-list/limited-peer-list');\n\nconst Message = require('../message');\n\nconst Query = require('../query');\n\nconst utils = require('../utils');\n/**\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('multiaddr').Multiaddr} Multiaddr\n */\n\n/**\n * @param {import('../')} dht\n */\n\n\nmodule.exports = dht => {\n  /**\n   * Check for providers from a single node.\n   *\n   * @param {PeerId} peer\n   * @param {CID} key\n   *\n   * @private\n   */\n  const findProvidersSingle = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(function* (peer, key) {\n      // eslint-disable-line require-await\n      const msg = new Message(Message.TYPES.GET_PROVIDERS, key.bytes, 0);\n      return dht.network.sendRequest(peer, msg);\n    });\n\n    return function findProvidersSingle(_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return {\n    /**\n     * Announce to the network that we can provide the value for a given key\n     *\n     * @param {CID} key\n     */\n    provide(key) {\n      return _asyncToGenerator(function* () {\n        dht._log(`provide: ${key}`);\n        /** @type {Error[]} */\n\n\n        const errors = []; // Add peer as provider\n\n        yield dht.providers.addProvider(key, dht.peerId);\n        const multiaddrs = dht.libp2p ? dht.libp2p.multiaddrs : [];\n        const msg = new Message(Message.TYPES.ADD_PROVIDER, key.bytes, 0);\n        msg.providerPeers = [{\n          id: dht.peerId,\n          multiaddrs\n        }];\n        /**\n         * @param {PeerId} peer\n         */\n\n        function mapPeer(_x3) {\n          return _mapPeer.apply(this, arguments);\n        } // Notify closest peers\n\n\n        function _mapPeer() {\n          _mapPeer = _asyncToGenerator(function* (peer) {\n            dht._log(`putProvider ${key} to ${peer.toB58String()}`);\n\n            try {\n              yield dht.network.sendMessage(peer, msg);\n            } catch (err) {\n              errors.push(err);\n            }\n          });\n          return _mapPeer.apply(this, arguments);\n        }\n\n        yield utils.mapParallel(dht.getClosestPeers(key.bytes), mapPeer);\n\n        if (errors.length) {\n          // TODO:\n          // This should be infrequent. This means a peer we previously connected\n          // to failed to exchange the provide message. If getClosestPeers was an\n          // iterator, we could continue to pull until we announce to kBucketSize peers.\n          throw errcode(new Error(`Failed to provide to ${errors.length} of ${dht.kBucketSize} peers`), 'ERR_SOME_PROVIDES_FAILED', {\n            errors\n          });\n        }\n      })();\n    },\n\n    /**\n     * Search the dht for up to `K` providers of the given CID.\n     *\n     * @param {CID} key\n     * @param {Object} [options] - findProviders options\n     * @param {number} [options.timeout=60000] - how long the query should maximally run, in milliseconds\n     * @param {number} [options.maxNumProviders=5] - maximum number of providers to find\n     * @returns {AsyncIterable<{ id: PeerId, multiaddrs: Multiaddr[] }>}\n     */\n    findProviders(key, options = {\n      timeout: 60000,\n      maxNumProviders: 5\n    }) {\n      return _wrapAsyncGenerator(function* () {\n        const providerTimeout = options.timeout || c.minute;\n        const n = options.maxNumProviders || c.K;\n\n        dht._log(`findProviders ${key}`);\n\n        const out = new LimitedPeerList(n);\n        const provs = yield _awaitAsyncGenerator(dht.providers.getProviders(key));\n        provs.forEach(id => {\n          /** @type {{ id: PeerId, addresses: { multiaddr: Multiaddr }[] }} */\n          const peerData = dht.peerStore.get(id);\n\n          if (peerData) {\n            out.push({\n              id: peerData.id,\n              multiaddrs: peerData.addresses.map(address => address.multiaddr)\n            });\n          } else {\n            out.push({\n              id,\n              multiaddrs: []\n            });\n          }\n        }); // All done\n\n        if (out.length >= n) {\n          // yield values\n          for (const pData of out.toArray()) {\n            yield pData;\n          }\n\n          return;\n        } // need more, query the network\n\n        /** @type {LimitedPeerList[]} */\n\n\n        const paths = [];\n        /**\n         *\n         * @param {number} pathIndex\n         * @param {number} numPaths\n         */\n\n        function makePath(pathIndex, numPaths) {\n          // This function body runs once per disjoint path\n          const pathSize = utils.pathSize(n - out.length, numPaths);\n          const pathProviders = new LimitedPeerList(pathSize);\n          paths.push(pathProviders);\n          /**\n           * The query function to use on this particular disjoint path\n           *\n           * @param {PeerId} peer\n           */\n\n          function queryDisjointPath(_x4) {\n            return _queryDisjointPath.apply(this, arguments);\n          }\n\n          function _queryDisjointPath() {\n            _queryDisjointPath = _asyncToGenerator(function* (peer) {\n              const msg = yield findProvidersSingle(peer, key);\n              const provs = msg.providerPeers;\n\n              dht._log(`Found ${provs.length} provider entries for ${key}`);\n\n              provs.forEach(prov => {\n                pathProviders.push({ ...prov\n                });\n              }); // hooray we have all that we want\n\n              if (pathProviders.length >= pathSize) {\n                return {\n                  pathComplete: true\n                };\n              } // it looks like we want some more\n\n\n              return {\n                closerPeers: msg.closerPeers\n              };\n            });\n            return _queryDisjointPath.apply(this, arguments);\n          }\n\n          return queryDisjointPath;\n        }\n\n        const query = new Query(dht, key.bytes, makePath);\n        const peers = dht.routingTable.closestPeers(key.bytes, dht.kBucketSize);\n\n        try {\n          yield _awaitAsyncGenerator(pTimeout(query.run(peers), providerTimeout));\n        } catch (err) {\n          if (err.name !== pTimeout.TimeoutError.name) {\n            throw err;\n          }\n        } finally {\n          query.stop();\n        } // combine peers from each path\n\n\n        paths.forEach(path => {\n          path.toArray().forEach(peer => {\n            out.push(peer);\n          });\n        });\n\n        for (const pData of out.toArray()) {\n          yield pData;\n        }\n      })();\n    }\n\n  };\n};","map":null,"metadata":{},"sourceType":"script"}