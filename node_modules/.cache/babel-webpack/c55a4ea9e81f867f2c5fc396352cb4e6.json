{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst {\n  Multiaddr\n} = require('multiaddr');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/swarm').API<HTTPClientExtraOptions>} SwarmAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {SwarmAPI[\"peers\"]}\n   */\n  function peers() {\n    return _peers.apply(this, arguments);\n  }\n\n  function _peers() {\n    _peers = _asyncToGenerator(function* (options = {}) {\n      const res = yield api.post('swarm/peers', {\n        timeout: options.timeout,\n        signal: options.signal,\n        searchParams: toUrlSearchParams(options),\n        headers: options.headers\n      });\n      /** @type {{ Peers: { Peer: string, Addr: string, Muxer?: string, Latency?: string, Streams?: string[], Direction?: 0 | 1 }[] }} */\n\n      const {\n        Peers\n      } = yield res.json();\n      return (Peers || []).map(peer => {\n        return {\n          addr: new Multiaddr(peer.Addr),\n          peer: peer.Peer,\n          muxer: peer.Muxer,\n          latency: peer.Latency,\n          streams: peer.Streams,\n          direction: peer.Direction == null ? undefined : peer.Direction === 0 ? 'inbound' : 'outbound'\n        };\n      });\n    });\n    return _peers.apply(this, arguments);\n  }\n\n  return peers;\n});","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Demo/node_modules/ipfs-http-client/src/swarm/peers.js"],"names":["Multiaddr","require","configure","toUrlSearchParams","module","exports","api","peers","options","res","post","timeout","signal","searchParams","headers","Peers","json","map","peer","addr","Addr","Peer","muxer","Muxer","latency","Latency","streams","Streams","direction","Direction","undefined"],"mappings":"AAAA;;;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAgBC,OAAO,CAAC,WAAD,CAA7B;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,6BAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AAEAG,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAACI,GAAG,IAAI;AAChC;AACF;AACA;AAHkC,WAIjBC,KAJiB;AAAA;AAAA;;AAAA;AAAA,+BAIhC,WAAsBC,OAAO,GAAG,EAAhC,EAAoC;AAClC,YAAMC,GAAG,SAASH,GAAG,CAACI,IAAJ,CAAS,aAAT,EAAwB;AACxCC,QAAAA,OAAO,EAAEH,OAAO,CAACG,OADuB;AAExCC,QAAAA,MAAM,EAAEJ,OAAO,CAACI,MAFwB;AAGxCC,QAAAA,YAAY,EAAEV,iBAAiB,CAACK,OAAD,CAHS;AAIxCM,QAAAA,OAAO,EAAEN,OAAO,CAACM;AAJuB,OAAxB,CAAlB;AAOA;;AACA,YAAM;AAAEC,QAAAA;AAAF,gBAAkBN,GAAG,CAACO,IAAJ,EAAxB;AAEA,aAAO,CAACD,KAAK,IAAI,EAAV,EAAcE,GAAd,CAAkBC,IAAI,IAAI;AAC/B,eAAO;AACLC,UAAAA,IAAI,EAAE,IAAInB,SAAJ,CAAckB,IAAI,CAACE,IAAnB,CADD;AAELF,UAAAA,IAAI,EAAEA,IAAI,CAACG,IAFN;AAGLC,UAAAA,KAAK,EAAEJ,IAAI,CAACK,KAHP;AAILC,UAAAA,OAAO,EAAEN,IAAI,CAACO,OAJT;AAKLC,UAAAA,OAAO,EAAER,IAAI,CAACS,OALT;AAMLC,UAAAA,SAAS,EAAEV,IAAI,CAACW,SAAL,IAAkB,IAAlB,GAAyBC,SAAzB,GAAqCZ,IAAI,CAACW,SAAL,KAAmB,CAAnB,GAAuB,SAAvB,GAAmC;AAN9E,SAAP;AAQD,OATM,CAAP;AAUD,KAzB+B;AAAA;AAAA;;AA0BhC,SAAOtB,KAAP;AACD,CA3ByB,CAA1B","sourcesContent":["'use strict'\n\nconst { Multiaddr } = require('multiaddr')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/swarm').API<HTTPClientExtraOptions>} SwarmAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {SwarmAPI[\"peers\"]}\n   */\n  async function peers (options = {}) {\n    const res = await api.post('swarm/peers', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    /** @type {{ Peers: { Peer: string, Addr: string, Muxer?: string, Latency?: string, Streams?: string[], Direction?: 0 | 1 }[] }} */\n    const { Peers } = await res.json()\n\n    return (Peers || []).map(peer => {\n      return {\n        addr: new Multiaddr(peer.Addr),\n        peer: peer.Peer,\n        muxer: peer.Muxer,\n        latency: peer.Latency,\n        streams: peer.Streams,\n        direction: peer.Direction == null ? undefined : peer.Direction === 0 ? 'inbound' : 'outbound'\n      }\n    })\n  }\n  return peers\n})\n"]},"metadata":{},"sourceType":"script"}