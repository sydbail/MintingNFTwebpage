{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @param {Object} config\n * @param {import('libp2p/src/keychain')} config.keychain\n */\n\n\nmodule.exports = ({\n  keychain\n}) => {\n  /**\n   * @type {import('ipfs-core-types/src/key').API[\"rename\"]}\n   */\n  const rename = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(function* (oldName, newName) {\n      const key = yield keychain.renameKey(oldName, newName);\n      return {\n        was: oldName,\n        now: key.name,\n        id: key.id,\n        overwrite: false\n      };\n    });\n\n    return function rename(_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return withTimeoutOption(rename);\n};","map":{"version":3,"sources":["/Users/sydneybailey/Internship/contract-testing/node_modules/ipfs-core/src/components/key/rename.js"],"names":["withTimeoutOption","require","module","exports","keychain","rename","oldName","newName","key","renameKey","was","now","name","id","overwrite"],"mappings":"AAAA;;;;AAEA,MAAMA,iBAAiB,GAAGC,OAAO,CAAC,yCAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACjC;AACF;AACA;AACE,QAAMC,MAAM;AAAA,iCAAG,WAAOC,OAAP,EAAgBC,OAAhB,EAA4B;AACzC,YAAMC,GAAG,SAASJ,QAAQ,CAACK,SAAT,CAAmBH,OAAnB,EAA4BC,OAA5B,CAAlB;AAEA,aAAO;AACLG,QAAAA,GAAG,EAAEJ,OADA;AAELK,QAAAA,GAAG,EAAEH,GAAG,CAACI,IAFJ;AAGLC,QAAAA,EAAE,EAAEL,GAAG,CAACK,EAHH;AAILC,QAAAA,SAAS,EAAE;AAJN,OAAP;AAMD,KATW;;AAAA,oBAANT,MAAM;AAAA;AAAA;AAAA,KAAZ;;AAWA,SAAOL,iBAAiB,CAACK,MAAD,CAAxB;AACD,CAhBD","sourcesContent":["'use strict'\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\n\n/**\n * @param {Object} config\n * @param {import('libp2p/src/keychain')} config.keychain\n */\nmodule.exports = ({ keychain }) => {\n  /**\n   * @type {import('ipfs-core-types/src/key').API[\"rename\"]}\n   */\n  const rename = async (oldName, newName) => {\n    const key = await keychain.renameKey(oldName, newName)\n\n    return {\n      was: oldName,\n      now: key.name,\n      id: key.id,\n      overwrite: false\n    }\n  }\n\n  return withTimeoutOption(rename)\n}\n"]},"metadata":{},"sourceType":"script"}