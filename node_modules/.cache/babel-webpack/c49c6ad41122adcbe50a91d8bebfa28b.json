{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ArrayArbitrary = void 0;\n\nconst Stream_1 = require(\"../../stream/Stream\");\n\nconst symbols_1 = require(\"../../check/symbols\");\n\nconst integer_1 = require(\"../integer\");\n\nconst LazyIterableIterator_1 = require(\"../../stream/LazyIterableIterator\");\n\nconst BuildCompareFilter_1 = require(\"./helpers/BuildCompareFilter\");\n\nconst NextArbitrary_1 = require(\"../../check/arbitrary/definition/NextArbitrary\");\n\nconst Converters_1 = require(\"../../check/arbitrary/definition/Converters\");\n\nconst NextValue_1 = require(\"../../check/arbitrary/definition/NextValue\");\n\nclass ArrayArbitrary extends NextArbitrary_1.NextArbitrary {\n  constructor(arb, minLength, maxLength, isEqual) {\n    super();\n    this.arb = arb;\n    this.minLength = minLength;\n    this.maxLength = maxLength;\n    this.isEqual = isEqual;\n    this.lengthArb = Converters_1.convertToNext(integer_1.integer(minLength, maxLength));\n    this.preFilter = this.isEqual !== undefined ? BuildCompareFilter_1.buildCompareFilter(this.isEqual) : tab => tab;\n  }\n\n  static makeItCloneable(vs, shrinkables) {\n    vs[symbols_1.cloneMethod] = () => {\n      const cloned = [];\n\n      for (let idx = 0; idx !== shrinkables.length; ++idx) {\n        cloned.push(shrinkables[idx].value);\n      }\n\n      this.makeItCloneable(cloned, shrinkables);\n      return cloned;\n    };\n\n    return vs;\n  }\n\n  static canAppendItem(items, newItem, isEqual) {\n    for (let idx = 0; idx !== items.length; ++idx) {\n      if (isEqual(items[idx].value_, newItem.value_)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  generateNItemsNoDuplicates(N, mrng, biasFactorItems) {\n    let numSkippedInRow = 0;\n    const items = [];\n\n    while (items.length < N && numSkippedInRow < this.maxLength) {\n      const current = this.arb.generate(mrng, biasFactorItems);\n\n      if (this.isEqual === undefined || ArrayArbitrary.canAppendItem(items, current, this.isEqual)) {\n        numSkippedInRow = 0;\n        items.push(current);\n      } else {\n        numSkippedInRow += 1;\n      }\n    }\n\n    return items;\n  }\n\n  generateNItems(N, mrng, biasFactorItems) {\n    const items = [];\n\n    for (let index = 0; index !== N; ++index) {\n      const current = this.arb.generate(mrng, biasFactorItems);\n      items.push(current);\n    }\n\n    return items;\n  }\n\n  wrapper(itemsRaw, shrunkOnce, itemsRawLengthContext) {\n    const items = shrunkOnce ? this.preFilter(itemsRaw) : itemsRaw;\n    let cloneable = false;\n    const vs = [];\n    const itemsContexts = [];\n\n    for (let idx = 0; idx !== items.length; ++idx) {\n      const s = items[idx];\n      cloneable = cloneable || s.hasToBeCloned;\n      vs.push(s.value);\n      itemsContexts.push(s.context);\n    }\n\n    if (cloneable) {\n      ArrayArbitrary.makeItCloneable(vs, items);\n    }\n\n    const context = {\n      shrunkOnce,\n      lengthContext: itemsRaw.length === items.length && itemsRawLengthContext !== undefined ? itemsRawLengthContext : undefined,\n      itemsContexts\n    };\n    return new NextValue_1.NextValue(vs, context);\n  }\n\n  generate(mrng, biasFactor) {\n    const biasMeta = this.applyBias(mrng, biasFactor);\n    const targetSize = biasMeta.size;\n    const items = this.isEqual !== undefined ? this.generateNItemsNoDuplicates(targetSize, mrng, biasMeta.biasFactorItems) : this.generateNItems(targetSize, mrng, biasMeta.biasFactorItems);\n    return this.wrapper(items, false, undefined);\n  }\n\n  applyBias(mrng, biasFactor) {\n    if (biasFactor === undefined || mrng.nextInt(1, biasFactor) !== 1) {\n      return {\n        size: this.lengthArb.generate(mrng, undefined).value\n      };\n    }\n\n    if (mrng.nextInt(1, biasFactor) !== 1 || this.minLength === this.maxLength) {\n      return {\n        size: this.lengthArb.generate(mrng, undefined).value,\n        biasFactorItems: biasFactor\n      };\n    }\n\n    const maxBiasedLength = this.minLength + Math.floor(Math.log(this.maxLength - this.minLength) / Math.log(2));\n    const targetSizeValue = Converters_1.convertToNext(integer_1.integer(this.minLength, maxBiasedLength)).generate(mrng, undefined);\n    return {\n      size: targetSizeValue.value,\n      biasFactorItems: biasFactor\n    };\n  }\n\n  canShrinkWithoutContext(value) {\n    if (!Array.isArray(value) || this.minLength > value.length || value.length > this.maxLength) {\n      return false;\n    }\n\n    for (let index = 0; index !== value.length; ++index) {\n      if (!(index in value)) {\n        return false;\n      }\n\n      if (!this.arb.canShrinkWithoutContext(value[index])) {\n        return false;\n      }\n    }\n\n    const filtered = this.preFilter(value.map(item => new NextValue_1.NextValue(item, undefined)));\n    return filtered.length === value.length;\n  }\n\n  shrinkImpl(value, context) {\n    if (value.length === 0) {\n      return Stream_1.Stream.nil();\n    }\n\n    const safeContext = context !== undefined ? context : {\n      shrunkOnce: false,\n      lengthContext: undefined,\n      itemsContexts: []\n    };\n    return this.lengthArb.shrink(value.length, safeContext.lengthContext).drop(safeContext.shrunkOnce && safeContext.lengthContext === undefined && value.length > this.minLength + 1 ? 1 : 0).map(lengthValue => {\n      const sliceStart = value.length - lengthValue.value;\n      return [value.slice(sliceStart).map((v, index) => new NextValue_1.NextValue(symbols_1.cloneIfNeeded(v), safeContext.itemsContexts[index + sliceStart])), lengthValue.context];\n    }).join(this.arb.shrink(value[0], safeContext.itemsContexts[0]).map(v => {\n      return [[v].concat(value.slice(1).map((v, index) => new NextValue_1.NextValue(symbols_1.cloneIfNeeded(v), safeContext.itemsContexts[index + 1]))), undefined];\n    })).join(value.length > this.minLength ? LazyIterableIterator_1.makeLazy(() => this.shrinkImpl(value.slice(1), {\n      shrunkOnce: false,\n      lengthContext: undefined,\n      itemsContexts: safeContext.itemsContexts.slice(1)\n    }).filter(v => this.minLength <= v[0].length + 1).map(v => {\n      return [[new NextValue_1.NextValue(symbols_1.cloneIfNeeded(value[0]), safeContext.itemsContexts[0])].concat(v[0]), undefined];\n    })) : Stream_1.Stream.nil());\n  }\n\n  shrink(value, context) {\n    return this.shrinkImpl(value, context).map(contextualValue => this.wrapper(contextualValue[0], true, contextualValue[1]));\n  }\n\n}\n\nexports.ArrayArbitrary = ArrayArbitrary;","map":null,"metadata":{},"sourceType":"script"}