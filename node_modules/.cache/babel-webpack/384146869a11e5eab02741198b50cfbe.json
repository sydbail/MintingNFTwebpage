{"ast":null,"code":"'use strict'; // Import browser version otherwise electron-renderer will end up with node\n// version and fail.\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nconst {\n  normaliseInput\n} = require('ipfs-core-utils/src/files/normalise-input/index.browser');\n\nconst modeToString = require('./mode-to-string');\n/**\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidateStream} ImportCandidateStream\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidate} ImportCandidate\n */\n\n/**\n * @param {ImportCandidateStream|ImportCandidate} source\n * @param {AbortController} abortController\n * @param {Headers|Record<string, string>} [headers]\n */\n\n\nfunction multipartRequest(_x, _x2) {\n  return _multipartRequest.apply(this, arguments);\n}\n\nfunction _multipartRequest() {\n  _multipartRequest = _asyncToGenerator(function* (source, abortController, headers = {}) {\n    const parts = [];\n    const formData = new FormData();\n    let index = 0;\n    let total = 0; // @ts-ignore wrong input type for normaliseInput\n\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n\n    var _iteratorError;\n\n    try {\n      for (var _iterator = _asyncIterator(normaliseInput(source)), _step, _value; _step = yield _iterator.next(), _iteratorNormalCompletion = _step.done, _value = yield _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n        const {\n          content,\n          path,\n          mode,\n          mtime\n        } = _value;\n        let fileSuffix = '';\n        const type = content ? 'file' : 'dir';\n\n        if (index > 0) {\n          fileSuffix = `-${index}`;\n        }\n\n        let fieldName = type + fileSuffix;\n        const qs = [];\n\n        if (mode !== null && mode !== undefined) {\n          qs.push(`mode=${modeToString(mode)}`);\n        }\n\n        if (mtime != null) {\n          const {\n            secs,\n            nsecs\n          } = mtime;\n          qs.push(`mtime=${secs}`);\n\n          if (nsecs != null) {\n            qs.push(`mtime-nsecs=${nsecs}`);\n          }\n        }\n\n        if (qs.length) {\n          fieldName = `${fieldName}?${qs.join('&')}`;\n        }\n\n        if (content) {\n          formData.set(fieldName, content, path != null ? encodeURIComponent(path) : undefined);\n          const end = total + content.size;\n          parts.push({\n            name: path,\n            start: total,\n            end\n          });\n          total = end;\n        } else if (path != null) {\n          formData.set(fieldName, new File([''], encodeURIComponent(path), {\n            type: 'application/x-directory'\n          }));\n        } else {\n          throw new Error('path or content or both must be set');\n        }\n\n        index++;\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          yield _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return {\n      total,\n      parts,\n      headers,\n      body: formData\n    };\n  });\n  return _multipartRequest.apply(this, arguments);\n}\n\nmodule.exports = multipartRequest;","map":null,"metadata":{},"sourceType":"script"}