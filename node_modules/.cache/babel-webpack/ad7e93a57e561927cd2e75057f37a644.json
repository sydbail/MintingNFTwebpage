{"ast":null,"code":"'use strict';\n/**\n * Consumes the passed iterator and returns the number of items it contained.\n *\n * @param {AsyncIterable<any> | Iterable<any>} iterator\n * @returns {Promise<number>}\n */\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nconst length = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (iterator) {\n    let count = 0;\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n\n    var _iteratorError;\n\n    try {\n      for (var _iterator = _asyncIterator(iterator), _step, _value; _step = yield _iterator.next(), _iteratorNormalCompletion = _step.done, _value = yield _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n        const _ = _value;\n        // eslint-disable-line no-unused-vars\n        count++;\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          yield _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return count;\n  });\n\n  return function length(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nmodule.exports = length;","map":{"version":3,"sources":["/Users/sydneybailey/Internship/contract-testing/node_modules/it-length/index.js"],"names":["length","iterator","count","_","module","exports"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;AACA,MAAMA,MAAM;AAAA,+BAAG,WAAOC,QAAP,EAAoB;AACjC,QAAIC,KAAK,GAAG,CAAZ;AADiC;AAAA;;AAAA;;AAAA;AAGjC,0CAAsBD,QAAtB,oLAAgC;AAAA,cAAfE,CAAe;AAAE;AAChCD,QAAAA,KAAK;AACN;AALgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAOjC,WAAOA,KAAP;AACD,GARW;;AAAA,kBAANF,MAAM;AAAA;AAAA;AAAA,GAAZ;;AAUAI,MAAM,CAACC,OAAP,GAAiBL,MAAjB","sourcesContent":["'use strict'\n\n/**\n * Consumes the passed iterator and returns the number of items it contained.\n *\n * @param {AsyncIterable<any> | Iterable<any>} iterator\n * @returns {Promise<number>}\n */\nconst length = async (iterator) => {\n  let count = 0\n\n  for await (const _ of iterator) { // eslint-disable-line no-unused-vars\n    count++\n  }\n\n  return count\n}\n\nmodule.exports = length\n"]},"metadata":{},"sourceType":"script"}