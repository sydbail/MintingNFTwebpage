{"ast":null,"code":"'use strict';\n\nvar _wrapAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\").default;\n\nvar _awaitAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nvar _asyncGeneratorDelegate = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncGeneratorDelegate\").default;\n\nconst toCamel = require('../lib/object-to-camel');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/refs').API<HTTPClientExtraOptions>} RefsAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {RefsAPI[\"local\"]}\n   */\n  function refsLocal() {\n    return _refsLocal.apply(this, arguments);\n  }\n\n  function _refsLocal() {\n    _refsLocal = _wrapAsyncGenerator(function* (options = {}) {\n      const res = yield _awaitAsyncGenerator(api.post('refs/local', {\n        timeout: options.timeout,\n        signal: options.signal,\n        transform: toCamel,\n        searchParams: toUrlSearchParams(options),\n        headers: options.headers\n      }));\n      yield* _asyncGeneratorDelegate(_asyncIterator(res.ndjson()), _awaitAsyncGenerator);\n    });\n    return _refsLocal.apply(this, arguments);\n  }\n\n  return refsLocal;\n});","map":{"version":3,"sources":["/Users/sydneybailey/Internship/contract-testing/node_modules/ipfs-http-client/src/refs/local.js"],"names":["toCamel","require","configure","toUrlSearchParams","module","exports","api","refsLocal","options","res","post","timeout","signal","transform","searchParams","headers","ndjson"],"mappings":"AAAA;;;;;;;;;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,wBAAD,CAAvB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,6BAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AAEAG,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAACI,GAAG,IAAI;AAChC;AACF;AACA;AAHkC,WAIfC,SAJe;AAAA;AAAA;;AAAA;AAAA,qCAIhC,WAA4BC,OAAO,GAAG,EAAtC,EAA0C;AACxC,YAAMC,GAAG,8BAASH,GAAG,CAACI,IAAJ,CAAS,YAAT,EAAuB;AACvCC,QAAAA,OAAO,EAAEH,OAAO,CAACG,OADsB;AAEvCC,QAAAA,MAAM,EAAEJ,OAAO,CAACI,MAFuB;AAGvCC,QAAAA,SAAS,EAAEb,OAH4B;AAIvCc,QAAAA,YAAY,EAAEX,iBAAiB,CAACK,OAAD,CAJQ;AAKvCO,QAAAA,OAAO,EAAEP,OAAO,CAACO;AALsB,OAAvB,CAAT,CAAT;AAQA,oDAAQN,GAAG,CAACO,MAAJ,EAAR;AACD,KAd+B;AAAA;AAAA;;AAehC,SAAOT,SAAP;AACD,CAhByB,CAA1B","sourcesContent":["'use strict'\n\nconst toCamel = require('../lib/object-to-camel')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/refs').API<HTTPClientExtraOptions>} RefsAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {RefsAPI[\"local\"]}\n   */\n  async function * refsLocal (options = {}) {\n    const res = await api.post('refs/local', {\n      timeout: options.timeout,\n      signal: options.signal,\n      transform: toCamel,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    yield * res.ndjson()\n  }\n  return refsLocal\n})\n"]},"metadata":{},"sourceType":"script"}