{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @param {Object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../../types').Preload} config.preload\n */\n\n\nmodule.exports = ({\n  repo,\n  preload\n}) => {\n  const get = require('../get')({\n    repo,\n    preload\n  });\n\n  const put = require('../put')({\n    repo,\n    preload\n  });\n  /**\n   * @type {import('ipfs-core-types/src/object/patch').API[\"rmLink\"]}\n   */\n\n\n  function rmLink(_x, _x2) {\n    return _rmLink.apply(this, arguments);\n  }\n\n  function _rmLink() {\n    _rmLink = _asyncToGenerator(function* (multihash, linkRef, options = {}) {\n      const node = yield get(multihash, options);\n      const name = (typeof linkRef === 'string' ? linkRef : linkRef.Name) || '';\n      node.Links = node.Links.filter(l => l.Name !== name);\n      return put(node, options);\n    });\n    return _rmLink.apply(this, arguments);\n  }\n\n  return withTimeoutOption(rmLink);\n};","map":null,"metadata":{},"sourceType":"script"}