{"ast":null,"code":"import _asyncToGenerator from \"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./web3.service\";\n\nconst ipfsNFTArtifacts = require('../../../build/contracts/IPFSNFT.json');\n\nconst contract = require('@truffle/contract');\n\nexport class IpfscontractService {\n  web3Ser;\n  ipfsNFT = contract(ipfsNFTArtifacts);\n\n  constructor(web3Ser) {\n    this.web3Ser = web3Ser;\n    this.ipfsNFT.setProvider(web3Ser.web3.currentProvider);\n  }\n\n  getBalance(account) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      let ipfscontract = yield _this.ipfsNFT.deployed();\n      const balance = yield ipfscontract.balanceOf.call(account, {\n        from: _this.web3Ser.web3.eth.defaultAccount\n      });\n      return balance;\n    })();\n  }\n\n  getOwner(id) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      let ipfscontract = yield _this2.ipfsNFT.deployed();\n      const owner = yield ipfscontract.ownerOf.call(id, {\n        from: _this2.web3Ser.web3.eth.defaultAccount\n      });\n      return owner;\n    })();\n  }\n\n  getTokenUri(id) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      let ipfscontract = yield _this3.ipfsNFT.deployed();\n      const tokenURI = yield ipfscontract.tokenURI.call(id, {\n        from: _this3.web3Ser.web3.eth.defaultAccount\n      });\n      return tokenURI;\n    })();\n  }\n\n  mintCoin(to, imagehash, metahash) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      let ipfscontract = yield _this4.ipfsNFT.deployed();\n\n      try {\n        const value = yield ipfscontract.mint(to, imagehash, metahash, {\n          from: _this4.web3Ser.web3.eth.defaultAccount\n        });\n        return value;\n      } catch (err) {\n        console.log(\"U CAUGHT THE ERROR HERE!!!!!!!!!!!!!!!!!!\", err);\n        return null;\n      }\n    })();\n  }\n\n  static ɵfac = function IpfscontractService_Factory(t) {\n    return new (t || IpfscontractService)(i0.ɵɵinject(i1.Web3Service));\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: IpfscontractService,\n    factory: IpfscontractService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"sources":["/Users/sydneybailey/Internship/contract-testing/src/app/services/ipfscontract.service.ts"],"names":[],"mappings":";;;;AAKA,MAAM,gBAAgB,GAAG,OAAO,CAAC,uCAAD,CAAhC;;AACA,MAAM,QAAQ,GAAG,OAAO,CAAC,mBAAD,CAAxB;;AAKA,OAAM,MAAO,mBAAP,CAA0B;AAIV,EAAA,OAAA;AAFpB,EAAA,OAAO,GAAG,QAAQ,CAAC,gBAAD,CAAX;;AAEP,EAAA,WAAA,CAAoB,OAApB,EAAwC;AAApB,SAAA,OAAA,GAAA,OAAA;AAClB,SAAK,OAAL,CAAa,WAAb,CAAyB,OAAO,CAAC,IAAR,CAAa,eAAtC;AACD;;AAEK,EAAA,UAAU,CAAC,OAAD,EAAa;AAAA;;AAAA;AAC3B,UAAI,YAAY,SAAS,KAAI,CAAC,OAAL,CAAa,QAAb,EAAzB;AACA,YAAM,OAAO,SAAS,YAAY,CAAC,SAAb,CAAuB,IAAvB,CAA4B,OAA5B,EAAqC;AACzD,QAAA,IAAI,EAAE,KAAI,CAAC,OAAL,CAAa,IAAb,CAAkB,GAAlB,CAAsB;AAD6B,OAArC,CAAtB;AAGA,aAAO,OAAP;AAL2B;AAM5B;;AAEK,EAAA,QAAQ,CAAC,EAAD,EAAQ;AAAA;;AAAA;AACpB,UAAI,YAAY,SAAS,MAAI,CAAC,OAAL,CAAa,QAAb,EAAzB;AACA,YAAM,KAAK,SAAS,YAAY,CAAC,OAAb,CAAqB,IAArB,CAA0B,EAA1B,EAA8B;AAChD,QAAA,IAAI,EAAE,MAAI,CAAC,OAAL,CAAa,IAAb,CAAkB,GAAlB,CAAsB;AADoB,OAA9B,CAApB;AAGA,aAAO,KAAP;AALoB;AAMrB;;AAEK,EAAA,WAAW,CAAC,EAAD,EAAQ;AAAA;;AAAA;AACvB,UAAI,YAAY,SAAS,MAAI,CAAC,OAAL,CAAa,QAAb,EAAzB;AACA,YAAM,QAAQ,SAAS,YAAY,CAAC,QAAb,CAAsB,IAAtB,CAA2B,EAA3B,EAA+B;AACpD,QAAA,IAAI,EAAE,MAAI,CAAC,OAAL,CAAa,IAAb,CAAkB,GAAlB,CAAsB;AADwB,OAA/B,CAAvB;AAGA,aAAO,QAAP;AALuB;AAMxB;;AAEK,EAAA,QAAQ,CAAC,EAAD,EAAU,SAAV,EAA6B,QAA7B,EAA6C;AAAA;;AAAA;AACzD,UAAI,YAAY,SAAS,MAAI,CAAC,OAAL,CAAa,QAAb,EAAzB;;AACA,UAAI;AACF,cAAM,KAAK,SAAS,YAAY,CAAC,IAAb,CAAkB,EAAlB,EAAsB,SAAtB,EAAiC,QAAjC,EAA2C;AAC7D,UAAA,IAAI,EAAE,MAAI,CAAC,OAAL,CAAa,IAAb,CAAkB,GAAlB,CAAsB;AADiC,SAA3C,CAApB;AAGA,eAAO,KAAP;AACD,OALD,CAKC,OAAM,GAAN,EAAW;AACV,QAAA,OAAO,CAAC,GAAR,CAAY,2CAAZ,EAAyD,GAAzD;AACA,eAAO,IAAP;AACD;AAVwD;AAW1D;;;qBA3CU,mB,EAAmB,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,WAAA,C;AAAA,G;;WAAnB,mB;AAAmB,IAAA,OAAA,EAAnB,mBAAmB,CAAA,I;AAAA,IAAA,UAAA,EAFlB;;AAEkB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { from } from 'rxjs';\nimport { Web3Service } from './web3.service'\n\nconst ipfsNFTArtifacts = require('../../../build/contracts/IPFSNFT.json');\nconst contract = require('@truffle/contract');\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class IpfscontractService {\n\n  ipfsNFT = contract(ipfsNFTArtifacts);\n\n  constructor(private web3Ser: Web3Service) {\n    this.ipfsNFT.setProvider(web3Ser.web3.currentProvider);\n  }\n\n  async getBalance(account: any): Promise<any> {\n    let ipfscontract = await this.ipfsNFT.deployed();\n    const balance = await ipfscontract.balanceOf.call(account, {\n      from: this.web3Ser.web3.eth.defaultAccount\n    });\n    return balance;\n  }\n\n  async getOwner(id: any): Promise<any> {\n    let ipfscontract = await this.ipfsNFT.deployed();\n    const owner = await ipfscontract.ownerOf.call(id, {\n      from: this.web3Ser.web3.eth.defaultAccount\n    });\n    return owner;\n  }\n\n  async getTokenUri(id: any): Promise<any> {\n    let ipfscontract = await this.ipfsNFT.deployed();\n    const tokenURI = await ipfscontract.tokenURI.call(id, {\n      from: this.web3Ser.web3.eth.defaultAccount\n    });\n    return tokenURI;\n  }\n\n  async mintCoin(to: any, imagehash: string, metahash: string): Promise<any>{\n    let ipfscontract = await this.ipfsNFT.deployed();\n    try {\n      const value = await ipfscontract.mint(to, imagehash, metahash, {\n        from: this.web3Ser.web3.eth.defaultAccount\n      });\n      return value;\n    }catch(err) {\n      console.log(\"U CAUGHT THE ERROR HERE!!!!!!!!!!!!!!!!!!\", err);\n      return null;\n    }\n  }\n\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}