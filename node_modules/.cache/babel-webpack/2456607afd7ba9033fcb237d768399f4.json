{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst debug = require('debug');\n\nconst log = Object.assign(debug('libp2p:circuit:stop'), {\n  error: debug('libp2p:circuit:stop:err')\n});\n\nconst {\n  CircuitRelay: CircuitPB\n} = require('../protocol');\n\nconst multicodec = require('../multicodec');\n\nconst StreamHandler = require('./stream-handler');\n\nconst {\n  validateAddrs\n} = require('./utils');\n/**\n * @typedef {import('libp2p-interfaces/src/connection').Connection} Connection\n * @typedef {import('libp2p-interfaces/src/stream-muxer/types').MuxedStream} MuxedStream\n * @typedef {import('../protocol').ICircuitRelay} ICircuitRelay\n */\n\n/**\n * Handles incoming STOP requests\n *\n * @private\n * @param {Object} options\n * @param {Connection} options.connection\n * @param {ICircuitRelay} options.request - The CircuitRelay protobuf request (unencoded)\n * @param {StreamHandler} options.streamHandler\n * @returns {Promise<MuxedStream>|void} Resolves a duplex iterable\n */\n\n\nmodule.exports.handleStop = function handleStop({\n  connection,\n  request,\n  streamHandler\n}) {\n  // Validate the STOP request has the required input\n  try {\n    validateAddrs(request, streamHandler);\n  } catch (err) {\n    return log.error('invalid stop request via peer %s', connection.remotePeer.toB58String(), err);\n  } // The request is valid\n\n\n  log('stop request is valid');\n  streamHandler.write({\n    type: CircuitPB.Type.STATUS,\n    code: CircuitPB.Status.SUCCESS\n  });\n  return streamHandler.rest();\n};\n/**\n * Creates a STOP request\n *\n * @private\n * @param {Object} options\n * @param {Connection} options.connection\n * @param {ICircuitRelay} options.request - The CircuitRelay protobuf request (unencoded)\n * @returns {Promise<MuxedStream|void>} Resolves a duplex iterable\n */\n\n\nmodule.exports.stop = /*#__PURE__*/function () {\n  var _stop = _asyncToGenerator(function* ({\n    connection,\n    request\n  }) {\n    const {\n      stream\n    } = yield connection.newStream([multicodec.relay]);\n    log('starting stop request to %s', connection.remotePeer.toB58String());\n    const streamHandler = new StreamHandler({\n      stream\n    });\n    streamHandler.write(request);\n    const response = yield streamHandler.read();\n\n    if (!response) {\n      return streamHandler.close();\n    }\n\n    if (response.code === CircuitPB.Status.SUCCESS) {\n      log('stop request to %s was successful', connection.remotePeer.toB58String());\n      return streamHandler.rest();\n    }\n\n    log('stop request failed with code %d', response.code);\n    streamHandler.close();\n  });\n\n  function stop(_x) {\n    return _stop.apply(this, arguments);\n  }\n\n  return stop;\n}();","map":{"version":3,"sources":["/Users/sydneybailey/Internship/contract-testing/node_modules/libp2p/src/circuit/circuit/stop.js"],"names":["debug","require","log","Object","assign","error","CircuitRelay","CircuitPB","multicodec","StreamHandler","validateAddrs","module","exports","handleStop","connection","request","streamHandler","err","remotePeer","toB58String","write","type","Type","STATUS","code","Status","SUCCESS","rest","stop","stream","newStream","relay","response","read","close"],"mappings":"AAAA;;;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMC,GAAG,GAAGC,MAAM,CAACC,MAAP,CAAcJ,KAAK,CAAC,qBAAD,CAAnB,EAA4C;AACtDK,EAAAA,KAAK,EAAEL,KAAK,CAAC,yBAAD;AAD0C,CAA5C,CAAZ;;AAIA,MAAM;AAAEM,EAAAA,YAAY,EAAEC;AAAhB,IAA8BN,OAAO,CAAC,aAAD,CAA3C;;AACA,MAAMO,UAAU,GAAGP,OAAO,CAAC,eAAD,CAA1B;;AACA,MAAMQ,aAAa,GAAGR,OAAO,CAAC,kBAAD,CAA7B;;AACA,MAAM;AAAES,EAAAA;AAAF,IAAoBT,OAAO,CAAC,SAAD,CAAjC;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAU,MAAM,CAACC,OAAP,CAAeC,UAAf,GAA4B,SAASA,UAAT,CAAqB;AAC/CC,EAAAA,UAD+C;AAE/CC,EAAAA,OAF+C;AAG/CC,EAAAA;AAH+C,CAArB,EAIzB;AACD;AACA,MAAI;AACFN,IAAAA,aAAa,CAACK,OAAD,EAAUC,aAAV,CAAb;AACD,GAFD,CAEE,OAAOC,GAAP,EAAY;AACZ,WAAOf,GAAG,CAACG,KAAJ,CAAU,kCAAV,EAA8CS,UAAU,CAACI,UAAX,CAAsBC,WAAtB,EAA9C,EAAmFF,GAAnF,CAAP;AACD,GANA,CAQD;;;AACAf,EAAAA,GAAG,CAAC,uBAAD,CAAH;AACAc,EAAAA,aAAa,CAACI,KAAd,CAAoB;AAClBC,IAAAA,IAAI,EAAEd,SAAS,CAACe,IAAV,CAAeC,MADH;AAElBC,IAAAA,IAAI,EAAEjB,SAAS,CAACkB,MAAV,CAAiBC;AAFL,GAApB;AAIA,SAAOV,aAAa,CAACW,IAAd,EAAP;AACD,CAnBD;AAqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAhB,MAAM,CAACC,OAAP,CAAegB,IAAf;AAAA,gCAAsB,WAAqB;AACzCd,IAAAA,UADyC;AAEzCC,IAAAA;AAFyC,GAArB,EAGnB;AACD,UAAM;AAAEc,MAAAA;AAAF,cAAmBf,UAAU,CAACgB,SAAX,CAAqB,CAACtB,UAAU,CAACuB,KAAZ,CAArB,CAAzB;AACA7B,IAAAA,GAAG,CAAC,6BAAD,EAAgCY,UAAU,CAACI,UAAX,CAAsBC,WAAtB,EAAhC,CAAH;AACA,UAAMH,aAAa,GAAG,IAAIP,aAAJ,CAAkB;AAAEoB,MAAAA;AAAF,KAAlB,CAAtB;AAEAb,IAAAA,aAAa,CAACI,KAAd,CAAoBL,OAApB;AACA,UAAMiB,QAAQ,SAAShB,aAAa,CAACiB,IAAd,EAAvB;;AAEA,QAAI,CAACD,QAAL,EAAe;AACb,aAAOhB,aAAa,CAACkB,KAAd,EAAP;AACD;;AAED,QAAIF,QAAQ,CAACR,IAAT,KAAkBjB,SAAS,CAACkB,MAAV,CAAiBC,OAAvC,EAAgD;AAC9CxB,MAAAA,GAAG,CAAC,mCAAD,EAAsCY,UAAU,CAACI,UAAX,CAAsBC,WAAtB,EAAtC,CAAH;AACA,aAAOH,aAAa,CAACW,IAAd,EAAP;AACD;;AAEDzB,IAAAA,GAAG,CAAC,kCAAD,EAAqC8B,QAAQ,CAACR,IAA9C,CAAH;AACAR,IAAAA,aAAa,CAACkB,KAAd;AACD,GAtBD;;AAAA,WAAqCN,IAArC;AAAA;AAAA;;AAAA,SAAqCA,IAArC;AAAA","sourcesContent":["'use strict'\n\nconst debug = require('debug')\nconst log = Object.assign(debug('libp2p:circuit:stop'), {\n  error: debug('libp2p:circuit:stop:err')\n})\n\nconst { CircuitRelay: CircuitPB } = require('../protocol')\nconst multicodec = require('../multicodec')\nconst StreamHandler = require('./stream-handler')\nconst { validateAddrs } = require('./utils')\n\n/**\n * @typedef {import('libp2p-interfaces/src/connection').Connection} Connection\n * @typedef {import('libp2p-interfaces/src/stream-muxer/types').MuxedStream} MuxedStream\n * @typedef {import('../protocol').ICircuitRelay} ICircuitRelay\n */\n\n/**\n * Handles incoming STOP requests\n *\n * @private\n * @param {Object} options\n * @param {Connection} options.connection\n * @param {ICircuitRelay} options.request - The CircuitRelay protobuf request (unencoded)\n * @param {StreamHandler} options.streamHandler\n * @returns {Promise<MuxedStream>|void} Resolves a duplex iterable\n */\nmodule.exports.handleStop = function handleStop ({\n  connection,\n  request,\n  streamHandler\n}) {\n  // Validate the STOP request has the required input\n  try {\n    validateAddrs(request, streamHandler)\n  } catch (err) {\n    return log.error('invalid stop request via peer %s', connection.remotePeer.toB58String(), err)\n  }\n\n  // The request is valid\n  log('stop request is valid')\n  streamHandler.write({\n    type: CircuitPB.Type.STATUS,\n    code: CircuitPB.Status.SUCCESS\n  })\n  return streamHandler.rest()\n}\n\n/**\n * Creates a STOP request\n *\n * @private\n * @param {Object} options\n * @param {Connection} options.connection\n * @param {ICircuitRelay} options.request - The CircuitRelay protobuf request (unencoded)\n * @returns {Promise<MuxedStream|void>} Resolves a duplex iterable\n */\nmodule.exports.stop = async function stop ({\n  connection,\n  request\n}) {\n  const { stream } = await connection.newStream([multicodec.relay])\n  log('starting stop request to %s', connection.remotePeer.toB58String())\n  const streamHandler = new StreamHandler({ stream })\n\n  streamHandler.write(request)\n  const response = await streamHandler.read()\n\n  if (!response) {\n    return streamHandler.close()\n  }\n\n  if (response.code === CircuitPB.Status.SUCCESS) {\n    log('stop request to %s was successful', connection.remotePeer.toB58String())\n    return streamHandler.rest()\n  }\n\n  log('stop request failed with code %d', response.code)\n  streamHandler.close()\n}\n"]},"metadata":{},"sourceType":"script"}