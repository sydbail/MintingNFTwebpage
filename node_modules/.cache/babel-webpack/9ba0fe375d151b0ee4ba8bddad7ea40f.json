{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst debug = require('debug');\n\nconst log = Object.assign(debug('libp2p:ping'), {\n  error: debug('libp2p:ping:err')\n});\n\nconst errCode = require('err-code');\n\nconst crypto = require('libp2p-crypto');\n\nconst {\n  pipe\n} = require('it-pipe'); // @ts-ignore it-buffer has no types exported\n\n\nconst {\n  toBuffer\n} = require('it-buffer');\n\nconst {\n  collect,\n  take\n} = require('streaming-iterables');\n\nconst {\n  equals\n} = require('uint8arrays/equals');\n\nconst {\n  PROTOCOL_NAME,\n  PING_LENGTH,\n  PROTOCOL_VERSION\n} = require('./constants');\n/**\n * @typedef {import('../')} Libp2p\n * @typedef {import('multiaddr').Multiaddr} Multiaddr\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('libp2p-interfaces/src/stream-muxer/types').MuxedStream} MuxedStream\n */\n\n/**\n * Ping a given peer and wait for its response, getting the operation latency.\n *\n * @param {Libp2p} node\n * @param {PeerId|Multiaddr} peer\n * @returns {Promise<number>}\n */\n\n\nfunction ping(_x, _x2) {\n  return _ping.apply(this, arguments);\n}\n/**\n * Subscribe ping protocol handler.\n *\n * @param {Libp2p} node\n */\n\n\nfunction _ping() {\n  _ping = _asyncToGenerator(function* (node, peer) {\n    const protocol = `/${node._config.protocolPrefix}/${PROTOCOL_NAME}/${PROTOCOL_VERSION}`; // @ts-ignore multiaddr might not have toB58String\n\n    log('dialing %s to %s', protocol, peer.toB58String ? peer.toB58String() : peer);\n    const connection = yield node.dial(peer);\n    const {\n      stream\n    } = yield connection.newStream(protocol);\n    const start = Date.now();\n    const data = crypto.randomBytes(PING_LENGTH);\n    const [result] = yield pipe([data], stream, (\n    /** @type {MuxedStream} */\n    stream) => take(1, stream), toBuffer, collect);\n    const end = Date.now();\n\n    if (!equals(data, result)) {\n      throw errCode(new Error('Received wrong ping ack'), 'ERR_WRONG_PING_ACK');\n    }\n\n    return end - start;\n  });\n  return _ping.apply(this, arguments);\n}\n\nfunction mount(node) {\n  node.handle(`/${node._config.protocolPrefix}/${PROTOCOL_NAME}/${PROTOCOL_VERSION}`, ({\n    stream\n  }) => pipe(stream, stream));\n}\n/**\n * Unsubscribe ping protocol handler.\n *\n * @param {Libp2p} node\n */\n\n\nfunction unmount(node) {\n  node.unhandle(`/${node._config.protocolPrefix}/${PROTOCOL_NAME}/${PROTOCOL_VERSION}`);\n}\n\nexports = module.exports = ping;\nexports.mount = mount;\nexports.unmount = unmount;","map":null,"metadata":{},"sourceType":"script"}