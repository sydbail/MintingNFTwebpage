{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst {\n  equals: uint8ArrayEquals\n} = require('uint8arrays/equals');\n\nconst Message = require('../../message');\n\nconst utils = require('../../utils');\n/**\n * @typedef {import('peer-id')} PeerId\n */\n\n/**\n * @param {import('../../index')} dht\n */\n\n\nmodule.exports = dht => {\n  const log = utils.logger(dht.peerId, 'rpc:find-node');\n  /**\n   * Process `FindNode` DHT messages.\n   *\n   * @param {PeerId} peerId\n   * @param {Message} msg\n   */\n\n  function findNode(_x, _x2) {\n    return _findNode.apply(this, arguments);\n  }\n\n  function _findNode() {\n    _findNode = _asyncToGenerator(function* (peerId, msg) {\n      log('start');\n      let closer;\n\n      if (uint8ArrayEquals(msg.key, dht.peerId.id)) {\n        closer = [{\n          id: dht.peerId,\n          multiaddrs: dht.libp2p.multiaddrs\n        }];\n      } else {\n        closer = yield dht._betterPeersToQuery(msg, peerId);\n      }\n\n      const response = new Message(msg.type, new Uint8Array(0), msg.clusterLevel);\n\n      if (closer.length > 0) {\n        response.closerPeers = closer;\n      } else {\n        log('handle FindNode %s: could not find anything', peerId.toB58String());\n      }\n\n      return response;\n    });\n    return _findNode.apply(this, arguments);\n  }\n\n  return findNode;\n};","map":null,"metadata":{},"sourceType":"script"}