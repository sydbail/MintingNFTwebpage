{"ast":null,"code":"'use strict';\n\nvar _wrapAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\").default;\n\nvar _awaitAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nvar _asyncGeneratorDelegate = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncGeneratorDelegate\").default;\n\nconst {\n  Adapter\n} = require('interface-datastore');\n\nconst map = require('it-map');\n\nconst {\n  pipe\n} = require('it-pipe');\n/**\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-datastore').Options} Options\n * @typedef {import('interface-datastore').Batch} Batch\n * @typedef {import('interface-datastore').Query} Query\n * @typedef {import('interface-datastore').KeyQuery} KeyQuery\n * @typedef {import('interface-datastore').Key} Key\n * @typedef {import('interface-datastore').Pair} Pair\n * @typedef {import('./types').KeyTransform} KeyTransform\n */\n\n/**\n * @template TEntry\n * @typedef {import('interface-store').AwaitIterable<TEntry>} AwaitIterable\n */\n\n/**\n * A datastore shim, that wraps around a given datastore, changing\n * the way keys look to the user, for example namespacing\n * keys, reversing them, etc.\n *\n * @implements {Datastore}\n */\n\n\nclass KeyTransformDatastore extends Adapter {\n  /**\n   * @param {Datastore} child\n   * @param {KeyTransform} transform\n   */\n  constructor(child, transform) {\n    super();\n    this.child = child;\n    this.transform = transform;\n  }\n\n  open() {\n    return this.child.open();\n  }\n  /**\n   * @param {Key} key\n   * @param {Uint8Array} val\n   * @param {Options} [options]\n   */\n\n\n  put(key, val, options) {\n    return this.child.put(this.transform.convert(key), val, options);\n  }\n  /**\n   * @param {Key} key\n   * @param {Options} [options]\n   */\n\n\n  get(key, options) {\n    return this.child.get(this.transform.convert(key), options);\n  }\n  /**\n   * @param {Key} key\n   * @param {Options} [options]\n   */\n\n\n  has(key, options) {\n    return this.child.has(this.transform.convert(key), options);\n  }\n  /**\n   * @param {Key} key\n   * @param {Options} [options]\n   */\n\n\n  delete(key, options) {\n    return this.child.delete(this.transform.convert(key), options);\n  }\n  /**\n   * @param {AwaitIterable<Pair>} source\n   * @param {Options} [options]\n   * @returns {AsyncIterable<Pair>}\n   */\n\n\n  putMany(source, options = {}) {\n    var _this = this;\n\n    return _wrapAsyncGenerator(function* () {\n      const transform = _this.transform;\n      const child = _this.child;\n      yield* _asyncGeneratorDelegate(_asyncIterator(pipe(source, /*#__PURE__*/function () {\n        var _ref = _wrapAsyncGenerator(function* (source) {\n          yield* _asyncGeneratorDelegate(_asyncIterator(map(source, ({\n            key,\n            value\n          }) => ({\n            key: transform.convert(key),\n            value\n          }))), _awaitAsyncGenerator);\n        });\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }(), /*#__PURE__*/function () {\n        var _ref2 = _wrapAsyncGenerator(function* (source) {\n          yield* _asyncGeneratorDelegate(_asyncIterator(child.putMany(source, options)), _awaitAsyncGenerator);\n        });\n\n        return function (_x2) {\n          return _ref2.apply(this, arguments);\n        };\n      }(), /*#__PURE__*/function () {\n        var _ref3 = _wrapAsyncGenerator(function* (source) {\n          yield* _asyncGeneratorDelegate(_asyncIterator(map(source, ({\n            key,\n            value\n          }) => ({\n            key: transform.invert(key),\n            value\n          }))), _awaitAsyncGenerator);\n        });\n\n        return function (_x3) {\n          return _ref3.apply(this, arguments);\n        };\n      }())), _awaitAsyncGenerator);\n    })();\n  }\n  /**\n   * @param {AwaitIterable<Key>} source\n   * @param {Options} [options]\n   * @returns {AsyncIterable<Uint8Array>}\n   */\n\n\n  getMany(source, options = {}) {\n    var _this2 = this;\n\n    return _wrapAsyncGenerator(function* () {\n      const transform = _this2.transform;\n      const child = _this2.child;\n      yield* _asyncGeneratorDelegate(_asyncIterator(pipe(source, /*#__PURE__*/function () {\n        var _ref4 = _wrapAsyncGenerator(function* (source) {\n          yield* _asyncGeneratorDelegate(_asyncIterator(map(source, key => transform.convert(key))), _awaitAsyncGenerator);\n        });\n\n        return function (_x4) {\n          return _ref4.apply(this, arguments);\n        };\n      }(), /*#__PURE__*/function () {\n        var _ref5 = _wrapAsyncGenerator(function* (source) {\n          yield* _asyncGeneratorDelegate(_asyncIterator(child.getMany(source, options)), _awaitAsyncGenerator);\n        });\n\n        return function (_x5) {\n          return _ref5.apply(this, arguments);\n        };\n      }())), _awaitAsyncGenerator);\n    })();\n  }\n  /**\n   * @param {AwaitIterable<Key>} source\n   * @param {Options} [options]\n   * @returns {AsyncIterable<Key>}\n   */\n\n\n  deleteMany(source, options = {}) {\n    var _this3 = this;\n\n    return _wrapAsyncGenerator(function* () {\n      const transform = _this3.transform;\n      const child = _this3.child;\n      yield* _asyncGeneratorDelegate(_asyncIterator(pipe(source, /*#__PURE__*/function () {\n        var _ref6 = _wrapAsyncGenerator(function* (source) {\n          yield* _asyncGeneratorDelegate(_asyncIterator(map(source, key => transform.convert(key))), _awaitAsyncGenerator);\n        });\n\n        return function (_x6) {\n          return _ref6.apply(this, arguments);\n        };\n      }(), /*#__PURE__*/function () {\n        var _ref7 = _wrapAsyncGenerator(function* (source) {\n          yield* _asyncGeneratorDelegate(_asyncIterator(child.deleteMany(source, options)), _awaitAsyncGenerator);\n        });\n\n        return function (_x7) {\n          return _ref7.apply(this, arguments);\n        };\n      }(), /*#__PURE__*/function () {\n        var _ref8 = _wrapAsyncGenerator(function* (source) {\n          yield* _asyncGeneratorDelegate(_asyncIterator(map(source, key => transform.invert(key))), _awaitAsyncGenerator);\n        });\n\n        return function (_x8) {\n          return _ref8.apply(this, arguments);\n        };\n      }())), _awaitAsyncGenerator);\n    })();\n  }\n  /**\n   * @returns {Batch}\n   */\n\n\n  batch() {\n    const b = this.child.batch();\n    return {\n      put: (key, value) => {\n        b.put(this.transform.convert(key), value);\n      },\n      delete: key => {\n        b.delete(this.transform.convert(key));\n      },\n      commit: options => {\n        return b.commit(options);\n      }\n    };\n  }\n  /**\n   * @param {Query} q\n   * @param {Options} [options]\n   */\n\n\n  query(q, options) {\n    return map(this.child.query(q, options), ({\n      key,\n      value\n    }) => {\n      return {\n        key: this.transform.invert(key),\n        value\n      };\n    });\n  }\n  /**\n   * @param {KeyQuery} q\n   * @param {Options} [options]\n   */\n\n\n  queryKeys(q, options) {\n    return map(this.child.queryKeys(q, options), key => {\n      return this.transform.invert(key);\n    });\n  }\n\n  close() {\n    return this.child.close();\n  }\n\n}\n\nmodule.exports = KeyTransformDatastore;","map":null,"metadata":{},"sourceType":"script"}