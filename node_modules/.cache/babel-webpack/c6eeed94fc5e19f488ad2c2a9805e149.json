{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst {\n  isValidMultiaddr\n} = require('./utils');\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @param {Object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\n\n\nmodule.exports = ({\n  repo\n}) => {\n  /**\n   * @type {import('ipfs-core-types/src/bootstrap').API[\"rm\"]}\n   */\n  function rm(_x) {\n    return _rm.apply(this, arguments);\n  }\n\n  function _rm() {\n    _rm = _asyncToGenerator(function* (multiaddr, options = {}) {\n      if (!isValidMultiaddr(multiaddr)) {\n        throw new Error(`${multiaddr} is not a valid Multiaddr`);\n      }\n      /** @type {import('ipfs-core-types/src/config').Config} */\n      // @ts-ignore repo returns type unknown\n\n\n      const config = yield repo.config.getAll(options);\n      config.Bootstrap = (config.Bootstrap || []).filter(ma => ma.toString() !== multiaddr.toString());\n      yield repo.config.replace(config);\n      return {\n        Peers: [multiaddr]\n      };\n    });\n    return _rm.apply(this, arguments);\n  }\n\n  return withTimeoutOption(rm);\n};","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Demo/node_modules/ipfs-core/src/components/bootstrap/rm.js"],"names":["isValidMultiaddr","require","withTimeoutOption","module","exports","repo","rm","multiaddr","options","Error","config","getAll","Bootstrap","filter","ma","toString","replace","Peers"],"mappings":"AAAA;;;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAuBC,OAAO,CAAC,SAAD,CAApC;;AACA,MAAMC,iBAAiB,GAAGD,OAAO,CAAC,yCAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AACAE,MAAM,CAACC,OAAP,GAAiB,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAC7B;AACF;AACA;AAH+B,WAIdC,EAJc;AAAA;AAAA;;AAAA;AAAA,4BAI7B,WAAmBC,SAAnB,EAA8BC,OAAO,GAAG,EAAxC,EAA4C;AAC1C,UAAI,CAACR,gBAAgB,CAACO,SAAD,CAArB,EAAkC;AAChC,cAAM,IAAIE,KAAJ,CAAW,GAAEF,SAAU,2BAAvB,CAAN;AACD;AAED;AACA;;;AACA,YAAMG,MAAM,SAASL,IAAI,CAACK,MAAL,CAAYC,MAAZ,CAAmBH,OAAnB,CAArB;AACAE,MAAAA,MAAM,CAACE,SAAP,GAAmB,CAACF,MAAM,CAACE,SAAP,IAAoB,EAArB,EAAyBC,MAAzB,CAAgCC,EAAE,IAAIA,EAAE,CAACC,QAAH,OAAkBR,SAAS,CAACQ,QAAV,EAAxD,CAAnB;AAEA,YAAMV,IAAI,CAACK,MAAL,CAAYM,OAAZ,CAAoBN,MAApB,CAAN;AAEA,aAAO;AAAEO,QAAAA,KAAK,EAAE,CAACV,SAAD;AAAT,OAAP;AACD,KAjB4B;AAAA;AAAA;;AAmB7B,SAAOL,iBAAiB,CAACI,EAAD,CAAxB;AACD,CApBD","sourcesContent":["'use strict'\n\nconst { isValidMultiaddr } = require('./utils')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\n\n/**\n * @param {Object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\nmodule.exports = ({ repo }) => {\n  /**\n   * @type {import('ipfs-core-types/src/bootstrap').API[\"rm\"]}\n   */\n  async function rm (multiaddr, options = {}) {\n    if (!isValidMultiaddr(multiaddr)) {\n      throw new Error(`${multiaddr} is not a valid Multiaddr`)\n    }\n\n    /** @type {import('ipfs-core-types/src/config').Config} */\n    // @ts-ignore repo returns type unknown\n    const config = await repo.config.getAll(options)\n    config.Bootstrap = (config.Bootstrap || []).filter(ma => ma.toString() !== multiaddr.toString())\n\n    await repo.config.replace(config)\n\n    return { Peers: [multiaddr] }\n  }\n\n  return withTimeoutOption(rm)\n}\n"]},"metadata":{},"sourceType":"script"}