{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst toCamel = require('../lib/object-to-camel');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/key').API<HTTPClientExtraOptions>} KeyAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {KeyAPI[\"rename\"]}\n   */\n  function rename(_x, _x2) {\n    return _rename.apply(this, arguments);\n  }\n\n  function _rename() {\n    _rename = _asyncToGenerator(function* (oldName, newName, options = {}) {\n      const res = yield api.post('key/rename', {\n        timeout: options.timeout,\n        signal: options.signal,\n        searchParams: toUrlSearchParams({\n          arg: [oldName, newName],\n          ...options\n        }),\n        headers: options.headers\n      }); // @ts-ignore server output is not typed\n\n      return toCamel(yield res.json());\n    });\n    return _rename.apply(this, arguments);\n  }\n\n  return rename;\n});","map":{"version":3,"sources":["/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/ipfs-http-client/src/key/rename.js"],"names":["toCamel","require","configure","toUrlSearchParams","module","exports","api","rename","oldName","newName","options","res","post","timeout","signal","searchParams","arg","headers","json"],"mappings":"AAAA;;;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,wBAAD,CAAvB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,6BAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AAEAG,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAACI,GAAG,IAAI;AAChC;AACF;AACA;AAHkC,WAIjBC,MAJiB;AAAA;AAAA;;AAAA;AAAA,gCAIhC,WAAuBC,OAAvB,EAAgCC,OAAhC,EAAyCC,OAAO,GAAG,EAAnD,EAAuD;AACrD,YAAMC,GAAG,SAASL,GAAG,CAACM,IAAJ,CAAS,YAAT,EAAuB;AACvCC,QAAAA,OAAO,EAAEH,OAAO,CAACG,OADsB;AAEvCC,QAAAA,MAAM,EAAEJ,OAAO,CAACI,MAFuB;AAGvCC,QAAAA,YAAY,EAAEZ,iBAAiB,CAAC;AAC9Ba,UAAAA,GAAG,EAAE,CACHR,OADG,EAEHC,OAFG,CADyB;AAK9B,aAAGC;AAL2B,SAAD,CAHQ;AAUvCO,QAAAA,OAAO,EAAEP,OAAO,CAACO;AAVsB,OAAvB,CAAlB,CADqD,CAcrD;;AACA,aAAOjB,OAAO,OAAOW,GAAG,CAACO,IAAJ,EAAP,CAAd;AACD,KApB+B;AAAA;AAAA;;AAqBhC,SAAOX,MAAP;AACD,CAtByB,CAA1B","sourcesContent":["'use strict'\n\nconst toCamel = require('../lib/object-to-camel')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/key').API<HTTPClientExtraOptions>} KeyAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {KeyAPI[\"rename\"]}\n   */\n  async function rename (oldName, newName, options = {}) {\n    const res = await api.post('key/rename', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: [\n          oldName,\n          newName\n        ],\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    // @ts-ignore server output is not typed\n    return toCamel(await res.json())\n  }\n  return rename\n})\n"]},"metadata":{},"sourceType":"script"}