{"ast":null,"code":"'use strict';\n\nconst getTime = require('./time');\n\nclass Retimer {\n  constructor(callback, timeout, args) {\n    const that = this;\n    this._started = getTime();\n    this._rescheduled = 0;\n    this._scheduled = timeout;\n    this._args = args;\n    this._triggered = false;\n\n    this._timerWrapper = () => {\n      if (that._rescheduled > 0) {\n        that._scheduled = that._rescheduled - (getTime() - that._started);\n\n        that._schedule(that._scheduled);\n      } else {\n        that._triggered = true;\n        callback.apply(null, that._args);\n      }\n    };\n\n    this._timer = setTimeout(this._timerWrapper, timeout);\n  }\n\n  reschedule(timeout) {\n    if (!timeout) {\n      timeout = this._scheduled;\n    }\n\n    const now = getTime();\n\n    if (now + timeout - (this._started + this._scheduled) < 0) {\n      clearTimeout(this._timer);\n\n      this._schedule(timeout);\n    } else if (!this._triggered) {\n      this._started = now;\n      this._rescheduled = timeout;\n    } else {\n      this._schedule(timeout);\n    }\n  }\n\n  _schedule(timeout) {\n    this._triggered = false;\n    this._started = getTime();\n    this._rescheduled = 0;\n    this._scheduled = timeout;\n    this._timer = setTimeout(this._timerWrapper, timeout);\n  }\n\n  clear() {\n    clearTimeout(this._timer);\n  }\n\n}\n\nfunction retimer() {\n  if (typeof arguments[0] !== 'function') {\n    throw new Error('callback needed');\n  }\n\n  if (typeof arguments[1] !== 'number') {\n    throw new Error('timeout needed');\n  }\n\n  let args;\n\n  if (arguments.length > 0) {\n    args = new Array(arguments.length - 2);\n    /* eslint-disable no-var */\n\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i + 2];\n    }\n  }\n\n  return new Retimer(arguments[0], arguments[1], args);\n}\n\nmodule.exports = retimer;","map":null,"metadata":{},"sourceType":"script"}