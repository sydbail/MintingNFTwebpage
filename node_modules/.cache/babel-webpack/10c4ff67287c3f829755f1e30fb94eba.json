{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { ForkEvent, Provider } from \"@ethersproject/abstract-provider\";\nimport { Base58 } from \"@ethersproject/basex\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexConcat, hexDataLength, hexDataSlice, hexlify, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { HashZero } from \"@ethersproject/constants\";\nimport { namehash } from \"@ethersproject/hash\";\nimport { getNetwork } from \"@ethersproject/networks\";\nimport { defineReadOnly, getStatic, resolveProperties } from \"@ethersproject/properties\";\nimport { sha256 } from \"@ethersproject/sha2\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { poll } from \"@ethersproject/web\";\nimport bech32 from \"bech32\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { Formatter } from \"./formatter\"; //////////////////////////////\n// Event Serializeing\n\nfunction checkTopic(topic) {\n  if (topic == null) {\n    return \"null\";\n  }\n\n  if (hexDataLength(topic) !== 32) {\n    logger.throwArgumentError(\"invalid topic\", \"topic\", topic);\n  }\n\n  return topic.toLowerCase();\n}\n\nfunction serializeTopics(topics) {\n  // Remove trailing null AND-topics; they are redundant\n  topics = topics.slice();\n\n  while (topics.length > 0 && topics[topics.length - 1] == null) {\n    topics.pop();\n  }\n\n  return topics.map(topic => {\n    if (Array.isArray(topic)) {\n      // Only track unique OR-topics\n      const unique = {};\n      topic.forEach(topic => {\n        unique[checkTopic(topic)] = true;\n      }); // The order of OR-topics does not matter\n\n      const sorted = Object.keys(unique);\n      sorted.sort();\n      return sorted.join(\"|\");\n    } else {\n      return checkTopic(topic);\n    }\n  }).join(\"&\");\n}\n\nfunction deserializeTopics(data) {\n  if (data === \"\") {\n    return [];\n  }\n\n  return data.split(/&/g).map(topic => {\n    if (topic === \"\") {\n      return [];\n    }\n\n    const comps = topic.split(\"|\").map(topic => {\n      return topic === \"null\" ? null : topic;\n    });\n    return comps.length === 1 ? comps[0] : comps;\n  });\n}\n\nfunction getEventTag(eventName) {\n  if (typeof eventName === \"string\") {\n    eventName = eventName.toLowerCase();\n\n    if (hexDataLength(eventName) === 32) {\n      return \"tx:\" + eventName;\n    }\n\n    if (eventName.indexOf(\":\") === -1) {\n      return eventName;\n    }\n  } else if (Array.isArray(eventName)) {\n    return \"filter:*:\" + serializeTopics(eventName);\n  } else if (ForkEvent.isForkEvent(eventName)) {\n    logger.warn(\"not implemented\");\n    throw new Error(\"not implemented\");\n  } else if (eventName && typeof eventName === \"object\") {\n    return \"filter:\" + (eventName.address || \"*\") + \":\" + serializeTopics(eventName.topics || []);\n  }\n\n  throw new Error(\"invalid event - \" + eventName);\n} //////////////////////////////\n// Helper Object\n\n\nfunction getTime() {\n  return new Date().getTime();\n}\n\nfunction stall(duration) {\n  return new Promise(resolve => {\n    setTimeout(resolve, duration);\n  });\n} //////////////////////////////\n// Provider Object\n\n/**\n *  EventType\n *   - \"block\"\n *   - \"poll\"\n *   - \"didPoll\"\n *   - \"pending\"\n *   - \"error\"\n *   - \"network\"\n *   - filter\n *   - topics array\n *   - transaction hash\n */\n\n\nconst PollableEvents = [\"block\", \"network\", \"pending\", \"poll\"];\nexport class Event {\n  constructor(tag, listener, once) {\n    defineReadOnly(this, \"tag\", tag);\n    defineReadOnly(this, \"listener\", listener);\n    defineReadOnly(this, \"once\", once);\n  }\n\n  get event() {\n    switch (this.type) {\n      case \"tx\":\n        return this.hash;\n\n      case \"filter\":\n        return this.filter;\n    }\n\n    return this.tag;\n  }\n\n  get type() {\n    return this.tag.split(\":\")[0];\n  }\n\n  get hash() {\n    const comps = this.tag.split(\":\");\n\n    if (comps[0] !== \"tx\") {\n      return null;\n    }\n\n    return comps[1];\n  }\n\n  get filter() {\n    const comps = this.tag.split(\":\");\n\n    if (comps[0] !== \"filter\") {\n      return null;\n    }\n\n    const address = comps[1];\n    const topics = deserializeTopics(comps[2]);\n    const filter = {};\n\n    if (topics.length > 0) {\n      filter.topics = topics;\n    }\n\n    if (address && address !== \"*\") {\n      filter.address = address;\n    }\n\n    return filter;\n  }\n\n  pollable() {\n    return this.tag.indexOf(\":\") >= 0 || PollableEvents.indexOf(this.tag) >= 0;\n  }\n\n}\n; // https://github.com/satoshilabs/slips/blob/master/slip-0044.md\n\nconst coinInfos = {\n  \"0\": {\n    symbol: \"btc\",\n    p2pkh: 0x00,\n    p2sh: 0x05,\n    prefix: \"bc\"\n  },\n  \"2\": {\n    symbol: \"ltc\",\n    p2pkh: 0x30,\n    p2sh: 0x32,\n    prefix: \"ltc\"\n  },\n  \"3\": {\n    symbol: \"doge\",\n    p2pkh: 0x1e,\n    p2sh: 0x16\n  },\n  \"60\": {\n    symbol: \"eth\",\n    ilk: \"eth\"\n  },\n  \"61\": {\n    symbol: \"etc\",\n    ilk: \"eth\"\n  },\n  \"700\": {\n    symbol: \"xdai\",\n    ilk: \"eth\"\n  }\n};\n\nfunction bytes32ify(value) {\n  return hexZeroPad(BigNumber.from(value).toHexString(), 32);\n} // Compute the Base58Check encoded data (checksum is first 4 bytes of sha256d)\n\n\nfunction base58Encode(data) {\n  return Base58.encode(concat([data, hexDataSlice(sha256(sha256(data)), 0, 4)]));\n}\n\nexport class Resolver {\n  constructor(provider, address, name) {\n    defineReadOnly(this, \"provider\", provider);\n    defineReadOnly(this, \"name\", name);\n    defineReadOnly(this, \"address\", provider.formatter.address(address));\n  }\n\n  _fetchBytes(selector, parameters) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // keccak256(\"addr(bytes32,uint256)\")\n      const transaction = {\n        to: this.address,\n        data: hexConcat([selector, namehash(this.name), parameters || \"0x\"])\n      };\n\n      try {\n        const result = yield this.provider.call(transaction);\n\n        if (result === \"0x\") {\n          return null;\n        }\n\n        const offset = BigNumber.from(hexDataSlice(result, 0, 32)).toNumber();\n        const length = BigNumber.from(hexDataSlice(result, offset, offset + 32)).toNumber();\n        return hexDataSlice(result, offset + 32, offset + 32 + length);\n      } catch (error) {\n        if (error.code === Logger.errors.CALL_EXCEPTION) {\n          return null;\n        }\n\n        return null;\n      }\n    });\n  }\n\n  _getAddress(coinType, hexBytes) {\n    const coinInfo = coinInfos[String(coinType)];\n\n    if (coinInfo == null) {\n      logger.throwError(`unsupported coin type: ${coinType}`, Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: `getAddress(${coinType})`\n      });\n    }\n\n    if (coinInfo.ilk === \"eth\") {\n      return this.provider.formatter.address(hexBytes);\n    }\n\n    const bytes = arrayify(hexBytes); // P2PKH: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG\n\n    if (coinInfo.p2pkh != null) {\n      const p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);\n\n      if (p2pkh) {\n        const length = parseInt(p2pkh[1], 16);\n\n        if (p2pkh[2].length === length * 2 && length >= 1 && length <= 75) {\n          return base58Encode(concat([[coinInfo.p2pkh], \"0x\" + p2pkh[2]]));\n        }\n      }\n    } // P2SH: OP_HASH160 <scriptHash> OP_EQUAL\n\n\n    if (coinInfo.p2sh != null) {\n      const p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);\n\n      if (p2sh) {\n        const length = parseInt(p2sh[1], 16);\n\n        if (p2sh[2].length === length * 2 && length >= 1 && length <= 75) {\n          return base58Encode(concat([[coinInfo.p2sh], \"0x\" + p2sh[2]]));\n        }\n      }\n    } // Bech32\n\n\n    if (coinInfo.prefix != null) {\n      const length = bytes[1]; // https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#witness-program\n\n      let version = bytes[0];\n\n      if (version === 0x00) {\n        if (length !== 20 && length !== 32) {\n          version = -1;\n        }\n      } else {\n        version = -1;\n      }\n\n      if (version >= 0 && bytes.length === 2 + length && length >= 1 && length <= 75) {\n        const words = bech32.toWords(bytes.slice(2));\n        words.unshift(version);\n        return bech32.encode(coinInfo.prefix, words);\n      }\n    }\n\n    return null;\n  }\n\n  getAddress(coinType) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (coinType == null) {\n        coinType = 60;\n      } // If Ethereum, use the standard `addr(bytes32)`\n\n\n      if (coinType === 60) {\n        try {\n          // keccak256(\"addr(bytes32)\")\n          const transaction = {\n            to: this.address,\n            data: \"0x3b3b57de\" + namehash(this.name).substring(2)\n          };\n          const hexBytes = yield this.provider.call(transaction); // No address\n\n          if (hexBytes === \"0x\" || hexBytes === HashZero) {\n            return null;\n          }\n\n          return this.provider.formatter.callAddress(hexBytes);\n        } catch (error) {\n          if (error.code === Logger.errors.CALL_EXCEPTION) {\n            return null;\n          }\n\n          throw error;\n        }\n      } // keccak256(\"addr(bytes32,uint256\")\n\n\n      const hexBytes = yield this._fetchBytes(\"0xf1cb7e06\", bytes32ify(coinType)); // No address\n\n      if (hexBytes == null || hexBytes === \"0x\") {\n        return null;\n      } // Compute the address\n\n\n      const address = this._getAddress(coinType, hexBytes);\n\n      if (address == null) {\n        logger.throwError(`invalid or unsupported coin data`, Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: `getAddress(${coinType})`,\n          coinType: coinType,\n          data: hexBytes\n        });\n      }\n\n      return address;\n    });\n  }\n\n  getContentHash() {\n    return __awaiter(this, void 0, void 0, function* () {\n      // keccak256(\"contenthash()\")\n      const hexBytes = yield this._fetchBytes(\"0xbc1c58d1\"); // No contenthash\n\n      if (hexBytes == null || hexBytes === \"0x\") {\n        return null;\n      } // IPFS (CID: 1, Type: DAG-PB)\n\n\n      const ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n\n      if (ipfs) {\n        const length = parseInt(ipfs[3], 16);\n\n        if (ipfs[4].length === length * 2) {\n          return \"ipfs:/\\/\" + Base58.encode(\"0x\" + ipfs[1]);\n        }\n      } // Swarm (CID: 1, Type: swarm-manifest; hash/length hard-coded to keccak256/32)\n\n\n      const swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/);\n\n      if (swarm) {\n        if (swarm[1].length === 32 * 2) {\n          return \"bzz:/\\/\" + swarm[1];\n        }\n      }\n\n      return logger.throwError(`invalid or unsupported content hash data`, Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"getContentHash()\",\n        data: hexBytes\n      });\n    });\n  }\n\n  getText(key) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // The key encoded as parameter to fetchBytes\n      let keyBytes = toUtf8Bytes(key); // The nodehash consumes the first slot, so the string pointer targets\n      // offset 64, with the length at offset 64 and data starting at offset 96\n\n      keyBytes = concat([bytes32ify(64), bytes32ify(keyBytes.length), keyBytes]); // Pad to word-size (32 bytes)\n\n      if (keyBytes.length % 32 !== 0) {\n        keyBytes = concat([keyBytes, hexZeroPad(\"0x\", 32 - key.length % 32)]);\n      }\n\n      const hexBytes = yield this._fetchBytes(\"0x59d1d43c\", hexlify(keyBytes));\n\n      if (hexBytes == null || hexBytes === \"0x\") {\n        return null;\n      }\n\n      return toUtf8String(hexBytes);\n    });\n  }\n\n}\nlet defaultFormatter = null;\nlet nextPollId = 1;\nexport class BaseProvider extends Provider {\n  /**\n   *  ready\n   *\n   *  A Promise<Network> that resolves only once the provider is ready.\n   *\n   *  Sub-classes that call the super with a network without a chainId\n   *  MUST set this. Standard named networks have a known chainId.\n   *\n   */\n  constructor(network) {\n    logger.checkNew(new.target, Provider);\n    super(); // Events being listened to\n\n    this._events = [];\n    this._emitted = {\n      block: -2\n    };\n    this.formatter = new.target.getFormatter(); // If network is any, this Provider allows the underlying\n    // network to change dynamically, and we auto-detect the\n    // current network\n\n    defineReadOnly(this, \"anyNetwork\", network === \"any\");\n\n    if (this.anyNetwork) {\n      network = this.detectNetwork();\n    }\n\n    if (network instanceof Promise) {\n      this._networkPromise = network; // Squash any \"unhandled promise\" errors; that do not need to be handled\n\n      network.catch(error => {}); // Trigger initial network setting (async)\n\n      this._ready().catch(error => {});\n    } else {\n      const knownNetwork = getStatic(new.target, \"getNetwork\")(network);\n\n      if (knownNetwork) {\n        defineReadOnly(this, \"_network\", knownNetwork);\n        this.emit(\"network\", knownNetwork, null);\n      } else {\n        logger.throwArgumentError(\"invalid network\", \"network\", network);\n      }\n    }\n\n    this._maxInternalBlockNumber = -1024;\n    this._lastBlockNumber = -2;\n    this._pollingInterval = 4000;\n    this._fastQueryDate = 0;\n  }\n\n  _ready() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this._network == null) {\n        let network = null;\n\n        if (this._networkPromise) {\n          try {\n            network = yield this._networkPromise;\n          } catch (error) {}\n        } // Try the Provider's network detection (this MUST throw if it cannot)\n\n\n        if (network == null) {\n          network = yield this.detectNetwork();\n        } // This should never happen; every Provider sub-class should have\n        // suggested a network by here (or have thrown).\n\n\n        if (!network) {\n          logger.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, {});\n        } // Possible this call stacked so do not call defineReadOnly again\n\n\n        if (this._network == null) {\n          if (this.anyNetwork) {\n            this._network = network;\n          } else {\n            defineReadOnly(this, \"_network\", network);\n          }\n\n          this.emit(\"network\", network, null);\n        }\n      }\n\n      return this._network;\n    });\n  } // This will always return the most recently established network.\n  // For \"any\", this can change (a \"network\" event is emitted before\n  // any change is refelcted); otherwise this cannot change\n\n\n  get ready() {\n    return poll(() => {\n      return this._ready().then(network => {\n        return network;\n      }, error => {\n        // If the network isn't running yet, we will wait\n        if (error.code === Logger.errors.NETWORK_ERROR && error.event === \"noNetwork\") {\n          return undefined;\n        }\n\n        throw error;\n      });\n    });\n  } // @TODO: Remove this and just create a singleton formatter\n\n\n  static getFormatter() {\n    if (defaultFormatter == null) {\n      defaultFormatter = new Formatter();\n    }\n\n    return defaultFormatter;\n  } // @TODO: Remove this and just use getNetwork\n\n\n  static getNetwork(network) {\n    return getNetwork(network == null ? \"homestead\" : network);\n  } // Fetches the blockNumber, but will reuse any result that is less\n  // than maxAge old or has been requested since the last request\n\n\n  _getInternalBlockNumber(maxAge) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this._ready(); // Allowing stale data up to maxAge old\n\n      if (maxAge > 0) {\n        // While there are pending internal block requests...\n        while (this._internalBlockNumber) {\n          // ...\"remember\" which fetch we started with\n          const internalBlockNumber = this._internalBlockNumber;\n\n          try {\n            // Check the result is not too stale\n            const result = yield internalBlockNumber;\n\n            if (getTime() - result.respTime <= maxAge) {\n              return result.blockNumber;\n            } // Too old; fetch a new value\n\n\n            break;\n          } catch (error) {\n            // The fetch rejected; if we are the first to get the\n            // rejection, drop through so we replace it with a new\n            // fetch; all others blocked will then get that fetch\n            // which won't match the one they \"remembered\" and loop\n            if (this._internalBlockNumber === internalBlockNumber) {\n              break;\n            }\n          }\n        }\n      }\n\n      const reqTime = getTime();\n      const checkInternalBlockNumber = resolveProperties({\n        blockNumber: this.perform(\"getBlockNumber\", {}),\n        networkError: this.getNetwork().then(network => null, error => error)\n      }).then(({\n        blockNumber,\n        networkError\n      }) => {\n        if (networkError) {\n          // Unremember this bad internal block number\n          if (this._internalBlockNumber === checkInternalBlockNumber) {\n            this._internalBlockNumber = null;\n          }\n\n          throw networkError;\n        }\n\n        const respTime = getTime();\n        blockNumber = BigNumber.from(blockNumber).toNumber();\n\n        if (blockNumber < this._maxInternalBlockNumber) {\n          blockNumber = this._maxInternalBlockNumber;\n        }\n\n        this._maxInternalBlockNumber = blockNumber;\n\n        this._setFastBlockNumber(blockNumber); // @TODO: Still need this?\n\n\n        return {\n          blockNumber,\n          reqTime,\n          respTime\n        };\n      });\n      this._internalBlockNumber = checkInternalBlockNumber; // Swallow unhandled exceptions; if needed they are handled else where\n\n      checkInternalBlockNumber.catch(error => {\n        // Don't null the dead (rejected) fetch, if it has already been updated\n        if (this._internalBlockNumber === checkInternalBlockNumber) {\n          this._internalBlockNumber = null;\n        }\n      });\n      return (yield checkInternalBlockNumber).blockNumber;\n    });\n  }\n\n  poll() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const pollId = nextPollId++; // Track all running promises, so we can trigger a post-poll once they are complete\n\n      const runners = [];\n      let blockNumber = null;\n\n      try {\n        blockNumber = yield this._getInternalBlockNumber(100 + this.pollingInterval / 2);\n      } catch (error) {\n        this.emit(\"error\", error);\n        return;\n      }\n\n      this._setFastBlockNumber(blockNumber); // Emit a poll event after we have the latest (fast) block number\n\n\n      this.emit(\"poll\", pollId, blockNumber); // If the block has not changed, meh.\n\n      if (blockNumber === this._lastBlockNumber) {\n        this.emit(\"didPoll\", pollId);\n        return;\n      } // First polling cycle, trigger a \"block\" events\n\n\n      if (this._emitted.block === -2) {\n        this._emitted.block = blockNumber - 1;\n      }\n\n      if (Math.abs(this._emitted.block - blockNumber) > 1000) {\n        logger.warn(`network block skew detected; skipping block events (emitted=${this._emitted.block} blockNumber${blockNumber})`);\n        this.emit(\"error\", logger.makeError(\"network block skew detected\", Logger.errors.NETWORK_ERROR, {\n          blockNumber: blockNumber,\n          event: \"blockSkew\",\n          previousBlockNumber: this._emitted.block\n        }));\n        this.emit(\"block\", blockNumber);\n      } else {\n        // Notify all listener for each block that has passed\n        for (let i = this._emitted.block + 1; i <= blockNumber; i++) {\n          this.emit(\"block\", i);\n        }\n      } // The emitted block was updated, check for obsolete events\n\n\n      if (this._emitted.block !== blockNumber) {\n        this._emitted.block = blockNumber;\n        Object.keys(this._emitted).forEach(key => {\n          // The block event does not expire\n          if (key === \"block\") {\n            return;\n          } // The block we were at when we emitted this event\n\n\n          const eventBlockNumber = this._emitted[key]; // We cannot garbage collect pending transactions or blocks here\n          // They should be garbage collected by the Provider when setting\n          // \"pending\" events\n\n          if (eventBlockNumber === \"pending\") {\n            return;\n          } // Evict any transaction hashes or block hashes over 12 blocks\n          // old, since they should not return null anyways\n\n\n          if (blockNumber - eventBlockNumber > 12) {\n            delete this._emitted[key];\n          }\n        });\n      } // First polling cycle\n\n\n      if (this._lastBlockNumber === -2) {\n        this._lastBlockNumber = blockNumber - 1;\n      } // Find all transaction hashes we are waiting on\n\n\n      this._events.forEach(event => {\n        switch (event.type) {\n          case \"tx\":\n            {\n              const hash = event.hash;\n              let runner = this.getTransactionReceipt(hash).then(receipt => {\n                if (!receipt || receipt.blockNumber == null) {\n                  return null;\n                }\n\n                this._emitted[\"t:\" + hash] = receipt.blockNumber;\n                this.emit(hash, receipt);\n                return null;\n              }).catch(error => {\n                this.emit(\"error\", error);\n              });\n              runners.push(runner);\n              break;\n            }\n\n          case \"filter\":\n            {\n              const filter = event.filter;\n              filter.fromBlock = this._lastBlockNumber + 1;\n              filter.toBlock = blockNumber;\n              const runner = this.getLogs(filter).then(logs => {\n                if (logs.length === 0) {\n                  return;\n                }\n\n                logs.forEach(log => {\n                  this._emitted[\"b:\" + log.blockHash] = log.blockNumber;\n                  this._emitted[\"t:\" + log.transactionHash] = log.blockNumber;\n                  this.emit(filter, log);\n                });\n              }).catch(error => {\n                this.emit(\"error\", error);\n              });\n              runners.push(runner);\n              break;\n            }\n        }\n      });\n\n      this._lastBlockNumber = blockNumber; // Once all events for this loop have been processed, emit \"didPoll\"\n\n      Promise.all(runners).then(() => {\n        this.emit(\"didPoll\", pollId);\n      }).catch(error => {\n        this.emit(\"error\", error);\n      });\n      return;\n    });\n  } // Deprecated; do not use this\n\n\n  resetEventsBlock(blockNumber) {\n    this._lastBlockNumber = blockNumber - 1;\n\n    if (this.polling) {\n      this.poll();\n    }\n  }\n\n  get network() {\n    return this._network;\n  } // This method should query the network if the underlying network\n  // can change, such as when connected to a JSON-RPC backend\n\n\n  detectNetwork() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return logger.throwError(\"provider does not support network detection\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"provider.detectNetwork\"\n      });\n    });\n  }\n\n  getNetwork() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const network = yield this._ready(); // Make sure we are still connected to the same network; this is\n      // only an external call for backends which can have the underlying\n      // network change spontaneously\n\n      const currentNetwork = yield this.detectNetwork();\n\n      if (network.chainId !== currentNetwork.chainId) {\n        // We are allowing network changes, things can get complex fast;\n        // make sure you know what you are doing if you use \"any\"\n        if (this.anyNetwork) {\n          this._network = currentNetwork; // Reset all internal block number guards and caches\n\n          this._lastBlockNumber = -2;\n          this._fastBlockNumber = null;\n          this._fastBlockNumberPromise = null;\n          this._fastQueryDate = 0;\n          this._emitted.block = -2;\n          this._maxInternalBlockNumber = -1024;\n          this._internalBlockNumber = null; // The \"network\" event MUST happen before this method resolves\n          // so any events have a chance to unregister, so we stall an\n          // additional event loop before returning from /this/ call\n\n          this.emit(\"network\", currentNetwork, network);\n          yield stall(0);\n          return this._network;\n        }\n\n        const error = logger.makeError(\"underlying network changed\", Logger.errors.NETWORK_ERROR, {\n          event: \"changed\",\n          network: network,\n          detectedNetwork: currentNetwork\n        });\n        this.emit(\"error\", error);\n        throw error;\n      }\n\n      return network;\n    });\n  }\n\n  get blockNumber() {\n    this._getInternalBlockNumber(100 + this.pollingInterval / 2).then(blockNumber => {\n      this._setFastBlockNumber(blockNumber);\n    }, error => {});\n\n    return this._fastBlockNumber != null ? this._fastBlockNumber : -1;\n  }\n\n  get polling() {\n    return this._poller != null;\n  }\n\n  set polling(value) {\n    if (value && !this._poller) {\n      this._poller = setInterval(() => {\n        this.poll();\n      }, this.pollingInterval);\n\n      if (!this._bootstrapPoll) {\n        this._bootstrapPoll = setTimeout(() => {\n          this.poll(); // We block additional polls until the polling interval\n          // is done, to prevent overwhelming the poll function\n\n          this._bootstrapPoll = setTimeout(() => {\n            // If polling was disabled, something may require a poke\n            // since starting the bootstrap poll and it was disabled\n            if (!this._poller) {\n              this.poll();\n            } // Clear out the bootstrap so we can do another\n\n\n            this._bootstrapPoll = null;\n          }, this.pollingInterval);\n        }, 0);\n      }\n    } else if (!value && this._poller) {\n      clearInterval(this._poller);\n      this._poller = null;\n    }\n  }\n\n  get pollingInterval() {\n    return this._pollingInterval;\n  }\n\n  set pollingInterval(value) {\n    if (typeof value !== \"number\" || value <= 0 || parseInt(String(value)) != value) {\n      throw new Error(\"invalid polling interval\");\n    }\n\n    this._pollingInterval = value;\n\n    if (this._poller) {\n      clearInterval(this._poller);\n      this._poller = setInterval(() => {\n        this.poll();\n      }, this._pollingInterval);\n    }\n  }\n\n  _getFastBlockNumber() {\n    const now = getTime(); // Stale block number, request a newer value\n\n    if (now - this._fastQueryDate > 2 * this._pollingInterval) {\n      this._fastQueryDate = now;\n      this._fastBlockNumberPromise = this.getBlockNumber().then(blockNumber => {\n        if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n          this._fastBlockNumber = blockNumber;\n        }\n\n        return this._fastBlockNumber;\n      });\n    }\n\n    return this._fastBlockNumberPromise;\n  }\n\n  _setFastBlockNumber(blockNumber) {\n    // Older block, maybe a stale request\n    if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) {\n      return;\n    } // Update the time we updated the blocknumber\n\n\n    this._fastQueryDate = getTime(); // Newer block number, use  it\n\n    if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n      this._fastBlockNumber = blockNumber;\n      this._fastBlockNumberPromise = Promise.resolve(blockNumber);\n    }\n  }\n\n  waitForTransaction(transactionHash, confirmations, timeout) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this._waitForTransaction(transactionHash, confirmations == null ? 1 : confirmations, timeout || 0, null);\n    });\n  }\n\n  _waitForTransaction(transactionHash, confirmations, timeout, replaceable) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const receipt = yield this.getTransactionReceipt(transactionHash); // Receipt is already good\n\n      if ((receipt ? receipt.confirmations : 0) >= confirmations) {\n        return receipt;\n      } // Poll until the receipt is good...\n\n\n      return new Promise((resolve, reject) => {\n        const cancelFuncs = [];\n        let done = false;\n\n        const alreadyDone = function () {\n          if (done) {\n            return true;\n          }\n\n          done = true;\n          cancelFuncs.forEach(func => {\n            func();\n          });\n          return false;\n        };\n\n        const minedHandler = receipt => {\n          if (receipt.confirmations < confirmations) {\n            return;\n          }\n\n          if (alreadyDone()) {\n            return;\n          }\n\n          resolve(receipt);\n        };\n\n        this.on(transactionHash, minedHandler);\n        cancelFuncs.push(() => {\n          this.removeListener(transactionHash, minedHandler);\n        });\n\n        if (replaceable) {\n          let lastBlockNumber = replaceable.startBlock;\n          let scannedBlock = null;\n\n          const replaceHandler = blockNumber => __awaiter(this, void 0, void 0, function* () {\n            if (done) {\n              return;\n            } // Wait 1 second; this is only used in the case of a fault, so\n            // we will trade off a little bit of latency for more consistent\n            // results and fewer JSON-RPC calls\n\n\n            yield stall(1000);\n            this.getTransactionCount(replaceable.from).then(nonce => __awaiter(this, void 0, void 0, function* () {\n              if (done) {\n                return;\n              }\n\n              if (nonce <= replaceable.nonce) {\n                lastBlockNumber = blockNumber;\n              } else {\n                // First check if the transaction was mined\n                {\n                  const mined = yield this.getTransaction(transactionHash);\n\n                  if (mined && mined.blockNumber != null) {\n                    return;\n                  }\n                } // First time scanning. We start a little earlier for some\n                // wiggle room here to handle the eventually consistent nature\n                // of blockchain (e.g. the getTransactionCount was for a\n                // different block)\n\n                if (scannedBlock == null) {\n                  scannedBlock = lastBlockNumber - 3;\n\n                  if (scannedBlock < replaceable.startBlock) {\n                    scannedBlock = replaceable.startBlock;\n                  }\n                }\n\n                while (scannedBlock <= blockNumber) {\n                  if (done) {\n                    return;\n                  }\n\n                  const block = yield this.getBlockWithTransactions(scannedBlock);\n\n                  for (let ti = 0; ti < block.transactions.length; ti++) {\n                    const tx = block.transactions[ti]; // Successfully mined!\n\n                    if (tx.hash === transactionHash) {\n                      return;\n                    } // Matches our transaction from and nonce; its a replacement\n\n\n                    if (tx.from === replaceable.from && tx.nonce === replaceable.nonce) {\n                      if (done) {\n                        return;\n                      } // Get the receipt of the replacement\n\n\n                      const receipt = yield this.waitForTransaction(tx.hash, confirmations); // Already resolved or rejected (prolly a timeout)\n\n                      if (alreadyDone()) {\n                        return;\n                      } // The reason we were replaced\n\n\n                      let reason = \"replaced\";\n\n                      if (tx.data === replaceable.data && tx.to === replaceable.to && tx.value.eq(replaceable.value)) {\n                        reason = \"repriced\";\n                      } else if (tx.data === \"0x\" && tx.from === tx.to && tx.value.isZero()) {\n                        reason = \"cancelled\";\n                      } // Explain why we were replaced\n\n\n                      reject(logger.makeError(\"transaction was replaced\", Logger.errors.TRANSACTION_REPLACED, {\n                        cancelled: reason === \"replaced\" || reason === \"cancelled\",\n                        reason,\n                        replacement: this._wrapTransaction(tx),\n                        hash: transactionHash,\n                        receipt\n                      }));\n                      return;\n                    }\n                  }\n\n                  scannedBlock++;\n                }\n              }\n\n              if (done) {\n                return;\n              }\n\n              this.once(\"block\", replaceHandler);\n            }), error => {\n              if (done) {\n                return;\n              }\n\n              this.once(\"block\", replaceHandler);\n            });\n          });\n\n          if (done) {\n            return;\n          }\n\n          this.once(\"block\", replaceHandler);\n          cancelFuncs.push(() => {\n            this.removeListener(\"block\", replaceHandler);\n          });\n        }\n\n        if (typeof timeout === \"number\" && timeout > 0) {\n          const timer = setTimeout(() => {\n            if (alreadyDone()) {\n              return;\n            }\n\n            reject(logger.makeError(\"timeout exceeded\", Logger.errors.TIMEOUT, {\n              timeout: timeout\n            }));\n          }, timeout);\n\n          if (timer.unref) {\n            timer.unref();\n          }\n\n          cancelFuncs.push(() => {\n            clearTimeout(timer);\n          });\n        }\n      });\n    });\n  }\n\n  getBlockNumber() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this._getInternalBlockNumber(0);\n    });\n  }\n\n  getGasPrice() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const result = yield this.perform(\"getGasPrice\", {});\n\n      try {\n        return BigNumber.from(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"getGasPrice\",\n          result,\n          error\n        });\n      }\n    });\n  }\n\n  getBalance(addressOrName, blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        address: this._getAddress(addressOrName),\n        blockTag: this._getBlockTag(blockTag)\n      });\n      const result = yield this.perform(\"getBalance\", params);\n\n      try {\n        return BigNumber.from(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"getBalance\",\n          params,\n          result,\n          error\n        });\n      }\n    });\n  }\n\n  getTransactionCount(addressOrName, blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        address: this._getAddress(addressOrName),\n        blockTag: this._getBlockTag(blockTag)\n      });\n      const result = yield this.perform(\"getTransactionCount\", params);\n\n      try {\n        return BigNumber.from(result).toNumber();\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"getTransactionCount\",\n          params,\n          result,\n          error\n        });\n      }\n    });\n  }\n\n  getCode(addressOrName, blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        address: this._getAddress(addressOrName),\n        blockTag: this._getBlockTag(blockTag)\n      });\n      const result = yield this.perform(\"getCode\", params);\n\n      try {\n        return hexlify(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"getCode\",\n          params,\n          result,\n          error\n        });\n      }\n    });\n  }\n\n  getStorageAt(addressOrName, position, blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        address: this._getAddress(addressOrName),\n        blockTag: this._getBlockTag(blockTag),\n        position: Promise.resolve(position).then(p => hexValue(p))\n      });\n      const result = yield this.perform(\"getStorageAt\", params);\n\n      try {\n        return hexlify(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"getStorageAt\",\n          params,\n          result,\n          error\n        });\n      }\n    });\n  } // This should be called by any subclass wrapping a TransactionResponse\n\n\n  _wrapTransaction(tx, hash, startBlock) {\n    if (hash != null && hexDataLength(hash) !== 32) {\n      throw new Error(\"invalid response - sendTransaction\");\n    }\n\n    const result = tx; // Check the hash we expect is the same as the hash the server reported\n\n    if (hash != null && tx.hash !== hash) {\n      logger.throwError(\"Transaction hash mismatch from Provider.sendTransaction.\", Logger.errors.UNKNOWN_ERROR, {\n        expectedHash: tx.hash,\n        returnedHash: hash\n      });\n    }\n\n    result.wait = (confirms, timeout) => __awaiter(this, void 0, void 0, function* () {\n      if (confirms == null) {\n        confirms = 1;\n      }\n\n      if (timeout == null) {\n        timeout = 0;\n      } // Get the details to detect replacement\n\n\n      let replacement = undefined;\n\n      if (confirms !== 0 && startBlock != null) {\n        replacement = {\n          data: tx.data,\n          from: tx.from,\n          nonce: tx.nonce,\n          to: tx.to,\n          value: tx.value,\n          startBlock\n        };\n      }\n\n      const receipt = yield this._waitForTransaction(tx.hash, confirms, timeout, replacement);\n\n      if (receipt == null && confirms === 0) {\n        return null;\n      } // No longer pending, allow the polling loop to garbage collect this\n\n\n      this._emitted[\"t:\" + tx.hash] = receipt.blockNumber;\n\n      if (receipt.status === 0) {\n        logger.throwError(\"transaction failed\", Logger.errors.CALL_EXCEPTION, {\n          transactionHash: tx.hash,\n          transaction: tx,\n          receipt: receipt\n        });\n      }\n\n      return receipt;\n    });\n\n    return result;\n  }\n\n  sendTransaction(signedTransaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const hexTx = yield Promise.resolve(signedTransaction).then(t => hexlify(t));\n      const tx = this.formatter.transaction(signedTransaction);\n\n      if (tx.confirmations == null) {\n        tx.confirmations = 0;\n      }\n\n      const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n\n      try {\n        const hash = yield this.perform(\"sendTransaction\", {\n          signedTransaction: hexTx\n        });\n        return this._wrapTransaction(tx, hash, blockNumber);\n      } catch (error) {\n        error.transaction = tx;\n        error.transactionHash = tx.hash;\n        throw error;\n      }\n    });\n  }\n\n  _getTransactionRequest(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const values = yield transaction;\n      const tx = {};\n      [\"from\", \"to\"].forEach(key => {\n        if (values[key] == null) {\n          return;\n        }\n\n        tx[key] = Promise.resolve(values[key]).then(v => v ? this._getAddress(v) : null);\n      });\n      [\"gasLimit\", \"gasPrice\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"value\"].forEach(key => {\n        if (values[key] == null) {\n          return;\n        }\n\n        tx[key] = Promise.resolve(values[key]).then(v => v ? BigNumber.from(v) : null);\n      });\n      [\"type\"].forEach(key => {\n        if (values[key] == null) {\n          return;\n        }\n\n        tx[key] = Promise.resolve(values[key]).then(v => v != null ? v : null);\n      });\n\n      if (values.accessList) {\n        tx.accessList = this.formatter.accessList(values.accessList);\n      }\n\n      [\"data\"].forEach(key => {\n        if (values[key] == null) {\n          return;\n        }\n\n        tx[key] = Promise.resolve(values[key]).then(v => v ? hexlify(v) : null);\n      });\n      return this.formatter.transactionRequest(yield resolveProperties(tx));\n    });\n  }\n\n  _getFilter(filter) {\n    return __awaiter(this, void 0, void 0, function* () {\n      filter = yield filter;\n      const result = {};\n\n      if (filter.address != null) {\n        result.address = this._getAddress(filter.address);\n      }\n\n      [\"blockHash\", \"topics\"].forEach(key => {\n        if (filter[key] == null) {\n          return;\n        }\n\n        result[key] = filter[key];\n      });\n      [\"fromBlock\", \"toBlock\"].forEach(key => {\n        if (filter[key] == null) {\n          return;\n        }\n\n        result[key] = this._getBlockTag(filter[key]);\n      });\n      return this.formatter.filter(yield resolveProperties(result));\n    });\n  }\n\n  call(transaction, blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        transaction: this._getTransactionRequest(transaction),\n        blockTag: this._getBlockTag(blockTag)\n      });\n      const result = yield this.perform(\"call\", params);\n\n      try {\n        return hexlify(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"call\",\n          params,\n          result,\n          error\n        });\n      }\n    });\n  }\n\n  estimateGas(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        transaction: this._getTransactionRequest(transaction)\n      });\n      const result = yield this.perform(\"estimateGas\", params);\n\n      try {\n        return BigNumber.from(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"estimateGas\",\n          params,\n          result,\n          error\n        });\n      }\n    });\n  }\n\n  _getAddress(addressOrName) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const address = yield this.resolveName(addressOrName);\n\n      if (address == null) {\n        logger.throwError(\"ENS name not configured\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: `resolveName(${JSON.stringify(addressOrName)})`\n        });\n      }\n\n      return address;\n    });\n  }\n\n  _getBlock(blockHashOrBlockTag, includeTransactions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      blockHashOrBlockTag = yield blockHashOrBlockTag; // If blockTag is a number (not \"latest\", etc), this is the block number\n\n      let blockNumber = -128;\n      const params = {\n        includeTransactions: !!includeTransactions\n      };\n\n      if (isHexString(blockHashOrBlockTag, 32)) {\n        params.blockHash = blockHashOrBlockTag;\n      } else {\n        try {\n          params.blockTag = this.formatter.blockTag(yield this._getBlockTag(blockHashOrBlockTag));\n\n          if (isHexString(params.blockTag)) {\n            blockNumber = parseInt(params.blockTag.substring(2), 16);\n          }\n        } catch (error) {\n          logger.throwArgumentError(\"invalid block hash or block tag\", \"blockHashOrBlockTag\", blockHashOrBlockTag);\n        }\n      }\n\n      return poll(() => __awaiter(this, void 0, void 0, function* () {\n        const block = yield this.perform(\"getBlock\", params); // Block was not found\n\n        if (block == null) {\n          // For blockhashes, if we didn't say it existed, that blockhash may\n          // not exist. If we did see it though, perhaps from a log, we know\n          // it exists, and this node is just not caught up yet.\n          if (params.blockHash != null) {\n            if (this._emitted[\"b:\" + params.blockHash] == null) {\n              return null;\n            }\n          } // For block tags, if we are asking for a future block, we return null\n\n\n          if (params.blockTag != null) {\n            if (blockNumber > this._emitted.block) {\n              return null;\n            }\n          } // Retry on the next block\n\n\n          return undefined;\n        } // Add transactions\n\n\n        if (includeTransactions) {\n          let blockNumber = null;\n\n          for (let i = 0; i < block.transactions.length; i++) {\n            const tx = block.transactions[i];\n\n            if (tx.blockNumber == null) {\n              tx.confirmations = 0;\n            } else if (tx.confirmations == null) {\n              if (blockNumber == null) {\n                blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n              } // Add the confirmations using the fast block number (pessimistic)\n\n\n              let confirmations = blockNumber - tx.blockNumber + 1;\n\n              if (confirmations <= 0) {\n                confirmations = 1;\n              }\n\n              tx.confirmations = confirmations;\n            }\n          }\n\n          const blockWithTxs = this.formatter.blockWithTransactions(block);\n          blockWithTxs.transactions = blockWithTxs.transactions.map(tx => this._wrapTransaction(tx));\n          return blockWithTxs;\n        }\n\n        return this.formatter.block(block);\n      }), {\n        oncePoll: this\n      });\n    });\n  }\n\n  getBlock(blockHashOrBlockTag) {\n    return this._getBlock(blockHashOrBlockTag, false);\n  }\n\n  getBlockWithTransactions(blockHashOrBlockTag) {\n    return this._getBlock(blockHashOrBlockTag, true);\n  }\n\n  getTransaction(transactionHash) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      transactionHash = yield transactionHash;\n      const params = {\n        transactionHash: this.formatter.hash(transactionHash, true)\n      };\n      return poll(() => __awaiter(this, void 0, void 0, function* () {\n        const result = yield this.perform(\"getTransaction\", params);\n\n        if (result == null) {\n          if (this._emitted[\"t:\" + transactionHash] == null) {\n            return null;\n          }\n\n          return undefined;\n        }\n\n        const tx = this.formatter.transactionResponse(result);\n\n        if (tx.blockNumber == null) {\n          tx.confirmations = 0;\n        } else if (tx.confirmations == null) {\n          const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval); // Add the confirmations using the fast block number (pessimistic)\n\n          let confirmations = blockNumber - tx.blockNumber + 1;\n\n          if (confirmations <= 0) {\n            confirmations = 1;\n          }\n\n          tx.confirmations = confirmations;\n        }\n\n        return this._wrapTransaction(tx);\n      }), {\n        oncePoll: this\n      });\n    });\n  }\n\n  getTransactionReceipt(transactionHash) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      transactionHash = yield transactionHash;\n      const params = {\n        transactionHash: this.formatter.hash(transactionHash, true)\n      };\n      return poll(() => __awaiter(this, void 0, void 0, function* () {\n        const result = yield this.perform(\"getTransactionReceipt\", params);\n\n        if (result == null) {\n          if (this._emitted[\"t:\" + transactionHash] == null) {\n            return null;\n          }\n\n          return undefined;\n        } // \"geth-etc\" returns receipts before they are ready\n\n\n        if (result.blockHash == null) {\n          return undefined;\n        }\n\n        const receipt = this.formatter.receipt(result);\n\n        if (receipt.blockNumber == null) {\n          receipt.confirmations = 0;\n        } else if (receipt.confirmations == null) {\n          const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval); // Add the confirmations using the fast block number (pessimistic)\n\n          let confirmations = blockNumber - receipt.blockNumber + 1;\n\n          if (confirmations <= 0) {\n            confirmations = 1;\n          }\n\n          receipt.confirmations = confirmations;\n        }\n\n        return receipt;\n      }), {\n        oncePoll: this\n      });\n    });\n  }\n\n  getLogs(filter) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        filter: this._getFilter(filter)\n      });\n      const logs = yield this.perform(\"getLogs\", params);\n      logs.forEach(log => {\n        if (log.removed == null) {\n          log.removed = false;\n        }\n      });\n      return Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs);\n    });\n  }\n\n  getEtherPrice() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      return this.perform(\"getEtherPrice\", {});\n    });\n  }\n\n  _getBlockTag(blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      blockTag = yield blockTag;\n\n      if (typeof blockTag === \"number\" && blockTag < 0) {\n        if (blockTag % 1) {\n          logger.throwArgumentError(\"invalid BlockTag\", \"blockTag\", blockTag);\n        }\n\n        let blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n        blockNumber += blockTag;\n\n        if (blockNumber < 0) {\n          blockNumber = 0;\n        }\n\n        return this.formatter.blockTag(blockNumber);\n      }\n\n      return this.formatter.blockTag(blockTag);\n    });\n  }\n\n  getResolver(name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const address = yield this._getResolver(name);\n\n        if (address == null) {\n          return null;\n        }\n\n        return new Resolver(this, address, name);\n      } catch (error) {\n        if (error.code === Logger.errors.CALL_EXCEPTION) {\n          return null;\n        }\n\n        return null;\n      }\n    });\n  }\n\n  _getResolver(name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // Get the resolver from the blockchain\n      const network = yield this.getNetwork(); // No ENS...\n\n      if (!network.ensAddress) {\n        logger.throwError(\"network does not support ENS\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"ENS\",\n          network: network.name\n        });\n      } // keccak256(\"resolver(bytes32)\")\n\n\n      const transaction = {\n        to: network.ensAddress,\n        data: \"0x0178b8bf\" + namehash(name).substring(2)\n      };\n\n      try {\n        return this.formatter.callAddress(yield this.call(transaction));\n      } catch (error) {\n        if (error.code === Logger.errors.CALL_EXCEPTION) {\n          return null;\n        }\n\n        throw error;\n      }\n    });\n  }\n\n  resolveName(name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      name = yield name; // If it is already an address, nothing to resolve\n\n      try {\n        return Promise.resolve(this.formatter.address(name));\n      } catch (error) {\n        // If is is a hexstring, the address is bad (See #694)\n        if (isHexString(name)) {\n          throw error;\n        }\n      }\n\n      if (typeof name !== \"string\") {\n        logger.throwArgumentError(\"invalid ENS name\", \"name\", name);\n      } // Get the addr from the resovler\n\n\n      const resolver = yield this.getResolver(name);\n\n      if (!resolver) {\n        return null;\n      }\n\n      return yield resolver.getAddress();\n    });\n  }\n\n  lookupAddress(address) {\n    return __awaiter(this, void 0, void 0, function* () {\n      address = yield address;\n      address = this.formatter.address(address);\n      const reverseName = address.substring(2).toLowerCase() + \".addr.reverse\";\n      const resolverAddress = yield this._getResolver(reverseName);\n\n      if (!resolverAddress) {\n        return null;\n      } // keccak(\"name(bytes32)\")\n\n\n      let bytes = arrayify(yield this.call({\n        to: resolverAddress,\n        data: \"0x691f3431\" + namehash(reverseName).substring(2)\n      })); // Strip off the dynamic string pointer (0x20)\n\n      if (bytes.length < 32 || !BigNumber.from(bytes.slice(0, 32)).eq(32)) {\n        return null;\n      }\n\n      bytes = bytes.slice(32); // Not a length-prefixed string\n\n      if (bytes.length < 32) {\n        return null;\n      } // Get the length of the string (from the length-prefix)\n\n\n      const length = BigNumber.from(bytes.slice(0, 32)).toNumber();\n      bytes = bytes.slice(32); // Length longer than available data\n\n      if (length > bytes.length) {\n        return null;\n      }\n\n      const name = toUtf8String(bytes.slice(0, length)); // Make sure the reverse record matches the foward record\n\n      const addr = yield this.resolveName(name);\n\n      if (addr != address) {\n        return null;\n      }\n\n      return name;\n    });\n  }\n\n  perform(method, params) {\n    return logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, {\n      operation: method\n    });\n  }\n\n  _startEvent(event) {\n    this.polling = this._events.filter(e => e.pollable()).length > 0;\n  }\n\n  _stopEvent(event) {\n    this.polling = this._events.filter(e => e.pollable()).length > 0;\n  }\n\n  _addEventListener(eventName, listener, once) {\n    const event = new Event(getEventTag(eventName), listener, once);\n\n    this._events.push(event);\n\n    this._startEvent(event);\n\n    return this;\n  }\n\n  on(eventName, listener) {\n    return this._addEventListener(eventName, listener, false);\n  }\n\n  once(eventName, listener) {\n    return this._addEventListener(eventName, listener, true);\n  }\n\n  emit(eventName, ...args) {\n    let result = false;\n    let stopped = [];\n    let eventTag = getEventTag(eventName);\n    this._events = this._events.filter(event => {\n      if (event.tag !== eventTag) {\n        return true;\n      }\n\n      setTimeout(() => {\n        event.listener.apply(this, args);\n      }, 0);\n      result = true;\n\n      if (event.once) {\n        stopped.push(event);\n        return false;\n      }\n\n      return true;\n    });\n    stopped.forEach(event => {\n      this._stopEvent(event);\n    });\n    return result;\n  }\n\n  listenerCount(eventName) {\n    if (!eventName) {\n      return this._events.length;\n    }\n\n    let eventTag = getEventTag(eventName);\n    return this._events.filter(event => {\n      return event.tag === eventTag;\n    }).length;\n  }\n\n  listeners(eventName) {\n    if (eventName == null) {\n      return this._events.map(event => event.listener);\n    }\n\n    let eventTag = getEventTag(eventName);\n    return this._events.filter(event => event.tag === eventTag).map(event => event.listener);\n  }\n\n  off(eventName, listener) {\n    if (listener == null) {\n      return this.removeAllListeners(eventName);\n    }\n\n    const stopped = [];\n    let found = false;\n    let eventTag = getEventTag(eventName);\n    this._events = this._events.filter(event => {\n      if (event.tag !== eventTag || event.listener != listener) {\n        return true;\n      }\n\n      if (found) {\n        return true;\n      }\n\n      found = true;\n      stopped.push(event);\n      return false;\n    });\n    stopped.forEach(event => {\n      this._stopEvent(event);\n    });\n    return this;\n  }\n\n  removeAllListeners(eventName) {\n    let stopped = [];\n\n    if (eventName == null) {\n      stopped = this._events;\n      this._events = [];\n    } else {\n      const eventTag = getEventTag(eventName);\n      this._events = this._events.filter(event => {\n        if (event.tag !== eventTag) {\n          return true;\n        }\n\n        stopped.push(event);\n        return false;\n      });\n    }\n\n    stopped.forEach(event => {\n      this._stopEvent(event);\n    });\n    return this;\n  }\n\n}","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Demo/node_modules/@ethersproject/providers/lib.esm/base-provider.js"],"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","ForkEvent","Provider","Base58","BigNumber","arrayify","concat","hexConcat","hexDataLength","hexDataSlice","hexlify","hexValue","hexZeroPad","isHexString","HashZero","namehash","getNetwork","defineReadOnly","getStatic","resolveProperties","sha256","toUtf8Bytes","toUtf8String","poll","bech32","Logger","version","logger","Formatter","checkTopic","topic","throwArgumentError","toLowerCase","serializeTopics","topics","slice","length","pop","map","Array","isArray","unique","forEach","sorted","Object","keys","sort","join","deserializeTopics","data","split","comps","getEventTag","eventName","indexOf","isForkEvent","warn","Error","address","getTime","Date","stall","duration","setTimeout","PollableEvents","Event","constructor","tag","listener","once","event","type","hash","filter","pollable","coinInfos","symbol","p2pkh","p2sh","prefix","ilk","bytes32ify","from","toHexString","base58Encode","encode","Resolver","provider","name","formatter","_fetchBytes","selector","parameters","transaction","to","call","offset","toNumber","error","code","errors","CALL_EXCEPTION","_getAddress","coinType","hexBytes","coinInfo","String","throwError","UNSUPPORTED_OPERATION","operation","bytes","match","parseInt","words","toWords","unshift","getAddress","substring","callAddress","getContentHash","ipfs","swarm","getText","key","keyBytes","defaultFormatter","nextPollId","BaseProvider","network","checkNew","new","target","_events","_emitted","block","getFormatter","anyNetwork","detectNetwork","_networkPromise","catch","_ready","knownNetwork","emit","_maxInternalBlockNumber","_lastBlockNumber","_pollingInterval","_fastQueryDate","_network","UNKNOWN_ERROR","ready","NETWORK_ERROR","undefined","_getInternalBlockNumber","maxAge","_internalBlockNumber","internalBlockNumber","respTime","blockNumber","reqTime","checkInternalBlockNumber","perform","networkError","_setFastBlockNumber","pollId","runners","pollingInterval","Math","abs","makeError","previousBlockNumber","i","eventBlockNumber","runner","getTransactionReceipt","receipt","push","fromBlock","toBlock","getLogs","logs","log","blockHash","transactionHash","all","resetEventsBlock","polling","currentNetwork","chainId","_fastBlockNumber","_fastBlockNumberPromise","detectedNetwork","_poller","setInterval","_bootstrapPoll","clearInterval","_getFastBlockNumber","now","getBlockNumber","waitForTransaction","confirmations","timeout","_waitForTransaction","replaceable","cancelFuncs","alreadyDone","func","minedHandler","on","removeListener","lastBlockNumber","startBlock","scannedBlock","replaceHandler","getTransactionCount","nonce","mined","getTransaction","getBlockWithTransactions","ti","transactions","tx","reason","eq","isZero","TRANSACTION_REPLACED","cancelled","replacement","_wrapTransaction","timer","TIMEOUT","unref","clearTimeout","getGasPrice","SERVER_ERROR","method","getBalance","addressOrName","blockTag","params","_getBlockTag","getCode","getStorageAt","position","p","expectedHash","returnedHash","wait","confirms","status","sendTransaction","signedTransaction","hexTx","t","_getTransactionRequest","values","v","accessList","transactionRequest","_getFilter","estimateGas","resolveName","JSON","stringify","_getBlock","blockHashOrBlockTag","includeTransactions","blockWithTxs","blockWithTransactions","oncePoll","getBlock","transactionResponse","removed","arrayOf","filterLog","bind","getEtherPrice","getResolver","_getResolver","ensAddress","resolver","lookupAddress","reverseName","resolverAddress","addr","NOT_IMPLEMENTED","_startEvent","_stopEvent","_addEventListener","args","stopped","eventTag","listenerCount","listeners","off","removeAllListeners","found"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { ForkEvent, Provider } from \"@ethersproject/abstract-provider\";\nimport { Base58 } from \"@ethersproject/basex\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexConcat, hexDataLength, hexDataSlice, hexlify, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { HashZero } from \"@ethersproject/constants\";\nimport { namehash } from \"@ethersproject/hash\";\nimport { getNetwork } from \"@ethersproject/networks\";\nimport { defineReadOnly, getStatic, resolveProperties } from \"@ethersproject/properties\";\nimport { sha256 } from \"@ethersproject/sha2\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { poll } from \"@ethersproject/web\";\nimport bech32 from \"bech32\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { Formatter } from \"./formatter\";\n//////////////////////////////\n// Event Serializeing\nfunction checkTopic(topic) {\n    if (topic == null) {\n        return \"null\";\n    }\n    if (hexDataLength(topic) !== 32) {\n        logger.throwArgumentError(\"invalid topic\", \"topic\", topic);\n    }\n    return topic.toLowerCase();\n}\nfunction serializeTopics(topics) {\n    // Remove trailing null AND-topics; they are redundant\n    topics = topics.slice();\n    while (topics.length > 0 && topics[topics.length - 1] == null) {\n        topics.pop();\n    }\n    return topics.map((topic) => {\n        if (Array.isArray(topic)) {\n            // Only track unique OR-topics\n            const unique = {};\n            topic.forEach((topic) => {\n                unique[checkTopic(topic)] = true;\n            });\n            // The order of OR-topics does not matter\n            const sorted = Object.keys(unique);\n            sorted.sort();\n            return sorted.join(\"|\");\n        }\n        else {\n            return checkTopic(topic);\n        }\n    }).join(\"&\");\n}\nfunction deserializeTopics(data) {\n    if (data === \"\") {\n        return [];\n    }\n    return data.split(/&/g).map((topic) => {\n        if (topic === \"\") {\n            return [];\n        }\n        const comps = topic.split(\"|\").map((topic) => {\n            return ((topic === \"null\") ? null : topic);\n        });\n        return ((comps.length === 1) ? comps[0] : comps);\n    });\n}\nfunction getEventTag(eventName) {\n    if (typeof (eventName) === \"string\") {\n        eventName = eventName.toLowerCase();\n        if (hexDataLength(eventName) === 32) {\n            return \"tx:\" + eventName;\n        }\n        if (eventName.indexOf(\":\") === -1) {\n            return eventName;\n        }\n    }\n    else if (Array.isArray(eventName)) {\n        return \"filter:*:\" + serializeTopics(eventName);\n    }\n    else if (ForkEvent.isForkEvent(eventName)) {\n        logger.warn(\"not implemented\");\n        throw new Error(\"not implemented\");\n    }\n    else if (eventName && typeof (eventName) === \"object\") {\n        return \"filter:\" + (eventName.address || \"*\") + \":\" + serializeTopics(eventName.topics || []);\n    }\n    throw new Error(\"invalid event - \" + eventName);\n}\n//////////////////////////////\n// Helper Object\nfunction getTime() {\n    return (new Date()).getTime();\n}\nfunction stall(duration) {\n    return new Promise((resolve) => {\n        setTimeout(resolve, duration);\n    });\n}\n//////////////////////////////\n// Provider Object\n/**\n *  EventType\n *   - \"block\"\n *   - \"poll\"\n *   - \"didPoll\"\n *   - \"pending\"\n *   - \"error\"\n *   - \"network\"\n *   - filter\n *   - topics array\n *   - transaction hash\n */\nconst PollableEvents = [\"block\", \"network\", \"pending\", \"poll\"];\nexport class Event {\n    constructor(tag, listener, once) {\n        defineReadOnly(this, \"tag\", tag);\n        defineReadOnly(this, \"listener\", listener);\n        defineReadOnly(this, \"once\", once);\n    }\n    get event() {\n        switch (this.type) {\n            case \"tx\":\n                return this.hash;\n            case \"filter\":\n                return this.filter;\n        }\n        return this.tag;\n    }\n    get type() {\n        return this.tag.split(\":\")[0];\n    }\n    get hash() {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== \"tx\") {\n            return null;\n        }\n        return comps[1];\n    }\n    get filter() {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== \"filter\") {\n            return null;\n        }\n        const address = comps[1];\n        const topics = deserializeTopics(comps[2]);\n        const filter = {};\n        if (topics.length > 0) {\n            filter.topics = topics;\n        }\n        if (address && address !== \"*\") {\n            filter.address = address;\n        }\n        return filter;\n    }\n    pollable() {\n        return (this.tag.indexOf(\":\") >= 0 || PollableEvents.indexOf(this.tag) >= 0);\n    }\n}\n;\n// https://github.com/satoshilabs/slips/blob/master/slip-0044.md\nconst coinInfos = {\n    \"0\": { symbol: \"btc\", p2pkh: 0x00, p2sh: 0x05, prefix: \"bc\" },\n    \"2\": { symbol: \"ltc\", p2pkh: 0x30, p2sh: 0x32, prefix: \"ltc\" },\n    \"3\": { symbol: \"doge\", p2pkh: 0x1e, p2sh: 0x16 },\n    \"60\": { symbol: \"eth\", ilk: \"eth\" },\n    \"61\": { symbol: \"etc\", ilk: \"eth\" },\n    \"700\": { symbol: \"xdai\", ilk: \"eth\" },\n};\nfunction bytes32ify(value) {\n    return hexZeroPad(BigNumber.from(value).toHexString(), 32);\n}\n// Compute the Base58Check encoded data (checksum is first 4 bytes of sha256d)\nfunction base58Encode(data) {\n    return Base58.encode(concat([data, hexDataSlice(sha256(sha256(data)), 0, 4)]));\n}\nexport class Resolver {\n    constructor(provider, address, name) {\n        defineReadOnly(this, \"provider\", provider);\n        defineReadOnly(this, \"name\", name);\n        defineReadOnly(this, \"address\", provider.formatter.address(address));\n    }\n    _fetchBytes(selector, parameters) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // keccak256(\"addr(bytes32,uint256)\")\n            const transaction = {\n                to: this.address,\n                data: hexConcat([selector, namehash(this.name), (parameters || \"0x\")])\n            };\n            try {\n                const result = yield this.provider.call(transaction);\n                if (result === \"0x\") {\n                    return null;\n                }\n                const offset = BigNumber.from(hexDataSlice(result, 0, 32)).toNumber();\n                const length = BigNumber.from(hexDataSlice(result, offset, offset + 32)).toNumber();\n                return hexDataSlice(result, offset + 32, offset + 32 + length);\n            }\n            catch (error) {\n                if (error.code === Logger.errors.CALL_EXCEPTION) {\n                    return null;\n                }\n                return null;\n            }\n        });\n    }\n    _getAddress(coinType, hexBytes) {\n        const coinInfo = coinInfos[String(coinType)];\n        if (coinInfo == null) {\n            logger.throwError(`unsupported coin type: ${coinType}`, Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: `getAddress(${coinType})`\n            });\n        }\n        if (coinInfo.ilk === \"eth\") {\n            return this.provider.formatter.address(hexBytes);\n        }\n        const bytes = arrayify(hexBytes);\n        // P2PKH: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG\n        if (coinInfo.p2pkh != null) {\n            const p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);\n            if (p2pkh) {\n                const length = parseInt(p2pkh[1], 16);\n                if (p2pkh[2].length === length * 2 && length >= 1 && length <= 75) {\n                    return base58Encode(concat([[coinInfo.p2pkh], (\"0x\" + p2pkh[2])]));\n                }\n            }\n        }\n        // P2SH: OP_HASH160 <scriptHash> OP_EQUAL\n        if (coinInfo.p2sh != null) {\n            const p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);\n            if (p2sh) {\n                const length = parseInt(p2sh[1], 16);\n                if (p2sh[2].length === length * 2 && length >= 1 && length <= 75) {\n                    return base58Encode(concat([[coinInfo.p2sh], (\"0x\" + p2sh[2])]));\n                }\n            }\n        }\n        // Bech32\n        if (coinInfo.prefix != null) {\n            const length = bytes[1];\n            // https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#witness-program\n            let version = bytes[0];\n            if (version === 0x00) {\n                if (length !== 20 && length !== 32) {\n                    version = -1;\n                }\n            }\n            else {\n                version = -1;\n            }\n            if (version >= 0 && bytes.length === 2 + length && length >= 1 && length <= 75) {\n                const words = bech32.toWords(bytes.slice(2));\n                words.unshift(version);\n                return bech32.encode(coinInfo.prefix, words);\n            }\n        }\n        return null;\n    }\n    getAddress(coinType) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (coinType == null) {\n                coinType = 60;\n            }\n            // If Ethereum, use the standard `addr(bytes32)`\n            if (coinType === 60) {\n                try {\n                    // keccak256(\"addr(bytes32)\")\n                    const transaction = {\n                        to: this.address,\n                        data: (\"0x3b3b57de\" + namehash(this.name).substring(2))\n                    };\n                    const hexBytes = yield this.provider.call(transaction);\n                    // No address\n                    if (hexBytes === \"0x\" || hexBytes === HashZero) {\n                        return null;\n                    }\n                    return this.provider.formatter.callAddress(hexBytes);\n                }\n                catch (error) {\n                    if (error.code === Logger.errors.CALL_EXCEPTION) {\n                        return null;\n                    }\n                    throw error;\n                }\n            }\n            // keccak256(\"addr(bytes32,uint256\")\n            const hexBytes = yield this._fetchBytes(\"0xf1cb7e06\", bytes32ify(coinType));\n            // No address\n            if (hexBytes == null || hexBytes === \"0x\") {\n                return null;\n            }\n            // Compute the address\n            const address = this._getAddress(coinType, hexBytes);\n            if (address == null) {\n                logger.throwError(`invalid or unsupported coin data`, Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: `getAddress(${coinType})`,\n                    coinType: coinType,\n                    data: hexBytes\n                });\n            }\n            return address;\n        });\n    }\n    getContentHash() {\n        return __awaiter(this, void 0, void 0, function* () {\n            // keccak256(\"contenthash()\")\n            const hexBytes = yield this._fetchBytes(\"0xbc1c58d1\");\n            // No contenthash\n            if (hexBytes == null || hexBytes === \"0x\") {\n                return null;\n            }\n            // IPFS (CID: 1, Type: DAG-PB)\n            const ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n            if (ipfs) {\n                const length = parseInt(ipfs[3], 16);\n                if (ipfs[4].length === length * 2) {\n                    return \"ipfs:/\\/\" + Base58.encode(\"0x\" + ipfs[1]);\n                }\n            }\n            // Swarm (CID: 1, Type: swarm-manifest; hash/length hard-coded to keccak256/32)\n            const swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/);\n            if (swarm) {\n                if (swarm[1].length === (32 * 2)) {\n                    return \"bzz:/\\/\" + swarm[1];\n                }\n            }\n            return logger.throwError(`invalid or unsupported content hash data`, Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"getContentHash()\",\n                data: hexBytes\n            });\n        });\n    }\n    getText(key) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // The key encoded as parameter to fetchBytes\n            let keyBytes = toUtf8Bytes(key);\n            // The nodehash consumes the first slot, so the string pointer targets\n            // offset 64, with the length at offset 64 and data starting at offset 96\n            keyBytes = concat([bytes32ify(64), bytes32ify(keyBytes.length), keyBytes]);\n            // Pad to word-size (32 bytes)\n            if ((keyBytes.length % 32) !== 0) {\n                keyBytes = concat([keyBytes, hexZeroPad(\"0x\", 32 - (key.length % 32))]);\n            }\n            const hexBytes = yield this._fetchBytes(\"0x59d1d43c\", hexlify(keyBytes));\n            if (hexBytes == null || hexBytes === \"0x\") {\n                return null;\n            }\n            return toUtf8String(hexBytes);\n        });\n    }\n}\nlet defaultFormatter = null;\nlet nextPollId = 1;\nexport class BaseProvider extends Provider {\n    /**\n     *  ready\n     *\n     *  A Promise<Network> that resolves only once the provider is ready.\n     *\n     *  Sub-classes that call the super with a network without a chainId\n     *  MUST set this. Standard named networks have a known chainId.\n     *\n     */\n    constructor(network) {\n        logger.checkNew(new.target, Provider);\n        super();\n        // Events being listened to\n        this._events = [];\n        this._emitted = { block: -2 };\n        this.formatter = new.target.getFormatter();\n        // If network is any, this Provider allows the underlying\n        // network to change dynamically, and we auto-detect the\n        // current network\n        defineReadOnly(this, \"anyNetwork\", (network === \"any\"));\n        if (this.anyNetwork) {\n            network = this.detectNetwork();\n        }\n        if (network instanceof Promise) {\n            this._networkPromise = network;\n            // Squash any \"unhandled promise\" errors; that do not need to be handled\n            network.catch((error) => { });\n            // Trigger initial network setting (async)\n            this._ready().catch((error) => { });\n        }\n        else {\n            const knownNetwork = getStatic((new.target), \"getNetwork\")(network);\n            if (knownNetwork) {\n                defineReadOnly(this, \"_network\", knownNetwork);\n                this.emit(\"network\", knownNetwork, null);\n            }\n            else {\n                logger.throwArgumentError(\"invalid network\", \"network\", network);\n            }\n        }\n        this._maxInternalBlockNumber = -1024;\n        this._lastBlockNumber = -2;\n        this._pollingInterval = 4000;\n        this._fastQueryDate = 0;\n    }\n    _ready() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this._network == null) {\n                let network = null;\n                if (this._networkPromise) {\n                    try {\n                        network = yield this._networkPromise;\n                    }\n                    catch (error) { }\n                }\n                // Try the Provider's network detection (this MUST throw if it cannot)\n                if (network == null) {\n                    network = yield this.detectNetwork();\n                }\n                // This should never happen; every Provider sub-class should have\n                // suggested a network by here (or have thrown).\n                if (!network) {\n                    logger.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, {});\n                }\n                // Possible this call stacked so do not call defineReadOnly again\n                if (this._network == null) {\n                    if (this.anyNetwork) {\n                        this._network = network;\n                    }\n                    else {\n                        defineReadOnly(this, \"_network\", network);\n                    }\n                    this.emit(\"network\", network, null);\n                }\n            }\n            return this._network;\n        });\n    }\n    // This will always return the most recently established network.\n    // For \"any\", this can change (a \"network\" event is emitted before\n    // any change is refelcted); otherwise this cannot change\n    get ready() {\n        return poll(() => {\n            return this._ready().then((network) => {\n                return network;\n            }, (error) => {\n                // If the network isn't running yet, we will wait\n                if (error.code === Logger.errors.NETWORK_ERROR && error.event === \"noNetwork\") {\n                    return undefined;\n                }\n                throw error;\n            });\n        });\n    }\n    // @TODO: Remove this and just create a singleton formatter\n    static getFormatter() {\n        if (defaultFormatter == null) {\n            defaultFormatter = new Formatter();\n        }\n        return defaultFormatter;\n    }\n    // @TODO: Remove this and just use getNetwork\n    static getNetwork(network) {\n        return getNetwork((network == null) ? \"homestead\" : network);\n    }\n    // Fetches the blockNumber, but will reuse any result that is less\n    // than maxAge old or has been requested since the last request\n    _getInternalBlockNumber(maxAge) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this._ready();\n            // Allowing stale data up to maxAge old\n            if (maxAge > 0) {\n                // While there are pending internal block requests...\n                while (this._internalBlockNumber) {\n                    // ...\"remember\" which fetch we started with\n                    const internalBlockNumber = this._internalBlockNumber;\n                    try {\n                        // Check the result is not too stale\n                        const result = yield internalBlockNumber;\n                        if ((getTime() - result.respTime) <= maxAge) {\n                            return result.blockNumber;\n                        }\n                        // Too old; fetch a new value\n                        break;\n                    }\n                    catch (error) {\n                        // The fetch rejected; if we are the first to get the\n                        // rejection, drop through so we replace it with a new\n                        // fetch; all others blocked will then get that fetch\n                        // which won't match the one they \"remembered\" and loop\n                        if (this._internalBlockNumber === internalBlockNumber) {\n                            break;\n                        }\n                    }\n                }\n            }\n            const reqTime = getTime();\n            const checkInternalBlockNumber = resolveProperties({\n                blockNumber: this.perform(\"getBlockNumber\", {}),\n                networkError: this.getNetwork().then((network) => (null), (error) => (error))\n            }).then(({ blockNumber, networkError }) => {\n                if (networkError) {\n                    // Unremember this bad internal block number\n                    if (this._internalBlockNumber === checkInternalBlockNumber) {\n                        this._internalBlockNumber = null;\n                    }\n                    throw networkError;\n                }\n                const respTime = getTime();\n                blockNumber = BigNumber.from(blockNumber).toNumber();\n                if (blockNumber < this._maxInternalBlockNumber) {\n                    blockNumber = this._maxInternalBlockNumber;\n                }\n                this._maxInternalBlockNumber = blockNumber;\n                this._setFastBlockNumber(blockNumber); // @TODO: Still need this?\n                return { blockNumber, reqTime, respTime };\n            });\n            this._internalBlockNumber = checkInternalBlockNumber;\n            // Swallow unhandled exceptions; if needed they are handled else where\n            checkInternalBlockNumber.catch((error) => {\n                // Don't null the dead (rejected) fetch, if it has already been updated\n                if (this._internalBlockNumber === checkInternalBlockNumber) {\n                    this._internalBlockNumber = null;\n                }\n            });\n            return (yield checkInternalBlockNumber).blockNumber;\n        });\n    }\n    poll() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const pollId = nextPollId++;\n            // Track all running promises, so we can trigger a post-poll once they are complete\n            const runners = [];\n            let blockNumber = null;\n            try {\n                blockNumber = yield this._getInternalBlockNumber(100 + this.pollingInterval / 2);\n            }\n            catch (error) {\n                this.emit(\"error\", error);\n                return;\n            }\n            this._setFastBlockNumber(blockNumber);\n            // Emit a poll event after we have the latest (fast) block number\n            this.emit(\"poll\", pollId, blockNumber);\n            // If the block has not changed, meh.\n            if (blockNumber === this._lastBlockNumber) {\n                this.emit(\"didPoll\", pollId);\n                return;\n            }\n            // First polling cycle, trigger a \"block\" events\n            if (this._emitted.block === -2) {\n                this._emitted.block = blockNumber - 1;\n            }\n            if (Math.abs((this._emitted.block) - blockNumber) > 1000) {\n                logger.warn(`network block skew detected; skipping block events (emitted=${this._emitted.block} blockNumber${blockNumber})`);\n                this.emit(\"error\", logger.makeError(\"network block skew detected\", Logger.errors.NETWORK_ERROR, {\n                    blockNumber: blockNumber,\n                    event: \"blockSkew\",\n                    previousBlockNumber: this._emitted.block\n                }));\n                this.emit(\"block\", blockNumber);\n            }\n            else {\n                // Notify all listener for each block that has passed\n                for (let i = this._emitted.block + 1; i <= blockNumber; i++) {\n                    this.emit(\"block\", i);\n                }\n            }\n            // The emitted block was updated, check for obsolete events\n            if (this._emitted.block !== blockNumber) {\n                this._emitted.block = blockNumber;\n                Object.keys(this._emitted).forEach((key) => {\n                    // The block event does not expire\n                    if (key === \"block\") {\n                        return;\n                    }\n                    // The block we were at when we emitted this event\n                    const eventBlockNumber = this._emitted[key];\n                    // We cannot garbage collect pending transactions or blocks here\n                    // They should be garbage collected by the Provider when setting\n                    // \"pending\" events\n                    if (eventBlockNumber === \"pending\") {\n                        return;\n                    }\n                    // Evict any transaction hashes or block hashes over 12 blocks\n                    // old, since they should not return null anyways\n                    if (blockNumber - eventBlockNumber > 12) {\n                        delete this._emitted[key];\n                    }\n                });\n            }\n            // First polling cycle\n            if (this._lastBlockNumber === -2) {\n                this._lastBlockNumber = blockNumber - 1;\n            }\n            // Find all transaction hashes we are waiting on\n            this._events.forEach((event) => {\n                switch (event.type) {\n                    case \"tx\": {\n                        const hash = event.hash;\n                        let runner = this.getTransactionReceipt(hash).then((receipt) => {\n                            if (!receipt || receipt.blockNumber == null) {\n                                return null;\n                            }\n                            this._emitted[\"t:\" + hash] = receipt.blockNumber;\n                            this.emit(hash, receipt);\n                            return null;\n                        }).catch((error) => { this.emit(\"error\", error); });\n                        runners.push(runner);\n                        break;\n                    }\n                    case \"filter\": {\n                        const filter = event.filter;\n                        filter.fromBlock = this._lastBlockNumber + 1;\n                        filter.toBlock = blockNumber;\n                        const runner = this.getLogs(filter).then((logs) => {\n                            if (logs.length === 0) {\n                                return;\n                            }\n                            logs.forEach((log) => {\n                                this._emitted[\"b:\" + log.blockHash] = log.blockNumber;\n                                this._emitted[\"t:\" + log.transactionHash] = log.blockNumber;\n                                this.emit(filter, log);\n                            });\n                        }).catch((error) => { this.emit(\"error\", error); });\n                        runners.push(runner);\n                        break;\n                    }\n                }\n            });\n            this._lastBlockNumber = blockNumber;\n            // Once all events for this loop have been processed, emit \"didPoll\"\n            Promise.all(runners).then(() => {\n                this.emit(\"didPoll\", pollId);\n            }).catch((error) => { this.emit(\"error\", error); });\n            return;\n        });\n    }\n    // Deprecated; do not use this\n    resetEventsBlock(blockNumber) {\n        this._lastBlockNumber = blockNumber - 1;\n        if (this.polling) {\n            this.poll();\n        }\n    }\n    get network() {\n        return this._network;\n    }\n    // This method should query the network if the underlying network\n    // can change, such as when connected to a JSON-RPC backend\n    detectNetwork() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return logger.throwError(\"provider does not support network detection\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"provider.detectNetwork\"\n            });\n        });\n    }\n    getNetwork() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const network = yield this._ready();\n            // Make sure we are still connected to the same network; this is\n            // only an external call for backends which can have the underlying\n            // network change spontaneously\n            const currentNetwork = yield this.detectNetwork();\n            if (network.chainId !== currentNetwork.chainId) {\n                // We are allowing network changes, things can get complex fast;\n                // make sure you know what you are doing if you use \"any\"\n                if (this.anyNetwork) {\n                    this._network = currentNetwork;\n                    // Reset all internal block number guards and caches\n                    this._lastBlockNumber = -2;\n                    this._fastBlockNumber = null;\n                    this._fastBlockNumberPromise = null;\n                    this._fastQueryDate = 0;\n                    this._emitted.block = -2;\n                    this._maxInternalBlockNumber = -1024;\n                    this._internalBlockNumber = null;\n                    // The \"network\" event MUST happen before this method resolves\n                    // so any events have a chance to unregister, so we stall an\n                    // additional event loop before returning from /this/ call\n                    this.emit(\"network\", currentNetwork, network);\n                    yield stall(0);\n                    return this._network;\n                }\n                const error = logger.makeError(\"underlying network changed\", Logger.errors.NETWORK_ERROR, {\n                    event: \"changed\",\n                    network: network,\n                    detectedNetwork: currentNetwork\n                });\n                this.emit(\"error\", error);\n                throw error;\n            }\n            return network;\n        });\n    }\n    get blockNumber() {\n        this._getInternalBlockNumber(100 + this.pollingInterval / 2).then((blockNumber) => {\n            this._setFastBlockNumber(blockNumber);\n        }, (error) => { });\n        return (this._fastBlockNumber != null) ? this._fastBlockNumber : -1;\n    }\n    get polling() {\n        return (this._poller != null);\n    }\n    set polling(value) {\n        if (value && !this._poller) {\n            this._poller = setInterval(() => { this.poll(); }, this.pollingInterval);\n            if (!this._bootstrapPoll) {\n                this._bootstrapPoll = setTimeout(() => {\n                    this.poll();\n                    // We block additional polls until the polling interval\n                    // is done, to prevent overwhelming the poll function\n                    this._bootstrapPoll = setTimeout(() => {\n                        // If polling was disabled, something may require a poke\n                        // since starting the bootstrap poll and it was disabled\n                        if (!this._poller) {\n                            this.poll();\n                        }\n                        // Clear out the bootstrap so we can do another\n                        this._bootstrapPoll = null;\n                    }, this.pollingInterval);\n                }, 0);\n            }\n        }\n        else if (!value && this._poller) {\n            clearInterval(this._poller);\n            this._poller = null;\n        }\n    }\n    get pollingInterval() {\n        return this._pollingInterval;\n    }\n    set pollingInterval(value) {\n        if (typeof (value) !== \"number\" || value <= 0 || parseInt(String(value)) != value) {\n            throw new Error(\"invalid polling interval\");\n        }\n        this._pollingInterval = value;\n        if (this._poller) {\n            clearInterval(this._poller);\n            this._poller = setInterval(() => { this.poll(); }, this._pollingInterval);\n        }\n    }\n    _getFastBlockNumber() {\n        const now = getTime();\n        // Stale block number, request a newer value\n        if ((now - this._fastQueryDate) > 2 * this._pollingInterval) {\n            this._fastQueryDate = now;\n            this._fastBlockNumberPromise = this.getBlockNumber().then((blockNumber) => {\n                if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n                    this._fastBlockNumber = blockNumber;\n                }\n                return this._fastBlockNumber;\n            });\n        }\n        return this._fastBlockNumberPromise;\n    }\n    _setFastBlockNumber(blockNumber) {\n        // Older block, maybe a stale request\n        if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) {\n            return;\n        }\n        // Update the time we updated the blocknumber\n        this._fastQueryDate = getTime();\n        // Newer block number, use  it\n        if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n            this._fastBlockNumber = blockNumber;\n            this._fastBlockNumberPromise = Promise.resolve(blockNumber);\n        }\n    }\n    waitForTransaction(transactionHash, confirmations, timeout) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this._waitForTransaction(transactionHash, (confirmations == null) ? 1 : confirmations, timeout || 0, null);\n        });\n    }\n    _waitForTransaction(transactionHash, confirmations, timeout, replaceable) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const receipt = yield this.getTransactionReceipt(transactionHash);\n            // Receipt is already good\n            if ((receipt ? receipt.confirmations : 0) >= confirmations) {\n                return receipt;\n            }\n            // Poll until the receipt is good...\n            return new Promise((resolve, reject) => {\n                const cancelFuncs = [];\n                let done = false;\n                const alreadyDone = function () {\n                    if (done) {\n                        return true;\n                    }\n                    done = true;\n                    cancelFuncs.forEach((func) => { func(); });\n                    return false;\n                };\n                const minedHandler = (receipt) => {\n                    if (receipt.confirmations < confirmations) {\n                        return;\n                    }\n                    if (alreadyDone()) {\n                        return;\n                    }\n                    resolve(receipt);\n                };\n                this.on(transactionHash, minedHandler);\n                cancelFuncs.push(() => { this.removeListener(transactionHash, minedHandler); });\n                if (replaceable) {\n                    let lastBlockNumber = replaceable.startBlock;\n                    let scannedBlock = null;\n                    const replaceHandler = (blockNumber) => __awaiter(this, void 0, void 0, function* () {\n                        if (done) {\n                            return;\n                        }\n                        // Wait 1 second; this is only used in the case of a fault, so\n                        // we will trade off a little bit of latency for more consistent\n                        // results and fewer JSON-RPC calls\n                        yield stall(1000);\n                        this.getTransactionCount(replaceable.from).then((nonce) => __awaiter(this, void 0, void 0, function* () {\n                            if (done) {\n                                return;\n                            }\n                            if (nonce <= replaceable.nonce) {\n                                lastBlockNumber = blockNumber;\n                            }\n                            else {\n                                // First check if the transaction was mined\n                                {\n                                    const mined = yield this.getTransaction(transactionHash);\n                                    if (mined && mined.blockNumber != null) {\n                                        return;\n                                    }\n                                }\n                                // First time scanning. We start a little earlier for some\n                                // wiggle room here to handle the eventually consistent nature\n                                // of blockchain (e.g. the getTransactionCount was for a\n                                // different block)\n                                if (scannedBlock == null) {\n                                    scannedBlock = lastBlockNumber - 3;\n                                    if (scannedBlock < replaceable.startBlock) {\n                                        scannedBlock = replaceable.startBlock;\n                                    }\n                                }\n                                while (scannedBlock <= blockNumber) {\n                                    if (done) {\n                                        return;\n                                    }\n                                    const block = yield this.getBlockWithTransactions(scannedBlock);\n                                    for (let ti = 0; ti < block.transactions.length; ti++) {\n                                        const tx = block.transactions[ti];\n                                        // Successfully mined!\n                                        if (tx.hash === transactionHash) {\n                                            return;\n                                        }\n                                        // Matches our transaction from and nonce; its a replacement\n                                        if (tx.from === replaceable.from && tx.nonce === replaceable.nonce) {\n                                            if (done) {\n                                                return;\n                                            }\n                                            // Get the receipt of the replacement\n                                            const receipt = yield this.waitForTransaction(tx.hash, confirmations);\n                                            // Already resolved or rejected (prolly a timeout)\n                                            if (alreadyDone()) {\n                                                return;\n                                            }\n                                            // The reason we were replaced\n                                            let reason = \"replaced\";\n                                            if (tx.data === replaceable.data && tx.to === replaceable.to && tx.value.eq(replaceable.value)) {\n                                                reason = \"repriced\";\n                                            }\n                                            else if (tx.data === \"0x\" && tx.from === tx.to && tx.value.isZero()) {\n                                                reason = \"cancelled\";\n                                            }\n                                            // Explain why we were replaced\n                                            reject(logger.makeError(\"transaction was replaced\", Logger.errors.TRANSACTION_REPLACED, {\n                                                cancelled: (reason === \"replaced\" || reason === \"cancelled\"),\n                                                reason,\n                                                replacement: this._wrapTransaction(tx),\n                                                hash: transactionHash,\n                                                receipt\n                                            }));\n                                            return;\n                                        }\n                                    }\n                                    scannedBlock++;\n                                }\n                            }\n                            if (done) {\n                                return;\n                            }\n                            this.once(\"block\", replaceHandler);\n                        }), (error) => {\n                            if (done) {\n                                return;\n                            }\n                            this.once(\"block\", replaceHandler);\n                        });\n                    });\n                    if (done) {\n                        return;\n                    }\n                    this.once(\"block\", replaceHandler);\n                    cancelFuncs.push(() => {\n                        this.removeListener(\"block\", replaceHandler);\n                    });\n                }\n                if (typeof (timeout) === \"number\" && timeout > 0) {\n                    const timer = setTimeout(() => {\n                        if (alreadyDone()) {\n                            return;\n                        }\n                        reject(logger.makeError(\"timeout exceeded\", Logger.errors.TIMEOUT, { timeout: timeout }));\n                    }, timeout);\n                    if (timer.unref) {\n                        timer.unref();\n                    }\n                    cancelFuncs.push(() => { clearTimeout(timer); });\n                }\n            });\n        });\n    }\n    getBlockNumber() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this._getInternalBlockNumber(0);\n        });\n    }\n    getGasPrice() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const result = yield this.perform(\"getGasPrice\", {});\n            try {\n                return BigNumber.from(result);\n            }\n            catch (error) {\n                return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                    method: \"getGasPrice\",\n                    result, error\n                });\n            }\n        });\n    }\n    getBalance(addressOrName, blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({\n                address: this._getAddress(addressOrName),\n                blockTag: this._getBlockTag(blockTag)\n            });\n            const result = yield this.perform(\"getBalance\", params);\n            try {\n                return BigNumber.from(result);\n            }\n            catch (error) {\n                return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                    method: \"getBalance\",\n                    params, result, error\n                });\n            }\n        });\n    }\n    getTransactionCount(addressOrName, blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({\n                address: this._getAddress(addressOrName),\n                blockTag: this._getBlockTag(blockTag)\n            });\n            const result = yield this.perform(\"getTransactionCount\", params);\n            try {\n                return BigNumber.from(result).toNumber();\n            }\n            catch (error) {\n                return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                    method: \"getTransactionCount\",\n                    params, result, error\n                });\n            }\n        });\n    }\n    getCode(addressOrName, blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({\n                address: this._getAddress(addressOrName),\n                blockTag: this._getBlockTag(blockTag)\n            });\n            const result = yield this.perform(\"getCode\", params);\n            try {\n                return hexlify(result);\n            }\n            catch (error) {\n                return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                    method: \"getCode\",\n                    params, result, error\n                });\n            }\n        });\n    }\n    getStorageAt(addressOrName, position, blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({\n                address: this._getAddress(addressOrName),\n                blockTag: this._getBlockTag(blockTag),\n                position: Promise.resolve(position).then((p) => hexValue(p))\n            });\n            const result = yield this.perform(\"getStorageAt\", params);\n            try {\n                return hexlify(result);\n            }\n            catch (error) {\n                return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                    method: \"getStorageAt\",\n                    params, result, error\n                });\n            }\n        });\n    }\n    // This should be called by any subclass wrapping a TransactionResponse\n    _wrapTransaction(tx, hash, startBlock) {\n        if (hash != null && hexDataLength(hash) !== 32) {\n            throw new Error(\"invalid response - sendTransaction\");\n        }\n        const result = tx;\n        // Check the hash we expect is the same as the hash the server reported\n        if (hash != null && tx.hash !== hash) {\n            logger.throwError(\"Transaction hash mismatch from Provider.sendTransaction.\", Logger.errors.UNKNOWN_ERROR, { expectedHash: tx.hash, returnedHash: hash });\n        }\n        result.wait = (confirms, timeout) => __awaiter(this, void 0, void 0, function* () {\n            if (confirms == null) {\n                confirms = 1;\n            }\n            if (timeout == null) {\n                timeout = 0;\n            }\n            // Get the details to detect replacement\n            let replacement = undefined;\n            if (confirms !== 0 && startBlock != null) {\n                replacement = {\n                    data: tx.data,\n                    from: tx.from,\n                    nonce: tx.nonce,\n                    to: tx.to,\n                    value: tx.value,\n                    startBlock\n                };\n            }\n            const receipt = yield this._waitForTransaction(tx.hash, confirms, timeout, replacement);\n            if (receipt == null && confirms === 0) {\n                return null;\n            }\n            // No longer pending, allow the polling loop to garbage collect this\n            this._emitted[\"t:\" + tx.hash] = receipt.blockNumber;\n            if (receipt.status === 0) {\n                logger.throwError(\"transaction failed\", Logger.errors.CALL_EXCEPTION, {\n                    transactionHash: tx.hash,\n                    transaction: tx,\n                    receipt: receipt\n                });\n            }\n            return receipt;\n        });\n        return result;\n    }\n    sendTransaction(signedTransaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const hexTx = yield Promise.resolve(signedTransaction).then(t => hexlify(t));\n            const tx = this.formatter.transaction(signedTransaction);\n            if (tx.confirmations == null) {\n                tx.confirmations = 0;\n            }\n            const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n            try {\n                const hash = yield this.perform(\"sendTransaction\", { signedTransaction: hexTx });\n                return this._wrapTransaction(tx, hash, blockNumber);\n            }\n            catch (error) {\n                error.transaction = tx;\n                error.transactionHash = tx.hash;\n                throw error;\n            }\n        });\n    }\n    _getTransactionRequest(transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const values = yield transaction;\n            const tx = {};\n            [\"from\", \"to\"].forEach((key) => {\n                if (values[key] == null) {\n                    return;\n                }\n                tx[key] = Promise.resolve(values[key]).then((v) => (v ? this._getAddress(v) : null));\n            });\n            [\"gasLimit\", \"gasPrice\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"value\"].forEach((key) => {\n                if (values[key] == null) {\n                    return;\n                }\n                tx[key] = Promise.resolve(values[key]).then((v) => (v ? BigNumber.from(v) : null));\n            });\n            [\"type\"].forEach((key) => {\n                if (values[key] == null) {\n                    return;\n                }\n                tx[key] = Promise.resolve(values[key]).then((v) => ((v != null) ? v : null));\n            });\n            if (values.accessList) {\n                tx.accessList = this.formatter.accessList(values.accessList);\n            }\n            [\"data\"].forEach((key) => {\n                if (values[key] == null) {\n                    return;\n                }\n                tx[key] = Promise.resolve(values[key]).then((v) => (v ? hexlify(v) : null));\n            });\n            return this.formatter.transactionRequest(yield resolveProperties(tx));\n        });\n    }\n    _getFilter(filter) {\n        return __awaiter(this, void 0, void 0, function* () {\n            filter = yield filter;\n            const result = {};\n            if (filter.address != null) {\n                result.address = this._getAddress(filter.address);\n            }\n            [\"blockHash\", \"topics\"].forEach((key) => {\n                if (filter[key] == null) {\n                    return;\n                }\n                result[key] = filter[key];\n            });\n            [\"fromBlock\", \"toBlock\"].forEach((key) => {\n                if (filter[key] == null) {\n                    return;\n                }\n                result[key] = this._getBlockTag(filter[key]);\n            });\n            return this.formatter.filter(yield resolveProperties(result));\n        });\n    }\n    call(transaction, blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({\n                transaction: this._getTransactionRequest(transaction),\n                blockTag: this._getBlockTag(blockTag)\n            });\n            const result = yield this.perform(\"call\", params);\n            try {\n                return hexlify(result);\n            }\n            catch (error) {\n                return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                    method: \"call\",\n                    params, result, error\n                });\n            }\n        });\n    }\n    estimateGas(transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({\n                transaction: this._getTransactionRequest(transaction)\n            });\n            const result = yield this.perform(\"estimateGas\", params);\n            try {\n                return BigNumber.from(result);\n            }\n            catch (error) {\n                return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                    method: \"estimateGas\",\n                    params, result, error\n                });\n            }\n        });\n    }\n    _getAddress(addressOrName) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const address = yield this.resolveName(addressOrName);\n            if (address == null) {\n                logger.throwError(\"ENS name not configured\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: `resolveName(${JSON.stringify(addressOrName)})`\n                });\n            }\n            return address;\n        });\n    }\n    _getBlock(blockHashOrBlockTag, includeTransactions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            blockHashOrBlockTag = yield blockHashOrBlockTag;\n            // If blockTag is a number (not \"latest\", etc), this is the block number\n            let blockNumber = -128;\n            const params = {\n                includeTransactions: !!includeTransactions\n            };\n            if (isHexString(blockHashOrBlockTag, 32)) {\n                params.blockHash = blockHashOrBlockTag;\n            }\n            else {\n                try {\n                    params.blockTag = this.formatter.blockTag(yield this._getBlockTag(blockHashOrBlockTag));\n                    if (isHexString(params.blockTag)) {\n                        blockNumber = parseInt(params.blockTag.substring(2), 16);\n                    }\n                }\n                catch (error) {\n                    logger.throwArgumentError(\"invalid block hash or block tag\", \"blockHashOrBlockTag\", blockHashOrBlockTag);\n                }\n            }\n            return poll(() => __awaiter(this, void 0, void 0, function* () {\n                const block = yield this.perform(\"getBlock\", params);\n                // Block was not found\n                if (block == null) {\n                    // For blockhashes, if we didn't say it existed, that blockhash may\n                    // not exist. If we did see it though, perhaps from a log, we know\n                    // it exists, and this node is just not caught up yet.\n                    if (params.blockHash != null) {\n                        if (this._emitted[\"b:\" + params.blockHash] == null) {\n                            return null;\n                        }\n                    }\n                    // For block tags, if we are asking for a future block, we return null\n                    if (params.blockTag != null) {\n                        if (blockNumber > this._emitted.block) {\n                            return null;\n                        }\n                    }\n                    // Retry on the next block\n                    return undefined;\n                }\n                // Add transactions\n                if (includeTransactions) {\n                    let blockNumber = null;\n                    for (let i = 0; i < block.transactions.length; i++) {\n                        const tx = block.transactions[i];\n                        if (tx.blockNumber == null) {\n                            tx.confirmations = 0;\n                        }\n                        else if (tx.confirmations == null) {\n                            if (blockNumber == null) {\n                                blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                            }\n                            // Add the confirmations using the fast block number (pessimistic)\n                            let confirmations = (blockNumber - tx.blockNumber) + 1;\n                            if (confirmations <= 0) {\n                                confirmations = 1;\n                            }\n                            tx.confirmations = confirmations;\n                        }\n                    }\n                    const blockWithTxs = this.formatter.blockWithTransactions(block);\n                    blockWithTxs.transactions = blockWithTxs.transactions.map((tx) => this._wrapTransaction(tx));\n                    return blockWithTxs;\n                }\n                return this.formatter.block(block);\n            }), { oncePoll: this });\n        });\n    }\n    getBlock(blockHashOrBlockTag) {\n        return (this._getBlock(blockHashOrBlockTag, false));\n    }\n    getBlockWithTransactions(blockHashOrBlockTag) {\n        return (this._getBlock(blockHashOrBlockTag, true));\n    }\n    getTransaction(transactionHash) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            transactionHash = yield transactionHash;\n            const params = { transactionHash: this.formatter.hash(transactionHash, true) };\n            return poll(() => __awaiter(this, void 0, void 0, function* () {\n                const result = yield this.perform(\"getTransaction\", params);\n                if (result == null) {\n                    if (this._emitted[\"t:\" + transactionHash] == null) {\n                        return null;\n                    }\n                    return undefined;\n                }\n                const tx = this.formatter.transactionResponse(result);\n                if (tx.blockNumber == null) {\n                    tx.confirmations = 0;\n                }\n                else if (tx.confirmations == null) {\n                    const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                    // Add the confirmations using the fast block number (pessimistic)\n                    let confirmations = (blockNumber - tx.blockNumber) + 1;\n                    if (confirmations <= 0) {\n                        confirmations = 1;\n                    }\n                    tx.confirmations = confirmations;\n                }\n                return this._wrapTransaction(tx);\n            }), { oncePoll: this });\n        });\n    }\n    getTransactionReceipt(transactionHash) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            transactionHash = yield transactionHash;\n            const params = { transactionHash: this.formatter.hash(transactionHash, true) };\n            return poll(() => __awaiter(this, void 0, void 0, function* () {\n                const result = yield this.perform(\"getTransactionReceipt\", params);\n                if (result == null) {\n                    if (this._emitted[\"t:\" + transactionHash] == null) {\n                        return null;\n                    }\n                    return undefined;\n                }\n                // \"geth-etc\" returns receipts before they are ready\n                if (result.blockHash == null) {\n                    return undefined;\n                }\n                const receipt = this.formatter.receipt(result);\n                if (receipt.blockNumber == null) {\n                    receipt.confirmations = 0;\n                }\n                else if (receipt.confirmations == null) {\n                    const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                    // Add the confirmations using the fast block number (pessimistic)\n                    let confirmations = (blockNumber - receipt.blockNumber) + 1;\n                    if (confirmations <= 0) {\n                        confirmations = 1;\n                    }\n                    receipt.confirmations = confirmations;\n                }\n                return receipt;\n            }), { oncePoll: this });\n        });\n    }\n    getLogs(filter) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({ filter: this._getFilter(filter) });\n            const logs = yield this.perform(\"getLogs\", params);\n            logs.forEach((log) => {\n                if (log.removed == null) {\n                    log.removed = false;\n                }\n            });\n            return Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs);\n        });\n    }\n    getEtherPrice() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            return this.perform(\"getEtherPrice\", {});\n        });\n    }\n    _getBlockTag(blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            blockTag = yield blockTag;\n            if (typeof (blockTag) === \"number\" && blockTag < 0) {\n                if (blockTag % 1) {\n                    logger.throwArgumentError(\"invalid BlockTag\", \"blockTag\", blockTag);\n                }\n                let blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                blockNumber += blockTag;\n                if (blockNumber < 0) {\n                    blockNumber = 0;\n                }\n                return this.formatter.blockTag(blockNumber);\n            }\n            return this.formatter.blockTag(blockTag);\n        });\n    }\n    getResolver(name) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const address = yield this._getResolver(name);\n                if (address == null) {\n                    return null;\n                }\n                return new Resolver(this, address, name);\n            }\n            catch (error) {\n                if (error.code === Logger.errors.CALL_EXCEPTION) {\n                    return null;\n                }\n                return null;\n            }\n        });\n    }\n    _getResolver(name) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // Get the resolver from the blockchain\n            const network = yield this.getNetwork();\n            // No ENS...\n            if (!network.ensAddress) {\n                logger.throwError(\"network does not support ENS\", Logger.errors.UNSUPPORTED_OPERATION, { operation: \"ENS\", network: network.name });\n            }\n            // keccak256(\"resolver(bytes32)\")\n            const transaction = {\n                to: network.ensAddress,\n                data: (\"0x0178b8bf\" + namehash(name).substring(2))\n            };\n            try {\n                return this.formatter.callAddress(yield this.call(transaction));\n            }\n            catch (error) {\n                if (error.code === Logger.errors.CALL_EXCEPTION) {\n                    return null;\n                }\n                throw error;\n            }\n        });\n    }\n    resolveName(name) {\n        return __awaiter(this, void 0, void 0, function* () {\n            name = yield name;\n            // If it is already an address, nothing to resolve\n            try {\n                return Promise.resolve(this.formatter.address(name));\n            }\n            catch (error) {\n                // If is is a hexstring, the address is bad (See #694)\n                if (isHexString(name)) {\n                    throw error;\n                }\n            }\n            if (typeof (name) !== \"string\") {\n                logger.throwArgumentError(\"invalid ENS name\", \"name\", name);\n            }\n            // Get the addr from the resovler\n            const resolver = yield this.getResolver(name);\n            if (!resolver) {\n                return null;\n            }\n            return yield resolver.getAddress();\n        });\n    }\n    lookupAddress(address) {\n        return __awaiter(this, void 0, void 0, function* () {\n            address = yield address;\n            address = this.formatter.address(address);\n            const reverseName = address.substring(2).toLowerCase() + \".addr.reverse\";\n            const resolverAddress = yield this._getResolver(reverseName);\n            if (!resolverAddress) {\n                return null;\n            }\n            // keccak(\"name(bytes32)\")\n            let bytes = arrayify(yield this.call({\n                to: resolverAddress,\n                data: (\"0x691f3431\" + namehash(reverseName).substring(2))\n            }));\n            // Strip off the dynamic string pointer (0x20)\n            if (bytes.length < 32 || !BigNumber.from(bytes.slice(0, 32)).eq(32)) {\n                return null;\n            }\n            bytes = bytes.slice(32);\n            // Not a length-prefixed string\n            if (bytes.length < 32) {\n                return null;\n            }\n            // Get the length of the string (from the length-prefix)\n            const length = BigNumber.from(bytes.slice(0, 32)).toNumber();\n            bytes = bytes.slice(32);\n            // Length longer than available data\n            if (length > bytes.length) {\n                return null;\n            }\n            const name = toUtf8String(bytes.slice(0, length));\n            // Make sure the reverse record matches the foward record\n            const addr = yield this.resolveName(name);\n            if (addr != address) {\n                return null;\n            }\n            return name;\n        });\n    }\n    perform(method, params) {\n        return logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, { operation: method });\n    }\n    _startEvent(event) {\n        this.polling = (this._events.filter((e) => e.pollable()).length > 0);\n    }\n    _stopEvent(event) {\n        this.polling = (this._events.filter((e) => e.pollable()).length > 0);\n    }\n    _addEventListener(eventName, listener, once) {\n        const event = new Event(getEventTag(eventName), listener, once);\n        this._events.push(event);\n        this._startEvent(event);\n        return this;\n    }\n    on(eventName, listener) {\n        return this._addEventListener(eventName, listener, false);\n    }\n    once(eventName, listener) {\n        return this._addEventListener(eventName, listener, true);\n    }\n    emit(eventName, ...args) {\n        let result = false;\n        let stopped = [];\n        let eventTag = getEventTag(eventName);\n        this._events = this._events.filter((event) => {\n            if (event.tag !== eventTag) {\n                return true;\n            }\n            setTimeout(() => {\n                event.listener.apply(this, args);\n            }, 0);\n            result = true;\n            if (event.once) {\n                stopped.push(event);\n                return false;\n            }\n            return true;\n        });\n        stopped.forEach((event) => { this._stopEvent(event); });\n        return result;\n    }\n    listenerCount(eventName) {\n        if (!eventName) {\n            return this._events.length;\n        }\n        let eventTag = getEventTag(eventName);\n        return this._events.filter((event) => {\n            return (event.tag === eventTag);\n        }).length;\n    }\n    listeners(eventName) {\n        if (eventName == null) {\n            return this._events.map((event) => event.listener);\n        }\n        let eventTag = getEventTag(eventName);\n        return this._events\n            .filter((event) => (event.tag === eventTag))\n            .map((event) => event.listener);\n    }\n    off(eventName, listener) {\n        if (listener == null) {\n            return this.removeAllListeners(eventName);\n        }\n        const stopped = [];\n        let found = false;\n        let eventTag = getEventTag(eventName);\n        this._events = this._events.filter((event) => {\n            if (event.tag !== eventTag || event.listener != listener) {\n                return true;\n            }\n            if (found) {\n                return true;\n            }\n            found = true;\n            stopped.push(event);\n            return false;\n        });\n        stopped.forEach((event) => { this._stopEvent(event); });\n        return this;\n    }\n    removeAllListeners(eventName) {\n        let stopped = [];\n        if (eventName == null) {\n            stopped = this._events;\n            this._events = [];\n        }\n        else {\n            const eventTag = getEventTag(eventName);\n            this._events = this._events.filter((event) => {\n                if (event.tag !== eventTag) {\n                    return true;\n                }\n                stopped.push(event);\n                return false;\n            });\n        }\n        stopped.forEach((event) => { this._stopEvent(event); });\n        return this;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}