{"ast":null,"code":"'use strict'; // @ts-ignore node-forge types not exported\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nrequire('node-forge/lib/pkcs7'); // @ts-ignore node-forge types not exported\n\n\nrequire('node-forge/lib/pbe'); // @ts-ignore node-forge types not exported\n\n\nconst forge = require('node-forge/lib/forge');\n\nconst {\n  certificateForKey,\n  findAsync\n} = require('./util');\n\nconst errcode = require('err-code');\n\nconst {\n  fromString: uint8ArrayFromString\n} = require('uint8arrays/from-string');\n\nconst {\n  toString: uint8ArrayToString\n} = require('uint8arrays/to-string');\n\nconst privates = new WeakMap();\n/**\n * Cryptographic Message Syntax (aka PKCS #7)\n *\n * CMS describes an encapsulation syntax for data protection. It\n * is used to digitally sign, digest, authenticate, or encrypt\n * arbitrary message content.\n *\n * See RFC 5652 for all the details.\n */\n\nclass CMS {\n  /**\n   * Creates a new instance with a keychain\n   *\n   * @param {import('./index')} keychain - the available keys\n   * @param {string} dek\n   */\n  constructor(keychain, dek) {\n    if (!keychain) {\n      throw errcode(new Error('keychain is required'), 'ERR_KEYCHAIN_REQUIRED');\n    }\n\n    this.keychain = keychain;\n    privates.set(this, {\n      dek\n    });\n  }\n  /**\n   * Creates some protected data.\n   *\n   * The output Uint8Array contains the PKCS #7 message in DER.\n   *\n   * @param {string} name - The local key name.\n   * @param {Uint8Array} plain - The data to encrypt.\n   * @returns {Promise<Uint8Array>}\n   */\n\n\n  encrypt(name, plain) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (!(plain instanceof Uint8Array)) {\n        throw errcode(new Error('Plain data must be a Uint8Array'), 'ERR_INVALID_PARAMS');\n      }\n\n      const key = yield _this.keychain.findKeyByName(name);\n      const pem = yield _this.keychain._getPrivateKey(name);\n      /** @type {string} */\n\n      const dek = privates.get(_this).dek;\n      const privateKey = forge.pki.decryptRsaPrivateKey(pem, dek);\n      const certificate = yield certificateForKey(key, privateKey); // create a p7 enveloped message\n\n      const p7 = forge.pkcs7.createEnvelopedData();\n      p7.addRecipient(certificate);\n      p7.content = forge.util.createBuffer(plain);\n      p7.encrypt(); // convert message to DER\n\n      const der = forge.asn1.toDer(p7.toAsn1()).getBytes();\n      return uint8ArrayFromString(der, 'ascii');\n    })();\n  }\n  /**\n   * Reads some protected data.\n   *\n   * The keychain must contain one of the keys used to encrypt the data.  If none of the keys\n   * exists, an Error is returned with the property 'missingKeys'.  It is array of key ids.\n   *\n   * @param {Uint8Array} cmsData - The CMS encrypted data to decrypt.\n   * @returns {Promise<Uint8Array>}\n   */\n\n\n  decrypt(cmsData) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      if (!(cmsData instanceof Uint8Array)) {\n        throw errcode(new Error('CMS data is required'), 'ERR_INVALID_PARAMS');\n      }\n\n      let cms;\n\n      try {\n        const buf = forge.util.createBuffer(uint8ArrayToString(cmsData, 'ascii'));\n        const obj = forge.asn1.fromDer(buf); // @ts-ignore not defined\n\n        cms = forge.pkcs7.messageFromAsn1(obj);\n      } catch (err) {\n        throw errcode(new Error('Invalid CMS: ' + err.message), 'ERR_INVALID_CMS');\n      } // Find a recipient whose key we hold. We only deal with recipient certs\n      // issued by ipfs (O=ipfs).\n\n\n      const recipients = cms.recipients // @ts-ignore cms types not defined\n      .filter(r => r.issuer.find(a => a.shortName === 'O' && a.value === 'ipfs')) // @ts-ignore cms types not defined\n      .filter(r => r.issuer.find(a => a.shortName === 'CN')) // @ts-ignore cms types not defined\n      .map(r => {\n        return {\n          recipient: r,\n          // @ts-ignore cms types not defined\n          keyId: r.issuer.find(a => a.shortName === 'CN').value\n        };\n      });\n      const r = yield findAsync(recipients, /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (recipient) {\n          try {\n            const key = yield _this2.keychain.findKeyById(recipient.keyId);\n            if (key) return true;\n          } catch (err) {\n            return false;\n          }\n\n          return false;\n        });\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n\n      if (!r) {\n        // @ts-ignore cms types not defined\n        const missingKeys = recipients.map(r => r.keyId);\n        throw errcode(new Error('Decryption needs one of the key(s): ' + missingKeys.join(', ')), 'ERR_MISSING_KEYS', {\n          missingKeys\n        });\n      }\n\n      const key = yield _this2.keychain.findKeyById(r.keyId);\n\n      if (!key) {\n        throw errcode(new Error('No key available to decrypto'), 'ERR_NO_KEY');\n      }\n\n      const pem = yield _this2.keychain._getPrivateKey(key.name);\n      const dek = privates.get(_this2).dek;\n      const privateKey = forge.pki.decryptRsaPrivateKey(pem, dek);\n      cms.decrypt(r.recipient, privateKey);\n      return uint8ArrayFromString(cms.content.getBytes(), 'ascii');\n    })();\n  }\n\n}\n\nmodule.exports = CMS;","map":null,"metadata":{},"sourceType":"script"}