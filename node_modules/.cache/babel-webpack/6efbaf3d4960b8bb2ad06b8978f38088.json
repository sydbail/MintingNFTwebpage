{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/Dapp/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst log = require('debug')('mss:select');\n\nconst errCode = require('err-code');\n\nconst multistream = require('./multistream');\n\nconst handshake = require('it-handshake');\n\nmodule.exports = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (stream, protocols, protocolId) {\n    protocols = Array.isArray(protocols) ? [...protocols] : [protocols];\n    const {\n      reader,\n      writer,\n      rest,\n      stream: shakeStream\n    } = handshake(stream);\n    const protocol = protocols.shift();\n\n    if (protocolId) {\n      log('select: write [\"%s\", \"%s\"]', protocolId, protocol);\n      multistream.writeAll(writer, [protocolId, protocol]);\n    } else {\n      log('select: write \"%s\"', protocol);\n      multistream.write(writer, protocol);\n    }\n\n    let response = (yield multistream.read(reader)).toString();\n    log('select: read \"%s\"', response); // Read the protocol response if we got the protocolId in return\n\n    if (response === protocolId) {\n      response = (yield multistream.read(reader)).toString();\n      log('select: read \"%s\"', response);\n    } // We're done\n\n\n    if (response === protocol) {\n      rest();\n      return {\n        stream: shakeStream,\n        protocol\n      };\n    } // We haven't gotten a valid ack, try the other protocols\n\n\n    for (const protocol of protocols) {\n      log('select: write \"%s\"', protocol);\n      multistream.write(writer, protocol);\n      const response = (yield multistream.read(reader)).toString();\n      log('select: read \"%s\" for \"%s\"', response, protocol);\n\n      if (response === protocol) {\n        rest(); // End our writer so others can start writing to stream\n\n        return {\n          stream: shakeStream,\n          protocol\n        };\n      }\n    }\n\n    rest();\n    throw errCode(new Error('protocol selection failed'), 'ERR_UNSUPPORTED_PROTOCOL');\n  });\n\n  return function (_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Dapp/node_modules/multistream-select/src/select.js"],"names":["log","require","errCode","multistream","handshake","module","exports","stream","protocols","protocolId","Array","isArray","reader","writer","rest","shakeStream","protocol","shift","writeAll","write","response","read","toString","Error"],"mappings":"AAAA;;;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,OAAD,CAAP,CAAiB,YAAjB,CAAZ;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAME,WAAW,GAAGF,OAAO,CAAC,eAAD,CAA3B;;AACA,MAAMG,SAAS,GAAGH,OAAO,CAAC,cAAD,CAAzB;;AAEAI,MAAM,CAACC,OAAP;AAAA,+BAAiB,WAAOC,MAAP,EAAeC,SAAf,EAA0BC,UAA1B,EAAyC;AACxDD,IAAAA,SAAS,GAAGE,KAAK,CAACC,OAAN,CAAcH,SAAd,IAA2B,CAAC,GAAGA,SAAJ,CAA3B,GAA4C,CAACA,SAAD,CAAxD;AACA,UAAM;AAAEI,MAAAA,MAAF;AAAUC,MAAAA,MAAV;AAAkBC,MAAAA,IAAlB;AAAwBP,MAAAA,MAAM,EAAEQ;AAAhC,QAAgDX,SAAS,CAACG,MAAD,CAA/D;AAEA,UAAMS,QAAQ,GAAGR,SAAS,CAACS,KAAV,EAAjB;;AACA,QAAIR,UAAJ,EAAgB;AACdT,MAAAA,GAAG,CAAC,4BAAD,EAA+BS,UAA/B,EAA2CO,QAA3C,CAAH;AACAb,MAAAA,WAAW,CAACe,QAAZ,CAAqBL,MAArB,EAA6B,CAACJ,UAAD,EAAaO,QAAb,CAA7B;AACD,KAHD,MAGO;AACLhB,MAAAA,GAAG,CAAC,oBAAD,EAAuBgB,QAAvB,CAAH;AACAb,MAAAA,WAAW,CAACgB,KAAZ,CAAkBN,MAAlB,EAA0BG,QAA1B;AACD;;AAED,QAAII,QAAQ,GAAG,OAAOjB,WAAW,CAACkB,IAAZ,CAAiBT,MAAjB,CAAP,EAAiCU,QAAjC,EAAf;AACAtB,IAAAA,GAAG,CAAC,mBAAD,EAAsBoB,QAAtB,CAAH,CAdwD,CAgBxD;;AACA,QAAIA,QAAQ,KAAKX,UAAjB,EAA6B;AAC3BW,MAAAA,QAAQ,GAAG,OAAOjB,WAAW,CAACkB,IAAZ,CAAiBT,MAAjB,CAAP,EAAiCU,QAAjC,EAAX;AACAtB,MAAAA,GAAG,CAAC,mBAAD,EAAsBoB,QAAtB,CAAH;AACD,KApBuD,CAsBxD;;;AACA,QAAIA,QAAQ,KAAKJ,QAAjB,EAA2B;AACzBF,MAAAA,IAAI;AACJ,aAAO;AAAEP,QAAAA,MAAM,EAAEQ,WAAV;AAAuBC,QAAAA;AAAvB,OAAP;AACD,KA1BuD,CA4BxD;;;AACA,SAAK,MAAMA,QAAX,IAAuBR,SAAvB,EAAkC;AAChCR,MAAAA,GAAG,CAAC,oBAAD,EAAuBgB,QAAvB,CAAH;AACAb,MAAAA,WAAW,CAACgB,KAAZ,CAAkBN,MAAlB,EAA0BG,QAA1B;AACA,YAAMI,QAAQ,GAAG,OAAOjB,WAAW,CAACkB,IAAZ,CAAiBT,MAAjB,CAAP,EAAiCU,QAAjC,EAAjB;AACAtB,MAAAA,GAAG,CAAC,4BAAD,EAA+BoB,QAA/B,EAAyCJ,QAAzC,CAAH;;AAEA,UAAII,QAAQ,KAAKJ,QAAjB,EAA2B;AACzBF,QAAAA,IAAI,GADqB,CAClB;;AACP,eAAO;AAAEP,UAAAA,MAAM,EAAEQ,WAAV;AAAuBC,UAAAA;AAAvB,SAAP;AACD;AACF;;AAEDF,IAAAA,IAAI;AACJ,UAAMZ,OAAO,CAAC,IAAIqB,KAAJ,CAAU,2BAAV,CAAD,EAAyC,0BAAzC,CAAb;AACD,GA3CD;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["'use strict'\n\nconst log = require('debug')('mss:select')\nconst errCode = require('err-code')\nconst multistream = require('./multistream')\nconst handshake = require('it-handshake')\n\nmodule.exports = async (stream, protocols, protocolId) => {\n  protocols = Array.isArray(protocols) ? [...protocols] : [protocols]\n  const { reader, writer, rest, stream: shakeStream } = handshake(stream)\n\n  const protocol = protocols.shift()\n  if (protocolId) {\n    log('select: write [\"%s\", \"%s\"]', protocolId, protocol)\n    multistream.writeAll(writer, [protocolId, protocol])\n  } else {\n    log('select: write \"%s\"', protocol)\n    multistream.write(writer, protocol)\n  }\n\n  let response = (await multistream.read(reader)).toString()\n  log('select: read \"%s\"', response)\n\n  // Read the protocol response if we got the protocolId in return\n  if (response === protocolId) {\n    response = (await multistream.read(reader)).toString()\n    log('select: read \"%s\"', response)\n  }\n\n  // We're done\n  if (response === protocol) {\n    rest()\n    return { stream: shakeStream, protocol }\n  }\n\n  // We haven't gotten a valid ack, try the other protocols\n  for (const protocol of protocols) {\n    log('select: write \"%s\"', protocol)\n    multistream.write(writer, protocol)\n    const response = (await multistream.read(reader)).toString()\n    log('select: read \"%s\" for \"%s\"', response, protocol)\n\n    if (response === protocol) {\n      rest() // End our writer so others can start writing to stream\n      return { stream: shakeStream, protocol }\n    }\n  }\n\n  rest()\n  throw errCode(new Error('protocol selection failed'), 'ERR_UNSUPPORTED_PROTOCOL')\n}\n"]},"metadata":{},"sourceType":"script"}