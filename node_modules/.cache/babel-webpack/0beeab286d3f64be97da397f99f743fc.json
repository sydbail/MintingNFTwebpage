{"ast":null,"code":"'use strict';\n\nvar _awaitAsyncGenerator = require(\"/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\").default;\n\nvar _wrapAsyncGenerator = require(\"/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst configure = require('../lib/configure');\n\nconst {\n  normaliseInput\n} = require('ipfs-core-utils/src/pins/normalise-input');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin').API<HTTPClientExtraOptions>} PinAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {PinAPI[\"addAll\"]}\n   */\n  function addAll(_x) {\n    return _addAll.apply(this, arguments);\n  }\n\n  function _addAll() {\n    _addAll = _wrapAsyncGenerator(function* (source, options = {}) {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n\n      var _iteratorError;\n\n      try {\n        for (var _iterator = _asyncIterator(normaliseInput(source)), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n          const {\n            path,\n            recursive,\n            metadata\n          } = _value;\n          const res = yield _awaitAsyncGenerator(api.post('pin/add', {\n            timeout: options.timeout,\n            signal: options.signal,\n            searchParams: toUrlSearchParams({ ...options,\n              arg: path,\n              recursive,\n              metadata: metadata ? JSON.stringify(metadata) : undefined,\n              stream: true\n            }),\n            headers: options.headers\n          }));\n          var _iteratorNormalCompletion2 = true;\n          var _didIteratorError2 = false;\n\n          var _iteratorError2;\n\n          try {\n            for (var _iterator2 = _asyncIterator(res.ndjson()), _step2, _value2; _step2 = yield _awaitAsyncGenerator(_iterator2.next()), _iteratorNormalCompletion2 = _step2.done, _value2 = yield _awaitAsyncGenerator(_step2.value), !_iteratorNormalCompletion2; _iteratorNormalCompletion2 = true) {\n              const pin = _value2;\n\n              if (pin.Pins) {\n                // non-streaming response\n                for (const cid of pin.Pins) {\n                  yield CID.parse(cid);\n                }\n\n                continue;\n              }\n\n              yield CID.parse(pin);\n            }\n          } catch (err) {\n            _didIteratorError2 = true;\n            _iteratorError2 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                yield _awaitAsyncGenerator(_iterator2.return());\n              }\n            } finally {\n              if (_didIteratorError2) {\n                throw _iteratorError2;\n              }\n            }\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            yield _awaitAsyncGenerator(_iterator.return());\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    });\n    return _addAll.apply(this, arguments);\n  }\n\n  return addAll;\n});","map":{"version":3,"sources":["/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/ipfs-http-client/src/pin/add-all.js"],"names":["CID","require","configure","normaliseInput","toUrlSearchParams","module","exports","api","addAll","source","options","path","recursive","metadata","res","post","timeout","signal","searchParams","arg","JSON","stringify","undefined","stream","headers","ndjson","pin","Pins","cid","parse"],"mappings":"AAAA;;;;;;;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAUC,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAqBF,OAAO,CAAC,0CAAD,CAAlC;;AACA,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,6BAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AAEAI,MAAM,CAACC,OAAP,GAAiBJ,SAAS,CAACK,GAAG,IAAI;AAChC;AACF;AACA;AAHkC,WAIfC,MAJe;AAAA;AAAA;;AAAA;AAAA,kCAIhC,WAAyBC,MAAzB,EAAiCC,OAAO,GAAG,EAA3C,EAA+C;AAAA;AAAA;;AAAA;;AAAA;AAC7C,4CAAkDP,cAAc,CAACM,MAAD,CAAhE,gOAA0E;AAAA,gBAAzD;AAAEE,YAAAA,IAAF;AAAQC,YAAAA,SAAR;AAAmBC,YAAAA;AAAnB,WAAyD;AACxE,gBAAMC,GAAG,8BAASP,GAAG,CAACQ,IAAJ,CAAS,SAAT,EAAoB;AACpCC,YAAAA,OAAO,EAAEN,OAAO,CAACM,OADmB;AAEpCC,YAAAA,MAAM,EAAEP,OAAO,CAACO,MAFoB;AAGpCC,YAAAA,YAAY,EAAEd,iBAAiB,CAAC,EAC9B,GAAGM,OAD2B;AAE9BS,cAAAA,GAAG,EAAER,IAFyB;AAG9BC,cAAAA,SAH8B;AAI9BC,cAAAA,QAAQ,EAAEA,QAAQ,GAAGO,IAAI,CAACC,SAAL,CAAeR,QAAf,CAAH,GAA8BS,SAJlB;AAK9BC,cAAAA,MAAM,EAAE;AALsB,aAAD,CAHK;AAUpCC,YAAAA,OAAO,EAAEd,OAAO,CAACc;AAVmB,WAApB,CAAT,CAAT;AADwE;AAAA;;AAAA;;AAAA;AAcxE,iDAAwBV,GAAG,CAACW,MAAJ,EAAxB,0OAAsC;AAAA,oBAArBC,GAAqB;;AACpC,kBAAIA,GAAG,CAACC,IAAR,EAAc;AAAE;AACd,qBAAK,MAAMC,GAAX,IAAkBF,GAAG,CAACC,IAAtB,EAA4B;AAC1B,wBAAM3B,GAAG,CAAC6B,KAAJ,CAAUD,GAAV,CAAN;AACD;;AACD;AACD;;AAED,oBAAM5B,GAAG,CAAC6B,KAAJ,CAAUH,GAAV,CAAN;AACD;AAvBuE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAwBzE;AAzB4C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA0B9C,KA9B+B;AAAA;AAAA;;AA+BhC,SAAOlB,MAAP;AACD,CAhCyB,CAA1B","sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst configure = require('../lib/configure')\nconst { normaliseInput } = require('ipfs-core-utils/src/pins/normalise-input')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin').API<HTTPClientExtraOptions>} PinAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {PinAPI[\"addAll\"]}\n   */\n  async function * addAll (source, options = {}) {\n    for await (const { path, recursive, metadata } of normaliseInput(source)) {\n      const res = await api.post('pin/add', {\n        timeout: options.timeout,\n        signal: options.signal,\n        searchParams: toUrlSearchParams({\n          ...options,\n          arg: path,\n          recursive,\n          metadata: metadata ? JSON.stringify(metadata) : undefined,\n          stream: true\n        }),\n        headers: options.headers\n      })\n\n      for await (const pin of res.ndjson()) {\n        if (pin.Pins) { // non-streaming response\n          for (const cid of pin.Pins) {\n            yield CID.parse(cid)\n          }\n          continue\n        }\n\n        yield CID.parse(pin)\n      }\n    }\n  }\n  return addAll\n})\n"]},"metadata":{},"sourceType":"script"}