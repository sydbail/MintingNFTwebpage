{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst {\n  UnixFS\n} = require('ipfs-unixfs');\n\nconst dagPb = require('@ipld/dag-pb');\n\nconst {\n  CID\n} = require('multiformats/cid');\n/**\n * @typedef {import('ipfs-unixfs').MtimeLike} MtimeLike\n * @typedef {import('multiformats/cid').CIDVersion} CIDVersion\n * @typedef {import('../').MfsContext} MfsContext\n */\n\n/**\n * @param {MfsContext} context\n * @param {'file' | 'directory'} type\n * @param {object} options\n * @param {string} options.hashAlg\n * @param {CIDVersion} options.cidVersion\n * @param {boolean} options.flush\n * @param {MtimeLike} [options.mtime]\n * @param {number} [options.mode]\n */\n\n\nconst createNode = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (context, type, options) {\n    const metadata = new UnixFS({\n      type,\n      mode: options.mode,\n      // @ts-ignore TODO: restore hrtime support to ipfs-unixfs constructor - it's in the code, just not the signature\n      mtime: options.mtime\n    }); // Persist the new parent PBNode\n\n    const hasher = yield context.hashers.getHasher(options.hashAlg);\n    const node = {\n      Data: metadata.marshal(),\n      Links: []\n    };\n    const buf = dagPb.encode(node);\n    const hash = yield hasher.digest(buf);\n    const cid = CID.create(options.cidVersion, dagPb.code, hash);\n\n    if (options.flush) {\n      yield context.repo.blocks.put(cid, buf);\n    }\n\n    return {\n      cid,\n      node\n    };\n  });\n\n  return function createNode(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nmodule.exports = createNode;","map":null,"metadata":{},"sourceType":"script"}