{"ast":null,"code":"'use strict';\n\nvar _awaitAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\").default;\n\nvar _wrapAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nconst {\n  Multiaddr\n} = require('multiaddr');\n\nconst toCamel = require('../lib/object-to-camel');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n * @typedef {import('multiformats/cid').CID} CID\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {DHTAPI[\"provide\"]}\n   */\n  function provide(_x) {\n    return _provide.apply(this, arguments);\n  }\n\n  function _provide() {\n    _provide = _wrapAsyncGenerator(function* (cids, options = {\n      recursive: false\n    }) {\n      /** @type {CID[]} */\n      const cidArr = Array.isArray(cids) ? cids : [cids];\n      const res = yield _awaitAsyncGenerator(api.post('dht/provide', {\n        timeout: options.timeout,\n        signal: options.signal,\n        searchParams: toUrlSearchParams({\n          arg: cidArr.map(cid => cid.toString()),\n          ...options\n        }),\n        headers: options.headers\n      }));\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n\n      var _iteratorError;\n\n      try {\n        for (var _iterator = _asyncIterator(res.ndjson()), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n          let message = _value;\n          message = toCamel(message);\n\n          if (message.responses) {\n            message.responses = message.responses.map((\n            /** @type {{ ID: string, Addrs: string[] }} */\n            {\n              ID,\n              Addrs\n            }) => ({\n              id: ID,\n              addrs: (Addrs || []).map((\n              /** @type {string} **/\n              a) => new Multiaddr(a))\n            }));\n          } else {\n            message.responses = [];\n          }\n\n          yield message;\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            yield _awaitAsyncGenerator(_iterator.return());\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    });\n    return _provide.apply(this, arguments);\n  }\n\n  return provide;\n});","map":null,"metadata":{},"sourceType":"script"}