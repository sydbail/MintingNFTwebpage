{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst {\n  Record\n} = require('libp2p-record');\n\nconst errcode = require('err-code');\n\nconst Message = require('../../message');\n\nconst utils = require('../../utils');\n/**\n * @typedef {import('peer-id')} PeerId\n */\n\n/**\n * @param {import('../../index')} dht\n */\n\n\nmodule.exports = dht => {\n  const log = utils.logger(dht.peerId, 'rpc:get-value');\n  /**\n   * Process `GetValue` DHT messages.\n   *\n   * @param {PeerId} peerId\n   * @param {Message} msg\n   * @returns {Promise<Message>}\n   */\n\n  function getValue(_x, _x2) {\n    return _getValue.apply(this, arguments);\n  }\n\n  function _getValue() {\n    _getValue = _asyncToGenerator(function* (peerId, msg) {\n      const key = msg.key;\n      log('key: %b', key);\n\n      if (!key || key.length === 0) {\n        throw errcode(new Error('Invalid key'), 'ERR_INVALID_KEY');\n      }\n\n      const response = new Message(Message.TYPES.GET_VALUE, key, msg.clusterLevel);\n\n      if (utils.isPublicKeyKey(key)) {\n        log('is public key');\n        const idFromKey = utils.fromPublicKeyKey(key);\n        let id;\n\n        if (dht._isSelf(idFromKey)) {\n          id = dht.peerId;\n        } else {\n          const peerData = dht.peerStore.get(idFromKey);\n          id = peerData && peerData.id;\n        }\n\n        if (id && id.pubKey) {\n          log('returning found public key');\n          response.record = new Record(key, id.pubKey.bytes);\n          return response;\n        }\n      }\n\n      const [record, closer] = yield Promise.all([dht._checkLocalDatastore(key), dht._betterPeersToQuery(msg, peerId)]);\n\n      if (record) {\n        log('got record');\n        response.record = record;\n      }\n\n      if (closer.length > 0) {\n        log('got closer %s', closer.length);\n        response.closerPeers = closer;\n      }\n\n      return response;\n    });\n    return _getValue.apply(this, arguments);\n  }\n\n  return getValue;\n};","map":{"version":3,"sources":["/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/libp2p-kad-dht/src/rpc/handlers/get-value.js"],"names":["Record","require","errcode","Message","utils","module","exports","dht","log","logger","peerId","getValue","msg","key","length","Error","response","TYPES","GET_VALUE","clusterLevel","isPublicKeyKey","idFromKey","fromPublicKeyKey","id","_isSelf","peerData","peerStore","get","pubKey","record","bytes","closer","Promise","all","_checkLocalDatastore","_betterPeersToQuery","closerPeers"],"mappings":"AAAA;;;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAaC,OAAO,CAAC,eAAD,CAA1B;;AAEA,MAAMC,OAAO,GAAGD,OAAO,CAAC,UAAD,CAAvB;;AAEA,MAAME,OAAO,GAAGF,OAAO,CAAC,eAAD,CAAvB;;AACA,MAAMG,KAAK,GAAGH,OAAO,CAAC,aAAD,CAArB;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;AACAI,MAAM,CAACC,OAAP,GAAkBC,GAAD,IAAS;AACxB,QAAMC,GAAG,GAAGJ,KAAK,CAACK,MAAN,CAAaF,GAAG,CAACG,MAAjB,EAAyB,eAAzB,CAAZ;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;AAT0B,WAUTC,QAVS;AAAA;AAAA;;AAAA;AAAA,kCAUxB,WAAyBD,MAAzB,EAAiCE,GAAjC,EAAsC;AACpC,YAAMC,GAAG,GAAGD,GAAG,CAACC,GAAhB;AAEAL,MAAAA,GAAG,CAAC,SAAD,EAAYK,GAAZ,CAAH;;AAEA,UAAI,CAACA,GAAD,IAAQA,GAAG,CAACC,MAAJ,KAAe,CAA3B,EAA8B;AAC5B,cAAMZ,OAAO,CAAC,IAAIa,KAAJ,CAAU,aAAV,CAAD,EAA2B,iBAA3B,CAAb;AACD;;AAED,YAAMC,QAAQ,GAAG,IAAIb,OAAJ,CAAYA,OAAO,CAACc,KAAR,CAAcC,SAA1B,EAAqCL,GAArC,EAA0CD,GAAG,CAACO,YAA9C,CAAjB;;AAEA,UAAIf,KAAK,CAACgB,cAAN,CAAqBP,GAArB,CAAJ,EAA+B;AAC7BL,QAAAA,GAAG,CAAC,eAAD,CAAH;AACA,cAAMa,SAAS,GAAGjB,KAAK,CAACkB,gBAAN,CAAuBT,GAAvB,CAAlB;AACA,YAAIU,EAAJ;;AAEA,YAAIhB,GAAG,CAACiB,OAAJ,CAAYH,SAAZ,CAAJ,EAA4B;AAC1BE,UAAAA,EAAE,GAAGhB,GAAG,CAACG,MAAT;AACD,SAFD,MAEO;AACL,gBAAMe,QAAQ,GAAGlB,GAAG,CAACmB,SAAJ,CAAcC,GAAd,CAAkBN,SAAlB,CAAjB;AACAE,UAAAA,EAAE,GAAGE,QAAQ,IAAIA,QAAQ,CAACF,EAA1B;AACD;;AAED,YAAIA,EAAE,IAAIA,EAAE,CAACK,MAAb,EAAqB;AACnBpB,UAAAA,GAAG,CAAC,4BAAD,CAAH;AACAQ,UAAAA,QAAQ,CAACa,MAAT,GAAkB,IAAI7B,MAAJ,CAAWa,GAAX,EAAgBU,EAAE,CAACK,MAAH,CAAUE,KAA1B,CAAlB;AACA,iBAAOd,QAAP;AACD;AACF;;AAED,YAAM,CAACa,MAAD,EAASE,MAAT,UAAyBC,OAAO,CAACC,GAAR,CAAY,CACzC1B,GAAG,CAAC2B,oBAAJ,CAAyBrB,GAAzB,CADyC,EAEzCN,GAAG,CAAC4B,mBAAJ,CAAwBvB,GAAxB,EAA6BF,MAA7B,CAFyC,CAAZ,CAA/B;;AAKA,UAAImB,MAAJ,EAAY;AACVrB,QAAAA,GAAG,CAAC,YAAD,CAAH;AACAQ,QAAAA,QAAQ,CAACa,MAAT,GAAkBA,MAAlB;AACD;;AAED,UAAIE,MAAM,CAACjB,MAAP,GAAgB,CAApB,EAAuB;AACrBN,QAAAA,GAAG,CAAC,eAAD,EAAkBuB,MAAM,CAACjB,MAAzB,CAAH;AACAE,QAAAA,QAAQ,CAACoB,WAAT,GAAuBL,MAAvB;AACD;;AAED,aAAOf,QAAP;AACD,KAxDuB;AAAA;AAAA;;AA0DxB,SAAOL,QAAP;AACD,CA3DD","sourcesContent":["'use strict'\n\nconst { Record } = require('libp2p-record')\n\nconst errcode = require('err-code')\n\nconst Message = require('../../message')\nconst utils = require('../../utils')\n\n/**\n * @typedef {import('peer-id')} PeerId\n */\n\n/**\n * @param {import('../../index')} dht\n */\nmodule.exports = (dht) => {\n  const log = utils.logger(dht.peerId, 'rpc:get-value')\n\n  /**\n   * Process `GetValue` DHT messages.\n   *\n   * @param {PeerId} peerId\n   * @param {Message} msg\n   * @returns {Promise<Message>}\n   */\n  async function getValue (peerId, msg) {\n    const key = msg.key\n\n    log('key: %b', key)\n\n    if (!key || key.length === 0) {\n      throw errcode(new Error('Invalid key'), 'ERR_INVALID_KEY')\n    }\n\n    const response = new Message(Message.TYPES.GET_VALUE, key, msg.clusterLevel)\n\n    if (utils.isPublicKeyKey(key)) {\n      log('is public key')\n      const idFromKey = utils.fromPublicKeyKey(key)\n      let id\n\n      if (dht._isSelf(idFromKey)) {\n        id = dht.peerId\n      } else {\n        const peerData = dht.peerStore.get(idFromKey)\n        id = peerData && peerData.id\n      }\n\n      if (id && id.pubKey) {\n        log('returning found public key')\n        response.record = new Record(key, id.pubKey.bytes)\n        return response\n      }\n    }\n\n    const [record, closer] = await Promise.all([\n      dht._checkLocalDatastore(key),\n      dht._betterPeersToQuery(msg, peerId)\n    ])\n\n    if (record) {\n      log('got record')\n      response.record = record\n    }\n\n    if (closer.length > 0) {\n      log('got closer %s', closer.length)\n      response.closerPeers = closer\n    }\n\n    return response\n  }\n\n  return getValue\n}\n"]},"metadata":{},"sourceType":"script"}