{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst ipns = require('ipns');\n\nconst {\n  base58btc\n} = require('multiformats/bases/base58');\n\nconst PubsubDatastore = require('datastore-pubsub');\n\nconst {\n  fromString: uint8ArrayFromString\n} = require('uint8arrays/from-string');\n\nconst {\n  toString: uint8ArrayToString\n} = require('uint8arrays/to-string');\n\nconst errcode = require('err-code');\n\nconst debug = require('debug');\n\nconst log = Object.assign(debug('ipfs:ipns:pubsub'), {\n  error: debug('ipfs:ipns:pubsub:error')\n}); // Pubsub datastore aims to manage the pubsub subscriptions for IPNS\n\nclass IpnsPubsubDatastore {\n  /**\n   * @param {import('libp2p-interfaces/src/pubsub')} pubsub\n   * @param {import('interface-datastore').Datastore} localDatastore\n   * @param {import('peer-id')} peerId\n   */\n  constructor(pubsub, localDatastore, peerId) {\n    /** @type {Record<string, string>} */\n    this._subscriptions = {}; // Bind _handleSubscriptionKey function, which is called by PubsubDatastore.\n\n    this._handleSubscriptionKey = this._handleSubscriptionKey.bind(this); // @ts-ignore will be fixed by https://github.com/ipfs/js-datastore-pubsub/pull/74\n\n    this._pubsubDs = new PubsubDatastore(pubsub, localDatastore, peerId, ipns.validator, this._handleSubscriptionKey);\n  }\n  /**\n   * Put a value to the pubsub datastore indexed by the received key properly encoded.\n   *\n   * @param {Uint8Array} key - identifier of the value.\n   * @param {Uint8Array} value - value to be stored.\n   */\n\n\n  put(key, value) {\n    // @ts-ignore datastores take Key keys, this one takes Uint8Array keys\n    return this._pubsubDs.put(key, value);\n  }\n  /**\n   * Get a value from the pubsub datastore indexed by the received key properly encoded.\n   * Also, the identifier topic is subscribed to and the pubsub datastore records will be\n   * updated once new publishes occur.\n   *\n   * @param {Uint8Array} key - identifier of the value to be obtained.\n   */\n\n\n  get(key) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      let res;\n      let err;\n\n      try {\n        // @ts-ignore datastores take Key keys, this one takes Uint8Array keys\n        res = yield _this._pubsubDs.get(key);\n      } catch (e) {\n        err = e;\n      } // Add topic subscribed\n\n\n      const ns = key.slice(0, ipns.namespaceLength);\n\n      if (uint8ArrayToString(ns) === ipns.namespace) {\n        const stringifiedTopic = base58btc.encode(key).substring(1);\n        const id = base58btc.encode(key.slice(ipns.namespaceLength)).substring(1);\n        _this._subscriptions[stringifiedTopic] = id;\n        log(`subscribed to pubsub topic ${stringifiedTopic}, id ${id}`);\n      } // If no data was obtained, after storing the subscription, return the error.\n\n\n      if (err) {\n        throw err;\n      }\n\n      return res;\n    })();\n  }\n  /**\n   * Modify subscription key to have a proper encoding\n   *\n   * @param {Uint8Array | string} key\n   */\n\n\n  _handleSubscriptionKey(key) {\n    if (key instanceof Uint8Array) {\n      key = uint8ArrayToString(key, 'base58btc');\n    }\n\n    const subscriber = this._subscriptions[key];\n\n    if (!subscriber) {\n      throw errcode(new Error(`key ${key} does not correspond to a subscription`), 'ERR_INVALID_KEY');\n    }\n\n    let keys;\n\n    try {\n      keys = ipns.getIdKeys(uint8ArrayFromString(subscriber, 'base58btc'));\n    } catch (err) {\n      log.error(err);\n      throw err;\n    }\n\n    return keys.routingKey.uint8Array();\n  }\n  /**\n   * Get pubsub subscriptions related to ipns.\n   */\n\n\n  getSubscriptions() {\n    const subscriptions = Object.values(this._subscriptions).filter(Boolean);\n    return subscriptions.map(sub => `${ipns.namespace}${sub}`);\n  }\n  /**\n   * Cancel pubsub subscriptions related to ipns.\n   *\n   * @param {string} name - ipns path to cancel the pubsub subscription.\n   */\n\n\n  cancel(name) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      // eslint-disable-line require-await\n      if (typeof name !== 'string') {\n        throw errcode(new Error('invalid subscription name'), 'ERR_INVALID_SUBSCRIPTION_NAME');\n      } // Trim /ipns/ prefix from the name\n\n\n      if (name.startsWith(ipns.namespace)) {\n        name = name.substring(ipns.namespaceLength);\n      }\n\n      const stringifiedTopic = Object.keys(_this2._subscriptions).find(key => _this2._subscriptions[key] === name); // Not found topic\n\n      if (!stringifiedTopic) {\n        return {\n          canceled: false\n        };\n      } // Unsubscribe topic\n\n\n      const bufTopic = uint8ArrayFromString(stringifiedTopic);\n\n      _this2._pubsubDs.unsubscribe(bufTopic);\n\n      delete _this2._subscriptions[stringifiedTopic];\n      log(`unsubscribed pubsub ${stringifiedTopic}: ${name}`);\n      return {\n        canceled: true\n      };\n    })();\n  }\n\n}\n\nmodule.exports = IpnsPubsubDatastore;","map":null,"metadata":{},"sourceType":"script"}