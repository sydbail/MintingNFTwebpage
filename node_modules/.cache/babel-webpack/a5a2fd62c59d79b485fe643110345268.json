{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst debug = require('debug');\n\nconst log = Object.assign(debug('libp2p:relay'), {\n  error: debug('libp2p:relay:err')\n});\n\nconst {\n  setDelayedInterval,\n  clearDelayedInterval // @ts-ignore set-delayed-interval does not export types\n\n} = require('set-delayed-interval');\n\nconst AutoRelay = require('./auto-relay');\n\nconst {\n  namespaceToCid\n} = require('./utils');\n\nconst {\n  RELAY_RENDEZVOUS_NS\n} = require('./constants');\n/**\n * @typedef {import('../')} Libp2p\n *\n * @typedef {Object} RelayAdvertiseOptions\n * @property {number} [bootDelay = ADVERTISE_BOOT_DELAY]\n * @property {boolean} [enabled = true]\n * @property {number} [ttl = ADVERTISE_TTL]\n *\n * @typedef {Object} HopOptions\n * @property {boolean} [enabled = false]\n * @property {boolean} [active = false]\n *\n * @typedef {Object} AutoRelayOptions\n * @property {number} [maxListeners = 2] - maximum number of relays to listen.\n * @property {boolean} [enabled = false]\n */\n\n\nclass Relay {\n  /**\n   * Creates an instance of Relay.\n   *\n   * @class\n   * @param {Libp2p} libp2p\n   */\n  constructor(libp2p) {\n    this._libp2p = libp2p;\n    this._options = { ...libp2p._config.relay\n    }; // Create autoRelay if enabled\n\n    this._autoRelay = this._options.autoRelay.enabled && new AutoRelay({\n      libp2p,\n      ...this._options.autoRelay\n    });\n    this._advertiseService = this._advertiseService.bind(this);\n  }\n  /**\n   * Start Relay service.\n   *\n   * @returns {void}\n   */\n\n\n  start() {\n    // Advertise service if HOP enabled\n    const canHop = this._options.hop.enabled;\n\n    if (canHop && this._options.advertise.enabled) {\n      this._timeout = setDelayedInterval(this._advertiseService, this._options.advertise.ttl, this._options.advertise.bootDelay);\n    }\n  }\n  /**\n   * Stop Relay service.\n   *\n   * @returns {void}\n   */\n\n\n  stop() {\n    clearDelayedInterval(this._timeout);\n  }\n  /**\n   * Advertise hop relay service in the network.\n   *\n   * @returns {Promise<void>}\n   */\n\n\n  _advertiseService() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const cid = yield namespaceToCid(RELAY_RENDEZVOUS_NS);\n        yield _this._libp2p.contentRouting.provide(cid);\n      } catch (err) {\n        if (err.code === 'NO_ROUTERS_AVAILABLE') {\n          log.error('a content router, such as a DHT, must be provided in order to advertise the relay service', err); // Stop the advertise\n\n          _this.stop();\n        } else {\n          log.error(err);\n        }\n      }\n    })();\n  }\n\n}\n\nmodule.exports = Relay;","map":null,"metadata":{},"sourceType":"script"}