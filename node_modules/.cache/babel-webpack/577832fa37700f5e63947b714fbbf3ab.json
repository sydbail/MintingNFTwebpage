{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bitswap').API<HTTPClientExtraOptions>} BitswapAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {BitswapAPI[\"stat\"]}\n   */\n  function stat() {\n    return _stat.apply(this, arguments);\n  }\n\n  function _stat() {\n    _stat = _asyncToGenerator(function* (options = {}) {\n      const res = yield api.post('bitswap/stat', {\n        searchParams: toUrlSearchParams(options),\n        timeout: options.timeout,\n        signal: options.signal,\n        headers: options.headers\n      });\n      return toCoreInterface(yield res.json());\n    });\n    return _stat.apply(this, arguments);\n  }\n\n  return stat;\n});\n/**\n * @param {any} res\n */\n\nfunction toCoreInterface(res) {\n  return {\n    provideBufLen: res.ProvideBufLen,\n    wantlist: (res.Wantlist || []).map((\n    /** @type {{ '/': string }} */\n    k) => CID.parse(k['/'])),\n    peers: res.Peers || [],\n    blocksReceived: BigInt(res.BlocksReceived),\n    dataReceived: BigInt(res.DataReceived),\n    blocksSent: BigInt(res.BlocksSent),\n    dataSent: BigInt(res.DataSent),\n    dupBlksReceived: BigInt(res.DupBlksReceived),\n    dupDataReceived: BigInt(res.DupDataReceived)\n  };\n}","map":{"version":3,"sources":["/Users/sydneybailey/Internship/contract-testing/node_modules/ipfs-http-client/src/bitswap/stat.js"],"names":["CID","require","configure","toUrlSearchParams","module","exports","api","stat","options","res","post","searchParams","timeout","signal","headers","toCoreInterface","json","provideBufLen","ProvideBufLen","wantlist","Wantlist","map","k","parse","peers","Peers","blocksReceived","BigInt","BlocksReceived","dataReceived","DataReceived","blocksSent","BlocksSent","dataSent","DataSent","dupBlksReceived","DupBlksReceived","dupDataReceived","DupDataReceived"],"mappings":"AAAA;;;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAUC,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,6BAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AAEAG,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAACI,GAAG,IAAI;AAChC;AACF;AACA;AAHkC,WAIjBC,IAJiB;AAAA;AAAA;;AAAA;AAAA,8BAIhC,WAAqBC,OAAO,GAAG,EAA/B,EAAmC;AACjC,YAAMC,GAAG,SAASH,GAAG,CAACI,IAAJ,CAAS,cAAT,EAAyB;AACzCC,QAAAA,YAAY,EAAER,iBAAiB,CAACK,OAAD,CADU;AAEzCI,QAAAA,OAAO,EAAEJ,OAAO,CAACI,OAFwB;AAGzCC,QAAAA,MAAM,EAAEL,OAAO,CAACK,MAHyB;AAIzCC,QAAAA,OAAO,EAAEN,OAAO,CAACM;AAJwB,OAAzB,CAAlB;AAOA,aAAOC,eAAe,OAAON,GAAG,CAACO,IAAJ,EAAP,CAAtB;AACD,KAb+B;AAAA;AAAA;;AAchC,SAAOT,IAAP;AACD,CAfyB,CAA1B;AAiBA;AACA;AACA;;AACA,SAASQ,eAAT,CAA0BN,GAA1B,EAA+B;AAC7B,SAAO;AACLQ,IAAAA,aAAa,EAAER,GAAG,CAACS,aADd;AAELC,IAAAA,QAAQ,EAAE,CAACV,GAAG,CAACW,QAAJ,IAAgB,EAAjB,EAAqBC,GAArB,CAAyB;AAAC;AAA+BC,IAAAA,CAAhC,KAAsCtB,GAAG,CAACuB,KAAJ,CAAUD,CAAC,CAAC,GAAD,CAAX,CAA/D,CAFL;AAGLE,IAAAA,KAAK,EAAGf,GAAG,CAACgB,KAAJ,IAAa,EAHhB;AAILC,IAAAA,cAAc,EAAEC,MAAM,CAAClB,GAAG,CAACmB,cAAL,CAJjB;AAKLC,IAAAA,YAAY,EAAEF,MAAM,CAAClB,GAAG,CAACqB,YAAL,CALf;AAMLC,IAAAA,UAAU,EAAEJ,MAAM,CAAClB,GAAG,CAACuB,UAAL,CANb;AAOLC,IAAAA,QAAQ,EAAEN,MAAM,CAAClB,GAAG,CAACyB,QAAL,CAPX;AAQLC,IAAAA,eAAe,EAAER,MAAM,CAAClB,GAAG,CAAC2B,eAAL,CARlB;AASLC,IAAAA,eAAe,EAAEV,MAAM,CAAClB,GAAG,CAAC6B,eAAL;AATlB,GAAP;AAWD","sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bitswap').API<HTTPClientExtraOptions>} BitswapAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {BitswapAPI[\"stat\"]}\n   */\n  async function stat (options = {}) {\n    const res = await api.post('bitswap/stat', {\n      searchParams: toUrlSearchParams(options),\n      timeout: options.timeout,\n      signal: options.signal,\n      headers: options.headers\n    })\n\n    return toCoreInterface(await res.json())\n  }\n  return stat\n})\n\n/**\n * @param {any} res\n */\nfunction toCoreInterface (res) {\n  return {\n    provideBufLen: res.ProvideBufLen,\n    wantlist: (res.Wantlist || []).map((/** @type {{ '/': string }} */ k) => CID.parse(k['/'])),\n    peers: (res.Peers || []),\n    blocksReceived: BigInt(res.BlocksReceived),\n    dataReceived: BigInt(res.DataReceived),\n    blocksSent: BigInt(res.BlocksSent),\n    dataSent: BigInt(res.DataSent),\n    dupBlksReceived: BigInt(res.DupBlksReceived),\n    dupDataReceived: BigInt(res.DupDataReceived)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}