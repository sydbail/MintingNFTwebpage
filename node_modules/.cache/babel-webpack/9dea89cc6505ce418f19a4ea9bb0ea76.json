{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst errcode = require('err-code');\n\nconst {\n  pipe\n} = require('it-pipe');\n\nconst lp = require('it-length-prefixed');\n\nconst pTimeout = require('p-timeout');\n\nconst {\n  consume\n} = require('streaming-iterables');\n\nconst first = require('it-first');\n\nconst MulticodecTopology = require('libp2p-interfaces/src/topology/multicodec-topology');\n\nconst rpc = require('./rpc');\n\nconst c = require('./constants');\n\nconst Message = require('./message');\n\nconst utils = require('./utils');\n/**\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('libp2p-interfaces/src/stream-muxer/types').MuxedStream} MuxedStream\n */\n\n/**\n * Handle network operations for the dht\n */\n\n\nclass Network {\n  /**\n   * Create a new network\n   *\n   * @param {import('./index')} dht\n   */\n  constructor(dht) {\n    this.dht = dht;\n    this.readMessageTimeout = c.READ_MESSAGE_TIMEOUT;\n    this._log = utils.logger(this.dht.peerId, 'net');\n    this._rpc = rpc(this.dht);\n    this._onPeerConnected = this._onPeerConnected.bind(this);\n    this._running = false;\n  }\n  /**\n   * Start the network\n   */\n\n\n  start() {\n    if (this._running) {\n      return;\n    }\n\n    if (!this.dht.isStarted) {\n      throw errcode(new Error('Can not start network'), 'ERR_CANNOT_START_NETWORK');\n    }\n\n    this._running = true; // Only respond to queries when not in client mode\n\n    if (this.dht._clientMode === false) {\n      // Incoming streams\n      this.dht.registrar.handle(this.dht.protocol, this._rpc);\n    } // register protocol with topology\n\n\n    const topology = new MulticodecTopology({\n      multicodecs: [this.dht.protocol],\n      handlers: {\n        onConnect: this._onPeerConnected,\n        onDisconnect: () => {}\n      }\n    });\n    this._registrarId = this.dht.registrar.register(topology);\n  }\n  /**\n   * Stop all network activity\n   */\n\n\n  stop() {\n    if (!this.dht.isStarted && !this.isStarted) {\n      return;\n    }\n\n    this._running = false; // unregister protocol and handlers\n\n    if (this._registrarId) {\n      this.dht.registrar.unregister(this._registrarId);\n    }\n  }\n  /**\n   * Is the network online?\n   *\n   * @type {boolean}\n   */\n\n\n  get isStarted() {\n    return this._running;\n  }\n  /**\n   * Are all network components there?\n   *\n   * @type {boolean}\n   */\n\n\n  get isConnected() {\n    // TODO add a way to check if switch has started or not\n    return this.dht.isStarted && this.isStarted;\n  }\n  /**\n   * Registrar notifies a connection successfully with dht protocol.\n   *\n   * @param {PeerId} peerId - remote peer id\n   */\n\n\n  _onPeerConnected(peerId) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this.dht._add(peerId);\n\n      _this._log('added to the routing table: %s', peerId.toB58String());\n    })();\n  }\n  /**\n   * Send a request and record RTT for latency measurements.\n   *\n   * @async\n   * @param {PeerId} to - The peer that should receive a message\n   * @param {Message} msg - The message to send.\n   */\n\n\n  sendRequest(to, msg) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      // TODO: record latency\n      if (!_this2.isConnected) {\n        throw errcode(new Error('Network is offline'), 'ERR_NETWORK_OFFLINE');\n      }\n\n      const id = to.toB58String();\n\n      _this2._log('sending to: %s', id);\n\n      let conn = _this2.dht.registrar.connectionManager.get(to);\n\n      if (!conn) {\n        conn = yield _this2.dht.dialer.connectToPeer(to);\n      }\n\n      const {\n        stream\n      } = yield conn.newStream(_this2.dht.protocol);\n      return _this2._writeReadMessage(stream, msg.serialize());\n    })();\n  }\n  /**\n   * Sends a message without expecting an answer.\n   *\n   * @param {PeerId} to\n   * @param {Message} msg\n   */\n\n\n  sendMessage(to, msg) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      if (!_this3.isConnected) {\n        throw errcode(new Error('Network is offline'), 'ERR_NETWORK_OFFLINE');\n      }\n\n      const id = to.toB58String();\n\n      _this3._log('sending to: %s', id);\n\n      let conn = _this3.dht.registrar.connectionManager.get(to);\n\n      if (!conn) {\n        conn = yield _this3.dht.dialer.connectToPeer(to);\n      }\n\n      const {\n        stream\n      } = yield conn.newStream(_this3.dht.protocol);\n      return _this3._writeMessage(stream, msg.serialize());\n    })();\n  }\n  /**\n   * Write a message and read its response.\n   * If no response is received after the specified timeout\n   * this will error out.\n   *\n   * @param {MuxedStream} stream - the stream to use\n   * @param {Uint8Array} msg - the message to send\n   */\n\n\n  _writeReadMessage(stream, msg) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      // eslint-disable-line require-await\n      return pTimeout(writeReadMessage(stream, msg), _this4.readMessageTimeout);\n    })();\n  }\n  /**\n   * Write a message to the given stream.\n   *\n   * @param {MuxedStream} stream - the stream to use\n   * @param {Uint8Array} msg - the message to send\n   */\n\n\n  _writeMessage(stream, msg) {\n    return pipe([msg], lp.encode(), stream, consume);\n  }\n\n}\n/**\n * @param {MuxedStream} stream\n * @param {Uint8Array} msg\n */\n\n\nfunction writeReadMessage(_x, _x2) {\n  return _writeReadMessage.apply(this, arguments);\n}\n\nfunction _writeReadMessage() {\n  _writeReadMessage = _asyncToGenerator(function* (stream, msg) {\n    const res = yield pipe([msg], lp.encode(), stream, lp.decode(),\n    /*#__PURE__*/\n\n    /**\n     * @param {AsyncIterable<Uint8Array>} source\n     */\n    function () {\n      var _ref = _asyncToGenerator(function* (source) {\n        const buf = yield first(source);\n\n        if (buf) {\n          return buf.slice();\n        }\n      });\n\n      return function (_x3) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n\n    if (res.length === 0) {\n      throw errcode(new Error('No message received'), 'ERR_NO_MESSAGE_RECEIVED');\n    }\n\n    return Message.deserialize(res);\n  });\n  return _writeReadMessage.apply(this, arguments);\n}\n\nmodule.exports = Network;","map":null,"metadata":{},"sourceType":"script"}