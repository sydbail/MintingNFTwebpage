{"ast":null,"code":"'use strict';\n\nvar _wrapAsyncGenerator = require(\"/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\").default;\n\nvar _awaitAsyncGenerator = require(\"/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\").default;\n\nvar _asyncGeneratorDelegate = require(\"/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/@babel/runtime/helpers/asyncGeneratorDelegate\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst configure = require('../lib/configure');\n\nconst {\n  normaliseInput\n} = require('ipfs-core-utils/src/pins/normalise-input');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin').API<HTTPClientExtraOptions>} PinAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {PinAPI[\"rmAll\"]}\n   */\n  function rmAll(_x) {\n    return _rmAll.apply(this, arguments);\n  }\n\n  function _rmAll() {\n    _rmAll = _wrapAsyncGenerator(function* (source, options = {}) {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n\n      var _iteratorError;\n\n      try {\n        for (var _iterator = _asyncIterator(normaliseInput(source)), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n          const {\n            path,\n            recursive\n          } = _value;\n          const searchParams = new URLSearchParams(options.searchParams);\n          searchParams.append('arg', `${path}`);\n          if (recursive != null) searchParams.set('recursive', String(recursive));\n          const res = yield _awaitAsyncGenerator(api.post('pin/rm', {\n            timeout: options.timeout,\n            signal: options.signal,\n            headers: options.headers,\n            searchParams: toUrlSearchParams({ ...options,\n              arg: `${path}`,\n              recursive\n            })\n          }));\n          var _iteratorNormalCompletion2 = true;\n          var _didIteratorError2 = false;\n\n          var _iteratorError2;\n\n          try {\n            for (var _iterator2 = _asyncIterator(res.ndjson()), _step2, _value2; _step2 = yield _awaitAsyncGenerator(_iterator2.next()), _iteratorNormalCompletion2 = _step2.done, _value2 = yield _awaitAsyncGenerator(_step2.value), !_iteratorNormalCompletion2; _iteratorNormalCompletion2 = true) {\n              const pin = _value2;\n\n              if (pin.Pins) {\n                // non-streaming response\n                yield* _asyncGeneratorDelegate(_asyncIterator(pin.Pins.map((\n                /** @type {string} */\n                cid) => CID.parse(cid))), _awaitAsyncGenerator);\n                continue;\n              }\n\n              yield CID.parse(pin);\n            }\n          } catch (err) {\n            _didIteratorError2 = true;\n            _iteratorError2 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                yield _awaitAsyncGenerator(_iterator2.return());\n              }\n            } finally {\n              if (_didIteratorError2) {\n                throw _iteratorError2;\n              }\n            }\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            yield _awaitAsyncGenerator(_iterator.return());\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    });\n    return _rmAll.apply(this, arguments);\n  }\n\n  return rmAll;\n});","map":{"version":3,"sources":["/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/ipfs-http-client/src/pin/rm-all.js"],"names":["CID","require","configure","normaliseInput","toUrlSearchParams","module","exports","api","rmAll","source","options","path","recursive","searchParams","URLSearchParams","append","set","String","res","post","timeout","signal","headers","arg","ndjson","pin","Pins","map","cid","parse"],"mappings":"AAAA;;;;;;;;;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAUC,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAqBF,OAAO,CAAC,0CAAD,CAAlC;;AACA,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,6BAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AAEAI,MAAM,CAACC,OAAP,GAAiBJ,SAAS,CAACK,GAAG,IAAI;AAChC;AACF;AACA;AAHkC,WAIfC,KAJe;AAAA;AAAA;;AAAA;AAAA,iCAIhC,WAAwBC,MAAxB,EAAgCC,OAAO,GAAG,EAA1C,EAA8C;AAAA;AAAA;;AAAA;;AAAA;AAC5C,4CAAwCP,cAAc,CAACM,MAAD,CAAtD,gOAAgE;AAAA,gBAA/C;AAAEE,YAAAA,IAAF;AAAQC,YAAAA;AAAR,WAA+C;AAC9D,gBAAMC,YAAY,GAAG,IAAIC,eAAJ,CAAoBJ,OAAO,CAACG,YAA5B,CAArB;AACAA,UAAAA,YAAY,CAACE,MAAb,CAAoB,KAApB,EAA4B,GAAEJ,IAAK,EAAnC;AAEA,cAAIC,SAAS,IAAI,IAAjB,EAAuBC,YAAY,CAACG,GAAb,CAAiB,WAAjB,EAA8BC,MAAM,CAACL,SAAD,CAApC;AAEvB,gBAAMM,GAAG,8BAASX,GAAG,CAACY,IAAJ,CAAS,QAAT,EAAmB;AACnCC,YAAAA,OAAO,EAAEV,OAAO,CAACU,OADkB;AAEnCC,YAAAA,MAAM,EAAEX,OAAO,CAACW,MAFmB;AAGnCC,YAAAA,OAAO,EAAEZ,OAAO,CAACY,OAHkB;AAInCT,YAAAA,YAAY,EAAET,iBAAiB,CAAC,EAC9B,GAAGM,OAD2B;AAE9Ba,cAAAA,GAAG,EAAG,GAAEZ,IAAK,EAFiB;AAG9BC,cAAAA;AAH8B,aAAD;AAJI,WAAnB,CAAT,CAAT;AAN8D;AAAA;;AAAA;;AAAA;AAiB9D,iDAAwBM,GAAG,CAACM,MAAJ,EAAxB,0OAAsC;AAAA,oBAArBC,GAAqB;;AACpC,kBAAIA,GAAG,CAACC,IAAR,EAAc;AAAE;AACd,8DAAQD,GAAG,CAACC,IAAJ,CAASC,GAAT,CAAa;AAAC;AAAsBC,gBAAAA,GAAvB,KAA+B5B,GAAG,CAAC6B,KAAJ,CAAUD,GAAV,CAA5C,CAAR;AACA;AACD;;AACD,oBAAM5B,GAAG,CAAC6B,KAAJ,CAAUJ,GAAV,CAAN;AACD;AAvB6D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAwB/D;AAzB2C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA0B7C,KA9B+B;AAAA;AAAA;;AA+BhC,SAAOjB,KAAP;AACD,CAhCyB,CAA1B","sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst configure = require('../lib/configure')\nconst { normaliseInput } = require('ipfs-core-utils/src/pins/normalise-input')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin').API<HTTPClientExtraOptions>} PinAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {PinAPI[\"rmAll\"]}\n   */\n  async function * rmAll (source, options = {}) {\n    for await (const { path, recursive } of normaliseInput(source)) {\n      const searchParams = new URLSearchParams(options.searchParams)\n      searchParams.append('arg', `${path}`)\n\n      if (recursive != null) searchParams.set('recursive', String(recursive))\n\n      const res = await api.post('pin/rm', {\n        timeout: options.timeout,\n        signal: options.signal,\n        headers: options.headers,\n        searchParams: toUrlSearchParams({\n          ...options,\n          arg: `${path}`,\n          recursive\n        })\n      })\n\n      for await (const pin of res.ndjson()) {\n        if (pin.Pins) { // non-streaming response\n          yield * pin.Pins.map((/** @type {string} */ cid) => CID.parse(cid))\n          continue\n        }\n        yield CID.parse(pin)\n      }\n    }\n  }\n  return rmAll\n})\n"]},"metadata":{},"sourceType":"script"}