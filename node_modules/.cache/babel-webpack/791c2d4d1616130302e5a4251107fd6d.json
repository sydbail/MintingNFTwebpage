{"ast":null,"code":"'use strict'; // @ts-ignore libp2p crypto has no types\n\nconst randomBytes = require('libp2p-crypto/src/random-bytes');\n\nconst {\n  toString: uint8ArrayToString\n} = require('uint8arrays/to-string');\n\nconst {\n  fromString: uint8ArrayFromString\n} = require('uint8arrays/from-string');\n\nconst PeerId = require('peer-id');\n\nconst {\n  sha256\n} = require('multiformats/hashes/sha2');\n/**\n * @typedef {import('./message/rpc').RPC.IMessage} IMessage\n * @typedef {import('./message/rpc').RPC.Message} Message\n * @typedef {import('.').InMessage} NormalizedIMessage\n */\n\n/**\n * Generatea random sequence number.\n *\n * @returns {Uint8Array}\n * @private\n */\n\n\nconst randomSeqno = () => {\n  return randomBytes(8);\n};\n/**\n * Generate a message id, based on the `from` and `seqno`.\n *\n * @param {Uint8Array|string} from\n * @param {Uint8Array} seqno\n * @returns {Uint8Array}\n * @private\n */\n\n\nconst msgId = (from, seqno) => {\n  let fromBytes;\n\n  if (from instanceof Uint8Array) {\n    fromBytes = PeerId.createFromBytes(from).id;\n  } else {\n    fromBytes = PeerId.parse(from).id;\n  }\n\n  const msgId = new Uint8Array(fromBytes.length + seqno.length);\n  msgId.set(fromBytes, 0);\n  msgId.set(seqno, fromBytes.length);\n  return msgId;\n};\n/**\n * Generate a message id, based on message `data`.\n *\n * @param {Uint8Array} data\n * @private\n */\n\n\nconst noSignMsgId = data => sha256.encode(data);\n/**\n * Check if any member of the first set is also a member\n * of the second set.\n *\n * @param {Set<number>|Array<number>} a\n * @param {Set<number>|Array<number>} b\n * @returns {boolean}\n * @private\n */\n\n\nconst anyMatch = (a, b) => {\n  let bHas;\n\n  if (Array.isArray(b)) {\n    /**\n     * @param {number} val\n     */\n    bHas = val => b.indexOf(val) > -1;\n  } else {\n    /**\n     * @param {number} val\n     */\n    bHas = val => b.has(val);\n  }\n\n  for (const val of a) {\n    if (bHas(val)) {\n      return true;\n    }\n  }\n\n  return false;\n};\n/**\n * Make everything an array.\n *\n * @template T\n * @param {T|T[]} maybeArray\n * @returns {T[]}\n * @private\n */\n\n\nconst ensureArray = maybeArray => {\n  if (!Array.isArray(maybeArray)) {\n    return [maybeArray];\n  }\n\n  return maybeArray;\n};\n/**\n * Ensures `message.from` is base58 encoded\n *\n * @template {{from?:any}} T\n * @param {T & IMessage} message\n * @param {string} [peerId]\n * @returns {NormalizedIMessage}\n */\n\n\nconst normalizeInRpcMessage = (message, peerId) => {\n  /** @type {NormalizedIMessage} */\n  // @ts-ignore receivedFrom not yet defined\n  const m = Object.assign({}, message);\n\n  if (message.from instanceof Uint8Array) {\n    m.from = uint8ArrayToString(message.from, 'base58btc');\n  }\n\n  if (peerId) {\n    m.receivedFrom = peerId;\n  }\n\n  return m;\n};\n/**\n * @template {{from?:any, data?:any}} T\n *\n * @param {T & NormalizedIMessage} message\n * @returns {Message}\n */\n\n\nconst normalizeOutRpcMessage = message => {\n  /** @type {Message} */\n  // @ts-ignore from not yet defined\n  const m = Object.assign({}, message);\n\n  if (typeof message.from === 'string') {\n    m.from = uint8ArrayFromString(message.from, 'base58btc');\n  }\n\n  if (typeof message.data === 'string') {\n    m.data = uint8ArrayFromString(message.data);\n  }\n\n  return m;\n};\n\nmodule.exports = {\n  randomSeqno,\n  msgId,\n  noSignMsgId,\n  anyMatch,\n  ensureArray,\n  normalizeInRpcMessage,\n  normalizeOutRpcMessage\n};","map":null,"metadata":{},"sourceType":"script"}