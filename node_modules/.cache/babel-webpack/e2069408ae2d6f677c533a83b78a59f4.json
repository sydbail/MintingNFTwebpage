{"ast":null,"code":"'use strict';\n\nconst debug = require('debug');\n\nconst log = Object.assign(debug('libp2p:ip-port-to-multiaddr'), {\n  error: debug('libp2p:ip-port-to-multiaddr:err')\n});\n\nconst {\n  Multiaddr\n} = require('multiaddr');\n\nconst errCode = require('err-code');\n\nconst {\n  Address4,\n  Address6\n} = require('ip-address');\n\nconst errors = {\n  ERR_INVALID_IP_PARAMETER: 'ERR_INVALID_IP_PARAMETER',\n  ERR_INVALID_PORT_PARAMETER: 'ERR_INVALID_PORT_PARAMETER',\n  ERR_INVALID_IP: 'ERR_INVALID_IP'\n};\n/**\n * Transform an IP, Port pair into a multiaddr\n *\n * @param {string} ip\n * @param {number|string} port\n */\n\nfunction ipPortToMultiaddr(ip, port) {\n  if (typeof ip !== 'string') {\n    throw errCode(new Error(`invalid ip provided: ${ip}`), errors.ERR_INVALID_IP_PARAMETER);\n  }\n\n  if (typeof port === 'string') {\n    port = parseInt(port);\n  }\n\n  if (isNaN(port)) {\n    throw errCode(new Error(`invalid port provided: ${port}`), errors.ERR_INVALID_PORT_PARAMETER);\n  }\n\n  try {\n    // Test valid IPv4\n    new Address4(ip); // eslint-disable-line no-new\n\n    return new Multiaddr(`/ip4/${ip}/tcp/${port}`);\n  } catch {}\n\n  try {\n    // Test valid IPv6\n    const ip6 = new Address6(ip);\n    return ip6.is4() ? new Multiaddr(`/ip4/${ip6.to4().correctForm()}/tcp/${port}`) : new Multiaddr(`/ip6/${ip}/tcp/${port}`);\n  } catch (err) {\n    const errMsg = `invalid ip:port for creating a multiaddr: ${ip}:${port}`;\n    log.error(errMsg);\n    throw errCode(new Error(errMsg), errors.ERR_INVALID_IP);\n  }\n}\n\nmodule.exports = ipPortToMultiaddr;\nmodule.exports.Errors = errors;","map":null,"metadata":{},"sourceType":"script"}