{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst {\n  repoVersion\n} = require('ipfs-repo');\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @param {Object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\n\n\nmodule.exports = ({\n  repo\n}) => {\n  /**\n   * @type {import('ipfs-core-types/src/repo').API[\"version\"]}\n   */\n  function version() {\n    return _version.apply(this, arguments);\n  }\n\n  function _version() {\n    _version = _asyncToGenerator(function* (options = {}) {\n      try {\n        // @ts-ignore - not a public API\n        yield repo._checkInitialized(options);\n      } catch (err) {\n        // TODO: (dryajov) This is really hacky, there must be a better way\n        const match = [/Key not found in database \\[\\/version\\]/, /ENOENT/, /repo is not initialized yet/].some(m => {\n          return m.test(err.message);\n        });\n\n        if (match) {\n          // this repo has not been initialized\n          return repoVersion;\n        }\n\n        throw err;\n      }\n\n      return repo.version.get();\n    });\n    return _version.apply(this, arguments);\n  }\n\n  return withTimeoutOption(version);\n};","map":null,"metadata":{},"sourceType":"script"}