{"ast":null,"code":"/* @flow */\n'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/Dapp/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst {\n  Adapter,\n  Key,\n  Errors,\n  utils: {\n    sortAll,\n    replaceStartWith\n  }\n} = require('interface-datastore');\n\nconst filter = require('it-filter');\n\nconst take = require('it-take');\n\nconst merge = require('it-merge');\n\nconst Keytransform = require('./keytransform');\n/**\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-datastore').Options} Options\n * @typedef {import('interface-datastore').Batch} Batch\n * @typedef {import('interface-datastore').Query} Query\n * @typedef {import('interface-datastore').KeyQuery} KeyQuery\n * @typedef {import('./types').KeyTransform} KeyTransform\n */\n\n/**\n * A datastore that can combine multiple stores inside various\n * key prefixes\n *\n * @implements {Datastore}\n */\n\n\nclass MountDatastore extends Adapter {\n  /**\n   * @param {Array<{prefix: Key, datastore: Datastore}>} mounts\n   */\n  constructor(mounts) {\n    super();\n    this.mounts = mounts.slice();\n  }\n\n  open() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      yield Promise.all(_this.mounts.map(m => m.datastore.open()));\n    })();\n  }\n  /**\n   * Lookup the matching datastore for the given key\n   *\n   * @private\n   * @param {Key} key\n   * @returns {{datastore: Datastore, mountpoint: Key, rest: Key} | undefined}\n   */\n\n\n  _lookup(key) {\n    for (const mount of this.mounts) {\n      if (mount.prefix.toString() === key.toString() || mount.prefix.isAncestorOf(key)) {\n        const s = replaceStartWith(key.toString(), mount.prefix.toString());\n        return {\n          datastore: mount.datastore,\n          mountpoint: mount.prefix,\n          rest: new Key(s)\n        };\n      }\n    }\n  }\n  /**\n   * @param {Key} key\n   * @param {Uint8Array} value\n   * @param {Options} [options]\n   */\n\n\n  put(key, value, options) {\n    const match = this._lookup(key);\n\n    if (match == null) {\n      throw Errors.dbWriteFailedError(new Error('No datastore mounted for this key'));\n    }\n\n    return match.datastore.put(match.rest, value, options);\n  }\n  /**\n   * @param {Key} key\n   * @param {Options} [options]\n   */\n\n\n  get(key, options) {\n    const match = this._lookup(key);\n\n    if (match == null) {\n      throw Errors.notFoundError(new Error('No datastore mounted for this key'));\n    }\n\n    return match.datastore.get(match.rest, options);\n  }\n  /**\n   * @param {Key} key\n   * @param {Options} [options]\n   */\n\n\n  has(key, options) {\n    const match = this._lookup(key);\n\n    if (match == null) {\n      return Promise.resolve(false);\n    }\n\n    return match.datastore.has(match.rest, options);\n  }\n  /**\n   * @param {Key} key\n   * @param {Options} [options]\n   */\n\n\n  delete(key, options) {\n    const match = this._lookup(key);\n\n    if (match == null) {\n      throw Errors.dbDeleteFailedError(new Error('No datastore mounted for this key'));\n    }\n\n    return match.datastore.delete(match.rest, options);\n  }\n\n  close() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      yield Promise.all(_this2.mounts.map(m => {\n        return m.datastore.close();\n      }));\n    })();\n  }\n  /**\n   * @returns {Batch}\n   */\n\n\n  batch() {\n    /** @type {Record<string, Batch>} */\n    const batchMounts = {};\n    /**\n     * @param {Key} key\n     */\n\n    const lookup = key => {\n      const match = this._lookup(key);\n\n      if (match == null) {\n        throw new Error('No datastore mounted for this key');\n      }\n\n      const m = match.mountpoint.toString();\n\n      if (batchMounts[m] == null) {\n        batchMounts[m] = match.datastore.batch();\n      }\n\n      return {\n        batch: batchMounts[m],\n        rest: match.rest\n      };\n    };\n\n    return {\n      put: (key, value) => {\n        const match = lookup(key);\n        match.batch.put(match.rest, value);\n      },\n      delete: key => {\n        const match = lookup(key);\n        match.batch.delete(match.rest);\n      },\n      commit: function () {\n        var _ref = _asyncToGenerator(function* (options) {\n          yield Promise.all(Object.keys(batchMounts).map(p => batchMounts[p].commit(options)));\n        });\n\n        return function commit(_x) {\n          return _ref.apply(this, arguments);\n        };\n      }()\n    };\n  }\n  /**\n   * @param {Query} q\n   * @param {Options} [options]\n   */\n\n\n  query(q, options) {\n    const qs = this.mounts.map(m => {\n      const ks = new Keytransform(m.datastore, {\n        convert: key => {\n          throw new Error('should never be called');\n        },\n        invert: key => {\n          return m.prefix.child(key);\n        }\n      });\n      let prefix;\n\n      if (q.prefix != null) {\n        prefix = replaceStartWith(q.prefix, m.prefix.toString());\n      }\n\n      return ks.query({\n        prefix: prefix,\n        filters: q.filters\n      }, options);\n    });\n    let it = merge(...qs);\n    if (q.filters) q.filters.forEach(f => {\n      it = filter(it, f);\n    });\n    if (q.orders) q.orders.forEach(o => {\n      it = sortAll(it, o);\n    });\n\n    if (q.offset != null) {\n      let i = 0;\n      it = filter(it, () => i++ >= q.offset);\n    }\n\n    if (q.limit != null) it = take(it, q.limit);\n    return it;\n  }\n  /**\n   * @param {KeyQuery} q\n   * @param {Options} [options]\n   */\n\n\n  queryKeys(q, options) {\n    const qs = this.mounts.map(m => {\n      const ks = new Keytransform(m.datastore, {\n        convert: key => {\n          throw new Error('should never be called');\n        },\n        invert: key => {\n          return m.prefix.child(key);\n        }\n      });\n      let prefix;\n\n      if (q.prefix != null) {\n        prefix = replaceStartWith(q.prefix, m.prefix.toString());\n      }\n\n      return ks.queryKeys({\n        prefix: prefix,\n        filters: q.filters\n      }, options);\n    });\n    let it = merge(...qs);\n    if (q.filters) q.filters.forEach(f => {\n      it = filter(it, f);\n    });\n    if (q.orders) q.orders.forEach(o => {\n      it = sortAll(it, o);\n    });\n\n    if (q.offset != null) {\n      let i = 0;\n      it = filter(it, () => i++ >= q.offset);\n    }\n\n    if (q.limit != null) it = take(it, q.limit);\n    return it;\n  }\n\n}\n\nmodule.exports = MountDatastore;","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Dapp/node_modules/datastore-core/src/mount.js"],"names":["Adapter","Key","Errors","utils","sortAll","replaceStartWith","require","filter","take","merge","Keytransform","MountDatastore","constructor","mounts","slice","open","Promise","all","map","m","datastore","_lookup","key","mount","prefix","toString","isAncestorOf","s","mountpoint","rest","put","value","options","match","dbWriteFailedError","Error","get","notFoundError","has","resolve","delete","dbDeleteFailedError","close","batch","batchMounts","lookup","commit","Object","keys","p","query","q","qs","ks","convert","invert","child","filters","it","forEach","f","orders","o","offset","i","limit","queryKeys","module","exports"],"mappings":"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","sourcesContent":["/* @flow */\n'use strict'\n\nconst {\n  Adapter, Key, Errors, utils: {\n    sortAll,\n    replaceStartWith\n  }\n} = require('interface-datastore')\nconst filter = require('it-filter')\nconst take = require('it-take')\nconst merge = require('it-merge')\n\nconst Keytransform = require('./keytransform')\n\n/**\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-datastore').Options} Options\n * @typedef {import('interface-datastore').Batch} Batch\n * @typedef {import('interface-datastore').Query} Query\n * @typedef {import('interface-datastore').KeyQuery} KeyQuery\n * @typedef {import('./types').KeyTransform} KeyTransform\n */\n\n/**\n * A datastore that can combine multiple stores inside various\n * key prefixes\n *\n * @implements {Datastore}\n */\nclass MountDatastore extends Adapter {\n  /**\n   * @param {Array<{prefix: Key, datastore: Datastore}>} mounts\n   */\n  constructor (mounts) {\n    super()\n\n    this.mounts = mounts.slice()\n  }\n\n  async open () {\n    await Promise.all(this.mounts.map((m) => m.datastore.open()))\n  }\n\n  /**\n   * Lookup the matching datastore for the given key\n   *\n   * @private\n   * @param {Key} key\n   * @returns {{datastore: Datastore, mountpoint: Key, rest: Key} | undefined}\n   */\n  _lookup (key) {\n    for (const mount of this.mounts) {\n      if (mount.prefix.toString() === key.toString() || mount.prefix.isAncestorOf(key)) {\n        const s = replaceStartWith(key.toString(), mount.prefix.toString())\n        return {\n          datastore: mount.datastore,\n          mountpoint: mount.prefix,\n          rest: new Key(s)\n        }\n      }\n    }\n  }\n\n  /**\n   * @param {Key} key\n   * @param {Uint8Array} value\n   * @param {Options} [options]\n   */\n  put (key, value, options) {\n    const match = this._lookup(key)\n    if (match == null) {\n      throw Errors.dbWriteFailedError(new Error('No datastore mounted for this key'))\n    }\n\n    return match.datastore.put(match.rest, value, options)\n  }\n\n  /**\n   * @param {Key} key\n   * @param {Options} [options]\n   */\n  get (key, options) {\n    const match = this._lookup(key)\n    if (match == null) {\n      throw Errors.notFoundError(new Error('No datastore mounted for this key'))\n    }\n    return match.datastore.get(match.rest, options)\n  }\n\n  /**\n   * @param {Key} key\n   * @param {Options} [options]\n   */\n  has (key, options) {\n    const match = this._lookup(key)\n    if (match == null) {\n      return Promise.resolve(false)\n    }\n    return match.datastore.has(match.rest, options)\n  }\n\n  /**\n   * @param {Key} key\n   * @param {Options} [options]\n   */\n  delete (key, options) {\n    const match = this._lookup(key)\n    if (match == null) {\n      throw Errors.dbDeleteFailedError(new Error('No datastore mounted for this key'))\n    }\n\n    return match.datastore.delete(match.rest, options)\n  }\n\n  async close () {\n    await Promise.all(this.mounts.map((m) => {\n      return m.datastore.close()\n    }))\n  }\n\n  /**\n   * @returns {Batch}\n   */\n  batch () {\n    /** @type {Record<string, Batch>} */\n    const batchMounts = {}\n    /**\n     * @param {Key} key\n     */\n    const lookup = (key) => {\n      const match = this._lookup(key)\n      if (match == null) {\n        throw new Error('No datastore mounted for this key')\n      }\n\n      const m = match.mountpoint.toString()\n      if (batchMounts[m] == null) {\n        batchMounts[m] = match.datastore.batch()\n      }\n\n      return {\n        batch: batchMounts[m],\n        rest: match.rest\n      }\n    }\n\n    return {\n      put: (key, value) => {\n        const match = lookup(key)\n        match.batch.put(match.rest, value)\n      },\n      delete: (key) => {\n        const match = lookup(key)\n        match.batch.delete(match.rest)\n      },\n      commit: async (options) => {\n        await Promise.all(Object.keys(batchMounts).map(p => batchMounts[p].commit(options)))\n      }\n    }\n  }\n\n  /**\n   * @param {Query} q\n   * @param {Options} [options]\n   */\n  query (q, options) {\n    const qs = this.mounts.map(m => {\n      const ks = new Keytransform(m.datastore, {\n        convert: (key) => {\n          throw new Error('should never be called')\n        },\n        invert: (key) => {\n          return m.prefix.child(key)\n        }\n      })\n\n      let prefix\n      if (q.prefix != null) {\n        prefix = replaceStartWith(q.prefix, m.prefix.toString())\n      }\n\n      return ks.query({\n        prefix: prefix,\n        filters: q.filters\n      }, options)\n    })\n\n    let it = merge(...qs)\n    if (q.filters) q.filters.forEach(f => { it = filter(it, f) })\n    if (q.orders) q.orders.forEach(o => { it = sortAll(it, o) })\n    if (q.offset != null) {\n      let i = 0\n      it = filter(it, () => i++ >= /** @type {number} */ (q.offset))\n    }\n    if (q.limit != null) it = take(it, q.limit)\n\n    return it\n  }\n\n  /**\n   * @param {KeyQuery} q\n   * @param {Options} [options]\n   */\n  queryKeys (q, options) {\n    const qs = this.mounts.map(m => {\n      const ks = new Keytransform(m.datastore, {\n        convert: (key) => {\n          throw new Error('should never be called')\n        },\n        invert: (key) => {\n          return m.prefix.child(key)\n        }\n      })\n\n      let prefix\n      if (q.prefix != null) {\n        prefix = replaceStartWith(q.prefix, m.prefix.toString())\n      }\n\n      return ks.queryKeys({\n        prefix: prefix,\n        filters: q.filters\n      }, options)\n    })\n\n    let it = merge(...qs)\n    if (q.filters) q.filters.forEach(f => { it = filter(it, f) })\n    if (q.orders) q.orders.forEach(o => { it = sortAll(it, o) })\n    if (q.offset != null) {\n      let i = 0\n      it = filter(it, () => i++ >= /** @type {number} */ (q.offset))\n    }\n    if (q.limit != null) it = take(it, q.limit)\n\n    return it\n  }\n}\n\nmodule.exports = MountDatastore\n"]},"metadata":{},"sourceType":"script"}