{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst {\n  sha256\n} = require('multiformats/hashes/sha2');\n\nconst errcode = require('err-code');\n\nconst {\n  toString: uint8ArrayToString\n} = require('uint8arrays/to-string');\n\nconst {\n  equals: uint8ArrayEquals\n} = require('uint8arrays/equals');\n/**\n * Validator for public key records.\n * Verifies that the passed in record value is the PublicKey\n * that matches the passed in key.\n * If validation fails the returned Promise will reject with the error.\n *\n * @param {Uint8Array} key - A valid key is of the form `'/pk/<keymultihash>'`\n * @param {Uint8Array} publicKey - The public key to validate against (protobuf encoded).\n */\n\n\nconst validatePublicKeyRecord = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (key, publicKey) {\n    if (!(key instanceof Uint8Array)) {\n      throw errcode(new Error('\"key\" must be a Uint8Array'), 'ERR_INVALID_RECORD_KEY_NOT_BUFFER');\n    }\n\n    if (key.byteLength < 5) {\n      throw errcode(new Error('invalid public key record'), 'ERR_INVALID_RECORD_KEY_TOO_SHORT');\n    }\n\n    const prefix = uint8ArrayToString(key.subarray(0, 4));\n\n    if (prefix !== '/pk/') {\n      throw errcode(new Error('key was not prefixed with /pk/'), 'ERR_INVALID_RECORD_KEY_BAD_PREFIX');\n    }\n\n    const keyhash = key.slice(4);\n    const publicKeyHash = yield sha256.digest(publicKey);\n\n    if (!uint8ArrayEquals(keyhash, publicKeyHash.bytes)) {\n      throw errcode(new Error('public key does not match passed in key'), 'ERR_INVALID_RECORD_HASH_MISMATCH');\n    }\n  });\n\n  return function validatePublicKeyRecord(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nmodule.exports = {\n  func: validatePublicKeyRecord,\n  sign: false\n};","map":null,"metadata":{},"sourceType":"script"}