{"ast":null,"code":"/* eslint max-nested-callbacks: [\"error\", 8] */\n'use strict';\n\nvar _awaitAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\").default;\n\nvar _wrapAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nconst {\n  PinTypes\n} = require('ipfs-repo');\n\nconst {\n  normaliseInput\n} = require('ipfs-core-utils/src/pins/normalise-input');\n\nconst {\n  resolvePath\n} = require('../../utils');\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n\nconst errCode = require('err-code');\n/**\n * @typedef {import('multiformats/cid').CID} CID\n */\n\n/**\n * @param {string} type\n * @param {CID} cid\n * @param {Record<string, any>} [metadata]\n */\n\n\nfunction toPin(type, cid, metadata) {\n  /** @type {import('ipfs-core-types/src/pin').LsResult} */\n  const output = {\n    type,\n    cid\n  };\n\n  if (metadata) {\n    output.metadata = metadata;\n  }\n\n  return output;\n}\n/**\n * @param {Object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('ipfs-core-utils/src/multicodecs')} config.codecs\n */\n\n\nmodule.exports = ({\n  repo,\n  codecs\n}) => {\n  /**\n   * @type {import('ipfs-core-types/src/pin').API[\"ls\"]}\n   */\n  function ls() {\n    return _ls.apply(this, arguments);\n  }\n\n  function _ls() {\n    _ls = _wrapAsyncGenerator(function* (options = {}) {\n      /** @type {import('ipfs-core-types/src/pin').PinQueryType} */\n      let type = PinTypes.all;\n\n      if (options.type) {\n        type = options.type;\n\n        if (!Object.keys(PinTypes).includes(type)) {\n          throw errCode(new Error('Invalid pin type'), 'ERR_INVALID_PIN_TYPE');\n        }\n      }\n\n      if (options.paths) {\n        // check the pinned state of specific hashes\n        let matched = false;\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n\n        var _iteratorError;\n\n        try {\n          for (var _iterator = _asyncIterator(normaliseInput(options.paths)), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n            const {\n              path\n            } = _value;\n            const {\n              cid\n            } = yield _awaitAsyncGenerator(resolvePath(repo, codecs, path));\n            const {\n              reason,\n              pinned,\n              parent,\n              metadata\n            } = yield _awaitAsyncGenerator(repo.pins.isPinnedWithType(cid, type));\n\n            if (!pinned) {\n              throw errCode(new Error(`path '${path}' is not pinned`), 'ERR_NOT_PINNED');\n            }\n\n            switch (reason) {\n              case PinTypes.direct:\n              case PinTypes.recursive:\n                matched = true;\n                yield toPin(reason, cid, metadata);\n                break;\n\n              default:\n                matched = true;\n                yield toPin(`${PinTypes.indirect} through ${parent}`, cid, metadata);\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              yield _awaitAsyncGenerator(_iterator.return());\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        if (!matched) {\n          throw new Error('No match found');\n        }\n\n        return;\n      }\n\n      if (type === PinTypes.recursive || type === PinTypes.all) {\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n\n        var _iteratorError2;\n\n        try {\n          for (var _iterator2 = _asyncIterator(repo.pins.recursiveKeys()), _step2, _value2; _step2 = yield _awaitAsyncGenerator(_iterator2.next()), _iteratorNormalCompletion2 = _step2.done, _value2 = yield _awaitAsyncGenerator(_step2.value), !_iteratorNormalCompletion2; _iteratorNormalCompletion2 = true) {\n            const {\n              cid,\n              metadata\n            } = _value2;\n            yield toPin(PinTypes.recursive, cid, metadata);\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n              yield _awaitAsyncGenerator(_iterator2.return());\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n      }\n\n      if (type === PinTypes.indirect || type === PinTypes.all) {\n        // @ts-ignore - LsSettings & AbortOptions have no properties in common\n        // with type { preload?: boolean }\n        var _iteratorNormalCompletion3 = true;\n        var _didIteratorError3 = false;\n\n        var _iteratorError3;\n\n        try {\n          for (var _iterator3 = _asyncIterator(repo.pins.indirectKeys(options)), _step3, _value3; _step3 = yield _awaitAsyncGenerator(_iterator3.next()), _iteratorNormalCompletion3 = _step3.done, _value3 = yield _awaitAsyncGenerator(_step3.value), !_iteratorNormalCompletion3; _iteratorNormalCompletion3 = true) {\n            const cid = _value3;\n            yield toPin(PinTypes.indirect, cid);\n          }\n        } catch (err) {\n          _didIteratorError3 = true;\n          _iteratorError3 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n              yield _awaitAsyncGenerator(_iterator3.return());\n            }\n          } finally {\n            if (_didIteratorError3) {\n              throw _iteratorError3;\n            }\n          }\n        }\n      }\n\n      if (type === PinTypes.direct || type === PinTypes.all) {\n        var _iteratorNormalCompletion4 = true;\n        var _didIteratorError4 = false;\n\n        var _iteratorError4;\n\n        try {\n          for (var _iterator4 = _asyncIterator(repo.pins.directKeys()), _step4, _value4; _step4 = yield _awaitAsyncGenerator(_iterator4.next()), _iteratorNormalCompletion4 = _step4.done, _value4 = yield _awaitAsyncGenerator(_step4.value), !_iteratorNormalCompletion4; _iteratorNormalCompletion4 = true) {\n            const {\n              cid,\n              metadata\n            } = _value4;\n            yield toPin(PinTypes.direct, cid, metadata);\n          }\n        } catch (err) {\n          _didIteratorError4 = true;\n          _iteratorError4 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n              yield _awaitAsyncGenerator(_iterator4.return());\n            }\n          } finally {\n            if (_didIteratorError4) {\n              throw _iteratorError4;\n            }\n          }\n        }\n      }\n    });\n    return _ls.apply(this, arguments);\n  }\n\n  return withTimeoutOption(ls);\n};","map":null,"metadata":{},"sourceType":"script"}