{"ast":null,"code":"import _asyncToGenerator from \"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _asyncIterator from \"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/esm/asyncIterator\";\nimport DirSharded from './dir-sharded.js';\nimport DirFlat from './dir-flat.js';\n\nfunction flatToShard(_x, _x2, _x3, _x4) {\n  return _flatToShard.apply(this, arguments);\n}\n\nfunction _flatToShard() {\n  _flatToShard = _asyncToGenerator(function* (child, dir, threshold, options) {\n    let newDir = dir;\n\n    if (dir instanceof DirFlat && dir.directChildrenCount() >= threshold) {\n      newDir = yield convertToShard(dir, options);\n    }\n\n    const parent = newDir.parent;\n\n    if (parent) {\n      if (newDir !== dir) {\n        if (child) {\n          child.parent = newDir;\n        }\n\n        if (!newDir.parentKey) {\n          throw new Error('No parent key found');\n        }\n\n        yield parent.put(newDir.parentKey, newDir);\n      }\n\n      return flatToShard(newDir, parent, threshold, options);\n    }\n\n    return newDir;\n  });\n  return _flatToShard.apply(this, arguments);\n}\n\nfunction convertToShard(_x5, _x6) {\n  return _convertToShard.apply(this, arguments);\n}\n\nfunction _convertToShard() {\n  _convertToShard = _asyncToGenerator(function* (oldDir, options) {\n    const newDir = new DirSharded({\n      root: oldDir.root,\n      dir: true,\n      parent: oldDir.parent,\n      parentKey: oldDir.parentKey,\n      path: oldDir.path,\n      dirty: oldDir.dirty,\n      flat: false,\n      mtime: oldDir.mtime,\n      mode: oldDir.mode\n    }, options);\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n\n    var _iteratorError;\n\n    try {\n      for (var _iterator = _asyncIterator(oldDir.eachChildSeries()), _step, _value; _step = yield _iterator.next(), _iteratorNormalCompletion = _step.done, _value = yield _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n        const {\n          key,\n          child\n        } = _value;\n        yield newDir.put(key, child);\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          yield _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return newDir;\n  });\n  return _convertToShard.apply(this, arguments);\n}\n\nexport default flatToShard;","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Demo/node_modules/ipfs-unixfs-importer/esm/src/flat-to-shard.js"],"names":["DirSharded","DirFlat","flatToShard","child","dir","threshold","options","newDir","directChildrenCount","convertToShard","parent","parentKey","Error","put","oldDir","root","path","dirty","flat","mtime","mode","eachChildSeries","key"],"mappings":";;AAAA,OAAOA,UAAP,MAAuB,kBAAvB;AACA,OAAOC,OAAP,MAAoB,eAApB;;SACeC,W;;;;;mCAAf,WAA2BC,KAA3B,EAAkCC,GAAlC,EAAuCC,SAAvC,EAAkDC,OAAlD,EAA2D;AACzD,QAAIC,MAAM,GAAGH,GAAb;;AACA,QAAIA,GAAG,YAAYH,OAAf,IAA0BG,GAAG,CAACI,mBAAJ,MAA6BH,SAA3D,EAAsE;AACpEE,MAAAA,MAAM,SAASE,cAAc,CAACL,GAAD,EAAME,OAAN,CAA7B;AACD;;AACD,UAAMI,MAAM,GAAGH,MAAM,CAACG,MAAtB;;AACA,QAAIA,MAAJ,EAAY;AACV,UAAIH,MAAM,KAAKH,GAAf,EAAoB;AAClB,YAAID,KAAJ,EAAW;AACTA,UAAAA,KAAK,CAACO,MAAN,GAAeH,MAAf;AACD;;AACD,YAAI,CAACA,MAAM,CAACI,SAAZ,EAAuB;AACrB,gBAAM,IAAIC,KAAJ,CAAU,qBAAV,CAAN;AACD;;AACD,cAAMF,MAAM,CAACG,GAAP,CAAWN,MAAM,CAACI,SAAlB,EAA6BJ,MAA7B,CAAN;AACD;;AACD,aAAOL,WAAW,CAACK,MAAD,EAASG,MAAT,EAAiBL,SAAjB,EAA4BC,OAA5B,CAAlB;AACD;;AACD,WAAOC,MAAP;AACD,G;;;;SACcE,c;;;;;sCAAf,WAA8BK,MAA9B,EAAsCR,OAAtC,EAA+C;AAC7C,UAAMC,MAAM,GAAG,IAAIP,UAAJ,CAAe;AAC5Be,MAAAA,IAAI,EAAED,MAAM,CAACC,IADe;AAE5BX,MAAAA,GAAG,EAAE,IAFuB;AAG5BM,MAAAA,MAAM,EAAEI,MAAM,CAACJ,MAHa;AAI5BC,MAAAA,SAAS,EAAEG,MAAM,CAACH,SAJU;AAK5BK,MAAAA,IAAI,EAAEF,MAAM,CAACE,IALe;AAM5BC,MAAAA,KAAK,EAAEH,MAAM,CAACG,KANc;AAO5BC,MAAAA,IAAI,EAAE,KAPsB;AAQ5BC,MAAAA,KAAK,EAAEL,MAAM,CAACK,KARc;AAS5BC,MAAAA,IAAI,EAAEN,MAAM,CAACM;AATe,KAAf,EAUZd,OAVY,CAAf;AAD6C;AAAA;;AAAA;;AAAA;AAY7C,0CAAiCQ,MAAM,CAACO,eAAP,EAAjC,oLAA2D;AAAA,cAA1C;AAACC,UAAAA,GAAD;AAAMnB,UAAAA;AAAN,SAA0C;AACzD,cAAMI,MAAM,CAACM,GAAP,CAAWS,GAAX,EAAgBnB,KAAhB,CAAN;AACD;AAd4C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAe7C,WAAOI,MAAP;AACD,G;;;;AACD,eAAeL,WAAf","sourcesContent":["import DirSharded from './dir-sharded.js';\nimport DirFlat from './dir-flat.js';\nasync function flatToShard(child, dir, threshold, options) {\n  let newDir = dir;\n  if (dir instanceof DirFlat && dir.directChildrenCount() >= threshold) {\n    newDir = await convertToShard(dir, options);\n  }\n  const parent = newDir.parent;\n  if (parent) {\n    if (newDir !== dir) {\n      if (child) {\n        child.parent = newDir;\n      }\n      if (!newDir.parentKey) {\n        throw new Error('No parent key found');\n      }\n      await parent.put(newDir.parentKey, newDir);\n    }\n    return flatToShard(newDir, parent, threshold, options);\n  }\n  return newDir;\n}\nasync function convertToShard(oldDir, options) {\n  const newDir = new DirSharded({\n    root: oldDir.root,\n    dir: true,\n    parent: oldDir.parent,\n    parentKey: oldDir.parentKey,\n    path: oldDir.path,\n    dirty: oldDir.dirty,\n    flat: false,\n    mtime: oldDir.mtime,\n    mode: oldDir.mode\n  }, options);\n  for await (const {key, child} of oldDir.eachChildSeries()) {\n    await newDir.put(key, child);\n  }\n  return newDir;\n}\nexport default flatToShard;"]},"metadata":{},"sourceType":"module"}