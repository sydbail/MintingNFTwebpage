{"ast":null,"code":"/*eslint-disable*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\"); // Common aliases\n\n\nvar $Reader = $protobuf.Reader,\n    $Writer = $protobuf.Writer,\n    $util = $protobuf.util; // Exported root namespace\n\nvar $root = $protobuf.roots[\"libp2p-circuit\"] || ($protobuf.roots[\"libp2p-circuit\"] = {});\n\n$root.CircuitRelay = function () {\n  /**\n   * Properties of a CircuitRelay.\n   * @exports ICircuitRelay\n   * @interface ICircuitRelay\n   * @property {CircuitRelay.Type|null} [type] CircuitRelay type\n   * @property {CircuitRelay.IPeer|null} [srcPeer] CircuitRelay srcPeer\n   * @property {CircuitRelay.IPeer|null} [dstPeer] CircuitRelay dstPeer\n   * @property {CircuitRelay.Status|null} [code] CircuitRelay code\n   */\n\n  /**\n   * Constructs a new CircuitRelay.\n   * @exports CircuitRelay\n   * @classdesc Represents a CircuitRelay.\n   * @implements ICircuitRelay\n   * @constructor\n   * @param {ICircuitRelay=} [p] Properties to set\n   */\n  function CircuitRelay(p) {\n    if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];\n  }\n  /**\n   * CircuitRelay type.\n   * @member {CircuitRelay.Type} type\n   * @memberof CircuitRelay\n   * @instance\n   */\n\n\n  CircuitRelay.prototype.type = 1;\n  /**\n   * CircuitRelay srcPeer.\n   * @member {CircuitRelay.IPeer|null|undefined} srcPeer\n   * @memberof CircuitRelay\n   * @instance\n   */\n\n  CircuitRelay.prototype.srcPeer = null;\n  /**\n   * CircuitRelay dstPeer.\n   * @member {CircuitRelay.IPeer|null|undefined} dstPeer\n   * @memberof CircuitRelay\n   * @instance\n   */\n\n  CircuitRelay.prototype.dstPeer = null;\n  /**\n   * CircuitRelay code.\n   * @member {CircuitRelay.Status} code\n   * @memberof CircuitRelay\n   * @instance\n   */\n\n  CircuitRelay.prototype.code = 100;\n  /**\n   * Encodes the specified CircuitRelay message. Does not implicitly {@link CircuitRelay.verify|verify} messages.\n   * @function encode\n   * @memberof CircuitRelay\n   * @static\n   * @param {ICircuitRelay} m CircuitRelay message or plain object to encode\n   * @param {$protobuf.Writer} [w] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n  CircuitRelay.encode = function encode(m, w) {\n    if (!w) w = $Writer.create();\n    if (m.type != null && Object.hasOwnProperty.call(m, \"type\")) w.uint32(8).int32(m.type);\n    if (m.srcPeer != null && Object.hasOwnProperty.call(m, \"srcPeer\")) $root.CircuitRelay.Peer.encode(m.srcPeer, w.uint32(18).fork()).ldelim();\n    if (m.dstPeer != null && Object.hasOwnProperty.call(m, \"dstPeer\")) $root.CircuitRelay.Peer.encode(m.dstPeer, w.uint32(26).fork()).ldelim();\n    if (m.code != null && Object.hasOwnProperty.call(m, \"code\")) w.uint32(32).int32(m.code);\n    return w;\n  };\n  /**\n   * Decodes a CircuitRelay message from the specified reader or buffer.\n   * @function decode\n   * @memberof CircuitRelay\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n   * @param {number} [l] Message length if known beforehand\n   * @returns {CircuitRelay} CircuitRelay\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  CircuitRelay.decode = function decode(r, l) {\n    if (!(r instanceof $Reader)) r = $Reader.create(r);\n    var c = l === undefined ? r.len : r.pos + l,\n        m = new $root.CircuitRelay();\n\n    while (r.pos < c) {\n      var t = r.uint32();\n\n      switch (t >>> 3) {\n        case 1:\n          m.type = r.int32();\n          break;\n\n        case 2:\n          m.srcPeer = $root.CircuitRelay.Peer.decode(r, r.uint32());\n          break;\n\n        case 3:\n          m.dstPeer = $root.CircuitRelay.Peer.decode(r, r.uint32());\n          break;\n\n        case 4:\n          m.code = r.int32();\n          break;\n\n        default:\n          r.skipType(t & 7);\n          break;\n      }\n    }\n\n    return m;\n  };\n  /**\n   * Creates a CircuitRelay message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof CircuitRelay\n   * @static\n   * @param {Object.<string,*>} d Plain object\n   * @returns {CircuitRelay} CircuitRelay\n   */\n\n\n  CircuitRelay.fromObject = function fromObject(d) {\n    if (d instanceof $root.CircuitRelay) return d;\n    var m = new $root.CircuitRelay();\n\n    switch (d.type) {\n      case \"HOP\":\n      case 1:\n        m.type = 1;\n        break;\n\n      case \"STOP\":\n      case 2:\n        m.type = 2;\n        break;\n\n      case \"STATUS\":\n      case 3:\n        m.type = 3;\n        break;\n\n      case \"CAN_HOP\":\n      case 4:\n        m.type = 4;\n        break;\n    }\n\n    if (d.srcPeer != null) {\n      if (typeof d.srcPeer !== \"object\") throw TypeError(\".CircuitRelay.srcPeer: object expected\");\n      m.srcPeer = $root.CircuitRelay.Peer.fromObject(d.srcPeer);\n    }\n\n    if (d.dstPeer != null) {\n      if (typeof d.dstPeer !== \"object\") throw TypeError(\".CircuitRelay.dstPeer: object expected\");\n      m.dstPeer = $root.CircuitRelay.Peer.fromObject(d.dstPeer);\n    }\n\n    switch (d.code) {\n      case \"SUCCESS\":\n      case 100:\n        m.code = 100;\n        break;\n\n      case \"HOP_SRC_ADDR_TOO_LONG\":\n      case 220:\n        m.code = 220;\n        break;\n\n      case \"HOP_DST_ADDR_TOO_LONG\":\n      case 221:\n        m.code = 221;\n        break;\n\n      case \"HOP_SRC_MULTIADDR_INVALID\":\n      case 250:\n        m.code = 250;\n        break;\n\n      case \"HOP_DST_MULTIADDR_INVALID\":\n      case 251:\n        m.code = 251;\n        break;\n\n      case \"HOP_NO_CONN_TO_DST\":\n      case 260:\n        m.code = 260;\n        break;\n\n      case \"HOP_CANT_DIAL_DST\":\n      case 261:\n        m.code = 261;\n        break;\n\n      case \"HOP_CANT_OPEN_DST_STREAM\":\n      case 262:\n        m.code = 262;\n        break;\n\n      case \"HOP_CANT_SPEAK_RELAY\":\n      case 270:\n        m.code = 270;\n        break;\n\n      case \"HOP_CANT_RELAY_TO_SELF\":\n      case 280:\n        m.code = 280;\n        break;\n\n      case \"STOP_SRC_ADDR_TOO_LONG\":\n      case 320:\n        m.code = 320;\n        break;\n\n      case \"STOP_DST_ADDR_TOO_LONG\":\n      case 321:\n        m.code = 321;\n        break;\n\n      case \"STOP_SRC_MULTIADDR_INVALID\":\n      case 350:\n        m.code = 350;\n        break;\n\n      case \"STOP_DST_MULTIADDR_INVALID\":\n      case 351:\n        m.code = 351;\n        break;\n\n      case \"STOP_RELAY_REFUSED\":\n      case 390:\n        m.code = 390;\n        break;\n\n      case \"MALFORMED_MESSAGE\":\n      case 400:\n        m.code = 400;\n        break;\n    }\n\n    return m;\n  };\n  /**\n   * Creates a plain object from a CircuitRelay message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof CircuitRelay\n   * @static\n   * @param {CircuitRelay} m CircuitRelay\n   * @param {$protobuf.IConversionOptions} [o] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n\n\n  CircuitRelay.toObject = function toObject(m, o) {\n    if (!o) o = {};\n    var d = {};\n\n    if (o.defaults) {\n      d.type = o.enums === String ? \"HOP\" : 1;\n      d.srcPeer = null;\n      d.dstPeer = null;\n      d.code = o.enums === String ? \"SUCCESS\" : 100;\n    }\n\n    if (m.type != null && m.hasOwnProperty(\"type\")) {\n      d.type = o.enums === String ? $root.CircuitRelay.Type[m.type] : m.type;\n    }\n\n    if (m.srcPeer != null && m.hasOwnProperty(\"srcPeer\")) {\n      d.srcPeer = $root.CircuitRelay.Peer.toObject(m.srcPeer, o);\n    }\n\n    if (m.dstPeer != null && m.hasOwnProperty(\"dstPeer\")) {\n      d.dstPeer = $root.CircuitRelay.Peer.toObject(m.dstPeer, o);\n    }\n\n    if (m.code != null && m.hasOwnProperty(\"code\")) {\n      d.code = o.enums === String ? $root.CircuitRelay.Status[m.code] : m.code;\n    }\n\n    return d;\n  };\n  /**\n   * Converts this CircuitRelay to JSON.\n   * @function toJSON\n   * @memberof CircuitRelay\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n\n\n  CircuitRelay.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n  /**\n   * Status enum.\n   * @name CircuitRelay.Status\n   * @enum {number}\n   * @property {number} SUCCESS=100 SUCCESS value\n   * @property {number} HOP_SRC_ADDR_TOO_LONG=220 HOP_SRC_ADDR_TOO_LONG value\n   * @property {number} HOP_DST_ADDR_TOO_LONG=221 HOP_DST_ADDR_TOO_LONG value\n   * @property {number} HOP_SRC_MULTIADDR_INVALID=250 HOP_SRC_MULTIADDR_INVALID value\n   * @property {number} HOP_DST_MULTIADDR_INVALID=251 HOP_DST_MULTIADDR_INVALID value\n   * @property {number} HOP_NO_CONN_TO_DST=260 HOP_NO_CONN_TO_DST value\n   * @property {number} HOP_CANT_DIAL_DST=261 HOP_CANT_DIAL_DST value\n   * @property {number} HOP_CANT_OPEN_DST_STREAM=262 HOP_CANT_OPEN_DST_STREAM value\n   * @property {number} HOP_CANT_SPEAK_RELAY=270 HOP_CANT_SPEAK_RELAY value\n   * @property {number} HOP_CANT_RELAY_TO_SELF=280 HOP_CANT_RELAY_TO_SELF value\n   * @property {number} STOP_SRC_ADDR_TOO_LONG=320 STOP_SRC_ADDR_TOO_LONG value\n   * @property {number} STOP_DST_ADDR_TOO_LONG=321 STOP_DST_ADDR_TOO_LONG value\n   * @property {number} STOP_SRC_MULTIADDR_INVALID=350 STOP_SRC_MULTIADDR_INVALID value\n   * @property {number} STOP_DST_MULTIADDR_INVALID=351 STOP_DST_MULTIADDR_INVALID value\n   * @property {number} STOP_RELAY_REFUSED=390 STOP_RELAY_REFUSED value\n   * @property {number} MALFORMED_MESSAGE=400 MALFORMED_MESSAGE value\n   */\n\n\n  CircuitRelay.Status = function () {\n    var valuesById = {},\n        values = Object.create(valuesById);\n    values[valuesById[100] = \"SUCCESS\"] = 100;\n    values[valuesById[220] = \"HOP_SRC_ADDR_TOO_LONG\"] = 220;\n    values[valuesById[221] = \"HOP_DST_ADDR_TOO_LONG\"] = 221;\n    values[valuesById[250] = \"HOP_SRC_MULTIADDR_INVALID\"] = 250;\n    values[valuesById[251] = \"HOP_DST_MULTIADDR_INVALID\"] = 251;\n    values[valuesById[260] = \"HOP_NO_CONN_TO_DST\"] = 260;\n    values[valuesById[261] = \"HOP_CANT_DIAL_DST\"] = 261;\n    values[valuesById[262] = \"HOP_CANT_OPEN_DST_STREAM\"] = 262;\n    values[valuesById[270] = \"HOP_CANT_SPEAK_RELAY\"] = 270;\n    values[valuesById[280] = \"HOP_CANT_RELAY_TO_SELF\"] = 280;\n    values[valuesById[320] = \"STOP_SRC_ADDR_TOO_LONG\"] = 320;\n    values[valuesById[321] = \"STOP_DST_ADDR_TOO_LONG\"] = 321;\n    values[valuesById[350] = \"STOP_SRC_MULTIADDR_INVALID\"] = 350;\n    values[valuesById[351] = \"STOP_DST_MULTIADDR_INVALID\"] = 351;\n    values[valuesById[390] = \"STOP_RELAY_REFUSED\"] = 390;\n    values[valuesById[400] = \"MALFORMED_MESSAGE\"] = 400;\n    return values;\n  }();\n  /**\n   * Type enum.\n   * @name CircuitRelay.Type\n   * @enum {number}\n   * @property {number} HOP=1 HOP value\n   * @property {number} STOP=2 STOP value\n   * @property {number} STATUS=3 STATUS value\n   * @property {number} CAN_HOP=4 CAN_HOP value\n   */\n\n\n  CircuitRelay.Type = function () {\n    var valuesById = {},\n        values = Object.create(valuesById);\n    values[valuesById[1] = \"HOP\"] = 1;\n    values[valuesById[2] = \"STOP\"] = 2;\n    values[valuesById[3] = \"STATUS\"] = 3;\n    values[valuesById[4] = \"CAN_HOP\"] = 4;\n    return values;\n  }();\n\n  CircuitRelay.Peer = function () {\n    /**\n     * Properties of a Peer.\n     * @memberof CircuitRelay\n     * @interface IPeer\n     * @property {Uint8Array} id Peer id\n     * @property {Array.<Uint8Array>|null} [addrs] Peer addrs\n     */\n\n    /**\n     * Constructs a new Peer.\n     * @memberof CircuitRelay\n     * @classdesc Represents a Peer.\n     * @implements IPeer\n     * @constructor\n     * @param {CircuitRelay.IPeer=} [p] Properties to set\n     */\n    function Peer(p) {\n      this.addrs = [];\n      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];\n    }\n    /**\n     * Peer id.\n     * @member {Uint8Array} id\n     * @memberof CircuitRelay.Peer\n     * @instance\n     */\n\n\n    Peer.prototype.id = $util.newBuffer([]);\n    /**\n     * Peer addrs.\n     * @member {Array.<Uint8Array>} addrs\n     * @memberof CircuitRelay.Peer\n     * @instance\n     */\n\n    Peer.prototype.addrs = $util.emptyArray;\n    /**\n     * Encodes the specified Peer message. Does not implicitly {@link CircuitRelay.Peer.verify|verify} messages.\n     * @function encode\n     * @memberof CircuitRelay.Peer\n     * @static\n     * @param {CircuitRelay.IPeer} m Peer message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n    Peer.encode = function encode(m, w) {\n      if (!w) w = $Writer.create();\n      w.uint32(10).bytes(m.id);\n\n      if (m.addrs != null && m.addrs.length) {\n        for (var i = 0; i < m.addrs.length; ++i) w.uint32(18).bytes(m.addrs[i]);\n      }\n\n      return w;\n    };\n    /**\n     * Decodes a Peer message from the specified reader or buffer.\n     * @function decode\n     * @memberof CircuitRelay.Peer\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {CircuitRelay.Peer} Peer\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    Peer.decode = function decode(r, l) {\n      if (!(r instanceof $Reader)) r = $Reader.create(r);\n      var c = l === undefined ? r.len : r.pos + l,\n          m = new $root.CircuitRelay.Peer();\n\n      while (r.pos < c) {\n        var t = r.uint32();\n\n        switch (t >>> 3) {\n          case 1:\n            m.id = r.bytes();\n            break;\n\n          case 2:\n            if (!(m.addrs && m.addrs.length)) m.addrs = [];\n            m.addrs.push(r.bytes());\n            break;\n\n          default:\n            r.skipType(t & 7);\n            break;\n        }\n      }\n\n      if (!m.hasOwnProperty(\"id\")) throw $util.ProtocolError(\"missing required 'id'\", {\n        instance: m\n      });\n      return m;\n    };\n    /**\n     * Creates a Peer message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof CircuitRelay.Peer\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {CircuitRelay.Peer} Peer\n     */\n\n\n    Peer.fromObject = function fromObject(d) {\n      if (d instanceof $root.CircuitRelay.Peer) return d;\n      var m = new $root.CircuitRelay.Peer();\n\n      if (d.id != null) {\n        if (typeof d.id === \"string\") $util.base64.decode(d.id, m.id = $util.newBuffer($util.base64.length(d.id)), 0);else if (d.id.length) m.id = d.id;\n      }\n\n      if (d.addrs) {\n        if (!Array.isArray(d.addrs)) throw TypeError(\".CircuitRelay.Peer.addrs: array expected\");\n        m.addrs = [];\n\n        for (var i = 0; i < d.addrs.length; ++i) {\n          if (typeof d.addrs[i] === \"string\") $util.base64.decode(d.addrs[i], m.addrs[i] = $util.newBuffer($util.base64.length(d.addrs[i])), 0);else if (d.addrs[i].length) m.addrs[i] = d.addrs[i];\n        }\n      }\n\n      return m;\n    };\n    /**\n     * Creates a plain object from a Peer message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof CircuitRelay.Peer\n     * @static\n     * @param {CircuitRelay.Peer} m Peer\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    Peer.toObject = function toObject(m, o) {\n      if (!o) o = {};\n      var d = {};\n\n      if (o.arrays || o.defaults) {\n        d.addrs = [];\n      }\n\n      if (o.defaults) {\n        if (o.bytes === String) d.id = \"\";else {\n          d.id = [];\n          if (o.bytes !== Array) d.id = $util.newBuffer(d.id);\n        }\n      }\n\n      if (m.id != null && m.hasOwnProperty(\"id\")) {\n        d.id = o.bytes === String ? $util.base64.encode(m.id, 0, m.id.length) : o.bytes === Array ? Array.prototype.slice.call(m.id) : m.id;\n      }\n\n      if (m.addrs && m.addrs.length) {\n        d.addrs = [];\n\n        for (var j = 0; j < m.addrs.length; ++j) {\n          d.addrs[j] = o.bytes === String ? $util.base64.encode(m.addrs[j], 0, m.addrs[j].length) : o.bytes === Array ? Array.prototype.slice.call(m.addrs[j]) : m.addrs[j];\n        }\n      }\n\n      return d;\n    };\n    /**\n     * Converts this Peer to JSON.\n     * @function toJSON\n     * @memberof CircuitRelay.Peer\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    Peer.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Peer;\n  }();\n\n  return CircuitRelay;\n}();\n\nmodule.exports = $root;","map":null,"metadata":{},"sourceType":"script"}