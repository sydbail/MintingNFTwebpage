{"ast":null,"code":"'use strict';\n\nconst Message = require('../types/message');\n\nconst Wantlist = require('../types/wantlist');\n\nconst CONSTANTS = require('../constants');\n\nconst MsgQueue = require('./msg-queue');\n\nconst logger = require('../utils').logger;\n\nconst {\n  base58btc\n} = require('multiformats/bases/base58');\n/**\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('multiformats').CID} CID\n */\n\n\nmodule.exports = class WantManager {\n  /**\n   * @param {PeerId} peerId\n   * @param {import('../network')} network\n   * @param {import('../stats')} stats\n   */\n  constructor(peerId, network, stats) {\n    /** @type {Map<string, MsgQueue>} */\n    this.peers = new Map();\n    this.wantlist = new Wantlist(stats);\n    this.network = network;\n    this._stats = stats;\n    this._peerId = peerId;\n    this._log = logger(peerId, 'want');\n  }\n  /**\n   * @private\n   * @param {CID[]} cids\n   * @param {boolean} cancel\n   * @param {boolean} [force]\n   */\n\n\n  _addEntries(cids, cancel, force) {\n    const entries = cids.map((cid, i) => {\n      return new Message.Entry(cid, CONSTANTS.kMaxPriority - i, Message.WantType.Block, cancel);\n    });\n    entries.forEach(e => {\n      // add changes to our wantlist\n      if (e.cancel) {\n        if (force) {\n          this.wantlist.removeForce(e.cid.toString(base58btc));\n        } else {\n          this.wantlist.remove(e.cid);\n        }\n      } else {\n        this._log('adding to wl'); // TODO: Figure out the wantType\n        // @ts-expect-error - requires wantType\n\n\n        this.wantlist.add(e.cid, e.priority);\n      }\n    }); // broadcast changes\n\n    for (const p of this.peers.values()) {\n      p.addEntries(entries);\n    }\n  }\n  /**\n   * @private\n   * @param {PeerId} peerId\n   */\n\n\n  _startPeerHandler(peerId) {\n    let mq = this.peers.get(peerId.toB58String());\n\n    if (mq) {\n      mq.refcnt++;\n      return;\n    }\n\n    mq = new MsgQueue(this._peerId, peerId, this.network); // new peer, give them the full wantlist\n\n    const fullwantlist = new Message(true);\n\n    for (const entry of this.wantlist.entries()) {\n      fullwantlist.addEntry(entry[1].cid, entry[1].priority);\n    }\n\n    mq.addMessage(fullwantlist);\n    this.peers.set(peerId.toB58String(), mq);\n    return mq;\n  }\n  /**\n   * @private\n   * @param {PeerId} peerId\n   */\n\n\n  _stopPeerHandler(peerId) {\n    const mq = this.peers.get(peerId.toB58String());\n\n    if (!mq) {\n      return;\n    }\n\n    mq.refcnt--;\n\n    if (mq.refcnt > 0) {\n      return;\n    }\n\n    this.peers.delete(peerId.toB58String());\n  }\n  /**\n   * add all the cids to the wantlist\n   *\n   * @param {CID[]} cids\n   * @param {Object} [options]\n   * @param {AbortSignal} [options.signal]\n   */\n\n\n  wantBlocks(cids, options = {}) {\n    this._addEntries(cids, false);\n\n    if (options && options.signal) {\n      options.signal.addEventListener('abort', () => {\n        this.cancelWants(cids);\n      });\n    }\n  }\n  /**\n   * Remove blocks of all the given keys without respecting refcounts\n   *\n   * @param {CID[]} cids\n   */\n\n\n  unwantBlocks(cids) {\n    this._log('unwant blocks: %s', cids.length);\n\n    this._addEntries(cids, true, true);\n  }\n  /**\n   * Cancel wanting all of the given keys\n   *\n   * @param {CID[]} cids\n   */\n\n\n  cancelWants(cids) {\n    this._log('cancel wants: %s', cids.length);\n\n    this._addEntries(cids, true);\n  }\n  /**\n   * Returns a list of all currently connected peers\n   */\n\n\n  connectedPeers() {\n    return Array.from(this.peers.keys());\n  }\n  /**\n   * @param {PeerId} peerId\n   */\n\n\n  connected(peerId) {\n    this._startPeerHandler(peerId);\n  }\n  /**\n   * @param {PeerId} peerId\n   */\n\n\n  disconnected(peerId) {\n    this._stopPeerHandler(peerId);\n  }\n\n  start() {}\n\n  stop() {\n    this.peers.forEach(mq => this.disconnected(mq.peerId));\n  }\n\n};","map":null,"metadata":{},"sourceType":"script"}