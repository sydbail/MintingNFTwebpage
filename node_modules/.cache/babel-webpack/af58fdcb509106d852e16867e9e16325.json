{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nvar _awaitAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\").default;\n\nvar _wrapAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nconst {\n  CarBlockIterator\n} = require('@ipld/car/iterator');\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n\nconst itPeekable = require('it-peekable');\n\nconst drain = require('it-drain');\n\nconst map = require('it-map');\n\nconst log = require('debug')('ipfs:components:dag:import');\n/**\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('ipfs-repo').IPFSRepo} IPFSRepo\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n * @typedef {import('ipfs-core-types/src/dag/').ImportRootStatus} RootStatus\n */\n\n/**\n * @param {Object} config\n * @param {IPFSRepo} config.repo\n */\n\n\nmodule.exports = ({\n  repo\n}) => {\n  /**\n   * @type {import('ipfs-core-types/src/dag').API[\"import\"]}\n   */\n  function dagImport(_x) {\n    return _dagImport.apply(this, arguments);\n  }\n\n  function _dagImport() {\n    _dagImport = _wrapAsyncGenerator(function* (sources, options = {}) {\n      const release = yield _awaitAsyncGenerator(repo.gcLock.readLock());\n\n      try {\n        const abortOptions = {\n          signal: options.signal,\n          timeout: options.timeout\n        };\n        const peekable = itPeekable(sources);\n        const {\n          value,\n          done\n        } = yield _awaitAsyncGenerator(peekable.peek());\n\n        if (done) {\n          return;\n        }\n\n        if (value) {\n          // @ts-ignore\n          peekable.push(value);\n        }\n        /**\n         * @type {AsyncIterable<AsyncIterable<Uint8Array>> | Iterable<AsyncIterable<Uint8Array>>}\n         */\n\n\n        let cars;\n\n        if (value instanceof Uint8Array) {\n          // @ts-ignore\n          cars = [peekable];\n        } else {\n          // @ts-ignore\n          cars = peekable;\n        }\n\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n\n        var _iteratorError;\n\n        try {\n          for (var _iterator = _asyncIterator(cars), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n            const car = _value;\n            const roots = yield _awaitAsyncGenerator(importCar(repo, abortOptions, car));\n\n            if (options.pinRoots !== false) {\n              // default=true\n              for (const cid of roots) {\n                let pinErrorMsg = '';\n\n                try {\n                  // eslint-disable-line max-depth\n                  if (yield _awaitAsyncGenerator(repo.blocks.has(cid))) {\n                    // eslint-disable-line max-depth\n                    log(`Pinning root ${cid}`);\n                    yield _awaitAsyncGenerator(repo.pins.pinRecursively(cid));\n                  } else {\n                    pinErrorMsg = 'blockstore: block not found';\n                  }\n                } catch (err) {\n                  pinErrorMsg = err.message;\n                }\n\n                yield {\n                  root: {\n                    cid,\n                    pinErrorMsg\n                  }\n                };\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              yield _awaitAsyncGenerator(_iterator.return());\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      } finally {\n        release();\n      }\n    });\n    return _dagImport.apply(this, arguments);\n  }\n\n  return withTimeoutOption(dagImport);\n};\n/**\n * @param {IPFSRepo} repo\n * @param {AbortOptions} options\n * @param {AsyncIterable<Uint8Array>} source\n * @returns {Promise<CID[]>}\n */\n\n\nfunction importCar(_x2, _x3, _x4) {\n  return _importCar.apply(this, arguments);\n}\n\nfunction _importCar() {\n  _importCar = _asyncToGenerator(function* (repo, options, source) {\n    const reader = yield CarBlockIterator.fromIterable(source);\n    const roots = yield reader.getRoots();\n    yield drain(repo.blocks.putMany(map(reader, ({\n      cid: key,\n      bytes: value\n    }) => {\n      log(`Import block ${key}`);\n      return {\n        key,\n        value\n      };\n    }), {\n      signal: options.signal\n    }));\n    return roots;\n  });\n  return _importCar.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/sydneybailey/Internship/contract-testing/node_modules/ipfs-core/src/components/dag/import.js"],"names":["CarBlockIterator","require","withTimeoutOption","itPeekable","drain","map","log","module","exports","repo","dagImport","sources","options","release","gcLock","readLock","abortOptions","signal","timeout","peekable","value","done","peek","push","cars","Uint8Array","car","roots","importCar","pinRoots","cid","pinErrorMsg","blocks","has","pins","pinRecursively","err","message","root","source","reader","fromIterable","getRoots","putMany","key","bytes"],"mappings":"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","sourcesContent":["'use strict'\n\nconst { CarBlockIterator } = require('@ipld/car/iterator')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\nconst itPeekable = require('it-peekable')\nconst drain = require('it-drain')\nconst map = require('it-map')\nconst log = require('debug')('ipfs:components:dag:import')\n\n/**\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('ipfs-repo').IPFSRepo} IPFSRepo\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n * @typedef {import('ipfs-core-types/src/dag/').ImportRootStatus} RootStatus\n */\n\n/**\n * @param {Object} config\n * @param {IPFSRepo} config.repo\n */\nmodule.exports = ({ repo }) => {\n  /**\n   * @type {import('ipfs-core-types/src/dag').API[\"import\"]}\n   */\n  async function * dagImport (sources, options = {}) {\n    const release = await repo.gcLock.readLock()\n\n    try {\n      const abortOptions = { signal: options.signal, timeout: options.timeout }\n      const peekable = itPeekable(sources)\n\n      const { value, done } = await peekable.peek()\n\n      if (done) {\n        return\n      }\n\n      if (value) {\n        // @ts-ignore\n        peekable.push(value)\n      }\n\n      /**\n       * @type {AsyncIterable<AsyncIterable<Uint8Array>> | Iterable<AsyncIterable<Uint8Array>>}\n       */\n      let cars\n\n      if (value instanceof Uint8Array) {\n        // @ts-ignore\n        cars = [peekable]\n      } else {\n        // @ts-ignore\n        cars = peekable\n      }\n\n      for await (const car of cars) {\n        const roots = await importCar(repo, abortOptions, car)\n\n        if (options.pinRoots !== false) { // default=true\n          for (const cid of roots) {\n            let pinErrorMsg = ''\n\n            try { // eslint-disable-line max-depth\n              if (await repo.blocks.has(cid)) { // eslint-disable-line max-depth\n                log(`Pinning root ${cid}`)\n                await repo.pins.pinRecursively(cid)\n              } else {\n                pinErrorMsg = 'blockstore: block not found'\n              }\n            } catch (err) {\n              pinErrorMsg = err.message\n            }\n\n            yield { root: { cid, pinErrorMsg } }\n          }\n        }\n      }\n    } finally {\n      release()\n    }\n  }\n\n  return withTimeoutOption(dagImport)\n}\n\n/**\n * @param {IPFSRepo} repo\n * @param {AbortOptions} options\n * @param {AsyncIterable<Uint8Array>} source\n * @returns {Promise<CID[]>}\n */\nasync function importCar (repo, options, source) {\n  const reader = await CarBlockIterator.fromIterable(source)\n  const roots = await reader.getRoots()\n\n  await drain(\n    repo.blocks.putMany(\n      map(reader, ({ cid: key, bytes: value }) => {\n        log(`Import block ${key}`)\n\n        return { key, value }\n      }),\n      { signal: options.signal }\n    )\n  )\n\n  return roots\n}\n"]},"metadata":{},"sourceType":"script"}