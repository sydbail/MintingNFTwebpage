{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst {\n  base64\n} = require('multiformats/bases/base64');\n\nconst ciphers = require('../ciphers/aes-gcm');\n\nmodule.exports = {\n  /**\n   * Attempts to decrypt a base64 encoded PrivateKey string\n   * with the given password. The privateKey must have been exported\n   * using the same password and underlying cipher (aes-gcm)\n   *\n   * @param {string} privateKey - A base64 encoded encrypted key\n   * @param {string} password\n   * @returns {Promise<Uint8Array>} The private key protobuf\n   */\n  import: function () {\n    var _ref = _asyncToGenerator(function* (privateKey, password) {\n      const encryptedKey = base64.decode(privateKey);\n      const cipher = ciphers.create();\n      return yield cipher.decrypt(encryptedKey, password);\n    });\n\n    return function _import(_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }()\n};","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Demo/node_modules/libp2p-crypto/src/keys/importer.js"],"names":["base64","require","ciphers","module","exports","import","privateKey","password","encryptedKey","decode","cipher","create","decrypt"],"mappings":"AAAA;;;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAaC,OAAO,CAAC,2BAAD,CAA1B;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,oBAAD,CAAvB;;AAEAE,MAAM,CAACC,OAAP,GAAiB;AACf;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,MAAM;AAAA,iCAAE,WAAgBC,UAAhB,EAA4BC,QAA5B,EAAsC;AAC5C,YAAMC,YAAY,GAAGR,MAAM,CAACS,MAAP,CAAcH,UAAd,CAArB;AACA,YAAMI,MAAM,GAAGR,OAAO,CAACS,MAAR,EAAf;AACA,mBAAaD,MAAM,CAACE,OAAP,CAAeJ,YAAf,EAA6BD,QAA7B,CAAb;AACD,KAJK;;AAAA;AAAA;AAAA;AAAA;AAVS,CAAjB","sourcesContent":["'use strict'\n\nconst { base64 } = require('multiformats/bases/base64')\nconst ciphers = require('../ciphers/aes-gcm')\n\nmodule.exports = {\n  /**\n   * Attempts to decrypt a base64 encoded PrivateKey string\n   * with the given password. The privateKey must have been exported\n   * using the same password and underlying cipher (aes-gcm)\n   *\n   * @param {string} privateKey - A base64 encoded encrypted key\n   * @param {string} password\n   * @returns {Promise<Uint8Array>} The private key protobuf\n   */\n  import: async function (privateKey, password) {\n    const encryptedKey = base64.decode(privateKey)\n    const cipher = ciphers.create()\n    return await cipher.decrypt(encryptedKey, password)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}