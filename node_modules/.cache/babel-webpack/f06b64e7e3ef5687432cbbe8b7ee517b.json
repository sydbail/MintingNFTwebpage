{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst dagPb = require('@ipld/dag-pb');\n\nconst dagCbor = require('@ipld/dag-cbor');\n\nconst raw = require('multiformats/codecs/raw');\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @typedef {import('@ipld/dag-pb').PBLink} DAGLink\n */\n\n/**\n * @param {any} node\n * @param {DAGLink[]} [links]\n * @returns {DAGLink[]}\n */\n\n\nfunction findLinks(node, links = []) {\n  for (const key in node) {\n    const val = node[key];\n\n    if (key === '/' && Object.keys(node).length === 1) {\n      try {\n        links.push({\n          Name: '',\n          Tsize: 0,\n          Hash: CID.parse(val)\n        });\n        continue;\n      } catch (_) {// not a CID\n      }\n    }\n\n    if (val instanceof CID) {\n      links.push({\n        Name: '',\n        Tsize: 0,\n        Hash: val\n      });\n      continue;\n    }\n\n    if (Array.isArray(val)) {\n      findLinks(val, links);\n    }\n\n    if (val && typeof val === 'object') {\n      findLinks(val, links);\n    }\n  }\n\n  return links;\n}\n/**\n * @param {Object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('ipfs-core-utils/src/multicodecs')} config.codecs\n */\n\n\nmodule.exports = ({\n  repo,\n  codecs\n}) => {\n  /**\n   * @type {import('ipfs-core-types/src/object').API[\"links\"]}\n   */\n  function links(_x) {\n    return _links.apply(this, arguments);\n  }\n\n  function _links() {\n    _links = _asyncToGenerator(function* (cid, options = {}) {\n      const codec = yield codecs.getCodec(cid.code);\n      const block = yield repo.blocks.get(cid, options);\n      const node = codec.decode(block);\n\n      if (cid.code === raw.code) {\n        return [];\n      }\n\n      if (cid.code === dagPb.code) {\n        return node.Links;\n      }\n\n      if (cid.code === dagCbor.code) {\n        return findLinks(node);\n      }\n\n      throw new Error(`Cannot resolve links from codec ${cid.code}`);\n    });\n    return _links.apply(this, arguments);\n  }\n\n  return withTimeoutOption(links);\n};","map":null,"metadata":{},"sourceType":"script"}