{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/Dapp/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst Envelope = require('./envelope');\n\nconst PeerRecord = require('./peer-record');\n/**\n * @typedef {import('../')} Libp2p\n */\n\n/**\n * Create (or update if existing) self peer record and store it in the AddressBook.\n *\n * @param {Libp2p} libp2p\n * @returns {Promise<void>}\n */\n\n\nfunction updateSelfPeerRecord(_x) {\n  return _updateSelfPeerRecord.apply(this, arguments);\n}\n\nfunction _updateSelfPeerRecord() {\n  _updateSelfPeerRecord = _asyncToGenerator(function* (libp2p) {\n    const peerRecord = new PeerRecord({\n      peerId: libp2p.peerId,\n      multiaddrs: libp2p.multiaddrs\n    });\n    const envelope = yield Envelope.seal(peerRecord, libp2p.peerId);\n    libp2p.peerStore.addressBook.consumePeerRecord(envelope);\n  });\n  return _updateSelfPeerRecord.apply(this, arguments);\n}\n\nmodule.exports.updateSelfPeerRecord = updateSelfPeerRecord;","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Dapp/node_modules/libp2p/src/record/utils.js"],"names":["Envelope","require","PeerRecord","updateSelfPeerRecord","libp2p","peerRecord","peerId","multiaddrs","envelope","seal","peerStore","addressBook","consumePeerRecord","module","exports"],"mappings":"AAAA;;;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,YAAD,CAAxB;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,eAAD,CAA1B;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;SACeE,oB;;;;;4CAAf,WAAqCC,MAArC,EAA6C;AAC3C,UAAMC,UAAU,GAAG,IAAIH,UAAJ,CAAe;AAChCI,MAAAA,MAAM,EAAEF,MAAM,CAACE,MADiB;AAEhCC,MAAAA,UAAU,EAAEH,MAAM,CAACG;AAFa,KAAf,CAAnB;AAIA,UAAMC,QAAQ,SAASR,QAAQ,CAACS,IAAT,CAAcJ,UAAd,EAA0BD,MAAM,CAACE,MAAjC,CAAvB;AACAF,IAAAA,MAAM,CAACM,SAAP,CAAiBC,WAAjB,CAA6BC,iBAA7B,CAA+CJ,QAA/C;AACD,G;;;;AAEDK,MAAM,CAACC,OAAP,CAAeX,oBAAf,GAAsCA,oBAAtC","sourcesContent":["'use strict'\n\nconst Envelope = require('./envelope')\nconst PeerRecord = require('./peer-record')\n\n/**\n * @typedef {import('../')} Libp2p\n */\n\n/**\n * Create (or update if existing) self peer record and store it in the AddressBook.\n *\n * @param {Libp2p} libp2p\n * @returns {Promise<void>}\n */\nasync function updateSelfPeerRecord (libp2p) {\n  const peerRecord = new PeerRecord({\n    peerId: libp2p.peerId,\n    multiaddrs: libp2p.multiaddrs\n  })\n  const envelope = await Envelope.seal(peerRecord, libp2p.peerId)\n  libp2p.peerStore.addressBook.consumePeerRecord(envelope)\n}\n\nmodule.exports.updateSelfPeerRecord = updateSelfPeerRecord\n"]},"metadata":{},"sourceType":"script"}