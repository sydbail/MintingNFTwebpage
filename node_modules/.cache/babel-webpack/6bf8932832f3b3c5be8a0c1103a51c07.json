{"ast":null,"code":"/* eslint-disable no-undef */\n'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/Dapp/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nvar _awaitAsyncGenerator = require(\"/Users/sydneybailey/Internship/Dapp/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\").default;\n\nvar _wrapAsyncGenerator = require(\"/Users/sydneybailey/Internship/Dapp/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/Dapp/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nconst {\n  fetch,\n  Request,\n  Headers\n} = require('./http/fetch');\n\nconst {\n  TimeoutError,\n  HTTPError\n} = require('./http/error');\n\nconst merge = require('merge-options').bind({\n  ignoreUndefined: true\n});\n\nconst {\n  URL,\n  URLSearchParams\n} = require('iso-url');\n\nconst {\n  AbortController\n} = require('native-abort-controller');\n\nconst anySignal = require('any-signal');\n/**\n * @typedef {import('stream').Readable} NodeReadableStream\n * @typedef {import('./types').HTTPOptions} HTTPOptions\n * @typedef {import('./types').ExtendedResponse} ExtendedResponse\n */\n\n/**\n * @template TResponse\n * @param {Promise<TResponse>} promise\n * @param {number | undefined} ms\n * @param {AbortController} abortController\n * @returns {Promise<TResponse>}\n */\n\n\nconst timeout = (promise, ms, abortController) => {\n  if (ms === undefined) {\n    return promise;\n  }\n\n  const start = Date.now();\n\n  const timedOut = () => {\n    const time = Date.now() - start;\n    return time >= ms;\n  };\n\n  return new Promise((resolve, reject) => {\n    const timeoutID = setTimeout(() => {\n      if (timedOut()) {\n        reject(new TimeoutError());\n        abortController.abort();\n      }\n    }, ms);\n    /**\n     * @param {(value: any) => void } next\n     */\n\n    const after = next => {\n      /**\n       * @param {any} res\n       */\n      const fn = res => {\n        clearTimeout(timeoutID);\n\n        if (timedOut()) {\n          reject(new TimeoutError());\n          return;\n        }\n\n        next(res);\n      };\n\n      return fn;\n    };\n\n    promise.then(after(resolve), after(reject));\n  });\n};\n\nconst defaults = {\n  throwHttpErrors: true,\n  credentials: 'same-origin'\n};\n\nclass HTTP {\n  /**\n   *\n   * @param {HTTPOptions} options\n   */\n  constructor(options = {}) {\n    /** @type {HTTPOptions} */\n    this.opts = merge(defaults, options);\n  }\n  /**\n   * Fetch\n   *\n   * @param {string | Request} resource\n   * @param {HTTPOptions} options\n   * @returns {Promise<ExtendedResponse>}\n   */\n\n\n  fetch(resource, options = {}) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      /** @type {HTTPOptions} */\n      const opts = merge(_this.opts, options);\n      const headers = new Headers(opts.headers); // validate resource type\n\n      if (typeof resource !== 'string' && !(resource instanceof URL || resource instanceof Request)) {\n        throw new TypeError('`resource` must be a string, URL, or Request');\n      }\n\n      const url = new URL(resource.toString(), opts.base);\n      const {\n        searchParams,\n        transformSearchParams,\n        json\n      } = opts;\n\n      if (searchParams) {\n        if (typeof transformSearchParams === 'function') {\n          // @ts-ignore\n          url.search = transformSearchParams(new URLSearchParams(opts.searchParams));\n        } else {\n          // @ts-ignore\n          url.search = new URLSearchParams(opts.searchParams);\n        }\n      }\n\n      if (json) {\n        opts.body = JSON.stringify(opts.json);\n        headers.set('content-type', 'application/json');\n      }\n\n      const abortController = new AbortController(); // @ts-ignore\n\n      const signal = anySignal([abortController.signal, opts.signal]);\n      const response = yield timeout(fetch(url.toString(), { ...opts,\n        signal,\n        timeout: undefined,\n        headers\n      }), opts.timeout, abortController);\n\n      if (!response.ok && opts.throwHttpErrors) {\n        if (opts.handleError) {\n          yield opts.handleError(response);\n        }\n\n        throw new HTTPError(response);\n      }\n\n      response.iterator = function () {\n        return fromStream(response.body);\n      };\n\n      response.ndjson = /*#__PURE__*/_wrapAsyncGenerator(function* () {\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n\n        var _iteratorError;\n\n        try {\n          for (var _iterator = _asyncIterator(ndjson(response.iterator())), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n            const chunk = _value;\n\n            if (options.transform) {\n              yield options.transform(chunk);\n            } else {\n              yield chunk;\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              yield _awaitAsyncGenerator(_iterator.return());\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      });\n      return response;\n    })();\n  }\n  /**\n   * @param {string | Request} resource\n   * @param {HTTPOptions} options\n   */\n\n\n  post(resource, options = {}) {\n    return this.fetch(resource, { ...options,\n      method: 'POST'\n    });\n  }\n  /**\n   * @param {string | Request} resource\n   * @param {HTTPOptions} options\n   */\n\n\n  get(resource, options = {}) {\n    return this.fetch(resource, { ...options,\n      method: 'GET'\n    });\n  }\n  /**\n   * @param {string | Request} resource\n   * @param {HTTPOptions} options\n   */\n\n\n  put(resource, options = {}) {\n    return this.fetch(resource, { ...options,\n      method: 'PUT'\n    });\n  }\n  /**\n   * @param {string | Request} resource\n   * @param {HTTPOptions} options\n   */\n\n\n  delete(resource, options = {}) {\n    return this.fetch(resource, { ...options,\n      method: 'DELETE'\n    });\n  }\n  /**\n   * @param {string | Request} resource\n   * @param {HTTPOptions} options\n   */\n\n\n  options(resource, options = {}) {\n    return this.fetch(resource, { ...options,\n      method: 'OPTIONS'\n    });\n  }\n\n}\n/**\n * Parses NDJSON chunks from an iterator\n *\n * @param {AsyncIterable<Uint8Array>} source\n * @returns {AsyncIterable<any>}\n */\n\n\nconst ndjson = /*#__PURE__*/function () {\n  var _ref2 = _wrapAsyncGenerator(function* (source) {\n    const decoder = new TextDecoder();\n    let buf = '';\n    var _iteratorNormalCompletion2 = true;\n    var _didIteratorError2 = false;\n\n    var _iteratorError2;\n\n    try {\n      for (var _iterator2 = _asyncIterator(source), _step2, _value2; _step2 = yield _awaitAsyncGenerator(_iterator2.next()), _iteratorNormalCompletion2 = _step2.done, _value2 = yield _awaitAsyncGenerator(_step2.value), !_iteratorNormalCompletion2; _iteratorNormalCompletion2 = true) {\n        const chunk = _value2;\n        buf += decoder.decode(chunk, {\n          stream: true\n        });\n        const lines = buf.split(/\\r?\\n/);\n\n        for (let i = 0; i < lines.length - 1; i++) {\n          const l = lines[i].trim();\n\n          if (l.length > 0) {\n            yield JSON.parse(l);\n          }\n        }\n\n        buf = lines[lines.length - 1];\n      }\n    } catch (err) {\n      _didIteratorError2 = true;\n      _iteratorError2 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n          yield _awaitAsyncGenerator(_iterator2.return());\n        }\n      } finally {\n        if (_didIteratorError2) {\n          throw _iteratorError2;\n        }\n      }\n    }\n\n    buf += decoder.decode();\n    buf = buf.trim();\n\n    if (buf.length !== 0) {\n      yield JSON.parse(buf);\n    }\n  });\n\n  return function ndjson(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n/**\n * Stream to AsyncIterable\n *\n * @template TChunk\n * @param {ReadableStream<TChunk> | NodeReadableStream | null} source\n * @returns {AsyncIterable<TChunk>}\n */\n\n\nconst fromStream = source => {\n  // Workaround for https://github.com/node-fetch/node-fetch/issues/766\n  if (isNodeReadableStream(source)) {\n    const iter = source[Symbol.asyncIterator]();\n    return {\n      [Symbol.asyncIterator]() {\n        return {\n          next: iter.next.bind(iter),\n\n          return(value) {\n            source.destroy();\n\n            if (typeof iter.return === 'function') {\n              return iter.return();\n            }\n\n            return Promise.resolve({\n              done: true,\n              value\n            });\n          }\n\n        };\n      }\n\n    };\n  }\n\n  if (isWebReadableStream(source)) {\n    const reader = source.getReader();\n    return _wrapAsyncGenerator(function* () {\n      try {\n        while (true) {\n          // Read from the stream\n          const {\n            done,\n            value\n          } = yield _awaitAsyncGenerator(reader.read()); // Exit if we're done\n\n          if (done) return; // Else yield the chunk\n\n          if (value) {\n            yield value;\n          }\n        }\n      } finally {\n        reader.releaseLock();\n      }\n    })();\n  }\n\n  if (isAsyncIterable(source)) {\n    return source;\n  }\n\n  throw new TypeError('Body can\\'t be converted to AsyncIterable');\n};\n/**\n * Check if it's an AsyncIterable\n *\n * @template {unknown} TChunk\n * @template {any} Other\n * @param {Other|AsyncIterable<TChunk>} value\n * @returns {value is AsyncIterable<TChunk>}\n */\n\n\nconst isAsyncIterable = value => {\n  return typeof value === 'object' && value !== null && typeof\n  /** @type {any} */\n  value[Symbol.asyncIterator] === 'function';\n};\n/**\n * Check for web readable stream\n *\n * @template {unknown} TChunk\n * @template {any} Other\n * @param {Other|ReadableStream<TChunk>} value\n * @returns {value is ReadableStream<TChunk>}\n */\n\n\nconst isWebReadableStream = value => {\n  return value && typeof\n  /** @type {any} */\n  value.getReader === 'function';\n};\n/**\n * @param {any} value\n * @returns {value is NodeReadableStream}\n */\n\n\nconst isNodeReadableStream = value => Object.prototype.hasOwnProperty.call(value, 'readable') && Object.prototype.hasOwnProperty.call(value, 'writable');\n\nHTTP.HTTPError = HTTPError;\nHTTP.TimeoutError = TimeoutError;\nHTTP.streamToAsyncIterator = fromStream;\n/**\n * @param {string | Request} resource\n * @param {HTTPOptions} [options]\n */\n\nHTTP.post = (resource, options) => new HTTP(options).post(resource, options);\n/**\n * @param {string | Request} resource\n * @param {HTTPOptions} [options]\n */\n\n\nHTTP.get = (resource, options) => new HTTP(options).get(resource, options);\n/**\n * @param {string | Request} resource\n * @param {HTTPOptions} [options]\n */\n\n\nHTTP.put = (resource, options) => new HTTP(options).put(resource, options);\n/**\n * @param {string | Request} resource\n * @param {HTTPOptions} [options]\n */\n\n\nHTTP.delete = (resource, options) => new HTTP(options).delete(resource, options);\n/**\n * @param {string | Request} resource\n * @param {HTTPOptions} [options]\n */\n\n\nHTTP.options = (resource, options) => new HTTP(options).options(resource, options);\n\nmodule.exports = HTTP;","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Dapp/node_modules/ipfs-utils/src/http.js"],"names":["fetch","Request","Headers","require","TimeoutError","HTTPError","merge","bind","ignoreUndefined","URL","URLSearchParams","AbortController","anySignal","timeout","promise","ms","abortController","undefined","start","Date","now","timedOut","time","Promise","resolve","reject","timeoutID","setTimeout","abort","after","next","fn","res","clearTimeout","then","defaults","throwHttpErrors","credentials","HTTP","constructor","options","opts","resource","headers","TypeError","url","toString","base","searchParams","transformSearchParams","json","search","body","JSON","stringify","set","signal","response","ok","handleError","iterator","fromStream","ndjson","chunk","transform","post","method","get","put","delete","source","decoder","TextDecoder","buf","decode","stream","lines","split","i","length","l","trim","parse","isNodeReadableStream","iter","Symbol","asyncIterator","return","value","destroy","done","isWebReadableStream","reader","getReader","read","releaseLock","isAsyncIterable","Object","prototype","hasOwnProperty","call","streamToAsyncIterator","module","exports"],"mappings":"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","sourcesContent":["/* eslint-disable no-undef */\n'use strict'\n\nconst { fetch, Request, Headers } = require('./http/fetch')\nconst { TimeoutError, HTTPError } = require('./http/error')\nconst merge = require('merge-options').bind({ ignoreUndefined: true })\nconst { URL, URLSearchParams } = require('iso-url')\nconst { AbortController } = require('native-abort-controller')\nconst anySignal = require('any-signal')\n\n/**\n * @typedef {import('stream').Readable} NodeReadableStream\n * @typedef {import('./types').HTTPOptions} HTTPOptions\n * @typedef {import('./types').ExtendedResponse} ExtendedResponse\n */\n\n/**\n * @template TResponse\n * @param {Promise<TResponse>} promise\n * @param {number | undefined} ms\n * @param {AbortController} abortController\n * @returns {Promise<TResponse>}\n */\nconst timeout = (promise, ms, abortController) => {\n  if (ms === undefined) {\n    return promise\n  }\n\n  const start = Date.now()\n\n  const timedOut = () => {\n    const time = Date.now() - start\n\n    return time >= ms\n  }\n\n  return new Promise((resolve, reject) => {\n    const timeoutID = setTimeout(() => {\n      if (timedOut()) {\n        reject(new TimeoutError())\n        abortController.abort()\n      }\n    }, ms)\n\n    /**\n     * @param {(value: any) => void } next\n     */\n    const after = (next) => {\n      /**\n       * @param {any} res\n       */\n      const fn = (res) => {\n        clearTimeout(timeoutID)\n\n        if (timedOut()) {\n          reject(new TimeoutError())\n          return\n        }\n\n        next(res)\n      }\n      return fn\n    }\n\n    promise\n      .then(after(resolve), after(reject))\n  })\n}\n\nconst defaults = {\n  throwHttpErrors: true,\n  credentials: 'same-origin'\n}\n\nclass HTTP {\n  /**\n   *\n   * @param {HTTPOptions} options\n   */\n  constructor (options = {}) {\n    /** @type {HTTPOptions} */\n    this.opts = merge(defaults, options)\n  }\n\n  /**\n   * Fetch\n   *\n   * @param {string | Request} resource\n   * @param {HTTPOptions} options\n   * @returns {Promise<ExtendedResponse>}\n   */\n  async fetch (resource, options = {}) {\n    /** @type {HTTPOptions} */\n    const opts = merge(this.opts, options)\n    const headers = new Headers(opts.headers)\n\n    // validate resource type\n    if (typeof resource !== 'string' && !(resource instanceof URL || resource instanceof Request)) {\n      throw new TypeError('`resource` must be a string, URL, or Request')\n    }\n\n    const url = new URL(resource.toString(), opts.base)\n\n    const {\n      searchParams,\n      transformSearchParams,\n      json\n    } = opts\n\n    if (searchParams) {\n      if (typeof transformSearchParams === 'function') {\n        // @ts-ignore\n        url.search = transformSearchParams(new URLSearchParams(opts.searchParams))\n      } else {\n        // @ts-ignore\n        url.search = new URLSearchParams(opts.searchParams)\n      }\n    }\n\n    if (json) {\n      opts.body = JSON.stringify(opts.json)\n      headers.set('content-type', 'application/json')\n    }\n\n    const abortController = new AbortController()\n    // @ts-ignore\n    const signal = anySignal([abortController.signal, opts.signal])\n\n    const response = await timeout(\n      fetch(\n        url.toString(),\n        {\n          ...opts,\n          signal,\n          timeout: undefined,\n          headers\n        }\n      ),\n      opts.timeout,\n      abortController\n    )\n\n    if (!response.ok && opts.throwHttpErrors) {\n      if (opts.handleError) {\n        await opts.handleError(response)\n      }\n      throw new HTTPError(response)\n    }\n\n    response.iterator = function () {\n      return fromStream(response.body)\n    }\n\n    response.ndjson = async function * () {\n      for await (const chunk of ndjson(response.iterator())) {\n        if (options.transform) {\n          yield options.transform(chunk)\n        } else {\n          yield chunk\n        }\n      }\n    }\n\n    return response\n  }\n\n  /**\n   * @param {string | Request} resource\n   * @param {HTTPOptions} options\n   */\n  post (resource, options = {}) {\n    return this.fetch(resource, { ...options, method: 'POST' })\n  }\n\n  /**\n   * @param {string | Request} resource\n   * @param {HTTPOptions} options\n   */\n  get (resource, options = {}) {\n    return this.fetch(resource, { ...options, method: 'GET' })\n  }\n\n  /**\n   * @param {string | Request} resource\n   * @param {HTTPOptions} options\n   */\n  put (resource, options = {}) {\n    return this.fetch(resource, { ...options, method: 'PUT' })\n  }\n\n  /**\n   * @param {string | Request} resource\n   * @param {HTTPOptions} options\n   */\n  delete (resource, options = {}) {\n    return this.fetch(resource, { ...options, method: 'DELETE' })\n  }\n\n  /**\n   * @param {string | Request} resource\n   * @param {HTTPOptions} options\n   */\n  options (resource, options = {}) {\n    return this.fetch(resource, { ...options, method: 'OPTIONS' })\n  }\n}\n\n/**\n * Parses NDJSON chunks from an iterator\n *\n * @param {AsyncIterable<Uint8Array>} source\n * @returns {AsyncIterable<any>}\n */\nconst ndjson = async function * (source) {\n  const decoder = new TextDecoder()\n  let buf = ''\n\n  for await (const chunk of source) {\n    buf += decoder.decode(chunk, { stream: true })\n    const lines = buf.split(/\\r?\\n/)\n\n    for (let i = 0; i < lines.length - 1; i++) {\n      const l = lines[i].trim()\n      if (l.length > 0) {\n        yield JSON.parse(l)\n      }\n    }\n    buf = lines[lines.length - 1]\n  }\n  buf += decoder.decode()\n  buf = buf.trim()\n  if (buf.length !== 0) {\n    yield JSON.parse(buf)\n  }\n}\n\n/**\n * Stream to AsyncIterable\n *\n * @template TChunk\n * @param {ReadableStream<TChunk> | NodeReadableStream | null} source\n * @returns {AsyncIterable<TChunk>}\n */\nconst fromStream = (source) => {\n  // Workaround for https://github.com/node-fetch/node-fetch/issues/766\n  if (isNodeReadableStream(source)) {\n    const iter = source[Symbol.asyncIterator]()\n    return {\n      [Symbol.asyncIterator] () {\n        return {\n          next: iter.next.bind(iter),\n          return (value) {\n            source.destroy()\n            if (typeof iter.return === 'function') {\n              return iter.return()\n            }\n            return Promise.resolve({ done: true, value })\n          }\n        }\n      }\n    }\n  }\n\n  if (isWebReadableStream(source)) {\n    const reader = source.getReader()\n    return (async function * () {\n      try {\n        while (true) {\n          // Read from the stream\n          const { done, value } = await reader.read()\n          // Exit if we're done\n          if (done) return\n          // Else yield the chunk\n          if (value) {\n            yield value\n          }\n        }\n      } finally {\n        reader.releaseLock()\n      }\n    })()\n  }\n\n  if (isAsyncIterable(source)) {\n    return source\n  }\n\n  throw new TypeError('Body can\\'t be converted to AsyncIterable')\n}\n\n/**\n * Check if it's an AsyncIterable\n *\n * @template {unknown} TChunk\n * @template {any} Other\n * @param {Other|AsyncIterable<TChunk>} value\n * @returns {value is AsyncIterable<TChunk>}\n */\nconst isAsyncIterable = (value) => {\n  return typeof value === 'object' &&\n  value !== null &&\n  typeof /** @type {any} */(value)[Symbol.asyncIterator] === 'function'\n}\n\n/**\n * Check for web readable stream\n *\n * @template {unknown} TChunk\n * @template {any} Other\n * @param {Other|ReadableStream<TChunk>} value\n * @returns {value is ReadableStream<TChunk>}\n */\nconst isWebReadableStream = (value) => {\n  return value && typeof /** @type {any} */(value).getReader === 'function'\n}\n\n/**\n * @param {any} value\n * @returns {value is NodeReadableStream}\n */\nconst isNodeReadableStream = (value) =>\n  Object.prototype.hasOwnProperty.call(value, 'readable') &&\n  Object.prototype.hasOwnProperty.call(value, 'writable')\n\nHTTP.HTTPError = HTTPError\nHTTP.TimeoutError = TimeoutError\nHTTP.streamToAsyncIterator = fromStream\n\n/**\n * @param {string | Request} resource\n * @param {HTTPOptions} [options]\n */\nHTTP.post = (resource, options) => new HTTP(options).post(resource, options)\n\n/**\n * @param {string | Request} resource\n * @param {HTTPOptions} [options]\n */\nHTTP.get = (resource, options) => new HTTP(options).get(resource, options)\n\n/**\n * @param {string | Request} resource\n * @param {HTTPOptions} [options]\n */\nHTTP.put = (resource, options) => new HTTP(options).put(resource, options)\n\n/**\n * @param {string | Request} resource\n * @param {HTTPOptions} [options]\n */\nHTTP.delete = (resource, options) => new HTTP(options).delete(resource, options)\n\n/**\n * @param {string | Request} resource\n * @param {HTTPOptions} [options]\n */\nHTTP.options = (resource, options) => new HTTP(options).options(resource, options)\n\nmodule.exports = HTTP\n"]},"metadata":{},"sourceType":"script"}