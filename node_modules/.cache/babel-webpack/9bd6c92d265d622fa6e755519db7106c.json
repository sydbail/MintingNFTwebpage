{"ast":null,"code":"'use strict';\n\nvar _awaitAsyncGenerator = require(\"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\").default;\n\nvar _wrapAsyncGenerator = require(\"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @param {Object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\n\n\nmodule.exports = function ({\n  repo\n}) {\n  /**\n   * @type {import('ipfs-core-types/src/refs').API[\"local\"]}\n   */\n  function refsLocal() {\n    return _refsLocal.apply(this, arguments);\n  }\n\n  function _refsLocal() {\n    _refsLocal = _wrapAsyncGenerator(function* (options = {}) {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n\n      var _iteratorError;\n\n      try {\n        for (var _iterator = _asyncIterator(repo.blocks.queryKeys({}, {\n          signal: options.signal\n        })), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n          const cid = _value;\n          yield {\n            ref: cid.toString()\n          };\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            yield _awaitAsyncGenerator(_iterator.return());\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    });\n    return _refsLocal.apply(this, arguments);\n  }\n\n  return withTimeoutOption(refsLocal);\n};","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Demo/node_modules/ipfs-core/src/components/refs/local.js"],"names":["withTimeoutOption","require","module","exports","repo","refsLocal","options","blocks","queryKeys","signal","cid","ref","toString"],"mappings":"AAAA;;;;;;;;AAEA,MAAMA,iBAAiB,GAAGC,OAAO,CAAC,yCAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,UAAU;AAAEC,EAAAA;AAAF,CAAV,EAAoB;AACnC;AACF;AACA;AAHqC,WAIlBC,SAJkB;AAAA;AAAA;;AAAA;AAAA,qCAInC,WAA4BC,OAAO,GAAG,EAAtC,EAA0C;AAAA;AAAA;;AAAA;;AAAA;AACxC,4CAAwBF,IAAI,CAACG,MAAL,CAAYC,SAAZ,CAAsB,EAAtB,EAA0B;AAAEC,UAAAA,MAAM,EAAEH,OAAO,CAACG;AAAlB,SAA1B,CAAxB,gOAA+E;AAAA,gBAA9DC,GAA8D;AAC7E,gBAAM;AAAEC,YAAAA,GAAG,EAAED,GAAG,CAACE,QAAJ;AAAP,WAAN;AACD;AAHuC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIzC,KARkC;AAAA;AAAA;;AAUnC,SAAOZ,iBAAiB,CAACK,SAAD,CAAxB;AACD,CAXD","sourcesContent":["'use strict'\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\n\n/**\n * @param {Object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\nmodule.exports = function ({ repo }) {\n  /**\n   * @type {import('ipfs-core-types/src/refs').API[\"local\"]}\n   */\n  async function * refsLocal (options = {}) {\n    for await (const cid of repo.blocks.queryKeys({}, { signal: options.signal })) {\n      yield { ref: cid.toString() }\n    }\n  }\n\n  return withTimeoutOption(refsLocal)\n}\n"]},"metadata":{},"sourceType":"script"}