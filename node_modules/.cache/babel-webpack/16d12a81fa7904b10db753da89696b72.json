{"ast":null,"code":"'use strict';\n\nvar _wrapAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\").default;\n\nvar _awaitAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nvar _asyncGeneratorDelegate = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncGeneratorDelegate\").default;\n\nconst log = require('debug')('ipfs:repo:gc');\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n\nconst loadMfsRoot = require('../files/utils/with-mfs-root');\n/**\n * @typedef {import('ipfs-core-types/src/pin').API} PinAPI\n * @typedef {import('ipfs-core-types/src/refs').API} RefsAPI\n * @typedef {import('ipfs-repo').IPFSRepo} IPFSRepo\n * @typedef {import('interface-datastore').Key} Key\n * @typedef {import('multiformats/hashes/interface').MultihashHasher} MultihashHasher\n * @typedef {import('ipfs-core-utils/src/multihashes')} Multihashes\n */\n\n/**\n * Perform mark and sweep garbage collection\n *\n * @param {Object} config\n * @param {IPFSRepo} config.repo\n * @param {Multihashes} config.hashers\n */\n\n\nmodule.exports = ({\n  repo,\n  hashers\n}) => {\n  /**\n   * @type {import('ipfs-core-types/src/repo').API[\"gc\"]}\n   */\n  function gc() {\n    return _gc.apply(this, arguments);\n  }\n\n  function _gc() {\n    _gc = _wrapAsyncGenerator(function* (options = {}) {\n      const start = Date.now();\n      let mfsRootCid;\n\n      try {\n        mfsRootCid = yield _awaitAsyncGenerator(loadMfsRoot({\n          repo,\n          hashers\n        }, options)); // temporarily pin mfs root\n\n        yield _awaitAsyncGenerator(repo.pins.pinRecursively(mfsRootCid));\n        yield* _asyncGeneratorDelegate(_asyncIterator(repo.gc()), _awaitAsyncGenerator);\n      } finally {\n        // gc complete, unpin mfs root\n        if (mfsRootCid) {\n          yield _awaitAsyncGenerator(repo.pins.unpin(mfsRootCid));\n        }\n      }\n\n      log(`Complete (${Date.now() - start}ms)`);\n    });\n    return _gc.apply(this, arguments);\n  }\n\n  return withTimeoutOption(gc);\n};","map":null,"metadata":{},"sourceType":"script"}