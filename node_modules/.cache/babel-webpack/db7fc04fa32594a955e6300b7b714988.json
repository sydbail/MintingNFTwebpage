{"ast":null,"code":"import _asyncToGenerator from \"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./web3.service\";\n\nconst noTbasicNFTArtifacts = require('../../../build/contracts/noTransferbasicNFT.json');\n\nconst contract = require('@truffle/contract');\n\nexport class NotransfercontractService {\n  web3Ser;\n  noTransfer = contract(noTbasicNFTArtifacts);\n\n  constructor(web3Ser) {\n    this.web3Ser = web3Ser; // Bootstrap the MetaCoin abstraction for Use\n\n    this.noTransfer.setProvider(web3Ser.web3.currentProvider);\n  }\n\n  getAddress() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      let not = yield _this.noTransfer.deployed();\n      const contractaddr = not.address;\n      return contractaddr;\n    })();\n  }\n\n  getOwner(id) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      let not = yield _this2.noTransfer.deployed();\n      const owner = yield not.ownerOf.call(id, {\n        from: _this2.web3Ser.web3.eth.defaultAccount\n      });\n      return owner;\n    })();\n  }\n\n  mintCoin(to) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      let not = yield _this3.noTransfer.deployed();\n      const value = yield not.mint(to, {\n        from: _this3.web3Ser.web3.eth.defaultAccount\n      });\n      return value;\n    })();\n  }\n\n  static ɵfac = function NotransfercontractService_Factory(t) {\n    return new (t || NotransfercontractService)(i0.ɵɵinject(i1.Web3Service));\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: NotransfercontractService,\n    factory: NotransfercontractService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Demo/src/app/services/notransfercontract.service.ts"],"names":[],"mappings":";;;;AAKA,MAAM,oBAAoB,GAAG,OAAO,CAAC,kDAAD,CAApC;;AACA,MAAM,QAAQ,GAAG,OAAO,CAAC,mBAAD,CAAxB;;AAKA,OAAM,MAAO,yBAAP,CAAgC;AAIf,EAAA,OAAA;AAFrB,EAAA,UAAU,GAAG,QAAQ,CAAC,oBAAD,CAAX;;AAEV,EAAA,WAAA,CAAqB,OAArB,EAAyC;AAApB,SAAA,OAAA,GAAA,OAAA,CAAoB,CACxC;;AACA,SAAK,UAAL,CAAgB,WAAhB,CAA4B,OAAO,CAAC,IAAR,CAAa,eAAzC;AACA;;AAEK,EAAA,UAAU,GAAA;AAAA;;AAAA;AACd,UAAI,GAAG,SAAS,KAAI,CAAC,UAAL,CAAgB,QAAhB,EAAhB;AACA,YAAM,YAAY,GAAG,GAAG,CAAC,OAAzB;AACA,aAAO,YAAP;AAHc;AAIf;;AAEK,EAAA,QAAQ,CAAC,EAAD,EAAQ;AAAA;;AAAA;AACtB,UAAI,GAAG,SAAS,MAAI,CAAC,UAAL,CAAgB,QAAhB,EAAhB;AACE,YAAM,KAAK,SAAS,GAAG,CAAC,OAAJ,CAAY,IAAZ,CAAiB,EAAjB,EAAqB;AACvC,QAAA,IAAI,EAAE,MAAI,CAAC,OAAL,CAAa,IAAb,CAAkB,GAAlB,CAAsB;AADW,OAArB,CAApB;AAGD,aAAO,KAAP;AALqB;AAMtB;;AAEK,EAAA,QAAQ,CAAC,EAAD,EAAQ;AAAA;;AAAA;AACrB,UAAI,GAAG,SAAS,MAAI,CAAC,UAAL,CAAgB,QAAhB,EAAhB;AACE,YAAM,KAAK,SAAS,GAAG,CAAC,IAAJ,CAAS,EAAT,EAAa;AAC/B,QAAA,IAAI,EAAE,MAAI,CAAC,OAAL,CAAa,IAAb,CAAkB,GAAlB,CAAsB;AADG,OAAb,CAApB;AAGA,aAAO,KAAP;AALmB;AAMrB;;;qBA7BW,yB,EAAyB,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,WAAA,C;AAAA,G;;WAAzB,yB;AAAyB,IAAA,OAAA,EAAzB,yBAAyB,CAAA,I;AAAA,IAAA,UAAA,EAFxB;;AAEwB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { from } from 'rxjs';\nimport { Web3Service } from './web3.service'\n\nconst noTbasicNFTArtifacts = require('../../../build/contracts/noTransferbasicNFT.json');\nconst contract = require('@truffle/contract');\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NotransfercontractService {\n\n  noTransfer = contract(noTbasicNFTArtifacts);\n\n  constructor( private web3Ser: Web3Service ) {\n  \t// Bootstrap the MetaCoin abstraction for Use\n  \tthis.noTransfer.setProvider(web3Ser.web3.currentProvider);\n  }\n\n  async getAddress(): Promise<string> {\n    let not = await this.noTransfer.deployed();\n    const contractaddr = not.address;\n    return contractaddr;\n  }\n\n  async getOwner(id: any): Promise<any> {\n\t\tlet not = await this.noTransfer.deployed();\n    const owner = await not.ownerOf.call(id, {\n      from: this.web3Ser.web3.eth.defaultAccount\n\t\t});\n\t  return owner;\n\t}\n\n\tasync mintCoin(to: any): Promise<any>{\n\t\tlet not = await this.noTransfer.deployed();\n    const value = await not.mint(to, {\n      from: this.web3Ser.web3.eth.defaultAccount\n    });\n    return value;\n\t}\n\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}