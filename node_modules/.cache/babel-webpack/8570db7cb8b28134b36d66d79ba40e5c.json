{"ast":null,"code":"'use strict';\n/**\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('../').PeerData} PeerData\n */\n\n/**\n * A list of unique peers.\n */\n\nclass PeerList {\n  constructor() {\n    /** @type {PeerData[]} */\n    this.list = [];\n  }\n  /**\n   * Add a new peer. Returns `true` if it was a new one\n   *\n   * @param {PeerData} peerData\n   */\n\n\n  push(peerData) {\n    if (!this.has(peerData.id)) {\n      this.list.push(peerData);\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Check if this PeerData is already in here.\n   *\n   * @param {PeerId} peerId\n   */\n\n\n  has(peerId) {\n    const match = this.list.find(i => i.id.equals(peerId));\n    return Boolean(match);\n  }\n  /**\n   * Get the list as an array.\n   */\n\n\n  toArray() {\n    return this.list.slice();\n  }\n  /**\n   * Remove the last element\n   */\n\n\n  pop() {\n    return this.list.pop();\n  }\n  /**\n   * The length of the list\n   */\n\n\n  get length() {\n    return this.list.length;\n  }\n\n}\n\nmodule.exports = PeerList;","map":null,"metadata":{},"sourceType":"script"}