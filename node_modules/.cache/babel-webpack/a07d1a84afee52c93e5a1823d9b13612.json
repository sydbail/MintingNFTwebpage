{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst multipartRequest = require('../../lib/multipart-request');\n\nconst configure = require('../../lib/configure');\n\nconst toUrlSearchParams = require('../../lib/to-url-search-params');\n\nconst abortSignal = require('../../lib/abort-signal');\n\nconst {\n  AbortController\n} = require('native-abort-controller');\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object/patch').API<HTTPClientExtraOptions>} ObjectPatchAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {ObjectPatchAPI[\"setData\"]}\n   */\n  function setData(_x, _x2) {\n    return _setData.apply(this, arguments);\n  }\n\n  function _setData() {\n    _setData = _asyncToGenerator(function* (cid, data, options = {}) {\n      // allow aborting requests on body errors\n      const controller = new AbortController();\n      const signal = abortSignal(controller.signal, options.signal);\n      const res = yield api.post('object/patch/set-data', {\n        timeout: options.timeout,\n        signal,\n        searchParams: toUrlSearchParams({\n          arg: [`${cid}`],\n          ...options\n        }),\n        ...(yield multipartRequest(data, controller, options.headers))\n      });\n      const {\n        Hash\n      } = yield res.json();\n      return CID.parse(Hash);\n    });\n    return _setData.apply(this, arguments);\n  }\n\n  return setData;\n});","map":{"version":3,"sources":["/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/ipfs-http-client/src/object/patch/set-data.js"],"names":["CID","require","multipartRequest","configure","toUrlSearchParams","abortSignal","AbortController","module","exports","api","setData","cid","data","options","controller","signal","res","post","timeout","searchParams","arg","headers","Hash","json","parse"],"mappings":"AAAA;;;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAUC,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAMC,gBAAgB,GAAGD,OAAO,CAAC,6BAAD,CAAhC;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,qBAAD,CAAzB;;AACA,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,gCAAD,CAAjC;;AACA,MAAMI,WAAW,GAAGJ,OAAO,CAAC,wBAAD,CAA3B;;AACA,MAAM;AAAEK,EAAAA;AAAF,IAAsBL,OAAO,CAAC,yBAAD,CAAnC;AAEA;AACA;AACA;AACA;;;AAEAM,MAAM,CAACC,OAAP,GAAiBL,SAAS,CAACM,GAAG,IAAI;AAChC;AACF;AACA;AAHkC,WAIjBC,OAJiB;AAAA;AAAA;;AAAA;AAAA,iCAIhC,WAAwBC,GAAxB,EAA6BC,IAA7B,EAAmCC,OAAO,GAAG,EAA7C,EAAiD;AAC/C;AACA,YAAMC,UAAU,GAAG,IAAIR,eAAJ,EAAnB;AACA,YAAMS,MAAM,GAAGV,WAAW,CAACS,UAAU,CAACC,MAAZ,EAAoBF,OAAO,CAACE,MAA5B,CAA1B;AAEA,YAAMC,GAAG,SAASP,GAAG,CAACQ,IAAJ,CAAS,uBAAT,EAAkC;AAClDC,QAAAA,OAAO,EAAEL,OAAO,CAACK,OADiC;AAElDH,QAAAA,MAFkD;AAGlDI,QAAAA,YAAY,EAAEf,iBAAiB,CAAC;AAC9BgB,UAAAA,GAAG,EAAE,CACF,GAAET,GAAI,EADJ,CADyB;AAI9B,aAAGE;AAJ2B,SAAD,CAHmB;AASlD,kBACQX,gBAAgB,CAACU,IAAD,EAAOE,UAAP,EAAmBD,OAAO,CAACQ,OAA3B,CADxB;AATkD,OAAlC,CAAlB;AAcA,YAAM;AAAEC,QAAAA;AAAF,gBAAiBN,GAAG,CAACO,IAAJ,EAAvB;AAEA,aAAOvB,GAAG,CAACwB,KAAJ,CAAUF,IAAV,CAAP;AACD,KA1B+B;AAAA;AAAA;;AA2BhC,SAAOZ,OAAP;AACD,CA5ByB,CAA1B","sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst multipartRequest = require('../../lib/multipart-request')\nconst configure = require('../../lib/configure')\nconst toUrlSearchParams = require('../../lib/to-url-search-params')\nconst abortSignal = require('../../lib/abort-signal')\nconst { AbortController } = require('native-abort-controller')\n\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object/patch').API<HTTPClientExtraOptions>} ObjectPatchAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {ObjectPatchAPI[\"setData\"]}\n   */\n  async function setData (cid, data, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    const res = await api.post('object/patch/set-data', {\n      timeout: options.timeout,\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: [\n          `${cid}`\n        ],\n        ...options\n      }),\n      ...(\n        await multipartRequest(data, controller, options.headers)\n      )\n    })\n\n    const { Hash } = await res.json()\n\n    return CID.parse(Hash)\n  }\n  return setData\n})\n"]},"metadata":{},"sourceType":"script"}