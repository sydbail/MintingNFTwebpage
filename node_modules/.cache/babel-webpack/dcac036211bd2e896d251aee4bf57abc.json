{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nvar _wrapAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\").default;\n\nvar _awaitAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nvar _asyncGeneratorDelegate = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncGeneratorDelegate\").default;\n\nconst errCode = require('err-code');\n\nconst browserStreamToIt = require('browser-readablestream-to-it');\n\nconst itPeekable = require('it-peekable');\n\nconst map = require('it-map');\n\nconst {\n  isBytes,\n  isBlob,\n  isReadableStream,\n  isFileObject\n} = require('./utils');\n\nconst {\n  parseMtime,\n  parseMode\n} = require('ipfs-unixfs');\n/**\n * @typedef {import('ipfs-core-types/src/utils').ToContent} ToContent\n * @typedef {import('ipfs-unixfs-importer').ImportCandidate} ImporterImportCandidate\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidate} ImportCandidate\n */\n\n/**\n * @param {import('ipfs-core-types/src/utils').ImportCandidateStream} input\n * @param {(content:ToContent) => AsyncIterable<Uint8Array>} normaliseContent\n */\n// eslint-disable-next-line complexity\n\n\nmodule.exports = /*#__PURE__*/function () {\n  var _normaliseInput = _wrapAsyncGenerator(function* (input, normaliseContent) {\n    if (input === null || input === undefined) {\n      throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT');\n    } // String\n\n\n    if (typeof input === 'string' || input instanceof String) {\n      yield toFileObject(input.toString(), normaliseContent);\n      return;\n    } // Uint8Array|ArrayBuffer|TypedArray\n    // Blob|File\n\n\n    if (isBytes(input) || isBlob(input)) {\n      yield toFileObject(input, normaliseContent);\n      return;\n    } // Browser ReadableStream\n\n\n    if (isReadableStream(input)) {\n      input = browserStreamToIt(input);\n    } // Iterable<?>\n\n\n    if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n      /** @type {any} peekable */\n      const peekable = itPeekable(input);\n      /** @type {any} value **/\n\n      const {\n        value,\n        done\n      } = yield _awaitAsyncGenerator(peekable.peek());\n\n      if (done) {\n        // make sure empty iterators result in empty files\n        yield* _asyncGeneratorDelegate(_asyncIterator([]), _awaitAsyncGenerator);\n        return;\n      }\n\n      peekable.push(value); // (Async)Iterable<Number>\n      // (Async)Iterable<Bytes>\n\n      if (Number.isInteger(value) || isBytes(value)) {\n        yield toFileObject(peekable, normaliseContent);\n        return;\n      } // (Async)Iterable<Blob>\n      // (Async)Iterable<String>\n      // (Async)Iterable<{ path, content }>\n\n\n      if (isFileObject(value) || isBlob(value) || typeof value === 'string' || value instanceof String) {\n        yield* _asyncGeneratorDelegate(_asyncIterator(map(peekable, (\n        /** @type {ImportCandidate} */\n        value) => toFileObject(value, normaliseContent))), _awaitAsyncGenerator);\n        return;\n      } // (Async)Iterable<(Async)Iterable<?>>\n      // (Async)Iterable<ReadableStream<?>>\n      // ReadableStream<(Async)Iterable<?>>\n      // ReadableStream<ReadableStream<?>>\n\n\n      if (value[Symbol.iterator] || value[Symbol.asyncIterator] || isReadableStream(value)) {\n        yield* _asyncGeneratorDelegate(_asyncIterator(map(peekable, (\n        /** @type {ImportCandidate} */\n        value) => toFileObject(value, normaliseContent))), _awaitAsyncGenerator);\n        return;\n      }\n    } // { path, content: ? }\n    // Note: Detected _after_ (Async)Iterable<?> because Node.js streams have a\n    // `path` property that passes this check.\n\n\n    if (isFileObject(input)) {\n      yield toFileObject(input, normaliseContent);\n      return;\n    }\n\n    throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n  });\n\n  function normaliseInput(_x, _x2) {\n    return _normaliseInput.apply(this, arguments);\n  }\n\n  return normaliseInput;\n}();\n/**\n * @param {ImportCandidate} input\n * @param {(content:ToContent) => AsyncIterable<Uint8Array>} normaliseContent\n */\n\n\nfunction toFileObject(_x3, _x4) {\n  return _toFileObject.apply(this, arguments);\n}\n\nfunction _toFileObject() {\n  _toFileObject = _asyncToGenerator(function* (input, normaliseContent) {\n    // @ts-ignore - Those properties don't exist on most input types\n    const {\n      path,\n      mode,\n      mtime,\n      content\n    } = input;\n    /** @type {ImporterImportCandidate} */\n\n    const file = {\n      path: path || '',\n      mode: parseMode(mode),\n      mtime: parseMtime(mtime)\n    };\n\n    if (content) {\n      // @ts-ignore TODO vmx 2021-03-30 enable again\n      file.content = yield normaliseContent(content);\n    } else if (!path) {\n      // Not already a file object with path or content prop\n      // @ts-ignore - input still can be different ToContent\n      file.content = yield normaliseContent(input);\n    }\n\n    return file;\n  });\n  return _toFileObject.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"script"}