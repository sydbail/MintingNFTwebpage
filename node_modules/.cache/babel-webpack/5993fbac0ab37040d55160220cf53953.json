{"ast":null,"code":"import _asyncToGenerator from \"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as Digest from './digest.js';\nexport const from = ({\n  name,\n  code,\n  encode\n}) => new Hasher(name, code, encode);\nexport class Hasher {\n  constructor(name, code, encode) {\n    this.name = name;\n    this.code = code;\n    this.encode = encode;\n  }\n\n  digest(input) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (input instanceof Uint8Array) {\n        const digest = yield _this.encode(input);\n        return Digest.create(_this.code, digest);\n      } else {\n        throw Error('Unknown type, must be binary type');\n      }\n    })();\n  }\n\n}","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Demo/node_modules/multiformats/esm/src/hashes/hasher.js"],"names":["Digest","from","name","code","encode","Hasher","constructor","digest","input","Uint8Array","create","Error"],"mappings":";AAAA,OAAO,KAAKA,MAAZ,MAAwB,aAAxB;AACA,OAAO,MAAMC,IAAI,GAAG,CAAC;AAACC,EAAAA,IAAD;AAAOC,EAAAA,IAAP;AAAaC,EAAAA;AAAb,CAAD,KAA0B,IAAIC,MAAJ,CAAWH,IAAX,EAAiBC,IAAjB,EAAuBC,MAAvB,CAAvC;AACP,OAAO,MAAMC,MAAN,CAAa;AAClBC,EAAAA,WAAW,CAACJ,IAAD,EAAOC,IAAP,EAAaC,MAAb,EAAqB;AAC9B,SAAKF,IAAL,GAAYA,IAAZ;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,MAAL,GAAcA,MAAd;AACD;;AACKG,EAAAA,MAAM,CAACC,KAAD,EAAQ;AAAA;;AAAA;AAClB,UAAIA,KAAK,YAAYC,UAArB,EAAiC;AAC/B,cAAMF,MAAM,SAAS,KAAI,CAACH,MAAL,CAAYI,KAAZ,CAArB;AACA,eAAOR,MAAM,CAACU,MAAP,CAAc,KAAI,CAACP,IAAnB,EAAyBI,MAAzB,CAAP;AACD,OAHD,MAGO;AACL,cAAMI,KAAK,CAAC,mCAAD,CAAX;AACD;AANiB;AAOnB;;AAbiB","sourcesContent":["import * as Digest from './digest.js';\nexport const from = ({name, code, encode}) => new Hasher(name, code, encode);\nexport class Hasher {\n  constructor(name, code, encode) {\n    this.name = name;\n    this.code = code;\n    this.encode = encode;\n  }\n  async digest(input) {\n    if (input instanceof Uint8Array) {\n      const digest = await this.encode(input);\n      return Digest.create(this.code, digest);\n    } else {\n      throw Error('Unknown type, must be binary type');\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}