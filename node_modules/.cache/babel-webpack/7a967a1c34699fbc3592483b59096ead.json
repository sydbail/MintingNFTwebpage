{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nconst errCode = require('err-code');\n\nconst itPeekable = require('it-peekable');\n\nconst browserStreamToIt = require('browser-readablestream-to-it');\n\nconst all = require('it-all');\n\nconst {\n  isBytes,\n  isBlob,\n  isReadableStream\n} = require('./utils');\n/**\n * @param {import('./normalise-input').ToContent} input\n */\n\n\nfunction toBlob(_x) {\n  return _toBlob.apply(this, arguments);\n}\n/**\n * @param {AsyncIterable<BlobPart>|Iterable<BlobPart>} stream\n */\n\n\nfunction _toBlob() {\n  _toBlob = _asyncToGenerator(function* (input) {\n    // Bytes\n    if (isBytes(input)) {\n      return new Blob([input]);\n    } // String\n\n\n    if (typeof input === 'string' || input instanceof String) {\n      return new Blob([input.toString()]);\n    } // Blob | File\n\n\n    if (isBlob(input)) {\n      return input;\n    } // Browser stream\n\n\n    if (isReadableStream(input)) {\n      input = browserStreamToIt(input);\n    } // (Async)Iterator<?>\n\n\n    if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n      /** @type {any} peekable */\n      const peekable = itPeekable(input);\n      /** @type {any} value **/\n\n      const {\n        value,\n        done\n      } = yield peekable.peek();\n\n      if (done) {\n        // make sure empty iterators result in empty files\n        return itToBlob(peekable);\n      }\n\n      peekable.push(value); // (Async)Iterable<Number>\n\n      if (Number.isInteger(value)) {\n        return new Blob([Uint8Array.from(yield all(peekable))]);\n      } // (Async)Iterable<Bytes|String>\n\n\n      if (isBytes(value) || typeof value === 'string' || value instanceof String) {\n        return itToBlob(peekable);\n      }\n    }\n\n    throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT');\n  });\n  return _toBlob.apply(this, arguments);\n}\n\nfunction itToBlob(_x2) {\n  return _itToBlob.apply(this, arguments);\n}\n\nfunction _itToBlob() {\n  _itToBlob = _asyncToGenerator(function* (stream) {\n    const parts = [];\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n\n    var _iteratorError;\n\n    try {\n      for (var _iterator = _asyncIterator(stream), _step, _value; _step = yield _iterator.next(), _iteratorNormalCompletion = _step.done, _value = yield _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n        const chunk = _value;\n        parts.push(chunk);\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          yield _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return new Blob(parts);\n  });\n  return _itToBlob.apply(this, arguments);\n}\n\nmodule.exports = toBlob;","map":{"version":3,"sources":["/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/ipfs-core-utils/src/files/normalise-input/normalise-content.browser.js"],"names":["errCode","require","itPeekable","browserStreamToIt","all","isBytes","isBlob","isReadableStream","toBlob","input","Blob","String","toString","Symbol","iterator","asyncIterator","peekable","value","done","peek","itToBlob","push","Number","isInteger","Uint8Array","from","Error","stream","parts","chunk","module","exports"],"mappings":"AAAA;;;;;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,aAAD,CAA1B;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,8BAAD,CAAjC;;AACA,MAAMG,GAAG,GAAGH,OAAO,CAAC,QAAD,CAAnB;;AAEA,MAAM;AACJI,EAAAA,OADI;AAEJC,EAAAA,MAFI;AAGJC,EAAAA;AAHI,IAIFN,OAAO,CAAC,SAAD,CAJX;AAMA;AACA;AACA;;;SACeO,M;;;AAkDf;AACA;AACA;;;;8BApDA,WAAuBC,KAAvB,EAA8B;AAC5B;AACA,QAAIJ,OAAO,CAACI,KAAD,CAAX,EAAoB;AAClB,aAAO,IAAIC,IAAJ,CAAS,CAACD,KAAD,CAAT,CAAP;AACD,KAJ2B,CAM5B;;;AACA,QAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,YAAYE,MAAlD,EAA0D;AACxD,aAAO,IAAID,IAAJ,CAAS,CAACD,KAAK,CAACG,QAAN,EAAD,CAAT,CAAP;AACD,KAT2B,CAW5B;;;AACA,QAAIN,MAAM,CAACG,KAAD,CAAV,EAAmB;AACjB,aAAOA,KAAP;AACD,KAd2B,CAgB5B;;;AACA,QAAIF,gBAAgB,CAACE,KAAD,CAApB,EAA6B;AAC3BA,MAAAA,KAAK,GAAGN,iBAAiB,CAACM,KAAD,CAAzB;AACD,KAnB2B,CAqB5B;;;AACA,QAAII,MAAM,CAACC,QAAP,IAAmBL,KAAnB,IAA4BI,MAAM,CAACE,aAAP,IAAwBN,KAAxD,EAA+D;AAC7D;AACA,YAAMO,QAAQ,GAAGd,UAAU,CAACO,KAAD,CAA3B;AAEA;;AACA,YAAM;AAAEQ,QAAAA,KAAF;AAASC,QAAAA;AAAT,gBAAwBF,QAAQ,CAACG,IAAT,EAA9B;;AAEA,UAAID,IAAJ,EAAU;AACR;AACA,eAAOE,QAAQ,CAACJ,QAAD,CAAf;AACD;;AAEDA,MAAAA,QAAQ,CAACK,IAAT,CAAcJ,KAAd,EAZ6D,CAc7D;;AACA,UAAIK,MAAM,CAACC,SAAP,CAAiBN,KAAjB,CAAJ,EAA6B;AAC3B,eAAO,IAAIP,IAAJ,CAAS,CAACc,UAAU,CAACC,IAAX,OAAsBrB,GAAG,CAACY,QAAD,CAAzB,CAAD,CAAT,CAAP;AACD,OAjB4D,CAmB7D;;;AACA,UAAIX,OAAO,CAACY,KAAD,CAAP,IAAkB,OAAOA,KAAP,KAAiB,QAAnC,IAA+CA,KAAK,YAAYN,MAApE,EAA4E;AAC1E,eAAOS,QAAQ,CAACJ,QAAD,CAAf;AACD;AACF;;AAED,UAAMhB,OAAO,CAAC,IAAI0B,KAAJ,CAAW,qBAAoBjB,KAAM,EAArC,CAAD,EAA0C,sBAA1C,CAAb;AACD,G;;;;SAKcW,Q;;;;;gCAAf,WAAyBO,MAAzB,EAAiC;AAC/B,UAAMC,KAAK,GAAG,EAAd;AAD+B;AAAA;;AAAA;;AAAA;AAG/B,0CAA0BD,MAA1B,oLAAkC;AAAA,cAAjBE,KAAiB;AAChCD,QAAAA,KAAK,CAACP,IAAN,CAAWQ,KAAX;AACD;AAL8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAO/B,WAAO,IAAInB,IAAJ,CAASkB,KAAT,CAAP;AACD,G;;;;AAEDE,MAAM,CAACC,OAAP,GAAiBvB,MAAjB","sourcesContent":["'use strict'\n\nconst errCode = require('err-code')\nconst itPeekable = require('it-peekable')\nconst browserStreamToIt = require('browser-readablestream-to-it')\nconst all = require('it-all')\n\nconst {\n  isBytes,\n  isBlob,\n  isReadableStream\n} = require('./utils')\n\n/**\n * @param {import('./normalise-input').ToContent} input\n */\nasync function toBlob (input) {\n  // Bytes\n  if (isBytes(input)) {\n    return new Blob([input])\n  }\n\n  // String\n  if (typeof input === 'string' || input instanceof String) {\n    return new Blob([input.toString()])\n  }\n\n  // Blob | File\n  if (isBlob(input)) {\n    return input\n  }\n\n  // Browser stream\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input)\n  }\n\n  // (Async)Iterator<?>\n  if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n    /** @type {any} peekable */\n    const peekable = itPeekable(input)\n\n    /** @type {any} value **/\n    const { value, done } = await peekable.peek()\n\n    if (done) {\n      // make sure empty iterators result in empty files\n      return itToBlob(peekable)\n    }\n\n    peekable.push(value)\n\n    // (Async)Iterable<Number>\n    if (Number.isInteger(value)) {\n      return new Blob([Uint8Array.from(await all(peekable))])\n    }\n\n    // (Async)Iterable<Bytes|String>\n    if (isBytes(value) || typeof value === 'string' || value instanceof String) {\n      return itToBlob(peekable)\n    }\n  }\n\n  throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT')\n}\n\n/**\n * @param {AsyncIterable<BlobPart>|Iterable<BlobPart>} stream\n */\nasync function itToBlob (stream) {\n  const parts = []\n\n  for await (const chunk of stream) {\n    parts.push(chunk)\n  }\n\n  return new Blob(parts)\n}\n\nmodule.exports = toBlob\n"]},"metadata":{},"sourceType":"script"}