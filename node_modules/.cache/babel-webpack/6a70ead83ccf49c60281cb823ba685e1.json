{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst debug = require('debug');\n\nconst log = Object.assign(debug('ipfs:mfs-preload'), {\n  error: debug('ipfs:mfs-preload:error')\n});\n/**\n * @typedef {PreloadOptions & MFSPreloadOptions} Options\n * @typedef {Object} MFSPreloadOptions\n * @property {number} [interval]\n * @typedef {import('./types').PreloadOptions} PreloadOptions\n */\n\n/**\n * @param {Object} config\n * @param {import('./types').Preload} config.preload\n * @param {import('ipfs-core-types/src/files').API} config.files\n * @param {Options} [config.options]\n */\n\nmodule.exports = ({\n  preload,\n  files,\n  options = {}\n}) => {\n  options.interval = options.interval || 30 * 1000;\n\n  if (!options.enabled) {\n    log('MFS preload disabled');\n\n    const noop = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* () {});\n\n      return function noop() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return {\n      start: noop,\n      stop: noop\n    };\n  }\n\n  let rootCid = '';\n  /** @type {any} */\n\n  let timeoutId;\n\n  const preloadMfs = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      try {\n        const stats = yield files.stat('/');\n        const nextRootCid = stats.cid.toString();\n\n        if (rootCid !== nextRootCid) {\n          log(`preloading updated MFS root ${rootCid} -> ${stats.cid}`);\n          yield preload(stats.cid);\n          rootCid = nextRootCid;\n        }\n      } catch (err) {\n        log.error('failed to preload MFS root', err);\n      } finally {\n        timeoutId = setTimeout(preloadMfs, options.interval);\n      }\n    });\n\n    return function preloadMfs() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return {\n    /**\n     * @returns {Promise<void>}\n     */\n    start() {\n      return _asyncToGenerator(function* () {\n        const stats = yield files.stat('/');\n        rootCid = stats.cid.toString();\n        log(`monitoring MFS root ${stats.cid}`);\n        timeoutId = setTimeout(preloadMfs, options.interval);\n      })();\n    },\n\n    /**\n     * @returns {void}\n     */\n    stop() {\n      clearTimeout(timeoutId);\n    }\n\n  };\n};","map":{"version":3,"sources":["/Users/sydneybailey/Internship/contract-testing/node_modules/ipfs-core/src/mfs-preload.js"],"names":["debug","require","log","Object","assign","error","module","exports","preload","files","options","interval","enabled","noop","start","stop","rootCid","timeoutId","preloadMfs","stats","stat","nextRootCid","cid","toString","err","setTimeout","clearTimeout"],"mappings":"AAAA;;;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMC,GAAG,GAAGC,MAAM,CAACC,MAAP,CAAcJ,KAAK,CAAC,kBAAD,CAAnB,EAAyC;AACnDK,EAAAA,KAAK,EAAEL,KAAK,CAAC,wBAAD;AADuC,CAAzC,CAAZ;AAIA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AACAM,MAAM,CAACC,OAAP,GAAiB,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,KAAX;AAAkBC,EAAAA,OAAO,GAAG;AAA5B,CAAD,KAAsC;AACrDA,EAAAA,OAAO,CAACC,QAAR,GAAmBD,OAAO,CAACC,QAAR,IAAoB,KAAK,IAA5C;;AAEA,MAAI,CAACD,OAAO,CAACE,OAAb,EAAsB;AACpBV,IAAAA,GAAG,CAAC,sBAAD,CAAH;;AACA,UAAMW,IAAI;AAAA,mCAAG,aAAY,CAAE,CAAjB;;AAAA,sBAAJA,IAAI;AAAA;AAAA;AAAA,OAAV;;AACA,WAAO;AAAEC,MAAAA,KAAK,EAAED,IAAT;AAAeE,MAAAA,IAAI,EAAEF;AAArB,KAAP;AACD;;AAED,MAAIG,OAAO,GAAG,EAAd;AACA;;AACA,MAAIC,SAAJ;;AAEA,QAAMC,UAAU;AAAA,kCAAG,aAAY;AAC7B,UAAI;AACF,cAAMC,KAAK,SAASV,KAAK,CAACW,IAAN,CAAW,GAAX,CAApB;AACA,cAAMC,WAAW,GAAGF,KAAK,CAACG,GAAN,CAAUC,QAAV,EAApB;;AAEA,YAAIP,OAAO,KAAKK,WAAhB,EAA6B;AAC3BnB,UAAAA,GAAG,CAAE,+BAA8Bc,OAAQ,OAAMG,KAAK,CAACG,GAAI,EAAxD,CAAH;AACA,gBAAMd,OAAO,CAACW,KAAK,CAACG,GAAP,CAAb;AACAN,UAAAA,OAAO,GAAGK,WAAV;AACD;AACF,OATD,CASE,OAAOG,GAAP,EAAY;AACZtB,QAAAA,GAAG,CAACG,KAAJ,CAAU,4BAAV,EAAwCmB,GAAxC;AACD,OAXD,SAWU;AACRP,QAAAA,SAAS,GAAGQ,UAAU,CAACP,UAAD,EAAaR,OAAO,CAACC,QAArB,CAAtB;AACD;AACF,KAfe;;AAAA,oBAAVO,UAAU;AAAA;AAAA;AAAA,KAAhB;;AAiBA,SAAO;AACL;AACJ;AACA;AACUJ,IAAAA,KAAN,GAAe;AAAA;AACb,cAAMK,KAAK,SAASV,KAAK,CAACW,IAAN,CAAW,GAAX,CAApB;AACAJ,QAAAA,OAAO,GAAGG,KAAK,CAACG,GAAN,CAAUC,QAAV,EAAV;AACArB,QAAAA,GAAG,CAAE,uBAAsBiB,KAAK,CAACG,GAAI,EAAlC,CAAH;AACAL,QAAAA,SAAS,GAAGQ,UAAU,CAACP,UAAD,EAAaR,OAAO,CAACC,QAArB,CAAtB;AAJa;AAKd,KATI;;AAUL;AACJ;AACA;AACII,IAAAA,IAAI,GAAI;AACNW,MAAAA,YAAY,CAACT,SAAD,CAAZ;AACD;;AAfI,GAAP;AAiBD,CA/CD","sourcesContent":["'use strict'\n\nconst debug = require('debug')\nconst log = Object.assign(debug('ipfs:mfs-preload'), {\n  error: debug('ipfs:mfs-preload:error')\n})\n\n/**\n * @typedef {PreloadOptions & MFSPreloadOptions} Options\n * @typedef {Object} MFSPreloadOptions\n * @property {number} [interval]\n * @typedef {import('./types').PreloadOptions} PreloadOptions\n */\n\n/**\n * @param {Object} config\n * @param {import('./types').Preload} config.preload\n * @param {import('ipfs-core-types/src/files').API} config.files\n * @param {Options} [config.options]\n */\nmodule.exports = ({ preload, files, options = {} }) => {\n  options.interval = options.interval || 30 * 1000\n\n  if (!options.enabled) {\n    log('MFS preload disabled')\n    const noop = async () => {}\n    return { start: noop, stop: noop }\n  }\n\n  let rootCid = ''\n  /** @type {any} */\n  let timeoutId\n\n  const preloadMfs = async () => {\n    try {\n      const stats = await files.stat('/')\n      const nextRootCid = stats.cid.toString()\n\n      if (rootCid !== nextRootCid) {\n        log(`preloading updated MFS root ${rootCid} -> ${stats.cid}`)\n        await preload(stats.cid)\n        rootCid = nextRootCid\n      }\n    } catch (err) {\n      log.error('failed to preload MFS root', err)\n    } finally {\n      timeoutId = setTimeout(preloadMfs, options.interval)\n    }\n  }\n\n  return {\n    /**\n     * @returns {Promise<void>}\n     */\n    async start () {\n      const stats = await files.stat('/')\n      rootCid = stats.cid.toString()\n      log(`monitoring MFS root ${stats.cid}`)\n      timeoutId = setTimeout(preloadMfs, options.interval)\n    },\n    /**\n     * @returns {void}\n     */\n    stop () {\n      clearTimeout(timeoutId)\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}