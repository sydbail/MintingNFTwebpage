{"ast":null,"code":"'use strict';\n\nvar _wrapAsyncGenerator = require(\"/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\").default;\n\nvar _awaitAsyncGenerator = require(\"/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nvar _asyncGeneratorDelegate = require(\"/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/@babel/runtime/helpers/asyncGeneratorDelegate\").default;\n\nconst HTTP = require('../http');\n/**\n *\n * @param {string} url\n * @param {import(\"../types\").HTTPOptions} [options]\n * @returns {{ path: string; content?: AsyncIterable<Uint8Array> }}\n */\n\n\nconst urlSource = (url, options) => {\n  return {\n    path: decodeURIComponent(new URL(url).pathname.split('/').pop() || ''),\n    content: readURLContent(url, options)\n  };\n};\n/**\n *\n * @param {string} url\n * @param {import(\"../types\").HTTPOptions} [options]\n * @returns {AsyncIterable<Uint8Array>}\n */\n\n\nfunction readURLContent(_x, _x2) {\n  return _readURLContent.apply(this, arguments);\n}\n\nfunction _readURLContent() {\n  _readURLContent = _wrapAsyncGenerator(function* (url, options) {\n    const http = new HTTP();\n    const response = yield _awaitAsyncGenerator(http.get(url, options));\n    yield* _asyncGeneratorDelegate(_asyncIterator(response.iterator()), _awaitAsyncGenerator);\n  });\n  return _readURLContent.apply(this, arguments);\n}\n\nmodule.exports = urlSource;","map":{"version":3,"sources":["/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/ipfs-utils/src/files/url-source.js"],"names":["HTTP","require","urlSource","url","options","path","decodeURIComponent","URL","pathname","split","pop","content","readURLContent","http","response","get","iterator","module","exports"],"mappings":"AAAA;;;;;;;;;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,SAAD,CAApB;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,SAAS,GAAG,CAACC,GAAD,EAAMC,OAAN,KAAkB;AAClC,SAAO;AACLC,IAAAA,IAAI,EAAEC,kBAAkB,CAAC,IAAIC,GAAJ,CAAQJ,GAAR,EAAaK,QAAb,CAAsBC,KAAtB,CAA4B,GAA5B,EAAiCC,GAAjC,MAA0C,EAA3C,CADnB;AAELC,IAAAA,OAAO,EAAEC,cAAc,CAACT,GAAD,EAAMC,OAAN;AAFlB,GAAP;AAID,CALD;AAOA;AACA;AACA;AACA;AACA;AACA;;;SACiBQ,c;;;;;wCAAjB,WAAiCT,GAAjC,EAAsCC,OAAtC,EAA+C;AAC7C,UAAMS,IAAI,GAAG,IAAIb,IAAJ,EAAb;AACA,UAAMc,QAAQ,8BAASD,IAAI,CAACE,GAAL,CAASZ,GAAT,EAAcC,OAAd,CAAT,CAAd;AAEA,kDAAQU,QAAQ,CAACE,QAAT,EAAR;AACD,G;;;;AAEDC,MAAM,CAACC,OAAP,GAAiBhB,SAAjB","sourcesContent":["'use strict'\n\nconst HTTP = require('../http')\n\n/**\n *\n * @param {string} url\n * @param {import(\"../types\").HTTPOptions} [options]\n * @returns {{ path: string; content?: AsyncIterable<Uint8Array> }}\n */\nconst urlSource = (url, options) => {\n  return {\n    path: decodeURIComponent(new URL(url).pathname.split('/').pop() || ''),\n    content: readURLContent(url, options)\n  }\n}\n\n/**\n *\n * @param {string} url\n * @param {import(\"../types\").HTTPOptions} [options]\n * @returns {AsyncIterable<Uint8Array>}\n */\nasync function * readURLContent (url, options) {\n  const http = new HTTP()\n  const response = await http.get(url, options)\n\n  yield * response.iterator()\n}\n\nmodule.exports = urlSource\n"]},"metadata":{},"sourceType":"script"}