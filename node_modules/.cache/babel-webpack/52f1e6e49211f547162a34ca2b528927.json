{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nvar _awaitAsyncGenerator = require(\"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\").default;\n\nvar _wrapAsyncGenerator = require(\"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nconst abortable = require('abortable-iterator');\n\nconst {\n  CLOSE_TIMEOUT\n} = require('./constants');\n\nconst toMultiaddr = require('libp2p-utils/src/ip-port-to-multiaddr');\n\nconst pTimeout = require('p-timeout');\n\nconst debug = require('debug');\n\nconst log = debug('libp2p:websockets:socket');\nlog.error = debug('libp2p:websockets:socket:error'); // Convert a stream into a MultiaddrConnection\n// https://github.com/libp2p/interface-transport#multiaddrconnection\n\nmodule.exports = (stream, options = {}) => {\n  const maConn = {\n    sink(source) {\n      return _asyncToGenerator(function* () {\n        if (options.signal) {\n          source = abortable(source, options.signal);\n        }\n\n        try {\n          yield stream.sink(_wrapAsyncGenerator(function* () {\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n\n            var _iteratorError;\n\n            try {\n              for (var _iterator = _asyncIterator(source), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n                const chunk = _value;\n                // Convert BufferList to Buffer\n                yield chunk instanceof Uint8Array ? chunk : chunk.slice();\n              }\n            } catch (err) {\n              _didIteratorError = true;\n              _iteratorError = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                  yield _awaitAsyncGenerator(_iterator.return());\n                }\n              } finally {\n                if (_didIteratorError) {\n                  throw _iteratorError;\n                }\n              }\n            }\n          })());\n        } catch (err) {\n          if (err.type !== 'aborted') {\n            log.error(err);\n          }\n        }\n      })();\n    },\n\n    source: options.signal ? abortable(stream.source, options.signal) : stream.source,\n    conn: stream,\n    localAddr: options.localAddr || (stream.localAddress && stream.localPort ? toMultiaddr(stream.localAddress, stream.localPort) : undefined),\n    // If the remote address was passed, use it - it may have the peer ID encapsulated\n    remoteAddr: options.remoteAddr || toMultiaddr(stream.remoteAddress, stream.remotePort),\n    timeline: {\n      open: Date.now()\n    },\n\n    close() {\n      return _asyncToGenerator(function* () {\n        const start = Date.now();\n\n        try {\n          yield pTimeout(stream.close(), CLOSE_TIMEOUT);\n        } catch (err) {\n          const {\n            host,\n            port\n          } = maConn.remoteAddr.toOptions();\n          log('timeout closing stream to %s:%s after %dms, destroying it manually', host, port, Date.now() - start);\n          stream.destroy();\n        } finally {\n          maConn.timeline.close = Date.now();\n        }\n      })();\n    }\n\n  };\n  stream.socket.once && stream.socket.once('close', () => {\n    // In instances where `close` was not explicitly called,\n    // such as an iterable stream ending, ensure we have set the close\n    // timeline\n    if (!maConn.timeline.close) {\n      maConn.timeline.close = Date.now();\n    }\n  });\n  return maConn;\n};","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Demo/node_modules/libp2p-websockets/src/socket-to-conn.js"],"names":["abortable","require","CLOSE_TIMEOUT","toMultiaddr","pTimeout","debug","log","error","module","exports","stream","options","maConn","sink","source","signal","chunk","Uint8Array","slice","err","type","conn","localAddr","localAddress","localPort","undefined","remoteAddr","remoteAddress","remotePort","timeline","open","Date","now","close","start","host","port","toOptions","destroy","socket","once"],"mappings":"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","sourcesContent":["'use strict'\n\nconst abortable = require('abortable-iterator')\nconst { CLOSE_TIMEOUT } = require('./constants')\nconst toMultiaddr = require('libp2p-utils/src/ip-port-to-multiaddr')\n\nconst pTimeout = require('p-timeout')\n\nconst debug = require('debug')\nconst log = debug('libp2p:websockets:socket')\nlog.error = debug('libp2p:websockets:socket:error')\n\n// Convert a stream into a MultiaddrConnection\n// https://github.com/libp2p/interface-transport#multiaddrconnection\nmodule.exports = (stream, options = {}) => {\n  const maConn = {\n    async sink (source) {\n      if (options.signal) {\n        source = abortable(source, options.signal)\n      }\n\n      try {\n        await stream.sink((async function * () {\n          for await (const chunk of source) {\n            // Convert BufferList to Buffer\n            yield chunk instanceof Uint8Array ? chunk : chunk.slice()\n          }\n        })())\n      } catch (err) {\n        if (err.type !== 'aborted') {\n          log.error(err)\n        }\n      }\n    },\n\n    source: options.signal ? abortable(stream.source, options.signal) : stream.source,\n\n    conn: stream,\n\n    localAddr: options.localAddr || (stream.localAddress && stream.localPort\n      ? toMultiaddr(stream.localAddress, stream.localPort)\n      : undefined),\n\n    // If the remote address was passed, use it - it may have the peer ID encapsulated\n    remoteAddr: options.remoteAddr || toMultiaddr(stream.remoteAddress, stream.remotePort),\n\n    timeline: { open: Date.now() },\n\n    async close () {\n      const start = Date.now()\n\n      try {\n        await pTimeout(stream.close(), CLOSE_TIMEOUT)\n      } catch (err) {\n        const { host, port } = maConn.remoteAddr.toOptions()\n        log('timeout closing stream to %s:%s after %dms, destroying it manually',\n          host, port, Date.now() - start)\n\n        stream.destroy()\n      } finally {\n        maConn.timeline.close = Date.now()\n      }\n    }\n  }\n\n  stream.socket.once && stream.socket.once('close', () => {\n    // In instances where `close` was not explicitly called,\n    // such as an iterable stream ending, ensure we have set the close\n    // timeline\n    if (!maConn.timeline.close) {\n      maConn.timeline.close = Date.now()\n    }\n  })\n\n  return maConn\n}\n"]},"metadata":{},"sourceType":"script"}