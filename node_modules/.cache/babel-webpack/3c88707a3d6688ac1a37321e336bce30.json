{"ast":null,"code":"import _awaitAsyncGenerator from \"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator\";\nimport _wrapAsyncGenerator from \"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator\";\nimport _asyncIterator from \"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/esm/asyncIterator\";\nimport errCode from 'err-code';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\n\nfunction validateChunks(_x) {\n  return _validateChunks.apply(this, arguments);\n}\n\nfunction _validateChunks() {\n  _validateChunks = _wrapAsyncGenerator(function* (source) {\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n\n    var _iteratorError;\n\n    try {\n      for (var _iterator = _asyncIterator(source), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n        const content = _value;\n\n        if (content.length === undefined) {\n          throw errCode(new Error('Content was invalid'), 'ERR_INVALID_CONTENT');\n        }\n\n        if (typeof content === 'string' || content instanceof String) {\n          yield uint8ArrayFromString(content.toString());\n        } else if (Array.isArray(content)) {\n          yield Uint8Array.from(content);\n        } else if (content instanceof Uint8Array) {\n          yield content;\n        } else {\n          throw errCode(new Error('Content was invalid'), 'ERR_INVALID_CONTENT');\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          yield _awaitAsyncGenerator(_iterator.return());\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  });\n  return _validateChunks.apply(this, arguments);\n}\n\nexport default validateChunks;","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Demo/node_modules/ipfs-unixfs-importer/esm/src/dag-builder/validate-chunks.js"],"names":["errCode","fromString","uint8ArrayFromString","validateChunks","source","content","length","undefined","Error","String","toString","Array","isArray","Uint8Array","from"],"mappings":";;;AAAA,OAAOA,OAAP,MAAoB,UAApB;AACA,SAASC,UAAU,IAAIC,oBAAvB,QAAmD,yBAAnD;;SACgBC,c;;;;;wCAAhB,WAA+BC,MAA/B,EAAuC;AAAA;AAAA;;AAAA;;AAAA;AACrC,0CAA4BA,MAA5B,gOAAoC;AAAA,cAAnBC,OAAmB;;AAClC,YAAIA,OAAO,CAACC,MAAR,KAAmBC,SAAvB,EAAkC;AAChC,gBAAMP,OAAO,CAAC,IAAIQ,KAAJ,CAAU,qBAAV,CAAD,EAAmC,qBAAnC,CAAb;AACD;;AACD,YAAI,OAAOH,OAAP,KAAmB,QAAnB,IAA+BA,OAAO,YAAYI,MAAtD,EAA8D;AAC5D,gBAAMP,oBAAoB,CAACG,OAAO,CAACK,QAAR,EAAD,CAA1B;AACD,SAFD,MAEO,IAAIC,KAAK,CAACC,OAAN,CAAcP,OAAd,CAAJ,EAA4B;AACjC,gBAAMQ,UAAU,CAACC,IAAX,CAAgBT,OAAhB,CAAN;AACD,SAFM,MAEA,IAAIA,OAAO,YAAYQ,UAAvB,EAAmC;AACxC,gBAAMR,OAAN;AACD,SAFM,MAEA;AACL,gBAAML,OAAO,CAAC,IAAIQ,KAAJ,CAAU,qBAAV,CAAD,EAAmC,qBAAnC,CAAb;AACD;AACF;AAdoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAetC,G;;;;AACD,eAAeL,cAAf","sourcesContent":["import errCode from 'err-code';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nasync function* validateChunks(source) {\n  for await (const content of source) {\n    if (content.length === undefined) {\n      throw errCode(new Error('Content was invalid'), 'ERR_INVALID_CONTENT');\n    }\n    if (typeof content === 'string' || content instanceof String) {\n      yield uint8ArrayFromString(content.toString());\n    } else if (Array.isArray(content)) {\n      yield Uint8Array.from(content);\n    } else if (content instanceof Uint8Array) {\n      yield content;\n    } else {\n      throw errCode(new Error('Content was invalid'), 'ERR_INVALID_CONTENT');\n    }\n  }\n}\nexport default validateChunks;"]},"metadata":{},"sourceType":"module"}