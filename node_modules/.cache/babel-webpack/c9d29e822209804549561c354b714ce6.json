{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/block').API<HTTPClientExtraOptions>} BlockAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {BlockAPI[\"stat\"]}\n   */\n  function stat(_x) {\n    return _stat.apply(this, arguments);\n  }\n\n  function _stat() {\n    _stat = _asyncToGenerator(function* (cid, options = {}) {\n      const res = yield api.post('block/stat', {\n        timeout: options.timeout,\n        signal: options.signal,\n        searchParams: toUrlSearchParams({\n          arg: cid.toString(),\n          ...options\n        }),\n        headers: options.headers\n      });\n      const data = yield res.json();\n      return {\n        cid: CID.parse(data.Key),\n        size: data.Size\n      };\n    });\n    return _stat.apply(this, arguments);\n  }\n\n  return stat;\n});","map":{"version":3,"sources":["/Users/sydneybailey/Internship/contract-testing/node_modules/ipfs-http-client/src/block/stat.js"],"names":["CID","require","configure","toUrlSearchParams","module","exports","api","stat","cid","options","res","post","timeout","signal","searchParams","arg","toString","headers","data","json","parse","Key","size","Size"],"mappings":"AAAA;;;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAUC,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,6BAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AAEAG,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAACI,GAAG,IAAI;AAChC;AACF;AACA;AAHkC,WAIjBC,IAJiB;AAAA;AAAA;;AAAA;AAAA,8BAIhC,WAAqBC,GAArB,EAA0BC,OAAO,GAAG,EAApC,EAAwC;AACtC,YAAMC,GAAG,SAASJ,GAAG,CAACK,IAAJ,CAAS,YAAT,EAAuB;AACvCC,QAAAA,OAAO,EAAEH,OAAO,CAACG,OADsB;AAEvCC,QAAAA,MAAM,EAAEJ,OAAO,CAACI,MAFuB;AAGvCC,QAAAA,YAAY,EAAEX,iBAAiB,CAAC;AAC9BY,UAAAA,GAAG,EAAEP,GAAG,CAACQ,QAAJ,EADyB;AAE9B,aAAGP;AAF2B,SAAD,CAHQ;AAOvCQ,QAAAA,OAAO,EAAER,OAAO,CAACQ;AAPsB,OAAvB,CAAlB;AASA,YAAMC,IAAI,SAASR,GAAG,CAACS,IAAJ,EAAnB;AAEA,aAAO;AAAEX,QAAAA,GAAG,EAAER,GAAG,CAACoB,KAAJ,CAAUF,IAAI,CAACG,GAAf,CAAP;AAA4BC,QAAAA,IAAI,EAAEJ,IAAI,CAACK;AAAvC,OAAP;AACD,KAjB+B;AAAA;AAAA;;AAmBhC,SAAOhB,IAAP;AACD,CApByB,CAA1B","sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/block').API<HTTPClientExtraOptions>} BlockAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {BlockAPI[\"stat\"]}\n   */\n  async function stat (cid, options = {}) {\n    const res = await api.post('block/stat', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cid.toString(),\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return { cid: CID.parse(data.Key), size: data.Size }\n  }\n\n  return stat\n})\n"]},"metadata":{},"sourceType":"script"}