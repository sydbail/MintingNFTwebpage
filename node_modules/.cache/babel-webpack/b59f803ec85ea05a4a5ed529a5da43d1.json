{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst {\n  findLevelJs\n} = require('../../src/utils');\n\nconst {\n  fromString\n} = require('uint8arrays/from-string');\n\nconst {\n  toString\n} = require('uint8arrays/to-string');\n/**\n * @typedef {import('../../src/types').Migration} Migration\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('../../src/types').MigrationProgressCallback} MigrationProgressCallback\n *\n * @typedef {{ type: 'del', key: string | Uint8Array } | { type: 'put', key: string | Uint8Array, value: Uint8Array }} Operation\n * @typedef {function (string, Uint8Array): Operation[]} UpgradeFunction\n * @typedef {function (Uint8Array, Uint8Array): Operation[]} DowngradeFunction\n */\n\n/**\n * @param {string} name\n * @param {Datastore} store\n * @param {(message: string) => void} onProgress\n */\n\n\nfunction keysToBinary(_x, _x2) {\n  return _keysToBinary.apply(this, arguments);\n}\n/**\n * @param {string} name\n * @param {Datastore} store\n * @param {(message: string) => void} onProgress\n */\n\n\nfunction _keysToBinary() {\n  _keysToBinary = _asyncToGenerator(function* (name, store, onProgress = () => {}) {\n    const db = findLevelJs(store); // only interested in level-js\n\n    if (!db) {\n      onProgress(`${name} did not need an upgrade`);\n      return;\n    }\n\n    onProgress(`Upgrading ${name}`);\n    /**\n     * @type {UpgradeFunction}\n     */\n\n    const upgrade = (key, value) => {\n      return [{\n        type: 'del',\n        key: key\n      }, {\n        type: 'put',\n        key: fromString(key),\n        value: value\n      }];\n    };\n\n    yield withEach(db, upgrade);\n  });\n  return _keysToBinary.apply(this, arguments);\n}\n\nfunction keysToStrings(_x3, _x4) {\n  return _keysToStrings.apply(this, arguments);\n}\n/**\n * @param {any} store\n * @returns {Datastore}\n */\n\n\nfunction _keysToStrings() {\n  _keysToStrings = _asyncToGenerator(function* (name, store, onProgress = () => {}) {\n    const db = findLevelJs(store); // only interested in level-js\n\n    if (!db) {\n      onProgress(`${name} did not need a downgrade`);\n      return;\n    }\n\n    onProgress(`Downgrading ${name}`);\n    /**\n     * @type {DowngradeFunction}\n     */\n\n    const downgrade = (key, value) => {\n      return [{\n        type: 'del',\n        key: key\n      }, {\n        type: 'put',\n        key: toString(key),\n        value: value\n      }];\n    };\n\n    yield withEach(db, downgrade);\n  });\n  return _keysToStrings.apply(this, arguments);\n}\n\nfunction unwrap(store) {\n  if (store.child) {\n    return unwrap(store.child);\n  }\n\n  return store;\n}\n/**\n * @param {import('../../src/types').Backends} backends\n * @param {MigrationProgressCallback} onProgress\n * @param {*} fn\n */\n\n\nfunction process(_x5, _x6, _x7) {\n  return _process.apply(this, arguments);\n}\n/** @type {Migration} */\n\n\nfunction _process() {\n  _process = _asyncToGenerator(function* (backends, onProgress, fn) {\n    /**\n     * @type {{ name: string, store: Datastore }[]}\n     */\n    const datastores = Object.entries(backends).map(([key, backend]) => ({\n      key,\n      backend: unwrap(backend)\n    })).filter(({\n      key,\n      backend\n    }) => backend.constructor.name === 'LevelDatastore').map(({\n      key,\n      backend\n    }) => ({\n      name: key,\n      store: backend\n    }));\n    onProgress(0, `Migrating ${datastores.length} dbs`);\n    let migrated = 0;\n    /**\n     * @param {string} message\n     */\n\n    const progress = message => {\n      onProgress(Math.round(migrated / datastores.length * 100), message);\n    };\n\n    for (const {\n      name,\n      store\n    } of datastores) {\n      yield store.open();\n\n      try {\n        yield fn(name, store, progress);\n      } finally {\n        migrated++;\n        yield store.close();\n      }\n    }\n\n    onProgress(100, `Migrated ${datastores.length} dbs`);\n  });\n  return _process.apply(this, arguments);\n}\n\nmodule.exports = {\n  version: 10,\n  description: 'Migrates datastore-level keys to binary',\n  migrate: (backends, onProgress = () => {}) => {\n    return process(backends, onProgress, keysToBinary);\n  },\n  revert: (backends, onProgress = () => {}) => {\n    return process(backends, onProgress, keysToStrings);\n  }\n};\n/**\n * Uses the upgrade strategy from level-js@5.x.x - note we can't call the `.upgrade` command\n * directly because it will be removed in level-js@6.x.x and we can't guarantee users will\n * have migrated by then - e.g. they may jump from level-js@4.x.x straight to level-js@6.x.x\n * so we have to duplicate the code here.\n *\n * @param {any} db\n * @param {UpgradeFunction | DowngradeFunction} fn\n * @returns {Promise<void>}\n */\n\nfunction withEach(db, fn) {\n  /**\n   * @param {Operation[]} operations\n   * @param {(error?: Error) => void} next\n   */\n  function batch(operations, next) {\n    const store = db.store('readwrite');\n    const transaction = store.transaction;\n    let index = 0;\n    /** @type {Error | undefined} */\n\n    let error;\n\n    transaction.onabort = () => next(error || transaction.error || new Error('aborted by user'));\n\n    transaction.oncomplete = () => next();\n\n    function loop() {\n      const op = operations[index++];\n      const key = op.key;\n      let req;\n\n      try {\n        req = op.type === 'del' ? store.delete(key) : store.put(op.value, key);\n      } catch (err) {\n        error = err;\n        transaction.abort();\n        return;\n      }\n\n      if (index < operations.length) {\n        req.onsuccess = loop;\n      }\n    }\n\n    loop();\n  }\n\n  return new Promise((resolve, reject) => {\n    const it = db.iterator(); // raw keys and values only\n\n    /**\n     * @template T\n     * @param {T} data\n     */\n\n    const id = data => data;\n\n    it._deserializeKey = it._deserializeValue = id;\n    next();\n\n    function next() {\n      /**\n       * @param {Error | undefined} err\n       * @param {string | undefined} key\n       * @param {Uint8Array} value\n       */\n      const handleNext = (err, key, value) => {\n        if (err || key === undefined) {\n          /**\n           * @param {Error | undefined} err2\n           */\n          const handleEnd = err2 => {\n            if (err2) {\n              reject(err2);\n              return;\n            }\n\n            resolve();\n          };\n\n          it.end(handleEnd);\n          return;\n        } // @ts-ignore\n\n\n        batch(fn(key, value), next);\n      };\n\n      it.next(handleNext);\n    }\n  });\n}","map":{"version":3,"sources":["/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/ipfs-repo-migrations/migrations/migration-10/index.js"],"names":["findLevelJs","require","fromString","toString","keysToBinary","name","store","onProgress","db","upgrade","key","value","type","withEach","keysToStrings","downgrade","unwrap","child","process","backends","fn","datastores","Object","entries","map","backend","filter","constructor","length","migrated","progress","message","Math","round","open","close","module","exports","version","description","migrate","revert","batch","operations","next","transaction","index","error","onabort","Error","oncomplete","loop","op","req","delete","put","err","abort","onsuccess","Promise","resolve","reject","it","iterator","id","data","_deserializeKey","_deserializeValue","handleNext","undefined","handleEnd","err2","end"],"mappings":"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","sourcesContent":["'use strict'\n\nconst {\n  findLevelJs\n} = require('../../src/utils')\nconst { fromString } = require('uint8arrays/from-string')\nconst { toString } = require('uint8arrays/to-string')\n\n/**\n * @typedef {import('../../src/types').Migration} Migration\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('../../src/types').MigrationProgressCallback} MigrationProgressCallback\n *\n * @typedef {{ type: 'del', key: string | Uint8Array } | { type: 'put', key: string | Uint8Array, value: Uint8Array }} Operation\n * @typedef {function (string, Uint8Array): Operation[]} UpgradeFunction\n * @typedef {function (Uint8Array, Uint8Array): Operation[]} DowngradeFunction\n */\n\n/**\n * @param {string} name\n * @param {Datastore} store\n * @param {(message: string) => void} onProgress\n */\nasync function keysToBinary (name, store, onProgress = () => {}) {\n  const db = findLevelJs(store)\n\n  // only interested in level-js\n  if (!db) {\n    onProgress(`${name} did not need an upgrade`)\n\n    return\n  }\n\n  onProgress(`Upgrading ${name}`)\n\n  /**\n   * @type {UpgradeFunction}\n   */\n  const upgrade = (key, value) => {\n    return [\n      { type: 'del', key: key },\n      { type: 'put', key: fromString(key), value: value }\n    ]\n  }\n\n  await withEach(db, upgrade)\n}\n\n/**\n * @param {string} name\n * @param {Datastore} store\n * @param {(message: string) => void} onProgress\n */\nasync function keysToStrings (name, store, onProgress = () => {}) {\n  const db = findLevelJs(store)\n\n  // only interested in level-js\n  if (!db) {\n    onProgress(`${name} did not need a downgrade`)\n\n    return\n  }\n\n  onProgress(`Downgrading ${name}`)\n\n  /**\n   * @type {DowngradeFunction}\n   */\n  const downgrade = (key, value) => {\n    return [\n      { type: 'del', key: key },\n      { type: 'put', key: toString(key), value: value }\n    ]\n  }\n\n  await withEach(db, downgrade)\n}\n\n/**\n * @param {any} store\n * @returns {Datastore}\n */\nfunction unwrap (store) {\n  if (store.child) {\n    return unwrap(store.child)\n  }\n\n  return store\n}\n\n/**\n * @param {import('../../src/types').Backends} backends\n * @param {MigrationProgressCallback} onProgress\n * @param {*} fn\n */\nasync function process (backends, onProgress, fn) {\n  /**\n   * @type {{ name: string, store: Datastore }[]}\n   */\n  const datastores = Object.entries(backends)\n    .map(([key, backend]) => ({ key, backend: unwrap(backend) }))\n    .filter(({ key, backend }) => backend.constructor.name === 'LevelDatastore')\n    .map(({ key, backend }) => ({\n      name: key,\n      store: backend\n    }))\n\n  onProgress(0, `Migrating ${datastores.length} dbs`)\n  let migrated = 0\n\n  /**\n   * @param {string} message\n   */\n  const progress = (message) => {\n    onProgress(Math.round((migrated / datastores.length) * 100), message)\n  }\n\n  for (const { name, store } of datastores) {\n    await store.open()\n\n    try {\n      await fn(name, store, progress)\n    } finally {\n      migrated++\n      await store.close()\n    }\n  }\n\n  onProgress(100, `Migrated ${datastores.length} dbs`)\n}\n\n/** @type {Migration} */\nmodule.exports = {\n  version: 10,\n  description: 'Migrates datastore-level keys to binary',\n  migrate: (backends, onProgress = () => {}) => {\n    return process(backends, onProgress, keysToBinary)\n  },\n  revert: (backends, onProgress = () => {}) => {\n    return process(backends, onProgress, keysToStrings)\n  }\n}\n\n/**\n * Uses the upgrade strategy from level-js@5.x.x - note we can't call the `.upgrade` command\n * directly because it will be removed in level-js@6.x.x and we can't guarantee users will\n * have migrated by then - e.g. they may jump from level-js@4.x.x straight to level-js@6.x.x\n * so we have to duplicate the code here.\n *\n * @param {any} db\n * @param {UpgradeFunction | DowngradeFunction} fn\n * @returns {Promise<void>}\n */\nfunction withEach (db, fn) {\n  /**\n   * @param {Operation[]} operations\n   * @param {(error?: Error) => void} next\n   */\n  function batch (operations, next) {\n    const store = db.store('readwrite')\n    const transaction = store.transaction\n    let index = 0\n    /** @type {Error | undefined} */\n    let error\n\n    transaction.onabort = () => next(error || transaction.error || new Error('aborted by user'))\n    transaction.oncomplete = () => next()\n\n    function loop () {\n      const op = operations[index++]\n      const key = op.key\n      let req\n\n      try {\n        req = op.type === 'del' ? store.delete(key) : store.put(op.value, key)\n      } catch (err) {\n        error = err\n        transaction.abort()\n        return\n      }\n\n      if (index < operations.length) {\n        req.onsuccess = loop\n      }\n    }\n\n    loop()\n  }\n\n  return new Promise((resolve, reject) => {\n    const it = db.iterator()\n    // raw keys and values only\n    /**\n     * @template T\n     * @param {T} data\n     */\n    const id = (data) => data\n    it._deserializeKey = it._deserializeValue = id\n    next()\n\n    function next () {\n      /**\n       * @param {Error | undefined} err\n       * @param {string | undefined} key\n       * @param {Uint8Array} value\n       */\n      const handleNext = (err, key, value) => {\n        if (err || key === undefined) {\n          /**\n           * @param {Error | undefined} err2\n           */\n          const handleEnd = (err2) => {\n            if (err2) {\n              reject(err2)\n              return\n            }\n\n            resolve()\n          }\n\n          it.end(handleEnd)\n\n          return\n        }\n\n        // @ts-ignore\n        batch(fn(key, value), next)\n      }\n      it.next(handleNext)\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"script"}