{"ast":null,"code":"'use strict';\n/**\n * @typedef {import('multiformats/bases/interface').MultibaseCodec<any>} MultibaseCodec\n * @typedef {import('./types').LoadBaseFn} LoadBaseFn\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n/**\n * @type {LoadBaseFn}\n */\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst LOAD_BASE = name => Promise.reject(new Error(`No base found for \"${name}\"`));\n\nclass Multibases {\n  /**\n   * @param {object} options\n   * @param {LoadBaseFn} [options.loadBase]\n   * @param {MultibaseCodec[]} options.bases\n   */\n  constructor(options) {\n    // Object with current list of active resolvers\n\n    /** @type {Record<string, MultibaseCodec>}} */\n    this._basesByName = {}; // Object with current list of active resolvers\n\n    /** @type {Record<string, MultibaseCodec>}} */\n\n    this._basesByPrefix = {};\n    this._loadBase = options.loadBase || LOAD_BASE; // Enable all supplied codecs\n\n    for (const base of options.bases) {\n      this.addBase(base);\n    }\n  }\n  /**\n   * Add support for a multibase codec\n   *\n   * @param {MultibaseCodec} base\n   */\n\n\n  addBase(base) {\n    if (this._basesByName[base.name] || this._basesByPrefix[base.prefix]) {\n      throw new Error(`Codec already exists for codec \"${base.name}\"`);\n    }\n\n    this._basesByName[base.name] = base;\n    this._basesByPrefix[base.prefix] = base;\n  }\n  /**\n   * Remove support for a multibase codec\n   *\n   * @param {MultibaseCodec} base\n   */\n\n\n  removeBase(base) {\n    delete this._basesByName[base.name];\n    delete this._basesByPrefix[base.prefix];\n  }\n  /**\n   * @param {string} nameOrPrefix\n   */\n\n\n  getBase(nameOrPrefix) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this._basesByName[nameOrPrefix]) {\n        return _this._basesByName[nameOrPrefix];\n      }\n\n      if (_this._basesByPrefix[nameOrPrefix]) {\n        return _this._basesByPrefix[nameOrPrefix];\n      } // If not supported, attempt to dynamically load this codec\n\n\n      const base = yield _this._loadBase(nameOrPrefix);\n\n      if (_this._basesByName[base.name] == null && _this._basesByPrefix[base.prefix] == null) {\n        _this.addBase(base);\n      }\n\n      return base;\n    })();\n  }\n\n  listBases() {\n    return Object.values(this._basesByName);\n  }\n\n}\n\nmodule.exports = Multibases;","map":null,"metadata":{},"sourceType":"script"}