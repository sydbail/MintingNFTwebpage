{"ast":null,"code":"'use strict';\n\nvar _awaitAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\").default;\n\nvar _wrapAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nconst errCode = require('err-code');\n\nconst {\n  CID\n} = require('multiformats/cid');\n/**\n * @typedef {Object} Pinnable\n * @property {string | InstanceType<typeof window.String> | CID} [path]\n * @property {CID} [cid]\n * @property {boolean} [recursive]\n * @property {any} [metadata]\n *\n * @typedef {CID|string|InstanceType<typeof window.String>|Pinnable} ToPin\n * @typedef {ToPin|Iterable<ToPin>|AsyncIterable<ToPin>} Source\n *\n * @typedef {Object} Pin\n * @property {string|CID} path\n * @property {boolean} recursive\n * @property {any} [metadata]\n */\n\n/**\n * Transform one of:\n *\n * ```ts\n * CID\n * String\n * { cid: CID recursive, metadata }\n * { path: String recursive, metadata }\n * Iterable<CID>\n * Iterable<String>\n * Iterable<{ cid: CID recursive, metadata }>\n * Iterable<{ path: String recursive, metadata }>\n * AsyncIterable<CID>\n * AsyncIterable<String>\n * AsyncIterable<{ cid: CID recursive, metadata }>\n * AsyncIterable<{ path: String recursive, metadata }>\n * ```\n * Into:\n *\n * ```ts\n * AsyncIterable<{ path: CID|String, recursive:boolean, metadata }>\n * ```\n *\n * @param {Source} input\n * @returns {AsyncIterable<Pin>}\n */\n// eslint-disable-next-line complexity\n\n\nfunction normaliseInput(_x) {\n  return _normaliseInput.apply(this, arguments);\n}\n/**\n * @param {Pinnable} input\n */\n\n\nfunction _normaliseInput() {\n  _normaliseInput = _wrapAsyncGenerator(function* (input) {\n    // must give us something\n    if (input === null || input === undefined) {\n      throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT');\n    } // CID\n\n\n    if (input instanceof CID) {\n      yield toPin({\n        cid: input\n      });\n      return;\n    }\n\n    if (input instanceof String || typeof input === 'string') {\n      yield toPin({\n        path: input\n      });\n      return;\n    } // { cid: CID recursive, metadata }\n    // @ts-ignore - it still could be iterable or async iterable\n\n\n    if (input.cid != null || input.path != null) {\n      // @ts-ignore\n      return yield toPin(input);\n    } // Iterable<?>\n\n\n    if (Symbol.iterator in input) {\n      // @ts-ignore\n      const iterator = input[Symbol.iterator]();\n      const first = iterator.next();\n      if (first.done) return iterator; // Iterable<CID|String>\n\n      if (first.value instanceof CID || first.value instanceof String || typeof first.value === 'string') {\n        yield toPin({\n          cid: first.value\n        });\n\n        for (const cid of iterator) {\n          yield toPin({\n            cid\n          });\n        }\n\n        return;\n      } // Iterable<{ cid: CID recursive, metadata }>\n\n\n      if (first.value.cid != null || first.value.path != null) {\n        yield toPin(first.value);\n\n        for (const obj of iterator) {\n          yield toPin(obj);\n        }\n\n        return;\n      }\n\n      throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n    } // AsyncIterable<?>\n\n\n    if (Symbol.asyncIterator in input) {\n      // @ts-ignore\n      const iterator = input[Symbol.asyncIterator]();\n      const first = yield _awaitAsyncGenerator(iterator.next());\n      if (first.done) return iterator; // AsyncIterable<CID|String>\n\n      if (first.value instanceof CID || first.value instanceof String || typeof first.value === 'string') {\n        yield toPin({\n          cid: first.value\n        });\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n\n        var _iteratorError;\n\n        try {\n          for (var _iterator = _asyncIterator(iterator), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n            const cid = _value;\n            yield toPin({\n              cid\n            });\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              yield _awaitAsyncGenerator(_iterator.return());\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        return;\n      } // AsyncIterable<{ cid: CID|String recursive, metadata }>\n\n\n      if (first.value.cid != null || first.value.path != null) {\n        yield toPin(first.value);\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n\n        var _iteratorError2;\n\n        try {\n          for (var _iterator2 = _asyncIterator(iterator), _step2, _value2; _step2 = yield _awaitAsyncGenerator(_iterator2.next()), _iteratorNormalCompletion2 = _step2.done, _value2 = yield _awaitAsyncGenerator(_step2.value), !_iteratorNormalCompletion2; _iteratorNormalCompletion2 = true) {\n            const obj = _value2;\n            yield toPin(obj);\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n              yield _awaitAsyncGenerator(_iterator2.return());\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n\n        return;\n      }\n\n      throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n    }\n\n    throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n  });\n  return _normaliseInput.apply(this, arguments);\n}\n\nfunction toPin(input) {\n  const path = input.cid || `${input.path}`;\n\n  if (!path) {\n    throw errCode(new Error('Unexpected input: Please path either a CID or an IPFS path'), 'ERR_UNEXPECTED_INPUT');\n  }\n  /** @type {Pin} */\n\n\n  const pin = {\n    path,\n    recursive: input.recursive !== false\n  };\n\n  if (input.metadata != null) {\n    pin.metadata = input.metadata;\n  }\n\n  return pin;\n}\n\nmodule.exports = {\n  normaliseInput\n};","map":null,"metadata":{},"sourceType":"script"}