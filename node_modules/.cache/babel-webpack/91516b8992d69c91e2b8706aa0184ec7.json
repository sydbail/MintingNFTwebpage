{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StreamArbitrary = void 0;\n\nconst NextArbitrary_1 = require(\"../../check/arbitrary/definition/NextArbitrary\");\n\nconst NextValue_1 = require(\"../../check/arbitrary/definition/NextValue\");\n\nconst symbols_1 = require(\"../../check/symbols\");\n\nconst Stream_1 = require(\"../../stream/Stream\");\n\nconst stringify_1 = require(\"../../utils/stringify\");\n\nfunction prettyPrint(seenValuesStrings) {\n  return `Stream(${seenValuesStrings.join(',')}…)`;\n}\n\nclass StreamArbitrary extends NextArbitrary_1.NextArbitrary {\n  constructor(arb) {\n    super();\n    this.arb = arb;\n  }\n\n  generate(mrng, biasFactor) {\n    const appliedBiasFactor = biasFactor !== undefined && mrng.nextInt(1, biasFactor) === 1 ? biasFactor : undefined;\n\n    const enrichedProducer = () => {\n      const seenValues = [];\n\n      const g = function* (arb, clonedMrng) {\n        while (true) {\n          const value = arb.generate(clonedMrng, appliedBiasFactor).value;\n          seenValues.push(value);\n          yield value;\n        }\n      };\n\n      const s = new Stream_1.Stream(g(this.arb, mrng.clone()));\n      return Object.defineProperties(s, {\n        toString: {\n          value: () => prettyPrint(seenValues.map(stringify_1.stringify))\n        },\n        [stringify_1.toStringMethod]: {\n          value: () => prettyPrint(seenValues.map(stringify_1.stringify))\n        },\n        [stringify_1.asyncToStringMethod]: {\n          value: function () {\n            var _ref = _asyncToGenerator(function* () {\n              return prettyPrint(yield Promise.all(seenValues.map(stringify_1.asyncStringify)));\n            });\n\n            return function value() {\n              return _ref.apply(this, arguments);\n            };\n          }()\n        },\n        [symbols_1.cloneMethod]: {\n          value: enrichedProducer,\n          enumerable: true\n        }\n      });\n    };\n\n    return new NextValue_1.NextValue(enrichedProducer(), undefined);\n  }\n\n  canShrinkWithoutContext(value) {\n    return false;\n  }\n\n  shrink(_value, _context) {\n    return Stream_1.Stream.nil();\n  }\n\n}\n\nexports.StreamArbitrary = StreamArbitrary;","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Demo/node_modules/fast-check/lib/arbitrary/_internals/StreamArbitrary.js"],"names":["Object","defineProperty","exports","value","StreamArbitrary","NextArbitrary_1","require","NextValue_1","symbols_1","Stream_1","stringify_1","prettyPrint","seenValuesStrings","join","NextArbitrary","constructor","arb","generate","mrng","biasFactor","appliedBiasFactor","undefined","nextInt","enrichedProducer","seenValues","g","clonedMrng","push","s","Stream","clone","defineProperties","toString","map","stringify","toStringMethod","asyncToStringMethod","Promise","all","asyncStringify","cloneMethod","enumerable","NextValue","canShrinkWithoutContext","shrink","_value","_context","nil"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StreamArbitrary = void 0;\nconst NextArbitrary_1 = require(\"../../check/arbitrary/definition/NextArbitrary\");\nconst NextValue_1 = require(\"../../check/arbitrary/definition/NextValue\");\nconst symbols_1 = require(\"../../check/symbols\");\nconst Stream_1 = require(\"../../stream/Stream\");\nconst stringify_1 = require(\"../../utils/stringify\");\nfunction prettyPrint(seenValuesStrings) {\n    return `Stream(${seenValuesStrings.join(',')}…)`;\n}\nclass StreamArbitrary extends NextArbitrary_1.NextArbitrary {\n    constructor(arb) {\n        super();\n        this.arb = arb;\n    }\n    generate(mrng, biasFactor) {\n        const appliedBiasFactor = biasFactor !== undefined && mrng.nextInt(1, biasFactor) === 1 ? biasFactor : undefined;\n        const enrichedProducer = () => {\n            const seenValues = [];\n            const g = function* (arb, clonedMrng) {\n                while (true) {\n                    const value = arb.generate(clonedMrng, appliedBiasFactor).value;\n                    seenValues.push(value);\n                    yield value;\n                }\n            };\n            const s = new Stream_1.Stream(g(this.arb, mrng.clone()));\n            return Object.defineProperties(s, {\n                toString: { value: () => prettyPrint(seenValues.map(stringify_1.stringify)) },\n                [stringify_1.toStringMethod]: { value: () => prettyPrint(seenValues.map(stringify_1.stringify)) },\n                [stringify_1.asyncToStringMethod]: { value: async () => prettyPrint(await Promise.all(seenValues.map(stringify_1.asyncStringify))) },\n                [symbols_1.cloneMethod]: { value: enrichedProducer, enumerable: true },\n            });\n        };\n        return new NextValue_1.NextValue(enrichedProducer(), undefined);\n    }\n    canShrinkWithoutContext(value) {\n        return false;\n    }\n    shrink(_value, _context) {\n        return Stream_1.Stream.nil();\n    }\n}\nexports.StreamArbitrary = StreamArbitrary;\n"]},"metadata":{},"sourceType":"script"}