{"ast":null,"code":"'use strict';\n\nvar _awaitAsyncGenerator = require(\"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\").default;\n\nvar _wrapAsyncGenerator = require(\"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst toCamel = require('./lib/object-to-camel');\n\nconst configure = require('./lib/configure');\n\nconst multipartRequest = require('./lib/multipart-request');\n\nconst toUrlSearchParams = require('./lib/to-url-search-params');\n\nconst abortSignal = require('./lib/abort-signal');\n\nconst {\n  AbortController\n} = require('native-abort-controller');\n/**\n * @typedef {import('ipfs-utils/src/types').ProgressFn} IPFSUtilsHttpUploadProgressFn\n * @typedef {import('ipfs-core-types/src/root').AddProgressFn} IPFSCoreAddProgressFn\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n * @typedef {import('ipfs-core-types/src/root').AddResult} AddResult\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {RootAPI[\"addAll\"]}\n   */\n  function addAll(_x) {\n    return _addAll.apply(this, arguments);\n  }\n\n  function _addAll() {\n    _addAll = _wrapAsyncGenerator(function* (source, options = {}) {\n      // allow aborting requests on body errors\n      const controller = new AbortController();\n      const signal = abortSignal(controller.signal, options.signal);\n      const {\n        headers,\n        body,\n        total,\n        parts\n      } = yield _awaitAsyncGenerator(multipartRequest(source, controller, options.headers)); // In browser response body only starts streaming once upload is\n      // complete, at which point all the progress updates are invalid. If\n      // length of the content is computable we can interpret progress from\n      // `{ total, loaded}` passed to `onUploadProgress` and `multipart.total`\n      // in which case we disable progress updates to be written out.\n\n      const [progressFn, onUploadProgress] = typeof options.progress === 'function' // @ts-ignore tsc picks up the node codepath\n      ? createProgressHandler(total, parts, options.progress) : [undefined, undefined];\n      const res = yield _awaitAsyncGenerator(api.post('add', {\n        searchParams: toUrlSearchParams({\n          'stream-channels': true,\n          ...options,\n          progress: Boolean(progressFn)\n        }),\n        timeout: options.timeout,\n        onUploadProgress,\n        signal,\n        headers,\n        body\n      }));\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n\n      var _iteratorError;\n\n      try {\n        for (var _iterator = _asyncIterator(res.ndjson()), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n          let file = _value;\n          file = toCamel(file);\n\n          if (file.hash !== undefined) {\n            yield toCoreInterface(file);\n          } else if (progressFn) {\n            progressFn(file.bytes || 0, file.name);\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            yield _awaitAsyncGenerator(_iterator.return());\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    });\n    return _addAll.apply(this, arguments);\n  }\n\n  return addAll;\n});\n/**\n * Returns simple progress callback when content length isn't computable or a\n * progress event handler that calculates progress from upload progress events.\n *\n * @param {number} total\n * @param {{name:string, start:number, end:number}[]|null} parts\n * @param {IPFSCoreAddProgressFn} progress\n * @returns {[IPFSCoreAddProgressFn|undefined, IPFSUtilsHttpUploadProgressFn|undefined]}\n */\n\nconst createProgressHandler = (total, parts, progress) => parts ? [undefined, createOnUploadProgress(total, parts, progress)] : [progress, undefined];\n/**\n * Creates a progress handler that interpolates progress from upload progress\n * events and total size of the content that is added.\n *\n * @param {number} size - actual content size\n * @param {{name:string, start:number, end:number}[]} parts\n * @param {IPFSCoreAddProgressFn} progress\n * @returns {IPFSUtilsHttpUploadProgressFn}\n */\n\n\nconst createOnUploadProgress = (size, parts, progress) => {\n  let index = 0;\n  const count = parts.length;\n  return ({\n    loaded,\n    total\n  }) => {\n    // Derive position from the current progress.\n    const position = Math.floor(loaded / total * size);\n\n    while (index < count) {\n      const {\n        start,\n        end,\n        name\n      } = parts[index]; // If within current part range report progress and break the loop\n\n      if (position < end) {\n        progress(position - start, name);\n        break; // If passed current part range report final byte for the chunk and\n        // move to next one.\n      } else {\n        progress(end - start, name);\n        index += 1;\n      }\n    }\n  };\n};\n/**\n * @param {object} input\n * @param {string} input.name\n * @param {string} input.hash\n * @param {string} input.size\n * @param {string} [input.mode]\n * @param {number} [input.mtime]\n * @param {number} [input.mtimeNsecs]\n */\n\n\nfunction toCoreInterface({\n  name,\n  hash,\n  size,\n  mode,\n  mtime,\n  mtimeNsecs\n}) {\n  /** @type {AddResult} */\n  const output = {\n    path: name,\n    cid: CID.parse(hash),\n    size: parseInt(size)\n  };\n\n  if (mode != null) {\n    output.mode = parseInt(mode, 8);\n  }\n\n  if (mtime != null) {\n    output.mtime = {\n      secs: mtime,\n      nsecs: mtimeNsecs || 0\n    };\n  }\n\n  return output;\n}","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Demo/node_modules/ipfs-http-client/src/add-all.js"],"names":["CID","require","toCamel","configure","multipartRequest","toUrlSearchParams","abortSignal","AbortController","module","exports","api","addAll","source","options","controller","signal","headers","body","total","parts","progressFn","onUploadProgress","progress","createProgressHandler","undefined","res","post","searchParams","Boolean","timeout","ndjson","file","hash","toCoreInterface","bytes","name","createOnUploadProgress","size","index","count","length","loaded","position","Math","floor","start","end","mode","mtime","mtimeNsecs","output","path","cid","parse","parseInt","secs","nsecs"],"mappings":"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","sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst toCamel = require('./lib/object-to-camel')\nconst configure = require('./lib/configure')\nconst multipartRequest = require('./lib/multipart-request')\nconst toUrlSearchParams = require('./lib/to-url-search-params')\nconst abortSignal = require('./lib/abort-signal')\nconst { AbortController } = require('native-abort-controller')\n\n/**\n * @typedef {import('ipfs-utils/src/types').ProgressFn} IPFSUtilsHttpUploadProgressFn\n * @typedef {import('ipfs-core-types/src/root').AddProgressFn} IPFSCoreAddProgressFn\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n * @typedef {import('ipfs-core-types/src/root').AddResult} AddResult\n */\n\nmodule.exports = configure((api) => {\n  /**\n   * @type {RootAPI[\"addAll\"]}\n   */\n  async function * addAll (source, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n    const { headers, body, total, parts } =\n      await multipartRequest(source, controller, options.headers)\n\n    // In browser response body only starts streaming once upload is\n    // complete, at which point all the progress updates are invalid. If\n    // length of the content is computable we can interpret progress from\n    // `{ total, loaded}` passed to `onUploadProgress` and `multipart.total`\n    // in which case we disable progress updates to be written out.\n    const [progressFn, onUploadProgress] = typeof options.progress === 'function'\n      // @ts-ignore tsc picks up the node codepath\n      ? createProgressHandler(total, parts, options.progress)\n      : [undefined, undefined]\n\n    const res = await api.post('add', {\n      searchParams: toUrlSearchParams({\n        'stream-channels': true,\n        ...options,\n        progress: Boolean(progressFn)\n      }),\n      timeout: options.timeout,\n      onUploadProgress,\n      signal,\n      headers,\n      body\n    })\n\n    for await (let file of res.ndjson()) {\n      file = toCamel(file)\n\n      if (file.hash !== undefined) {\n        yield toCoreInterface(file)\n      } else if (progressFn) {\n        progressFn(file.bytes || 0, file.name)\n      }\n    }\n  }\n  return addAll\n})\n\n/**\n * Returns simple progress callback when content length isn't computable or a\n * progress event handler that calculates progress from upload progress events.\n *\n * @param {number} total\n * @param {{name:string, start:number, end:number}[]|null} parts\n * @param {IPFSCoreAddProgressFn} progress\n * @returns {[IPFSCoreAddProgressFn|undefined, IPFSUtilsHttpUploadProgressFn|undefined]}\n */\nconst createProgressHandler = (total, parts, progress) =>\n  parts ? [undefined, createOnUploadProgress(total, parts, progress)] : [progress, undefined]\n\n/**\n * Creates a progress handler that interpolates progress from upload progress\n * events and total size of the content that is added.\n *\n * @param {number} size - actual content size\n * @param {{name:string, start:number, end:number}[]} parts\n * @param {IPFSCoreAddProgressFn} progress\n * @returns {IPFSUtilsHttpUploadProgressFn}\n */\nconst createOnUploadProgress = (size, parts, progress) => {\n  let index = 0\n  const count = parts.length\n  return ({ loaded, total }) => {\n    // Derive position from the current progress.\n    const position = Math.floor(loaded / total * size)\n    while (index < count) {\n      const { start, end, name } = parts[index]\n      // If within current part range report progress and break the loop\n      if (position < end) {\n        progress(position - start, name)\n        break\n      // If passed current part range report final byte for the chunk and\n      // move to next one.\n      } else {\n        progress(end - start, name)\n        index += 1\n      }\n    }\n  }\n}\n\n/**\n * @param {object} input\n * @param {string} input.name\n * @param {string} input.hash\n * @param {string} input.size\n * @param {string} [input.mode]\n * @param {number} [input.mtime]\n * @param {number} [input.mtimeNsecs]\n */\nfunction toCoreInterface ({ name, hash, size, mode, mtime, mtimeNsecs }) {\n  /** @type {AddResult} */\n  const output = {\n    path: name,\n    cid: CID.parse(hash),\n    size: parseInt(size)\n  }\n\n  if (mode != null) {\n    output.mode = parseInt(mode, 8)\n  }\n\n  if (mtime != null) {\n    output.mtime = {\n      secs: mtime,\n      nsecs: mtimeNsecs || 0\n    }\n  }\n\n  return output\n}\n"]},"metadata":{},"sourceType":"script"}