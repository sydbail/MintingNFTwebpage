{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst secp256k1 = require('secp256k1');\n\nconst {\n  sha256\n} = require('multiformats/hashes/sha2');\n\nmodule.exports = randomBytes => {\n  const privateKeyLength = 32;\n\n  function generateKey() {\n    let privateKey;\n\n    do {\n      privateKey = randomBytes(32);\n    } while (!secp256k1.privateKeyVerify(privateKey));\n\n    return privateKey;\n  }\n\n  function hashAndSign(_x, _x2) {\n    return _hashAndSign.apply(this, arguments);\n  }\n\n  function _hashAndSign() {\n    _hashAndSign = _asyncToGenerator(function* (key, msg) {\n      const {\n        digest\n      } = yield sha256.digest(msg);\n      const sig = secp256k1.ecdsaSign(digest, key);\n      return secp256k1.signatureExport(sig.signature);\n    });\n    return _hashAndSign.apply(this, arguments);\n  }\n\n  function hashAndVerify(_x3, _x4, _x5) {\n    return _hashAndVerify.apply(this, arguments);\n  }\n\n  function _hashAndVerify() {\n    _hashAndVerify = _asyncToGenerator(function* (key, sig, msg) {\n      const {\n        digest\n      } = yield sha256.digest(msg);\n      sig = secp256k1.signatureImport(sig);\n      return secp256k1.ecdsaVerify(sig, digest, key);\n    });\n    return _hashAndVerify.apply(this, arguments);\n  }\n\n  function compressPublicKey(key) {\n    if (!secp256k1.publicKeyVerify(key)) {\n      throw new Error('Invalid public key');\n    }\n\n    return secp256k1.publicKeyConvert(key, true);\n  }\n\n  function decompressPublicKey(key) {\n    return secp256k1.publicKeyConvert(key, false);\n  }\n\n  function validatePrivateKey(key) {\n    if (!secp256k1.privateKeyVerify(key)) {\n      throw new Error('Invalid private key');\n    }\n  }\n\n  function validatePublicKey(key) {\n    if (!secp256k1.publicKeyVerify(key)) {\n      throw new Error('Invalid public key');\n    }\n  }\n\n  function computePublicKey(privateKey) {\n    validatePrivateKey(privateKey);\n    return secp256k1.publicKeyCreate(privateKey);\n  }\n\n  return {\n    generateKey,\n    privateKeyLength,\n    hashAndSign,\n    hashAndVerify,\n    compressPublicKey,\n    decompressPublicKey,\n    validatePrivateKey,\n    validatePublicKey,\n    computePublicKey\n  };\n};","map":null,"metadata":{},"sourceType":"script"}