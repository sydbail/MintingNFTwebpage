{"ast":null,"code":"var _awaitAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\").default;\n\nvar _wrapAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nconst {\n  Buffer\n} = require('buffer');\n\nconst {\n  EventIterator\n} = require('event-iterator'); // copied from github.com/feross/buffer\n// Some ArrayBuffers are not passing the instanceof check, so we need to do a bit more work :(\n\n\nfunction isArrayBuffer(obj) {\n  return obj instanceof ArrayBuffer || obj != null && obj.constructor != null && obj.constructor.name === 'ArrayBuffer' && typeof obj.byteLength === 'number';\n}\n\nmodule.exports = socket => {\n  const removeListener = socket.removeEventListener || socket.removeListener;\n\n  const source = _wrapAsyncGenerator(function* () {\n    const messages = new EventIterator(({\n      push,\n      stop,\n      fail\n    }) => {\n      socket.addEventListener('message', push);\n      socket.addEventListener('error', fail);\n      socket.addEventListener('close', stop);\n      return () => {\n        removeListener.call(socket, 'message', push);\n        removeListener.call(socket, 'error', fail);\n        removeListener.call(socket, 'close', stop);\n      };\n    }, {\n      highWaterMark: Infinity\n    });\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n\n    var _iteratorError;\n\n    try {\n      for (var _iterator = _asyncIterator(messages), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n        const {\n          data\n        } = _value;\n        yield isArrayBuffer(data) ? Buffer.from(data) : data;\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          yield _awaitAsyncGenerator(_iterator.return());\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  })();\n\n  let connected = socket.readyState === 1;\n  let connError;\n  socket.addEventListener('open', () => {\n    connected = true;\n    connError = null;\n  });\n  socket.addEventListener('close', () => {\n    connected = false;\n    connError = null;\n  });\n  socket.addEventListener('error', err => {\n    if (!connected) connError = err;\n  });\n\n  source.connected = () => new Promise((resolve, reject) => {\n    if (connected) return resolve();\n    if (connError) return reject(connError);\n\n    const cleanUp = cont => {\n      removeListener.call(socket, 'open', onOpen);\n      removeListener.call(socket, 'error', onError);\n      cont();\n    };\n\n    const onOpen = () => cleanUp(resolve);\n\n    const onError = err => cleanUp(() => reject(err));\n\n    socket.addEventListener('open', onOpen);\n    socket.addEventListener('error', onError);\n  });\n\n  return source;\n};","map":null,"metadata":{},"sourceType":"script"}