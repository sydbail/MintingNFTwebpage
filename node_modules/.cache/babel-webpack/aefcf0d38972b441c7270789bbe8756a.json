{"ast":null,"code":"var _asyncToGenerator = require(\"/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nconst BufferList = require('bl/BufferList');\n\nconst TypeDefault = {\n  string: () => '',\n  buffer: () => BufferList()\n};\n\nmodule.exports = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (source, options) {\n    options = options || {};\n\n    if (options.type && !TypeDefault[options.type]) {\n      throw new Error(`invalid type \"${options.type}\"`);\n    }\n\n    let res, type;\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n\n    var _iteratorError;\n\n    try {\n      for (var _iterator = _asyncIterator(source), _step, _value; _step = yield _iterator.next(), _iteratorNormalCompletion = _step.done, _value = yield _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n        const chunk = _value;\n\n        if (!res) {\n          type = options.type || (typeof chunk === 'string' ? 'string' : 'buffer');\n          res = TypeDefault[type]();\n        }\n\n        if (type === 'string') {\n          res += chunk;\n        } else {\n          res.append(chunk);\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          yield _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return res || TypeDefault[options.type || 'buffer']();\n  });\n\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/it-concat/index.js"],"names":["BufferList","require","TypeDefault","string","buffer","module","exports","source","options","type","Error","res","chunk","append"],"mappings":";;;;AAAA,MAAMA,UAAU,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AAEA,MAAMC,WAAW,GAAG;AAClBC,EAAAA,MAAM,EAAE,MAAM,EADI;AAElBC,EAAAA,MAAM,EAAE,MAAMJ,UAAU;AAFN,CAApB;;AAKAK,MAAM,CAACC,OAAP;AAAA,+BAAiB,WAAOC,MAAP,EAAeC,OAAf,EAA2B;AAC1CA,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;;AAEA,QAAIA,OAAO,CAACC,IAAR,IAAgB,CAACP,WAAW,CAACM,OAAO,CAACC,IAAT,CAAhC,EAAgD;AAC9C,YAAM,IAAIC,KAAJ,CAAW,iBAAgBF,OAAO,CAACC,IAAK,GAAxC,CAAN;AACD;;AAED,QAAIE,GAAJ,EAASF,IAAT;AAP0C;AAAA;;AAAA;;AAAA;AAQ1C,0CAA0BF,MAA1B,oLAAkC;AAAA,cAAjBK,KAAiB;;AAChC,YAAI,CAACD,GAAL,EAAU;AACRF,UAAAA,IAAI,GAAGD,OAAO,CAACC,IAAR,KAAiB,OAAOG,KAAP,KAAiB,QAAjB,GAA4B,QAA5B,GAAuC,QAAxD,CAAP;AACAD,UAAAA,GAAG,GAAGT,WAAW,CAACO,IAAD,CAAX,EAAN;AACD;;AAED,YAAIA,IAAI,KAAK,QAAb,EAAuB;AACrBE,UAAAA,GAAG,IAAIC,KAAP;AACD,SAFD,MAEO;AACLD,UAAAA,GAAG,CAACE,MAAJ,CAAWD,KAAX;AACD;AACF;AAnByC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAqB1C,WAAOD,GAAG,IAAIT,WAAW,CAACM,OAAO,CAACC,IAAR,IAAgB,QAAjB,CAAX,EAAd;AACD,GAtBD;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["const BufferList = require('bl/BufferList')\n\nconst TypeDefault = {\n  string: () => '',\n  buffer: () => BufferList()\n}\n\nmodule.exports = async (source, options) => {\n  options = options || {}\n\n  if (options.type && !TypeDefault[options.type]) {\n    throw new Error(`invalid type \"${options.type}\"`)\n  }\n\n  let res, type\n  for await (const chunk of source) {\n    if (!res) {\n      type = options.type || (typeof chunk === 'string' ? 'string' : 'buffer')\n      res = TypeDefault[type]()\n    }\n\n    if (type === 'string') {\n      res += chunk\n    } else {\n      res.append(chunk)\n    }\n  }\n\n  return res || TypeDefault[options.type || 'buffer']()\n}\n"]},"metadata":{},"sourceType":"script"}