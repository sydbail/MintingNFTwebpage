{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/Dapp/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/config').API<HTTPClientExtraOptions>} ConfigAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {ConfigAPI[\"set\"]}\n   */\n  const set = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(function* (key, value, options = {}) {\n      if (typeof key !== 'string') {\n        throw new Error('Invalid key type');\n      }\n\n      const params = { ...options,\n        ...encodeParam(key, value)\n      };\n      const res = yield api.post('config', {\n        timeout: options.timeout,\n        signal: options.signal,\n        searchParams: toUrlSearchParams(params),\n        headers: options.headers\n      });\n      yield res.text();\n    });\n\n    return function set(_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return set;\n});\n/**\n * @param {*} key\n * @param {*} value\n */\n\nconst encodeParam = (key, value) => {\n  switch (typeof value) {\n    case 'boolean':\n      return {\n        arg: [key, value.toString()],\n        bool: true\n      };\n\n    case 'string':\n      return {\n        arg: [key, value]\n      };\n\n    default:\n      return {\n        arg: [key, JSON.stringify(value)],\n        json: true\n      };\n  }\n};","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Dapp/node_modules/ipfs-http-client/src/config/set.js"],"names":["configure","require","toUrlSearchParams","module","exports","api","set","key","value","options","Error","params","encodeParam","res","post","timeout","signal","searchParams","headers","text","arg","toString","bool","JSON","stringify","json"],"mappings":"AAAA;;;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAMC,iBAAiB,GAAGD,OAAO,CAAC,6BAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AAEAE,MAAM,CAACC,OAAP,GAAiBJ,SAAS,CAACK,GAAG,IAAI;AAChC;AACF;AACA;AACE,QAAMC,GAAG;AAAA,iCAAG,WAAOC,GAAP,EAAYC,KAAZ,EAAmBC,OAAO,GAAG,EAA7B,EAAoC;AAC9C,UAAI,OAAOF,GAAP,KAAe,QAAnB,EAA6B;AAC3B,cAAM,IAAIG,KAAJ,CAAU,kBAAV,CAAN;AACD;;AAED,YAAMC,MAAM,GAAG,EACb,GAAGF,OADU;AAEb,WAAGG,WAAW,CAACL,GAAD,EAAMC,KAAN;AAFD,OAAf;AAKA,YAAMK,GAAG,SAASR,GAAG,CAACS,IAAJ,CAAS,QAAT,EAAmB;AACnCC,QAAAA,OAAO,EAAEN,OAAO,CAACM,OADkB;AAEnCC,QAAAA,MAAM,EAAEP,OAAO,CAACO,MAFmB;AAGnCC,QAAAA,YAAY,EAAEf,iBAAiB,CAACS,MAAD,CAHI;AAInCO,QAAAA,OAAO,EAAET,OAAO,CAACS;AAJkB,OAAnB,CAAlB;AAOA,YAAML,GAAG,CAACM,IAAJ,EAAN;AACD,KAlBQ;;AAAA,oBAAHb,GAAG;AAAA;AAAA;AAAA,KAAT;;AAoBA,SAAOA,GAAP;AACD,CAzByB,CAA1B;AA2BA;AACA;AACA;AACA;;AACA,MAAMM,WAAW,GAAG,CAACL,GAAD,EAAMC,KAAN,KAAgB;AAClC,UAAQ,OAAOA,KAAf;AACE,SAAK,SAAL;AACE,aAAO;AAAEY,QAAAA,GAAG,EAAE,CAACb,GAAD,EAAMC,KAAK,CAACa,QAAN,EAAN,CAAP;AAAgCC,QAAAA,IAAI,EAAE;AAAtC,OAAP;;AACF,SAAK,QAAL;AACE,aAAO;AAAEF,QAAAA,GAAG,EAAE,CAACb,GAAD,EAAMC,KAAN;AAAP,OAAP;;AACF;AACE,aAAO;AAAEY,QAAAA,GAAG,EAAE,CAACb,GAAD,EAAMgB,IAAI,CAACC,SAAL,CAAehB,KAAf,CAAN,CAAP;AAAqCiB,QAAAA,IAAI,EAAE;AAA3C,OAAP;AANJ;AAQD,CATD","sourcesContent":["'use strict'\n\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/config').API<HTTPClientExtraOptions>} ConfigAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {ConfigAPI[\"set\"]}\n   */\n  const set = async (key, value, options = {}) => {\n    if (typeof key !== 'string') {\n      throw new Error('Invalid key type')\n    }\n\n    const params = {\n      ...options,\n      ...encodeParam(key, value)\n    }\n\n    const res = await api.post('config', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams(params),\n      headers: options.headers\n    })\n\n    await res.text()\n  }\n\n  return set\n})\n\n/**\n * @param {*} key\n * @param {*} value\n */\nconst encodeParam = (key, value) => {\n  switch (typeof value) {\n    case 'boolean':\n      return { arg: [key, value.toString()], bool: true }\n    case 'string':\n      return { arg: [key, value] }\n    default:\n      return { arg: [key, JSON.stringify(value)], json: true }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}