{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst errcode = require('err-code');\n\nconst Message = require('../../message');\n\nconst utils = require('../../utils');\n/**\n * @typedef {import('peer-id')} PeerId\n */\n\n/**\n * @param {import('../../index')} dht\n */\n\n\nmodule.exports = dht => {\n  const log = utils.logger(dht.peerId, 'rpc:get-providers');\n  /**\n   * Process `GetProviders` DHT messages.\n   *\n   * @param {PeerId} peerId\n   * @param {Message} msg\n   */\n\n  function getProviders(_x, _x2) {\n    return _getProviders.apply(this, arguments);\n  }\n\n  function _getProviders() {\n    _getProviders = _asyncToGenerator(function* (peerId, msg) {\n      let cid;\n\n      try {\n        cid = CID.decode(msg.key);\n      } catch (err) {\n        throw errcode(new Error(`Invalid CID: ${err.message}`), 'ERR_INVALID_CID');\n      }\n\n      log('%s', cid.toString());\n      const dsKey = utils.bufferToKey(cid.bytes);\n      const [has, peers, closer] = yield Promise.all([dht.datastore.has(dsKey), dht.providers.getProviders(cid), dht._betterPeersToQuery(msg, peerId)]);\n      const providerPeers = peers.map(peerId => ({\n        id: peerId,\n        multiaddrs: []\n      }));\n      const closerPeers = closer.map(c => ({\n        id: c.id,\n        multiaddrs: []\n      }));\n\n      if (has) {\n        providerPeers.push({\n          id: dht.peerId,\n          multiaddrs: []\n        });\n      }\n\n      const response = new Message(msg.type, msg.key, msg.clusterLevel);\n\n      if (providerPeers.length > 0) {\n        response.providerPeers = providerPeers;\n      }\n\n      if (closerPeers.length > 0) {\n        response.closerPeers = closerPeers;\n      }\n\n      log('got %s providers %s closerPeers', providerPeers.length, closerPeers.length);\n      return response;\n    });\n    return _getProviders.apply(this, arguments);\n  }\n\n  return getProviders;\n};","map":null,"metadata":{},"sourceType":"script"}