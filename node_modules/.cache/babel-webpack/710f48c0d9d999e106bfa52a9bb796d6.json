{"ast":null,"code":"import _asyncToGenerator from \"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _awaitAsyncGenerator from \"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator\";\nimport _wrapAsyncGenerator from \"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator\";\nimport { CID } from 'multiformats/cid';\nimport errCode from 'err-code';\nimport * as dagCbor from '@ipld/dag-cbor';\n\nconst resolve = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator(function* (cid, name, path, toResolve, _resolve, depth, blockstore, options) {\n    const block = yield blockstore.get(cid);\n    const object = dagCbor.decode(block);\n    let subObject = object;\n    let subPath = path;\n\n    while (toResolve.length) {\n      const prop = toResolve[0];\n\n      if (prop in subObject) {\n        toResolve.shift();\n        subPath = `${subPath}/${prop}`;\n        const subObjectCid = CID.asCID(subObject[prop]);\n\n        if (subObjectCid) {\n          return {\n            entry: {\n              type: 'object',\n              name,\n              path,\n              cid,\n              node: block,\n              depth,\n              size: block.length,\n              content: function () {\n                var _ref = _wrapAsyncGenerator(function* () {\n                  yield object;\n                });\n\n                return function content() {\n                  return _ref.apply(this, arguments);\n                };\n              }()\n            },\n            next: {\n              cid: subObjectCid,\n              name: prop,\n              path: subPath,\n              toResolve\n            }\n          };\n        }\n\n        subObject = subObject[prop];\n      } else {\n        throw errCode(new Error(`No property named ${prop} found in cbor node ${cid}`), 'ERR_NO_PROP');\n      }\n    }\n\n    return {\n      entry: {\n        type: 'object',\n        name,\n        path,\n        cid,\n        node: block,\n        depth,\n        size: block.length,\n        content: function () {\n          var _ref2 = _wrapAsyncGenerator(function* () {\n            yield object;\n          });\n\n          return function content() {\n            return _ref2.apply(this, arguments);\n          };\n        }()\n      }\n    };\n  });\n\n  return function resolve(_x, _x2, _x3, _x4, _x5, _x6, _x7, _x8) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nexport default resolve;","map":null,"metadata":{},"sourceType":"module"}