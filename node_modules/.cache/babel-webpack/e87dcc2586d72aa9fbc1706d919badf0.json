{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n\nconst {\n  concat: uint8ArrayConcat\n} = require('uint8arrays/concat');\n/**\n * @param {Object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../../types').Preload} config.preload\n */\n\n\nmodule.exports = ({\n  repo,\n  preload\n}) => {\n  const get = require('../get')({\n    repo,\n    preload\n  });\n\n  const put = require('../put')({\n    repo,\n    preload\n  });\n  /**\n   * @type {import('ipfs-core-types/src/object/patch').API[\"appendData\"]}\n   */\n\n\n  function appendData(_x, _x2) {\n    return _appendData.apply(this, arguments);\n  }\n\n  function _appendData() {\n    _appendData = _asyncToGenerator(function* (cid, data, options = {}) {\n      const node = yield get(cid, options);\n      const newData = uint8ArrayConcat([node.Data || [], data]);\n      return put({ ...node,\n        Data: newData\n      }, options);\n    });\n    return _appendData.apply(this, arguments);\n  }\n\n  return withTimeoutOption(appendData);\n};","map":{"version":3,"sources":["/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/ipfs-core/src/components/object/patch/append-data.js"],"names":["withTimeoutOption","require","concat","uint8ArrayConcat","module","exports","repo","preload","get","put","appendData","cid","data","options","node","newData","Data"],"mappings":"AAAA;;;;AAEA,MAAMA,iBAAiB,GAAGC,OAAO,CAAC,yCAAD,CAAjC;;AACA,MAAM;AAAEC,EAAAA,MAAM,EAAEC;AAAV,IAA+BF,OAAO,CAAC,oBAAD,CAA5C;AAEA;AACA;AACA;AACA;AACA;;;AACAG,MAAM,CAACC,OAAP,GAAiB,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAD,KAAuB;AACtC,QAAMC,GAAG,GAAGP,OAAO,CAAC,QAAD,CAAP,CAAkB;AAAEK,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAlB,CAAZ;;AACA,QAAME,GAAG,GAAGR,OAAO,CAAC,QAAD,CAAP,CAAkB;AAAEK,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAlB,CAAZ;AAEA;AACF;AACA;;;AANwC,WAOvBG,UAPuB;AAAA;AAAA;;AAAA;AAAA,oCAOtC,WAA2BC,GAA3B,EAAgCC,IAAhC,EAAsCC,OAAO,GAAG,EAAhD,EAAoD;AAClD,YAAMC,IAAI,SAASN,GAAG,CAACG,GAAD,EAAME,OAAN,CAAtB;AACA,YAAME,OAAO,GAAGZ,gBAAgB,CAAC,CAACW,IAAI,CAACE,IAAL,IAAa,EAAd,EAAkBJ,IAAlB,CAAD,CAAhC;AAEA,aAAOH,GAAG,CAAC,EACT,GAAGK,IADM;AAETE,QAAAA,IAAI,EAAED;AAFG,OAAD,EAGPF,OAHO,CAAV;AAID,KAfqC;AAAA;AAAA;;AAiBtC,SAAOb,iBAAiB,CAACU,UAAD,CAAxB;AACD,CAlBD","sourcesContent":["'use strict'\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\nconst { concat: uint8ArrayConcat } = require('uint8arrays/concat')\n\n/**\n * @param {Object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../../types').Preload} config.preload\n */\nmodule.exports = ({ repo, preload }) => {\n  const get = require('../get')({ repo, preload })\n  const put = require('../put')({ repo, preload })\n\n  /**\n   * @type {import('ipfs-core-types/src/object/patch').API[\"appendData\"]}\n   */\n  async function appendData (cid, data, options = {}) {\n    const node = await get(cid, options)\n    const newData = uint8ArrayConcat([node.Data || [], data])\n\n    return put({\n      ...node,\n      Data: newData\n    }, options)\n  }\n\n  return withTimeoutOption(appendData)\n}\n"]},"metadata":{},"sourceType":"script"}