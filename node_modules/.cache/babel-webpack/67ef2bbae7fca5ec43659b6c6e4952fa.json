{"ast":null,"code":"import _asyncToGenerator from \"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _asyncIterator from \"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/esm/asyncIterator\";\nimport DirSharded from './dir-sharded.js';\nimport DirFlat from './dir-flat.js';\n\nfunction flatToShard(_x, _x2, _x3, _x4) {\n  return _flatToShard.apply(this, arguments);\n}\n\nfunction _flatToShard() {\n  _flatToShard = _asyncToGenerator(function* (child, dir, threshold, options) {\n    let newDir = dir;\n\n    if (dir instanceof DirFlat && dir.directChildrenCount() >= threshold) {\n      newDir = yield convertToShard(dir, options);\n    }\n\n    const parent = newDir.parent;\n\n    if (parent) {\n      if (newDir !== dir) {\n        if (child) {\n          child.parent = newDir;\n        }\n\n        if (!newDir.parentKey) {\n          throw new Error('No parent key found');\n        }\n\n        yield parent.put(newDir.parentKey, newDir);\n      }\n\n      return flatToShard(newDir, parent, threshold, options);\n    }\n\n    return newDir;\n  });\n  return _flatToShard.apply(this, arguments);\n}\n\nfunction convertToShard(_x5, _x6) {\n  return _convertToShard.apply(this, arguments);\n}\n\nfunction _convertToShard() {\n  _convertToShard = _asyncToGenerator(function* (oldDir, options) {\n    const newDir = new DirSharded({\n      root: oldDir.root,\n      dir: true,\n      parent: oldDir.parent,\n      parentKey: oldDir.parentKey,\n      path: oldDir.path,\n      dirty: oldDir.dirty,\n      flat: false,\n      mtime: oldDir.mtime,\n      mode: oldDir.mode\n    }, options);\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n\n    var _iteratorError;\n\n    try {\n      for (var _iterator = _asyncIterator(oldDir.eachChildSeries()), _step, _value; _step = yield _iterator.next(), _iteratorNormalCompletion = _step.done, _value = yield _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n        const {\n          key,\n          child\n        } = _value;\n        yield newDir.put(key, child);\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          yield _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return newDir;\n  });\n  return _convertToShard.apply(this, arguments);\n}\n\nexport default flatToShard;","map":null,"metadata":{},"sourceType":"module"}