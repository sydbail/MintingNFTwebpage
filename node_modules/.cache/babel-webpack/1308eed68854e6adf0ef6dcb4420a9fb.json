{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StreamArbitrary = void 0;\n\nconst NextArbitrary_1 = require(\"../../check/arbitrary/definition/NextArbitrary\");\n\nconst NextValue_1 = require(\"../../check/arbitrary/definition/NextValue\");\n\nconst symbols_1 = require(\"../../check/symbols\");\n\nconst Stream_1 = require(\"../../stream/Stream\");\n\nconst stringify_1 = require(\"../../utils/stringify\");\n\nfunction prettyPrint(seenValuesStrings) {\n  return `Stream(${seenValuesStrings.join(',')}â€¦)`;\n}\n\nclass StreamArbitrary extends NextArbitrary_1.NextArbitrary {\n  constructor(arb) {\n    super();\n    this.arb = arb;\n  }\n\n  generate(mrng, biasFactor) {\n    const appliedBiasFactor = biasFactor !== undefined && mrng.nextInt(1, biasFactor) === 1 ? biasFactor : undefined;\n\n    const enrichedProducer = () => {\n      const seenValues = [];\n\n      const g = function* (arb, clonedMrng) {\n        while (true) {\n          const value = arb.generate(clonedMrng, appliedBiasFactor).value;\n          seenValues.push(value);\n          yield value;\n        }\n      };\n\n      const s = new Stream_1.Stream(g(this.arb, mrng.clone()));\n      return Object.defineProperties(s, {\n        toString: {\n          value: () => prettyPrint(seenValues.map(stringify_1.stringify))\n        },\n        [stringify_1.toStringMethod]: {\n          value: () => prettyPrint(seenValues.map(stringify_1.stringify))\n        },\n        [stringify_1.asyncToStringMethod]: {\n          value: function () {\n            var _ref = _asyncToGenerator(function* () {\n              return prettyPrint(yield Promise.all(seenValues.map(stringify_1.asyncStringify)));\n            });\n\n            return function value() {\n              return _ref.apply(this, arguments);\n            };\n          }()\n        },\n        [symbols_1.cloneMethod]: {\n          value: enrichedProducer,\n          enumerable: true\n        }\n      });\n    };\n\n    return new NextValue_1.NextValue(enrichedProducer(), undefined);\n  }\n\n  canShrinkWithoutContext(value) {\n    return false;\n  }\n\n  shrink(_value, _context) {\n    return Stream_1.Stream.nil();\n  }\n\n}\n\nexports.StreamArbitrary = StreamArbitrary;","map":null,"metadata":{},"sourceType":"script"}