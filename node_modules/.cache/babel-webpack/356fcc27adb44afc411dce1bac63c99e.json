{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nconst debug = require('debug');\n\nconst {\n  sha256\n} = require('multiformats/hashes/sha2');\n\nconst {\n  base58btc\n} = require('multiformats/bases/base58');\n\nconst {\n  Key\n} = require('interface-datastore'); // @ts-ignore\n\n\nconst distance = require('xor-distance');\n\nconst pMap = require('p-map');\n\nconst {\n  Record\n} = require('libp2p-record');\n\nconst PeerId = require('peer-id');\n\nconst errcode = require('err-code');\n\nconst {\n  fromString: uint8ArrayFromString\n} = require('uint8arrays/from-string');\n\nconst {\n  toString: uint8ArrayToString\n} = require('uint8arrays/to-string');\n\nconst {\n  concat: uint8ArrayConcat\n} = require('uint8arrays/concat');\n\nconst pTimeout = require('p-timeout');\n/**\n * Creates a DHT ID by hashing a given Uint8Array.\n *\n * @param {Uint8Array} buf\n * @returns {Promise<Uint8Array>}\n */\n\n\nexports.convertBuffer = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (buf) {\n    return (yield sha256.digest(buf)).digest;\n  });\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n/**\n * Creates a DHT ID by hashing a Peer ID\n *\n * @param {PeerId} peer\n * @returns {Promise<Uint8Array>}\n */\n\n\nexports.convertPeerId = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator(function* (peer) {\n    return (yield sha256.digest(peer.id)).digest;\n  });\n\n  return function (_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n/**\n * Convert a Uint8Array to their SHA2-256 hash.\n *\n * @param {Uint8Array} buf\n * @returns {Key}\n */\n\n\nexports.bufferToKey = buf => {\n  return new Key('/' + exports.encodeBase32(buf), false);\n};\n/**\n * Generate the key for a public key.\n *\n * @param {PeerId} peer\n * @returns {Uint8Array}\n */\n\n\nexports.keyForPublicKey = peer => {\n  return uint8ArrayConcat([uint8ArrayFromString('/pk/'), peer.id]);\n};\n/**\n * @param {Uint8Array} key\n */\n\n\nexports.isPublicKeyKey = key => {\n  return uint8ArrayToString(key.slice(0, 4)) === '/pk/';\n};\n/**\n * @param {Uint8Array} key\n */\n\n\nexports.fromPublicKeyKey = key => {\n  return new PeerId(key.slice(4));\n};\n/**\n * Get the current time as timestamp.\n *\n * @returns {number}\n */\n\n\nexports.now = () => {\n  return Date.now();\n};\n/**\n * Encode a given Uint8Array into a base32 string.\n *\n * @param {Uint8Array} buf\n * @returns {string}\n */\n\n\nexports.encodeBase32 = buf => {\n  return uint8ArrayToString(buf, 'base32');\n};\n/**\n * Decode a given base32 string into a Uint8Array.\n *\n * @param {string} raw\n * @returns {Uint8Array}\n */\n\n\nexports.decodeBase32 = raw => {\n  return uint8ArrayFromString(raw, 'base32');\n};\n/**\n * Sort peers by distance to the given `target`.\n *\n * @param {Array<PeerId>} peers\n * @param {Uint8Array} target\n */\n\n\nexports.sortClosestPeers = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator(function* (peers, target) {\n    const distances = yield pMap(peers, /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator(function* (peer) {\n        const id = yield exports.convertPeerId(peer);\n        return {\n          peer: peer,\n          distance: distance(id, target)\n        };\n      });\n\n      return function (_x5) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n    return distances.sort(exports.xorCompare).map(d => d.peer);\n  });\n\n  return function (_x3, _x4) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n/**\n * Compare function to sort an array of elements which have a distance property which is the xor distance to a given element.\n *\n * @param {{ distance: Uint8Array }} a\n * @param {{ distance: Uint8Array }} b\n */\n\n\nexports.xorCompare = (a, b) => {\n  return distance.compare(a.distance, b.distance);\n};\n/**\n * Computes how many results to collect on each disjoint path, rounding up.\n * This ensures that we look for at least one result per path.\n *\n * @param {number} resultsWanted\n * @param {number} numPaths - total number of paths\n */\n\n\nexports.pathSize = (resultsWanted, numPaths) => {\n  return Math.ceil(resultsWanted / numPaths);\n};\n/**\n * Create a new put record, encodes and signs it if enabled.\n *\n * @param {Uint8Array} key\n * @param {Uint8Array} value\n * @returns {Uint8Array}\n */\n\n\nexports.createPutRecord = (key, value) => {\n  const timeReceived = new Date();\n  const rec = new Record(key, value, timeReceived);\n  return rec.serialize();\n};\n/**\n * Creates a logger for the given subsystem\n *\n * @param {PeerId} [id]\n * @param {string} [subsystem]\n */\n\n\nexports.logger = (id, subsystem) => {\n  const name = ['libp2p', 'dht'];\n\n  if (subsystem) {\n    name.push(subsystem);\n  }\n\n  if (id) {\n    name.push(`${id.toB58String().slice(0, 8)}`);\n  } // Add a formatter for converting to a base58 string\n\n\n  debug.formatters.b = v => {\n    return base58btc.baseEncode(v);\n  };\n\n  const logger = Object.assign(debug(name.join(':')), {\n    error: debug(name.concat(['error']).join(':'))\n  });\n  return logger;\n};\n\nexports.TimeoutError = class TimeoutError extends Error {\n  get code() {\n    return 'ETIMEDOUT';\n  }\n\n};\n/**\n * Creates an async function that calls the given `asyncFn` and Errors\n * if it does not resolve within `time` ms\n *\n * @template T\n * @param {(...args: any[]) => Promise<T>} asyncFn\n * @param {number} [time]\n */\n\nexports.withTimeout = (asyncFn, time) => {\n  /**\n   * @param  {...any} args\n   * @returns {Promise<T>}\n   */\n  function timeoutFn() {\n    return _timeoutFn.apply(this, arguments);\n  }\n\n  function _timeoutFn() {\n    _timeoutFn = _asyncToGenerator(function* (...args) {\n      if (!time) {\n        return asyncFn(...args);\n      }\n\n      let res;\n\n      try {\n        res = yield pTimeout(asyncFn(...args), time);\n      } catch (err) {\n        if (err instanceof pTimeout.TimeoutError) {\n          throw errcode(err, 'ETIMEDOUT');\n        }\n\n        throw err;\n      }\n\n      return res;\n    });\n    return _timeoutFn.apply(this, arguments);\n  }\n\n  return timeoutFn;\n};\n/**\n * Iterates the given `asyncIterator` and runs each item through the given `asyncFn` in parallel.\n * Returns a promise that resolves when all items of the `asyncIterator` have been passed\n * through `asyncFn`.\n *\n * @template T\n * @template O\n *\n * @param {AsyncIterable<T>} asyncIterator\n * @param {(arg0: T) => Promise<O>} asyncFn\n */\n\n\nexports.mapParallel = /*#__PURE__*/function () {\n  var _ref5 = _asyncToGenerator(function* (asyncIterator, asyncFn) {\n    const tasks = [];\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n\n    var _iteratorError;\n\n    try {\n      for (var _iterator = _asyncIterator(asyncIterator), _step, _value; _step = yield _iterator.next(), _iteratorNormalCompletion = _step.done, _value = yield _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n        const item = _value;\n        tasks.push(asyncFn(item));\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          yield _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return Promise.all(tasks);\n  });\n\n  return function (_x6, _x7) {\n    return _ref5.apply(this, arguments);\n  };\n}();","map":null,"metadata":{},"sourceType":"script"}