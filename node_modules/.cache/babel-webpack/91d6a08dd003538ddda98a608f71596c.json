{"ast":null,"code":"import _asyncToGenerator from \"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { Observable } from 'rxjs';\nimport * as i0 from \"@angular/core\";\n\nconst Web3 = require('web3');\n\nexport class Web3Service {\n  web3;\n\n  constructor() {\n    this.checkAndInstantiateWeb3();\n  }\n\n  checkAndInstantiateWeb3() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (window.ethereum) {\n        _this.web3 = new Web3(window.ethereum);\n        yield window.ethereum.enable();\n      } else if (window.web3) {\n        _this.web3 = new Web3(window.web3.currentProvider);\n        yield window.ethereum.enable();\n      } else {\n        window.alert('Non-Ethereum browser detected. Please install MetaMask plugin');\n      }\n    })();\n  }\n  /* Original using depreciated window.web3 methods\n    checkAndInstantiateWeb3 = () => {\n    // Checking if Web3 has been injected by the browser (Mist/MetaMask)\n    if (typeof window.web3 !== 'undefined') {\n      console.warn(\n        'Using web3 detected from external source. If you find that your accounts don\\'t appear or you have 0 MetaCoin, ensure you\\'ve configured that source properly. If using MetaMask, see the following link. Feel free to delete this warning. :) http://truffleframework.com/tutorials/truffle-and-metamask'\n      );\n      // Use Mist/MetaMask's provider\n      this.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      console.warn(\n        'No web3 detected. Falling back to ${environment.HttpProvider}. You should remove this fallback when you deploy live, as it\\'s inherently insecure. Consider switching to Metamask for development. More info here: http://truffleframework.com/tutorials/truffle-and-metamask'\n      );\n      // fallback - use your fallback strategy (local node / hosted node + in-dapp id mgmt / fail)\n      this.web3 = new Web3(\n        new Web3.providers.HttpProvider(environment.HttpProvider)\n      );\n    }\n  }; */\n\n\n  getAccounts() {\n    return Observable.create(observer => {\n      this.web3.eth.getAccounts((err, accs) => {\n        if (err != null) {\n          observer.error('There was an error fetching your accounts.');\n        }\n\n        if (accs.length === 0) {\n          observer.error('Couldn\\'t get any accounts! Make sure your Ethereum client is configured correctly.');\n        }\n        /* need to set an account as default account\n          this is the account used to send/sign transactions\n          first account returned, if they have multiple metamask accounts it\n          will be thir first one */\n\n\n        this.web3.eth.defaultAccount = accs[0]; //console.log(this.web3.eth.defaultAccount);\n\n        observer.next(accs);\n        observer.complete();\n      });\n    });\n  }\n\n  static ɵfac = function Web3Service_Factory(t) {\n    return new (t || Web3Service)();\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: Web3Service,\n    factory: Web3Service.ɵfac,\n    providedIn: 'root'\n  });\n}","map":null,"metadata":{},"sourceType":"module"}