{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/Dapp/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst last = require('it-last');\n/**\n * @param {Object} context\n * @param {import('ipfs-core-types/src/root').API[\"addAll\"]} context.addAll\n */\n\n\nmodule.exports = ({\n  addAll\n}) => {\n  /**\n   * @type {import('ipfs-core-types/src/root').API[\"add\"]}\n   */\n  function add(_x) {\n    return _add.apply(this, arguments);\n  }\n\n  function _add() {\n    _add = _asyncToGenerator(function* (entry, options = {}) {\n      // @ts-ignore TODO: https://github.com/ipfs/js-ipfs/issues/3290\n      const result = yield last(addAll(entry, options)); // Note this should never happen as `addAll` should yield at least one item\n      // but to satisfy type checker we perfom this check and for good measure\n      // throw an error in case it does happen.\n\n      if (result == null) {\n        throw Error('Failed to add a file, if you see this please report a bug');\n      }\n\n      return result;\n    });\n    return _add.apply(this, arguments);\n  }\n\n  return add;\n};","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Dapp/node_modules/ipfs-core/src/components/add.js"],"names":["last","require","module","exports","addAll","add","entry","options","result","Error"],"mappings":"AAAA;;;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,SAAD,CAApB;AAEA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAgB;AAC/B;AACF;AACA;AAHiC,WAIhBC,GAJgB;AAAA;AAAA;;AAAA;AAAA,6BAI/B,WAAoBC,KAApB,EAA2BC,OAAO,GAAG,EAArC,EAAyC;AACvC;AACA,YAAMC,MAAM,SAASR,IAAI,CAACI,MAAM,CAACE,KAAD,EAAQC,OAAR,CAAP,CAAzB,CAFuC,CAGvC;AACA;AACA;;AACA,UAAIC,MAAM,IAAI,IAAd,EAAoB;AAClB,cAAMC,KAAK,CAAC,2DAAD,CAAX;AACD;;AAED,aAAOD,MAAP;AACD,KAf8B;AAAA;AAAA;;AAiB/B,SAAOH,GAAP;AACD,CAlBD","sourcesContent":["'use strict'\n\nconst last = require('it-last')\n\n/**\n * @param {Object} context\n * @param {import('ipfs-core-types/src/root').API[\"addAll\"]} context.addAll\n */\nmodule.exports = ({ addAll }) => {\n  /**\n   * @type {import('ipfs-core-types/src/root').API[\"add\"]}\n   */\n  async function add (entry, options = {}) {\n    // @ts-ignore TODO: https://github.com/ipfs/js-ipfs/issues/3290\n    const result = await last(addAll(entry, options))\n    // Note this should never happen as `addAll` should yield at least one item\n    // but to satisfy type checker we perfom this check and for good measure\n    // throw an error in case it does happen.\n    if (result == null) {\n      throw Error('Failed to add a file, if you see this please report a bug')\n    }\n\n    return result\n  }\n\n  return add\n}\n"]},"metadata":{},"sourceType":"script"}