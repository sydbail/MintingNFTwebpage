{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst Service = require('../utils/service');\n/**\n * @param {Object} config\n * @param {import('../types').NetworkService} config.network\n * @param {import('peer-id')} config.peerId\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../types').Print} config.print\n * @param {import('../types').Preload} config.preload\n * @param {import('../types').MfsPreload} config.mfsPreload\n * @param {import('./ipns')} config.ipns\n * @param {import('libp2p/src/keychain')} config.keychain\n * @param {import('../types').Options} config.options\n */\n\n\nmodule.exports = ({\n  network,\n  preload,\n  peerId,\n  keychain,\n  repo,\n  ipns,\n  mfsPreload,\n  print,\n  options\n}) => {\n  /**\n   * @type {import('ipfs-core-types/src/root').API[\"start\"]}\n   */\n  const start = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(function* () {\n      const {\n        libp2p\n      } = yield Service.start(network, {\n        peerId,\n        repo,\n        print,\n        options\n      });\n      yield Promise.all([ipns.startOnline({\n        keychain,\n        libp2p,\n        peerId,\n        repo\n      }), preload.start(), mfsPreload.start()]);\n    });\n\n    return function start() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return start;\n};","map":null,"metadata":{},"sourceType":"script"}