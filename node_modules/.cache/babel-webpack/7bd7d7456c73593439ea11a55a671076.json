{"ast":null,"code":"'use strict';\n\nvar _awaitAsyncGenerator = require(\"/Users/sydneybailey/Internship/Dapp/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\").default;\n\nvar _wrapAsyncGenerator = require(\"/Users/sydneybailey/Internship/Dapp/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/Dapp/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nconst abortSignal = require('../lib/abort-signal');\n\nconst multipartRequest = require('../lib/multipart-request');\n\nconst {\n  AbortController\n} = require('native-abort-controller');\n\nconst {\n  CID\n} = require('multiformats/cid');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dag').API<HTTPClientExtraOptions>} DAGAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {DAGAPI[\"import\"]}\n   */\n  function dagImport(_x) {\n    return _dagImport.apply(this, arguments);\n  }\n\n  function _dagImport() {\n    _dagImport = _wrapAsyncGenerator(function* (source, options = {}) {\n      const controller = new AbortController();\n      const signal = abortSignal(controller.signal, options.signal);\n      const {\n        headers,\n        body\n      } = yield _awaitAsyncGenerator(multipartRequest(source, controller, options.headers));\n      const res = yield _awaitAsyncGenerator(api.post('dag/import', {\n        timeout: options.timeout,\n        signal,\n        headers,\n        body,\n        searchParams: toUrlSearchParams({\n          'pin-roots': options.pinRoots\n        })\n      }));\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n\n      var _iteratorError;\n\n      try {\n        for (var _iterator = _asyncIterator(res.ndjson()), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n          const {\n            Root\n          } = _value;\n\n          if (Root !== undefined) {\n            const {\n              Cid: {\n                '/': Cid\n              },\n              PinErrorMsg\n            } = Root;\n            yield {\n              root: {\n                cid: CID.parse(Cid),\n                pinErrorMsg: PinErrorMsg\n              }\n            };\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            yield _awaitAsyncGenerator(_iterator.return());\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    });\n    return _dagImport.apply(this, arguments);\n  }\n\n  return dagImport;\n});","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Dapp/node_modules/ipfs-http-client/src/dag/import.js"],"names":["configure","require","toUrlSearchParams","abortSignal","multipartRequest","AbortController","CID","module","exports","api","dagImport","source","options","controller","signal","headers","body","res","post","timeout","searchParams","pinRoots","ndjson","Root","undefined","Cid","PinErrorMsg","root","cid","parse","pinErrorMsg"],"mappings":"AAAA;;;;;;;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAMC,iBAAiB,GAAGD,OAAO,CAAC,6BAAD,CAAjC;;AACA,MAAME,WAAW,GAAGF,OAAO,CAAC,qBAAD,CAA3B;;AACA,MAAMG,gBAAgB,GAAGH,OAAO,CAAC,0BAAD,CAAhC;;AACA,MAAM;AAAEI,EAAAA;AAAF,IAAsBJ,OAAO,CAAC,yBAAD,CAAnC;;AACA,MAAM;AAAEK,EAAAA;AAAF,IAAUL,OAAO,CAAC,kBAAD,CAAvB;AAEA;AACA;AACA;AACA;;;AAEAM,MAAM,CAACC,OAAP,GAAiBR,SAAS,CAACS,GAAG,IAAI;AAChC;AACF;AACA;AAHkC,WAIfC,SAJe;AAAA;AAAA;;AAAA;AAAA,qCAIhC,WAA4BC,MAA5B,EAAoCC,OAAO,GAAG,EAA9C,EAAkD;AAChD,YAAMC,UAAU,GAAG,IAAIR,eAAJ,EAAnB;AACA,YAAMS,MAAM,GAAGX,WAAW,CAACU,UAAU,CAACC,MAAZ,EAAoBF,OAAO,CAACE,MAA5B,CAA1B;AACA,YAAM;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,qCAA0BZ,gBAAgB,CAACO,MAAD,EAASE,UAAT,EAAqBD,OAAO,CAACG,OAA7B,CAA1C,CAAN;AAEA,YAAME,GAAG,8BAASR,GAAG,CAACS,IAAJ,CAAS,YAAT,EAAuB;AACvCC,QAAAA,OAAO,EAAEP,OAAO,CAACO,OADsB;AAEvCL,QAAAA,MAFuC;AAGvCC,QAAAA,OAHuC;AAIvCC,QAAAA,IAJuC;AAKvCI,QAAAA,YAAY,EAAElB,iBAAiB,CAAC;AAAE,uBAAaU,OAAO,CAACS;AAAvB,SAAD;AALQ,OAAvB,CAAT,CAAT;AALgD;AAAA;;AAAA;;AAAA;AAahD,4CAA6BJ,GAAG,CAACK,MAAJ,EAA7B,gOAA2C;AAAA,gBAA1B;AAAEC,YAAAA;AAAF,WAA0B;;AACzC,cAAIA,IAAI,KAAKC,SAAb,EAAwB;AACtB,kBAAM;AAAEC,cAAAA,GAAG,EAAE;AAAE,qBAAKA;AAAP,eAAP;AAAqBC,cAAAA;AAArB,gBAAqCH,IAA3C;AAEA,kBAAM;AACJI,cAAAA,IAAI,EAAE;AACJC,gBAAAA,GAAG,EAAEtB,GAAG,CAACuB,KAAJ,CAAUJ,GAAV,CADD;AAEJK,gBAAAA,WAAW,EAAEJ;AAFT;AADF,aAAN;AAMD;AACF;AAxB+C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAyBjD,KA7B+B;AAAA;AAAA;;AA+BhC,SAAOhB,SAAP;AACD,CAhCyB,CAA1B","sourcesContent":["'use strict'\n\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst abortSignal = require('../lib/abort-signal')\nconst multipartRequest = require('../lib/multipart-request')\nconst { AbortController } = require('native-abort-controller')\nconst { CID } = require('multiformats/cid')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dag').API<HTTPClientExtraOptions>} DAGAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {DAGAPI[\"import\"]}\n   */\n  async function * dagImport (source, options = {}) {\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n    const { headers, body } = await multipartRequest(source, controller, options.headers)\n\n    const res = await api.post('dag/import', {\n      timeout: options.timeout,\n      signal,\n      headers,\n      body,\n      searchParams: toUrlSearchParams({ 'pin-roots': options.pinRoots })\n    })\n\n    for await (const { Root } of res.ndjson()) {\n      if (Root !== undefined) {\n        const { Cid: { '/': Cid }, PinErrorMsg } = Root\n\n        yield {\n          root: {\n            cid: CID.parse(Cid),\n            pinErrorMsg: PinErrorMsg\n          }\n        }\n      }\n    }\n  }\n\n  return dagImport\n})\n"]},"metadata":{},"sourceType":"script"}