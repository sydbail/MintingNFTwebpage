{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst {\n  source: abortable\n} = require('abortable-iterator');\n\nconst debug = require('debug');\n\nconst log = debug('libp2p:stream:converter');\n/**\n * @typedef {import('multiaddr').Multiaddr} Multiaddr\n * @typedef {import('libp2p-interfaces/src/stream-muxer/types').MuxedStream} MuxedStream\n *\n * @typedef {Object} Timeline\n * @property {number} open - connection opening timestamp.\n * @property {number} [upgraded] - connection upgraded timestamp.\n * @property {number} [close]\n */\n\n/**\n * Convert a duplex iterable into a MultiaddrConnection.\n * https://github.com/libp2p/interface-transport#multiaddrconnection\n *\n * @param {object} streamProperties\n * @param {MuxedStream} streamProperties.stream\n * @param {Multiaddr} streamProperties.remoteAddr\n * @param {Multiaddr} streamProperties.localAddr\n * @param {object} [options]\n * @param {AbortSignal} [options.signal]\n * @returns {import('libp2p-interfaces/src/transport/types').MultiaddrConnection}\n */\n\nfunction streamToMaConnection({\n  stream,\n  remoteAddr,\n  localAddr\n}, options = {}) {\n  const {\n    sink,\n    source\n  } = stream;\n  const maConn = {\n    /**\n     * @param {Uint8Array} source\n     */\n    sink(source) {\n      return _asyncToGenerator(function* () {\n        if (options.signal) {\n          // @ts-ignore ts infers source template will be a number\n          source = abortable(source, options.signal);\n        }\n\n        try {\n          yield sink(source);\n        } catch (err) {\n          // If aborted we can safely ignore\n          if (err.type !== 'aborted') {\n            // If the source errored the socket will already have been destroyed by\n            // toIterable.duplex(). If the socket errored it will already be\n            // destroyed. There's nothing to do here except log the error & return.\n            log(err);\n          }\n        }\n\n        close();\n      })();\n    },\n\n    source: options.signal ? abortable(source, options.signal) : source,\n    conn: stream,\n    localAddr,\n    remoteAddr,\n\n    /** @type {Timeline} */\n    timeline: {\n      open: Date.now(),\n      close: undefined\n    },\n\n    close() {\n      sink(new Uint8Array(0));\n      return close();\n    }\n\n  };\n\n  function close() {\n    if (!maConn.timeline.close) {\n      maConn.timeline.close = Date.now();\n    }\n\n    return Promise.resolve();\n  }\n\n  return maConn;\n}\n\nmodule.exports = streamToMaConnection;","map":null,"metadata":{},"sourceType":"script"}