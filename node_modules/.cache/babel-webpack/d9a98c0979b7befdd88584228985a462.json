{"ast":null,"code":"'use strict';\n/**\n * Collects all values from an (async) iterable into an array and returns it.\n *\n * @template T\n * @param {AsyncIterable<T>|Iterable<T>} source\n */\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nconst all = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (source) {\n    const arr = [];\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n\n    var _iteratorError;\n\n    try {\n      for (var _iterator = _asyncIterator(source), _step, _value; _step = yield _iterator.next(), _iteratorNormalCompletion = _step.done, _value = yield _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n        const entry = _value;\n        arr.push(entry);\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          yield _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return arr;\n  });\n\n  return function all(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nmodule.exports = all;","map":{"version":3,"sources":["/Users/sydneybailey/Internship/contract-testing/node_modules/it-all/index.js"],"names":["all","source","arr","entry","push","module","exports"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;AACA,MAAMA,GAAG;AAAA,+BAAG,WAAOC,MAAP,EAAkB;AAC5B,UAAMC,GAAG,GAAG,EAAZ;AAD4B;AAAA;;AAAA;;AAAA;AAG5B,0CAA0BD,MAA1B,oLAAkC;AAAA,cAAjBE,KAAiB;AAChCD,QAAAA,GAAG,CAACE,IAAJ,CAASD,KAAT;AACD;AAL2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAO5B,WAAOD,GAAP;AACD,GARQ;;AAAA,kBAAHF,GAAG;AAAA;AAAA;AAAA,GAAT;;AAUAK,MAAM,CAACC,OAAP,GAAiBN,GAAjB","sourcesContent":["'use strict'\n\n/**\n * Collects all values from an (async) iterable into an array and returns it.\n *\n * @template T\n * @param {AsyncIterable<T>|Iterable<T>} source\n */\nconst all = async (source) => {\n  const arr = []\n\n  for await (const entry of source) {\n    arr.push(entry)\n  }\n\n  return arr\n}\n\nmodule.exports = all\n"]},"metadata":{},"sourceType":"script"}