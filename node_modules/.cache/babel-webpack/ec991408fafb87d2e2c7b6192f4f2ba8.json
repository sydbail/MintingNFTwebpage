{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst protocols = require('../protocols-table');\n\nconst {\n  code: dnsaddrCode\n} = protocols('dnsaddr');\n/**\n * @typedef {import('..').Multiaddr} Multiaddr\n */\n\n/**\n * Resolver for dnsaddr addresses.\n *\n * @param {Multiaddr} addr\n * @returns {Promise<string[]>}\n */\n\nfunction dnsaddrResolver(_x) {\n  return _dnsaddrResolver.apply(this, arguments);\n}\n\nfunction _dnsaddrResolver() {\n  _dnsaddrResolver = _asyncToGenerator(function* (addr) {\n    const Resolver = require('./dns');\n\n    const resolver = new Resolver();\n    const peerId = addr.getPeerId();\n    const [, hostname] = addr.stringTuples().find(([proto]) => proto === dnsaddrCode) || [];\n    const records = yield resolver.resolveTxt(`_dnsaddr.${hostname}`);\n    let addresses = records.flat().map(a => a.split('=')[1]);\n\n    if (peerId) {\n      addresses = addresses.filter(entry => entry.includes(peerId));\n    }\n\n    return addresses;\n  });\n  return _dnsaddrResolver.apply(this, arguments);\n}\n\nmodule.exports = {\n  dnsaddrResolver\n};","map":null,"metadata":{},"sourceType":"script"}