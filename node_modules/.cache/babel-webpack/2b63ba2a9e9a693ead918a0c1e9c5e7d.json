{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst dagPb = require('@ipld/dag-pb');\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @param {Object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n */\n\n\nmodule.exports = ({\n  repo,\n  preload\n}) => {\n  const get = require('./get')({\n    repo,\n    preload\n  });\n  /**\n   * @type {import('ipfs-core-types/src/object').API[\"stat\"]}\n   */\n\n\n  function stat(_x) {\n    return _stat.apply(this, arguments);\n  }\n\n  function _stat() {\n    _stat = _asyncToGenerator(function* (cid, options = {}) {\n      const node = yield get(cid, options);\n      const serialized = dagPb.encode(node);\n      const blockSize = serialized.length;\n      const linkLength = node.Links.reduce((a, l) => a + (l.Tsize || 0), 0);\n      return {\n        Hash: cid,\n        NumLinks: node.Links.length,\n        BlockSize: blockSize,\n        LinksSize: blockSize - (node.Data || []).length,\n        DataSize: (node.Data || []).length,\n        CumulativeSize: blockSize + linkLength\n      };\n    });\n    return _stat.apply(this, arguments);\n  }\n\n  return withTimeoutOption(stat);\n};","map":null,"metadata":{},"sourceType":"script"}