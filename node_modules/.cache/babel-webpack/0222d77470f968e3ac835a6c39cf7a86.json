{"ast":null,"code":"'use strict';\n\nvar _awaitAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\").default;\n\nvar _wrapAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nconst {\n  Multiaddr\n} = require('multiaddr');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nconst {\n  Provider\n} = require('./response-types');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {DHTAPI[\"findProvs\"]}\n   */\n  function findProvs(_x) {\n    return _findProvs.apply(this, arguments);\n  }\n\n  function _findProvs() {\n    _findProvs = _wrapAsyncGenerator(function* (cid, options = {}) {\n      const res = yield _awaitAsyncGenerator(api.post('dht/findprovs', {\n        timeout: options.timeout,\n        signal: options.signal,\n        searchParams: toUrlSearchParams({\n          arg: cid.toString(),\n          ...options\n        }),\n        headers: options.headers\n      }));\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n\n      var _iteratorError;\n\n      try {\n        for (var _iterator = _asyncIterator(res.ndjson()), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n          const message = _value;\n\n          if (message.Type === Provider && message.Responses) {\n            for (const {\n              ID,\n              Addrs\n            } of message.Responses) {\n              yield {\n                id: ID,\n                addrs: (Addrs || []).map((\n                /** @type {string} **/\n                a) => new Multiaddr(a))\n              };\n            }\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            yield _awaitAsyncGenerator(_iterator.return());\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    });\n    return _findProvs.apply(this, arguments);\n  }\n\n  return findProvs;\n});","map":{"version":3,"sources":["/Users/sydneybailey/Internship/contract-testing/node_modules/ipfs-http-client/src/dht/find-provs.js"],"names":["Multiaddr","require","configure","toUrlSearchParams","Provider","module","exports","api","findProvs","cid","options","res","post","timeout","signal","searchParams","arg","toString","headers","ndjson","message","Type","Responses","ID","Addrs","id","addrs","map","a"],"mappings":"AAAA;;;;;;;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAgBC,OAAO,CAAC,WAAD,CAA7B;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,6BAAD,CAAjC;;AACA,MAAM;AAAEG,EAAAA;AAAF,IAAeH,OAAO,CAAC,kBAAD,CAA5B;AAEA;AACA;AACA;AACA;;;AAEAI,MAAM,CAACC,OAAP,GAAiBJ,SAAS,CAACK,GAAG,IAAI;AAChC;AACF;AACA;AAHkC,WAIfC,SAJe;AAAA;AAAA;;AAAA;AAAA,qCAIhC,WAA4BC,GAA5B,EAAiCC,OAAO,GAAG,EAA3C,EAA+C;AAC7C,YAAMC,GAAG,8BAASJ,GAAG,CAACK,IAAJ,CAAS,eAAT,EAA0B;AAC1CC,QAAAA,OAAO,EAAEH,OAAO,CAACG,OADyB;AAE1CC,QAAAA,MAAM,EAAEJ,OAAO,CAACI,MAF0B;AAG1CC,QAAAA,YAAY,EAAEZ,iBAAiB,CAAC;AAC9Ba,UAAAA,GAAG,EAAEP,GAAG,CAACQ,QAAJ,EADyB;AAE9B,aAAGP;AAF2B,SAAD,CAHW;AAO1CQ,QAAAA,OAAO,EAAER,OAAO,CAACQ;AAPyB,OAA1B,CAAT,CAAT;AAD6C;AAAA;;AAAA;;AAAA;AAW7C,4CAA4BP,GAAG,CAACQ,MAAJ,EAA5B,gOAA0C;AAAA,gBAAzBC,OAAyB;;AACxC,cAAIA,OAAO,CAACC,IAAR,KAAiBjB,QAAjB,IAA6BgB,OAAO,CAACE,SAAzC,EAAoD;AAClD,iBAAK,MAAM;AAAEC,cAAAA,EAAF;AAAMC,cAAAA;AAAN,aAAX,IAA4BJ,OAAO,CAACE,SAApC,EAA+C;AAC7C,oBAAM;AACJG,gBAAAA,EAAE,EAAEF,EADA;AAEJG,gBAAAA,KAAK,EAAE,CAACF,KAAK,IAAI,EAAV,EAAcG,GAAd,CAAkB;AAAC;AAAuBC,gBAAAA,CAAxB,KAA8B,IAAI5B,SAAJ,CAAc4B,CAAd,CAAhD;AAFH,eAAN;AAID;AACF;AACF;AApB4C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqB9C,KAzB+B;AAAA;AAAA;;AA2BhC,SAAOpB,SAAP;AACD,CA5ByB,CAA1B","sourcesContent":["'use strict'\n\nconst { Multiaddr } = require('multiaddr')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst { Provider } = require('./response-types')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {DHTAPI[\"findProvs\"]}\n   */\n  async function * findProvs (cid, options = {}) {\n    const res = await api.post('dht/findprovs', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cid.toString(),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (const message of res.ndjson()) {\n      if (message.Type === Provider && message.Responses) {\n        for (const { ID, Addrs } of message.Responses) {\n          yield {\n            id: ID,\n            addrs: (Addrs || []).map((/** @type {string} **/ a) => new Multiaddr(a))\n          }\n        }\n      }\n    }\n  }\n\n  return findProvs\n})\n"]},"metadata":{},"sourceType":"script"}