{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.stream = exports.Stream = void 0;\n\nconst StreamHelpers_1 = require(\"./StreamHelpers\");\n\nclass Stream {\n  constructor(g) {\n    this.g = g;\n  }\n\n  static nil() {\n    return new Stream(StreamHelpers_1.nilHelper());\n  }\n\n  static of(...elements) {\n    return new Stream(elements[Symbol.iterator]());\n  }\n\n  next() {\n    return this.g.next();\n  }\n\n  [Symbol.iterator]() {\n    return this.g;\n  }\n\n  map(f) {\n    return new Stream(StreamHelpers_1.mapHelper(this.g, f));\n  }\n\n  flatMap(f) {\n    return new Stream(StreamHelpers_1.flatMapHelper(this.g, f));\n  }\n\n  dropWhile(f) {\n    let foundEligible = false;\n\n    function* helper(v) {\n      if (foundEligible || !f(v)) {\n        foundEligible = true;\n        yield v;\n      }\n    }\n\n    return this.flatMap(helper);\n  }\n\n  drop(n) {\n    let idx = 0;\n\n    function helper() {\n      return idx++ < n;\n    }\n\n    return this.dropWhile(helper);\n  }\n\n  takeWhile(f) {\n    return new Stream(StreamHelpers_1.takeWhileHelper(this.g, f));\n  }\n\n  take(n) {\n    return new Stream(StreamHelpers_1.takeNHelper(this.g, n));\n  }\n\n  filter(f) {\n    return new Stream(StreamHelpers_1.filterHelper(this.g, f));\n  }\n\n  every(f) {\n    for (const v of this.g) {\n      if (!f(v)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  has(f) {\n    for (const v of this.g) {\n      if (f(v)) {\n        return [true, v];\n      }\n    }\n\n    return [false, null];\n  }\n\n  join(...others) {\n    return new Stream(StreamHelpers_1.joinHelper(this.g, others));\n  }\n\n  getNthOrLast(nth) {\n    let remaining = nth;\n    let last = null;\n\n    for (const v of this.g) {\n      if (remaining-- === 0) return v;\n      last = v;\n    }\n\n    return last;\n  }\n\n}\n\nexports.Stream = Stream;\n\nfunction stream(g) {\n  return new Stream(g);\n}\n\nexports.stream = stream;","map":null,"metadata":{},"sourceType":"script"}