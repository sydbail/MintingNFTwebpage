{"ast":null,"code":"'use strict'; // @ts-ignore\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst Heap = require('heap'); // @ts-ignore\n\n\nconst distance = require('xor-distance');\n\nconst debug = require('debug');\n\nconst utils = require('../utils');\n\nconst log = debug('libp2p:dht:peer-queue');\n/**\n * @typedef {import('peer-id')} PeerId\n */\n\n/**\n * PeerQueue is a heap that sorts its entries (PeerIds) by their\n * xor distance to the inital provided key.\n */\n\nclass PeerQueue {\n  /**\n   * Create from a given peer id.\n   *\n   * @param {PeerId} id\n   * @returns {Promise<PeerQueue>}\n   */\n  static fromPeerId(id) {\n    return _asyncToGenerator(function* () {\n      const key = yield utils.convertPeerId(id);\n      return new PeerQueue(key);\n    })();\n  }\n  /**\n   * Create from a given Uint8Array.\n   *\n   * @param {Uint8Array} keyBuffer\n   * @returns {Promise<PeerQueue>}\n   */\n\n\n  static fromKey(keyBuffer) {\n    return _asyncToGenerator(function* () {\n      const key = yield utils.convertBuffer(keyBuffer);\n      return new PeerQueue(key);\n    })();\n  }\n  /**\n   * Create a new PeerQueue.\n   *\n   * @param {Uint8Array} from - The sha2-256 encoded peer id\n   */\n\n\n  constructor(from) {\n    log('create: %b', from);\n    this.from = from;\n    this.heap = new Heap(utils.xorCompare);\n  }\n  /**\n   * Add a new PeerId to the queue.\n   *\n   * @param {PeerId} id\n   */\n\n\n  enqueue(id) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      log('enqueue %s', id.toB58String());\n      const key = yield utils.convertPeerId(id);\n      const el = {\n        id: id,\n        distance: distance(_this.from, key)\n      };\n\n      _this.heap.push(el);\n    })();\n  }\n  /**\n   * Returns the closest peer to the `from` peer.\n   *\n   * @returns {PeerId}\n   */\n\n\n  dequeue() {\n    const el = this.heap.pop();\n    log('dequeue %s', el.id.toB58String());\n    return el.id;\n  }\n\n  get length() {\n    return this.heap.size();\n  }\n\n}\n\nmodule.exports = PeerQueue;","map":null,"metadata":{},"sourceType":"script"}