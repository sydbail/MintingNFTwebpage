{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst configure = require('../../lib/configure');\n\nconst toUrlSearchParams = require('../../lib/to-url-search-params');\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object/patch').API<HTTPClientExtraOptions>} ObjectPatchAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {ObjectPatchAPI[\"addLink\"]}\n   */\n  function addLink(_x, _x2) {\n    return _addLink.apply(this, arguments);\n  }\n\n  function _addLink() {\n    _addLink = _asyncToGenerator(function* (cid, dLink, options = {}) {\n      const res = yield api.post('object/patch/add-link', {\n        timeout: options.timeout,\n        signal: options.signal,\n        searchParams: toUrlSearchParams({\n          arg: [`${cid}`, // @ts-ignore loose types\n          dLink.Name || dLink.name || '', // @ts-ignore loose types\n          (dLink.Hash || dLink.cid || '').toString() || null],\n          ...options\n        }),\n        headers: options.headers\n      });\n      const {\n        Hash\n      } = yield res.json();\n      return CID.parse(Hash);\n    });\n    return _addLink.apply(this, arguments);\n  }\n\n  return addLink;\n});","map":null,"metadata":{},"sourceType":"script"}