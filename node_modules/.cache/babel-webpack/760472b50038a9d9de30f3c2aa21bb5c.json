{"ast":null,"code":"'use strict';\n\nvar _awaitAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\").default;\n\nvar _wrapAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin').API<HTTPClientExtraOptions>} PinAPI\n */\n\n/**\n * @param {string} type\n * @param {string} cid\n * @param {Record<string, string>} metadata\n */\n\n\nfunction toPin(type, cid, metadata) {\n  /** @type {import('ipfs-core-types/src/pin').LsResult} */\n  const pin = {\n    type,\n    cid: CID.parse(cid)\n  };\n\n  if (metadata) {\n    pin.metadata = metadata;\n  }\n\n  return pin;\n}\n\nmodule.exports = configure(api => {\n  /**\n   * @type {PinAPI[\"ls\"]}\n   */\n  function ls() {\n    return _ls.apply(this, arguments);\n  }\n\n  function _ls() {\n    _ls = _wrapAsyncGenerator(function* (options = {}) {\n      /** @type {any[]} */\n      let paths = [];\n\n      if (options.paths) {\n        paths = Array.isArray(options.paths) ? options.paths : [options.paths];\n      }\n\n      const res = yield _awaitAsyncGenerator(api.post('pin/ls', {\n        timeout: options.timeout,\n        signal: options.signal,\n        searchParams: toUrlSearchParams({ ...options,\n          arg: paths.map(path => `${path}`),\n          stream: true\n        }),\n        headers: options.headers\n      }));\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n\n      var _iteratorError;\n\n      try {\n        for (var _iterator = _asyncIterator(res.ndjson()), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n          const pin = _value;\n\n          if (pin.Keys) {\n            // non-streaming response\n            for (const cid of Object.keys(pin.Keys)) {\n              yield toPin(pin.Keys[cid].Type, cid, pin.Keys[cid].Metadata);\n            }\n\n            return;\n          }\n\n          yield toPin(pin.Type, pin.Cid, pin.Metadata);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            yield _awaitAsyncGenerator(_iterator.return());\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    });\n    return _ls.apply(this, arguments);\n  }\n\n  return ls;\n});","map":null,"metadata":{},"sourceType":"script"}