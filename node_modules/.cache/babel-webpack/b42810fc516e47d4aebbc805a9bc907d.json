{"ast":null,"code":"'use strict';\n\nvar _awaitAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\").default;\n\nvar _wrapAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nconst abortSignal = require('../lib/abort-signal');\n\nconst multipartRequest = require('../lib/multipart-request');\n\nconst {\n  AbortController\n} = require('native-abort-controller');\n\nconst {\n  CID\n} = require('multiformats/cid');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dag').API<HTTPClientExtraOptions>} DAGAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {DAGAPI[\"import\"]}\n   */\n  function dagImport(_x) {\n    return _dagImport.apply(this, arguments);\n  }\n\n  function _dagImport() {\n    _dagImport = _wrapAsyncGenerator(function* (source, options = {}) {\n      const controller = new AbortController();\n      const signal = abortSignal(controller.signal, options.signal);\n      const {\n        headers,\n        body\n      } = yield _awaitAsyncGenerator(multipartRequest(source, controller, options.headers));\n      const res = yield _awaitAsyncGenerator(api.post('dag/import', {\n        timeout: options.timeout,\n        signal,\n        headers,\n        body,\n        searchParams: toUrlSearchParams({\n          'pin-roots': options.pinRoots\n        })\n      }));\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n\n      var _iteratorError;\n\n      try {\n        for (var _iterator = _asyncIterator(res.ndjson()), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n          const {\n            Root\n          } = _value;\n\n          if (Root !== undefined) {\n            const {\n              Cid: {\n                '/': Cid\n              },\n              PinErrorMsg\n            } = Root;\n            yield {\n              root: {\n                cid: CID.parse(Cid),\n                pinErrorMsg: PinErrorMsg\n              }\n            };\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            yield _awaitAsyncGenerator(_iterator.return());\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    });\n    return _dagImport.apply(this, arguments);\n  }\n\n  return dagImport;\n});","map":null,"metadata":{},"sourceType":"script"}