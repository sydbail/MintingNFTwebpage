{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst cp = require('./cp');\n\nconst rm = require('./rm');\n\nconst mergeOptions = require('merge-options').bind({\n  ignoreUndefined: true\n});\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @typedef {import('multiformats/cid').CIDVersion} CIDVersion\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {object} DefaultOptions\n * @property {boolean} parents\n * @property {boolean} flush\n * @property {CIDVersion} cidVersion\n * @property {string} hashAlg\n * @property {number} shardSplitThreshold\n * @property {AbortSignal} [signal]\n * @property {number} [timeout]\n */\n\n/**\n * @type {DefaultOptions}\n */\n\n\nconst defaultOptions = {\n  parents: false,\n  flush: true,\n  cidVersion: 0,\n  hashAlg: 'sha2-256',\n  shardSplitThreshold: 1000\n};\n/**\n * @param {MfsContext} context\n */\n\nmodule.exports = context => {\n  /**\n   * @type {import('ipfs-core-types/src/files').API[\"mv\"]}\n   */\n  function mfsMv(_x, _x2) {\n    return _mfsMv.apply(this, arguments);\n  }\n\n  function _mfsMv() {\n    _mfsMv = _asyncToGenerator(function* (from, to, options = {}) {\n      /** @type {DefaultOptions} */\n      const opts = mergeOptions(defaultOptions, options);\n      yield cp(context)(from, to, opts);\n      yield rm(context)(from, { ...opts,\n        recursive: true\n      });\n    });\n    return _mfsMv.apply(this, arguments);\n  }\n\n  return withTimeoutOption(mfsMv);\n};","map":null,"metadata":{},"sourceType":"script"}