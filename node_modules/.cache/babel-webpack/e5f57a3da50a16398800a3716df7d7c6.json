{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nconst {\n  walkPath\n} = require('ipfs-unixfs-exporter');\n\nconst log = require('debug')('ipfs:mfs:utils:to-trail');\n/**\n * @typedef {import('../').MfsContext} MfsContext\n * @typedef {object} MfsTrail\n * @property {string} name\n * @property {import('multiformats/cid').CID} cid\n * @property {number} [size]\n * @property {string} [type]\n *\n * TODO: export supported types from unixfs-exporter and use for `type` above\n */\n\n/**\n * @param {MfsContext} context\n * @param {string} path\n * @returns {Promise<MfsTrail[]>}\n */\n\n\nconst toTrail = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (context, path) {\n    log(`Creating trail for path ${path}`);\n    const output = [];\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n\n    var _iteratorError;\n\n    try {\n      for (var _iterator = _asyncIterator(walkPath(path, context.repo.blocks)), _step, _value; _step = yield _iterator.next(), _iteratorNormalCompletion = _step.done, _value = yield _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n        const fsEntry = _value;\n        output.push({\n          name: fsEntry.name,\n          cid: fsEntry.cid,\n          size: fsEntry.size,\n          type: fsEntry.type\n        });\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          yield _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return output;\n  });\n\n  return function toTrail(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nmodule.exports = toTrail;","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Demo/node_modules/ipfs-core/src/components/files/utils/to-trail.js"],"names":["walkPath","require","log","toTrail","context","path","output","repo","blocks","fsEntry","push","name","cid","size","type","module","exports"],"mappings":"AAAA;;;;;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAeC,OAAO,CAAC,sBAAD,CAA5B;;AACA,MAAMC,GAAG,GAAGD,OAAO,CAAC,OAAD,CAAP,CAAiB,yBAAjB,CAAZ;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AACA,MAAME,OAAO;AAAA,+BAAG,WAAOC,OAAP,EAAgBC,IAAhB,EAAyB;AACvCH,IAAAA,GAAG,CAAE,2BAA0BG,IAAK,EAAjC,CAAH;AAEA,UAAMC,MAAM,GAAG,EAAf;AAHuC;AAAA;;AAAA;;AAAA;AAKvC,0CAA4BN,QAAQ,CAACK,IAAD,EAAOD,OAAO,CAACG,IAAR,CAAaC,MAApB,CAApC,oLAAiE;AAAA,cAAhDC,OAAgD;AAC/DH,QAAAA,MAAM,CAACI,IAAP,CAAY;AACVC,UAAAA,IAAI,EAAEF,OAAO,CAACE,IADJ;AAEVC,UAAAA,GAAG,EAAEH,OAAO,CAACG,GAFH;AAGVC,UAAAA,IAAI,EAAEJ,OAAO,CAACI,IAHJ;AAIVC,UAAAA,IAAI,EAAEL,OAAO,CAACK;AAJJ,SAAZ;AAMD;AAZsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAcvC,WAAOR,MAAP;AACD,GAfY;;AAAA,kBAAPH,OAAO;AAAA;AAAA;AAAA,GAAb;;AAiBAY,MAAM,CAACC,OAAP,GAAiBb,OAAjB","sourcesContent":["'use strict'\n\nconst { walkPath } = require('ipfs-unixfs-exporter')\nconst log = require('debug')('ipfs:mfs:utils:to-trail')\n\n/**\n * @typedef {import('../').MfsContext} MfsContext\n * @typedef {object} MfsTrail\n * @property {string} name\n * @property {import('multiformats/cid').CID} cid\n * @property {number} [size]\n * @property {string} [type]\n *\n * TODO: export supported types from unixfs-exporter and use for `type` above\n */\n\n/**\n * @param {MfsContext} context\n * @param {string} path\n * @returns {Promise<MfsTrail[]>}\n */\nconst toTrail = async (context, path) => {\n  log(`Creating trail for path ${path}`)\n\n  const output = []\n\n  for await (const fsEntry of walkPath(path, context.repo.blocks)) {\n    output.push({\n      name: fsEntry.name,\n      cid: fsEntry.cid,\n      size: fsEntry.size,\n      type: fsEntry.type\n    })\n  }\n\n  return output\n}\n\nmodule.exports = toTrail\n"]},"metadata":{},"sourceType":"script"}