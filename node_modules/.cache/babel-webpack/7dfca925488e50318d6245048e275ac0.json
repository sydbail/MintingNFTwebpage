{"ast":null,"code":"import _asyncToGenerator from \"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport varint from 'varint';\nimport { encode as dagCborEncode } from '@ipld/dag-cbor';\nexport function createHeader(roots) {\n  const headerBytes = dagCborEncode({\n    version: 1,\n    roots\n  });\n  const varintBytes = varint.encode(headerBytes.length);\n  const header = new Uint8Array(varintBytes.length + headerBytes.length);\n  header.set(varintBytes, 0);\n  header.set(headerBytes, varintBytes.length);\n  return header;\n}\n\nfunction createEncoder(writer) {\n  return {\n    setRoots(roots) {\n      return _asyncToGenerator(function* () {\n        const bytes = createHeader(roots);\n        yield writer.write(bytes);\n      })();\n    },\n\n    writeBlock(block) {\n      return _asyncToGenerator(function* () {\n        const {\n          cid,\n          bytes\n        } = block;\n        yield writer.write(new Uint8Array(varint.encode(cid.bytes.length + bytes.length)));\n        yield writer.write(cid.bytes);\n\n        if (bytes.length) {\n          yield writer.write(bytes);\n        }\n      })();\n    },\n\n    close() {\n      return _asyncToGenerator(function* () {\n        return writer.end();\n      })();\n    }\n\n  };\n}\n\nexport { createEncoder };","map":null,"metadata":{},"sourceType":"module"}