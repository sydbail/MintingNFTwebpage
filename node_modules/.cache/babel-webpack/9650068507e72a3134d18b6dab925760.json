{"ast":null,"code":"'use strict'; // dns-nodejs gets replaced by dns-browser when bundled\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst dns = require('../runtime/dns-nodejs');\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @param {string} domain\n * @returns {string}\n */\n\n\nfunction fqdnFixups(domain) {\n  // Allow resolution of .eth names via .eth.link\n  // More context at the go-ipfs counterpart: https://github.com/ipfs/go-ipfs/pull/6448\n  if (domain.endsWith('.eth')) {\n    domain = domain.replace(/.eth$/, '.eth.link');\n  }\n\n  return domain;\n}\n\nmodule.exports = () => {\n  /**\n   * @type {import('ipfs-core-types/src/root').API[\"dns\"]}\n   */\n  const resolveDNS = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(function* (domain, options = {\n      recursive: true\n    }) {\n      // eslint-disable-line require-await\n      if (typeof domain !== 'string') {\n        throw new Error('Invalid arguments, domain must be a string');\n      }\n\n      domain = fqdnFixups(domain);\n      return dns(domain, options);\n    });\n\n    return function resolveDNS(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return withTimeoutOption(resolveDNS);\n};","map":null,"metadata":{},"sourceType":"script"}