{"ast":null,"code":"'use strict';\n/* eslint-env browser */\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst {\n  Multiaddr\n} = require('multiaddr');\n\nconst {\n  isBrowser,\n  isWebWorker,\n  isNode\n} = require('ipfs-utils/src/env');\n\nconst {\n  default: parseDuration\n} = require('parse-duration');\n\nconst log = require('debug')('ipfs-http-client:lib:error-handler');\n\nconst HTTP = require('ipfs-utils/src/http');\n\nconst merge = require('merge-options').bind({\n  ignoreUndefined: true\n});\n\nconst toUrlString = require('ipfs-core-utils/src/to-url-string');\n\nconst http = require('http');\n\nconst https = require('https');\n\nconst DEFAULT_PROTOCOL = isBrowser || isWebWorker ? location.protocol : 'http';\nconst DEFAULT_HOST = isBrowser || isWebWorker ? location.hostname : 'localhost';\nconst DEFAULT_PORT = isBrowser || isWebWorker ? location.port : '5001';\n/**\n * @typedef {import('ipfs-utils/src/types').HTTPOptions} HTTPOptions\n * @typedef {import('../types').Options} Options\n */\n\n/**\n * @param {Options|URL|Multiaddr|string} [options]\n * @returns {Options}\n */\n\nconst normalizeOptions = (options = {}) => {\n  let url;\n  /** @type {Options} */\n\n  let opts = {};\n  let agent;\n\n  if (typeof options === 'string' || Multiaddr.isMultiaddr(options)) {\n    url = new URL(toUrlString(options));\n  } else if (options instanceof URL) {\n    url = options;\n  } else if (typeof options.url === 'string' || Multiaddr.isMultiaddr(options.url)) {\n    url = new URL(toUrlString(options.url));\n    opts = options;\n  } else if (options.url instanceof URL) {\n    url = options.url;\n    opts = options;\n  } else {\n    opts = options || {};\n    const protocol = (opts.protocol || DEFAULT_PROTOCOL).replace(':', '');\n    const host = (opts.host || DEFAULT_HOST).split(':')[0];\n    const port = opts.port || DEFAULT_PORT;\n    url = new URL(`${protocol}://${host}:${port}`);\n  }\n\n  if (opts.apiPath) {\n    url.pathname = opts.apiPath;\n  } else if (url.pathname === '/' || url.pathname === undefined) {\n    url.pathname = 'api/v0';\n  }\n\n  if (isNode) {\n    const Agent = url.protocol.startsWith('https') ? https.Agent : http.Agent;\n    agent = opts.agent || new Agent({\n      keepAlive: true,\n      // Similar to browsers which limit connections to six per host\n      maxSockets: 6\n    });\n  }\n\n  return { ...opts,\n    host: url.host,\n    protocol: url.protocol.replace(':', ''),\n    port: Number(url.port),\n    apiPath: url.pathname,\n    url,\n    agent\n  };\n};\n/**\n * @param {Response} response\n */\n\n\nconst errorHandler = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (response) {\n    let msg;\n\n    try {\n      if ((response.headers.get('Content-Type') || '').startsWith('application/json')) {\n        const data = yield response.json();\n        log(data);\n        msg = data.Message || data.message;\n      } else {\n        msg = yield response.text();\n      }\n    } catch (err) {\n      log('Failed to parse error response', err); // Failed to extract/parse error message from response\n\n      msg = err.message;\n    }\n    /** @type {Error} */\n\n\n    let error = new HTTP.HTTPError(response); // This is what go-ipfs returns where there's a timeout\n\n    if (msg && msg.includes('context deadline exceeded')) {\n      error = new HTTP.TimeoutError('Request timed out');\n    } // This also gets returned\n\n\n    if (msg && msg.includes('request timed out')) {\n      error = new HTTP.TimeoutError('Request timed out');\n    } // If we managed to extract a message from the response, use it\n\n\n    if (msg) {\n      error.message = msg;\n    }\n\n    throw error;\n  });\n\n  return function errorHandler(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nconst KEBAB_REGEX = /[A-Z\\u00C0-\\u00D6\\u00D8-\\u00DE]/g;\n/**\n * @param {string} str\n */\n\nconst kebabCase = str => {\n  return str.replace(KEBAB_REGEX, function (match) {\n    return '-' + match.toLowerCase();\n  });\n};\n/**\n * @param {string | number} value\n */\n\n\nconst parseTimeout = value => {\n  return typeof value === 'string' ? parseDuration(value) : value;\n};\n\nlet Client = /*#__PURE__*/(() => {\n  class Client extends HTTP {\n    /**\n     * @param {Options|URL|Multiaddr|string} [options]\n     */\n    constructor(options = {}) {\n      const opts = normalizeOptions(options);\n      super({\n        timeout: parseTimeout(opts.timeout || 0) || 60000 * 20,\n        headers: opts.headers,\n        base: `${opts.url}`,\n        handleError: errorHandler,\n        transformSearchParams: search => {\n          const out = new URLSearchParams(); // @ts-ignore https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams\n\n          for (const [key, value] of search) {\n            if (value !== 'undefined' && value !== 'null' && key !== 'signal') {\n              out.append(kebabCase(key), value);\n            } // @ts-ignore server timeouts are strings\n\n\n            if (key === 'timeout' && !isNaN(value)) {\n              out.append(kebabCase(key), value);\n            }\n          }\n\n          return out;\n        },\n        // @ts-ignore this can be a https agent or a http agent\n        agent: opts.agent\n      }); // @ts-ignore - cannot delete no-optional fields\n\n      delete this.get; // @ts-ignore - cannot delete no-optional fields\n\n      delete this.put; // @ts-ignore - cannot delete no-optional fields\n\n      delete this.delete; // @ts-ignore - cannot delete no-optional fields\n\n      delete this.options;\n      const fetch = this.fetch;\n      /**\n       * @param {string | Request} resource\n       * @param {HTTPOptions} options\n       */\n\n      this.fetch = (resource, options = {}) => {\n        if (typeof resource === 'string' && !resource.startsWith('/')) {\n          resource = `${opts.url}/${resource}`;\n        }\n\n        return fetch.call(this, resource, merge(options, {\n          method: 'POST'\n        }));\n      };\n    }\n\n  }\n\n  Client.errorHandler = errorHandler;\n  return Client;\n})();\nmodule.exports = Client;","map":null,"metadata":{},"sourceType":"script"}