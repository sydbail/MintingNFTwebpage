{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nvar _wrapAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\").default;\n\nvar _awaitAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nvar _asyncGeneratorDelegate = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncGeneratorDelegate\").default;\n\nconst map = require('it-map');\n\nconst errCode = require('err-code');\n\nconst {\n  PinTypes\n} = require('./pins');\n/**\n * @typedef {import('interface-datastore').Query} Query\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-datastore').Options} DatastoreOptions\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('./pins').Pins} Pins\n */\n\n/**\n *\n * @param {Blockstore} blockstore\n */\n\n\nmodule.exports = createPinnedBlockstore;\n/**\n * @param {Pins} pins\n * @param {Blockstore} store\n * @returns {Blockstore}\n */\n\nfunction createPinnedBlockstore(pins, store) {\n  return {\n    open() {\n      return store.open();\n    },\n\n    close() {\n      return store.close();\n    },\n\n    query(query, options) {\n      return store.query(query, options);\n    },\n\n    queryKeys(query, options) {\n      return store.queryKeys(query, options);\n    },\n\n    get(cid, options) {\n      return _asyncToGenerator(function* () {\n        return store.get(cid, options);\n      })();\n    },\n\n    getMany(cids, options) {\n      return _wrapAsyncGenerator(function* () {\n        yield* _asyncGeneratorDelegate(_asyncIterator(store.getMany(cids, options)), _awaitAsyncGenerator);\n      })();\n    },\n\n    put(cid, buf, options) {\n      return _asyncToGenerator(function* () {\n        yield store.put(cid, buf, options);\n      })();\n    },\n\n    putMany(pairs, options) {\n      return _wrapAsyncGenerator(function* () {\n        yield* _asyncGeneratorDelegate(_asyncIterator(store.putMany(pairs, options)), _awaitAsyncGenerator);\n      })();\n    },\n\n    has(cid, options) {\n      return store.has(cid, options);\n    },\n\n    delete(cid, options) {\n      return _asyncToGenerator(function* () {\n        yield ensureNotPinned(cid, pins);\n        return store.delete(cid, options);\n      })();\n    },\n\n    deleteMany(cids, options) {\n      return store.deleteMany(map(cids, /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (cid) {\n          yield ensureNotPinned(cid, pins);\n          return cid;\n        });\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }()), options);\n    },\n\n    batch() {\n      return store.batch();\n    }\n\n  };\n}\n/**\n * @param {CID} cid\n * @param {Pins} pins\n */\n\n\nfunction ensureNotPinned(_x2, _x3) {\n  return _ensureNotPinned.apply(this, arguments);\n}\n\nfunction _ensureNotPinned() {\n  _ensureNotPinned = _asyncToGenerator(function* (cid, pins) {\n    const {\n      pinned,\n      reason\n    } = yield pins.isPinnedWithType(cid, PinTypes.all);\n\n    if (pinned) {\n      throw errCode(new Error(`pinned: ${reason}`), 'ERR_BLOCK_PINNED');\n    }\n  });\n  return _ensureNotPinned.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"script"}