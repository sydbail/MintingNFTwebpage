{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nrequire('node-forge/lib/x509');\n\nconst forge = require('node-forge/lib/forge');\n\nconst pki = forge.pki;\n/**\n * Gets a self-signed X.509 certificate for the key.\n *\n * The output Uint8Array contains the PKCS #7 message in DER.\n *\n * TODO: move to libp2p-crypto package\n *\n * @param {KeyInfo} key - The id and name of the key\n * @param {RsaPrivateKey} privateKey - The naked key\n * @returns {Uint8Array}\n */\n\nconst certificateForKey = (key, privateKey) => {\n  const publicKey = pki.setRsaPublicKey(privateKey.n, privateKey.e);\n  const cert = pki.createCertificate();\n  cert.publicKey = publicKey;\n  cert.serialNumber = '01';\n  cert.validity.notBefore = new Date();\n  cert.validity.notAfter = new Date();\n  cert.validity.notAfter.setFullYear(cert.validity.notBefore.getFullYear() + 10);\n  const attrs = [{\n    name: 'organizationName',\n    value: 'ipfs'\n  }, {\n    shortName: 'OU',\n    value: 'keystore'\n  }, {\n    name: 'commonName',\n    value: key.id\n  }];\n  cert.setSubject(attrs);\n  cert.setIssuer(attrs);\n  cert.setExtensions([{\n    name: 'basicConstraints',\n    cA: true\n  }, {\n    name: 'keyUsage',\n    keyCertSign: true,\n    digitalSignature: true,\n    nonRepudiation: true,\n    keyEncipherment: true,\n    dataEncipherment: true\n  }, {\n    name: 'extKeyUsage',\n    serverAuth: true,\n    clientAuth: true,\n    codeSigning: true,\n    emailProtection: true,\n    timeStamping: true\n  }, {\n    name: 'nsCertType',\n    client: true,\n    server: true,\n    email: true,\n    objsign: true,\n    sslCA: true,\n    emailCA: true,\n    objCA: true\n  }]); // self-sign certificate\n\n  cert.sign(privateKey);\n  return cert;\n};\n/**\n * Finds the first item in a collection that is matched in the\n * `asyncCompare` function.\n *\n * `asyncCompare` is an async function that must\n * resolve to either `true` or `false`.\n *\n * @param {Array} array\n * @param {function(*)} asyncCompare - An async function that returns a boolean\n */\n\n\nfunction findAsync(_x, _x2) {\n  return _findAsync.apply(this, arguments);\n}\n\nfunction _findAsync() {\n  _findAsync = _asyncToGenerator(function* (array, asyncCompare) {\n    const promises = array.map(asyncCompare);\n    const results = yield Promise.all(promises);\n    const index = results.findIndex(result => result);\n    return array[index];\n  });\n  return _findAsync.apply(this, arguments);\n}\n\nmodule.exports = {\n  certificateForKey,\n  findAsync\n};","map":null,"metadata":{},"sourceType":"script"}