{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst last = require('it-last');\n/**\n * @param {Object} context\n * @param {import('ipfs-core-types/src/root').API[\"addAll\"]} context.addAll\n */\n\n\nmodule.exports = ({\n  addAll\n}) => {\n  /**\n   * @type {import('ipfs-core-types/src/root').API[\"add\"]}\n   */\n  function add(_x) {\n    return _add.apply(this, arguments);\n  }\n\n  function _add() {\n    _add = _asyncToGenerator(function* (entry, options = {}) {\n      // @ts-ignore TODO: https://github.com/ipfs/js-ipfs/issues/3290\n      const result = yield last(addAll(entry, options)); // Note this should never happen as `addAll` should yield at least one item\n      // but to satisfy type checker we perfom this check and for good measure\n      // throw an error in case it does happen.\n\n      if (result == null) {\n        throw Error('Failed to add a file, if you see this please report a bug');\n      }\n\n      return result;\n    });\n    return _add.apply(this, arguments);\n  }\n\n  return add;\n};","map":null,"metadata":{},"sourceType":"script"}