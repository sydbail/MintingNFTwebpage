{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst pReflect = require('p-reflect');\n\nconst pLimit = require('p-limit');\n\nmodule.exports = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (array, options = {}) {\n    const {\n      concurrency = Infinity\n    } = options;\n    const limit = pLimit(concurrency);\n    return Promise.all(array.map(element => {\n      if (element && typeof element.then === 'function') {\n        // eslint-disable-line promise/prefer-await-to-then\n        return pReflect(element);\n      }\n\n      if (typeof element === 'function') {\n        return pReflect(limit(() => element()));\n      }\n\n      return pReflect(Promise.resolve(element));\n    }));\n  });\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/p-settle/index.js"],"names":["pReflect","require","pLimit","module","exports","array","options","concurrency","Infinity","limit","Promise","all","map","element","then","resolve"],"mappings":"AAAA;;;;AACA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,WAAD,CAAxB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,SAAD,CAAtB;;AAEAE,MAAM,CAACC,OAAP;AAAA,+BAAiB,WAAOC,KAAP,EAAcC,OAAO,GAAG,EAAxB,EAA+B;AAC/C,UAAM;AAACC,MAAAA,WAAW,GAAGC;AAAf,QAA2BF,OAAjC;AACA,UAAMG,KAAK,GAAGP,MAAM,CAACK,WAAD,CAApB;AAEA,WAAOG,OAAO,CAACC,GAAR,CAAYN,KAAK,CAACO,GAAN,CAAUC,OAAO,IAAI;AACvC,UAAIA,OAAO,IAAI,OAAOA,OAAO,CAACC,IAAf,KAAwB,UAAvC,EAAmD;AAAE;AACpD,eAAOd,QAAQ,CAACa,OAAD,CAAf;AACA;;AAED,UAAI,OAAOA,OAAP,KAAmB,UAAvB,EAAmC;AAClC,eAAOb,QAAQ,CAACS,KAAK,CAAC,MAAMI,OAAO,EAAd,CAAN,CAAf;AACA;;AAED,aAAOb,QAAQ,CAACU,OAAO,CAACK,OAAR,CAAgBF,OAAhB,CAAD,CAAf;AACA,KAVkB,CAAZ,CAAP;AAWA,GAfD;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["'use strict';\nconst pReflect = require('p-reflect');\nconst pLimit = require('p-limit');\n\nmodule.exports = async (array, options = {}) => {\n\tconst {concurrency = Infinity} = options;\n\tconst limit = pLimit(concurrency);\n\n\treturn Promise.all(array.map(element => {\n\t\tif (element && typeof element.then === 'function') { // eslint-disable-line promise/prefer-await-to-then\n\t\t\treturn pReflect(element);\n\t\t}\n\n\t\tif (typeof element === 'function') {\n\t\t\treturn pReflect(limit(() => element()));\n\t\t}\n\n\t\treturn pReflect(Promise.resolve(element));\n\t}));\n};\n"]},"metadata":{},"sourceType":"script"}