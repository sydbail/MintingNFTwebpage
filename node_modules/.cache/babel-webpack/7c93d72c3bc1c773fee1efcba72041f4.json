{"ast":null,"code":"import _awaitAsyncGenerator from \"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator\";\nimport _wrapAsyncGenerator from \"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator\";\nimport _asyncIterator from \"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/esm/asyncIterator\";\nimport errCode from 'err-code';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\n\nfunction validateChunks(_x) {\n  return _validateChunks.apply(this, arguments);\n}\n\nfunction _validateChunks() {\n  _validateChunks = _wrapAsyncGenerator(function* (source) {\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n\n    var _iteratorError;\n\n    try {\n      for (var _iterator = _asyncIterator(source), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n        const content = _value;\n\n        if (content.length === undefined) {\n          throw errCode(new Error('Content was invalid'), 'ERR_INVALID_CONTENT');\n        }\n\n        if (typeof content === 'string' || content instanceof String) {\n          yield uint8ArrayFromString(content.toString());\n        } else if (Array.isArray(content)) {\n          yield Uint8Array.from(content);\n        } else if (content instanceof Uint8Array) {\n          yield content;\n        } else {\n          throw errCode(new Error('Content was invalid'), 'ERR_INVALID_CONTENT');\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          yield _awaitAsyncGenerator(_iterator.return());\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  });\n  return _validateChunks.apply(this, arguments);\n}\n\nexport default validateChunks;","map":null,"metadata":{},"sourceType":"module"}