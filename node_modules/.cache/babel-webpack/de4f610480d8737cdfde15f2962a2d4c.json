{"ast":null,"code":"'use strict';\n\nvar _awaitAsyncGenerator = require(\"/Users/sydneybailey/Internship/Dapp/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\").default;\n\nvar _wrapAsyncGenerator = require(\"/Users/sydneybailey/Internship/Dapp/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/Dapp/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nconst {\n  Multiaddr\n} = require('multiaddr');\n\nconst toCamel = require('../lib/object-to-camel');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nconst multipartRequest = require('../lib/multipart-request');\n\nconst abortSignal = require('../lib/abort-signal');\n\nconst {\n  AbortController\n} = require('native-abort-controller');\n\nconst {\n  toString: uint8ArrayToString\n} = require('uint8arrays/to-string');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {DHTAPI[\"put\"]}\n   */\n  function put(_x, _x2) {\n    return _put.apply(this, arguments);\n  }\n\n  function _put() {\n    _put = _wrapAsyncGenerator(function* (key, value, options = {}) {\n      // allow aborting requests on body errors\n      const controller = new AbortController();\n      const signal = abortSignal(controller.signal, options.signal);\n      const res = yield _awaitAsyncGenerator(api.post('dht/put', {\n        timeout: options.timeout,\n        signal,\n        searchParams: toUrlSearchParams({\n          arg: uint8ArrayToString(key),\n          ...options\n        }),\n        ...(yield _awaitAsyncGenerator(multipartRequest(value, controller, options.headers)))\n      }));\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n\n      var _iteratorError;\n\n      try {\n        for (var _iterator = _asyncIterator(res.ndjson()), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n          let message = _value;\n          message = toCamel(message);\n\n          if (message.responses) {\n            message.responses = message.responses.map((\n            /** @type {{ ID: string, Addrs: string[] }} */\n            {\n              ID,\n              Addrs\n            }) => ({\n              id: ID,\n              addrs: (Addrs || []).map(a => new Multiaddr(a))\n            }));\n          }\n\n          yield message;\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            yield _awaitAsyncGenerator(_iterator.return());\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    });\n    return _put.apply(this, arguments);\n  }\n\n  return put;\n});","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Dapp/node_modules/ipfs-http-client/src/dht/put.js"],"names":["Multiaddr","require","toCamel","configure","toUrlSearchParams","multipartRequest","abortSignal","AbortController","toString","uint8ArrayToString","module","exports","api","put","key","value","options","controller","signal","res","post","timeout","searchParams","arg","headers","ndjson","message","responses","map","ID","Addrs","id","addrs","a"],"mappings":"AAAA;;;;;;;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAgBC,OAAO,CAAC,WAAD,CAA7B;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,wBAAD,CAAvB;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,6BAAD,CAAjC;;AACA,MAAMI,gBAAgB,GAAGJ,OAAO,CAAC,0BAAD,CAAhC;;AACA,MAAMK,WAAW,GAAGL,OAAO,CAAC,qBAAD,CAA3B;;AACA,MAAM;AAAEM,EAAAA;AAAF,IAAsBN,OAAO,CAAC,yBAAD,CAAnC;;AACA,MAAM;AAAEO,EAAAA,QAAQ,EAAEC;AAAZ,IAAmCR,OAAO,CAAC,uBAAD,CAAhD;AAEA;AACA;AACA;AACA;;;AAEAS,MAAM,CAACC,OAAP,GAAiBR,SAAS,CAACS,GAAG,IAAI;AAChC;AACF;AACA;AAHkC,WAIfC,GAJe;AAAA;AAAA;;AAAA;AAAA,+BAIhC,WAAsBC,GAAtB,EAA2BC,KAA3B,EAAkCC,OAAO,GAAG,EAA5C,EAAgD;AAC9C;AACA,YAAMC,UAAU,GAAG,IAAIV,eAAJ,EAAnB;AACA,YAAMW,MAAM,GAAGZ,WAAW,CAACW,UAAU,CAACC,MAAZ,EAAoBF,OAAO,CAACE,MAA5B,CAA1B;AAEA,YAAMC,GAAG,8BAASP,GAAG,CAACQ,IAAJ,CAAS,SAAT,EAAoB;AACpCC,QAAAA,OAAO,EAAEL,OAAO,CAACK,OADmB;AAEpCH,QAAAA,MAFoC;AAGpCI,QAAAA,YAAY,EAAElB,iBAAiB,CAAC;AAC9BmB,UAAAA,GAAG,EAAEd,kBAAkB,CAACK,GAAD,CADO;AAE9B,aAAGE;AAF2B,SAAD,CAHK;AAOpC,uCACQX,gBAAgB,CAACU,KAAD,EAAQE,UAAR,EAAoBD,OAAO,CAACQ,OAA5B,CADxB;AAPoC,OAApB,CAAT,CAAT;AAL8C;AAAA;;AAAA;;AAAA;AAiB9C,4CAA0BL,GAAG,CAACM,MAAJ,EAA1B,gOAAwC;AAAA,cAAzBC,OAAyB;AACtCA,UAAAA,OAAO,GAAGxB,OAAO,CAACwB,OAAD,CAAjB;;AACA,cAAIA,OAAO,CAACC,SAAZ,EAAuB;AACrBD,YAAAA,OAAO,CAACC,SAAR,GAAoBD,OAAO,CAACC,SAAR,CAAkBC,GAAlB,CAAsB;AAAC;AAA+C;AAAEC,cAAAA,EAAF;AAAMC,cAAAA;AAAN,aAAhD,MAAmE;AAC3GC,cAAAA,EAAE,EAAEF,EADuG;AAE3GG,cAAAA,KAAK,EAAE,CAACF,KAAK,IAAI,EAAV,EAAcF,GAAd,CAAkBK,CAAC,IAAI,IAAIjC,SAAJ,CAAciC,CAAd,CAAvB;AAFoG,aAAnE,CAAtB,CAApB;AAID;;AACD,gBAAMP,OAAN;AACD;AA1B6C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA2B/C,KA/B+B;AAAA;AAAA;;AAiChC,SAAOb,GAAP;AACD,CAlCyB,CAA1B","sourcesContent":["'use strict'\n\nconst { Multiaddr } = require('multiaddr')\nconst toCamel = require('../lib/object-to-camel')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst multipartRequest = require('../lib/multipart-request')\nconst abortSignal = require('../lib/abort-signal')\nconst { AbortController } = require('native-abort-controller')\nconst { toString: uint8ArrayToString } = require('uint8arrays/to-string')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {DHTAPI[\"put\"]}\n   */\n  async function * put (key, value, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    const res = await api.post('dht/put', {\n      timeout: options.timeout,\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: uint8ArrayToString(key),\n        ...options\n      }),\n      ...(\n        await multipartRequest(value, controller, options.headers)\n      )\n    })\n\n    for await (let message of res.ndjson()) {\n      message = toCamel(message)\n      if (message.responses) {\n        message.responses = message.responses.map((/** @type {{ ID: string, Addrs: string[] }} */ { ID, Addrs }) => ({\n          id: ID,\n          addrs: (Addrs || []).map(a => new Multiaddr(a))\n        }))\n      }\n      yield message\n    }\n  }\n\n  return put\n})\n"]},"metadata":{},"sourceType":"script"}