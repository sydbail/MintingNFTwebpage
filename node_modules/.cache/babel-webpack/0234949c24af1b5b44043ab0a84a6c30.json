{"ast":null,"code":"'use strict';\n\nvar _wrapAsyncGenerator = require(\"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\").default;\n\nvar _awaitAsyncGenerator = require(\"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nvar _asyncGeneratorDelegate = require(\"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/asyncGeneratorDelegate\").default;\n\nconst toCamel = require('./lib/object-to-camel');\n\nconst configure = require('./lib/configure');\n\nconst toUrlSearchParams = require('./lib/to-url-search-params');\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {RootAPI[\"ping\"]}\n   */\n  function ping(_x) {\n    return _ping.apply(this, arguments);\n  }\n\n  function _ping() {\n    _ping = _wrapAsyncGenerator(function* (peerId, options = {}) {\n      const res = yield _awaitAsyncGenerator(api.post('ping', {\n        timeout: options.timeout,\n        signal: options.signal,\n        searchParams: toUrlSearchParams({\n          arg: `${peerId}`,\n          ...options\n        }),\n        headers: options.headers,\n        transform: toCamel\n      }));\n      yield* _asyncGeneratorDelegate(_asyncIterator(res.ndjson()), _awaitAsyncGenerator);\n    });\n    return _ping.apply(this, arguments);\n  }\n\n  return ping;\n});","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Demo/node_modules/ipfs-http-client/src/ping.js"],"names":["toCamel","require","configure","toUrlSearchParams","module","exports","api","ping","peerId","options","res","post","timeout","signal","searchParams","arg","headers","transform","ndjson"],"mappings":"AAAA;;;;;;;;;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,uBAAD,CAAvB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,iBAAD,CAAzB;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,4BAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AAEAG,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAACI,GAAG,IAAI;AAChC;AACF;AACA;AAHkC,WAIfC,IAJe;AAAA;AAAA;;AAAA;AAAA,gCAIhC,WAAuBC,MAAvB,EAA+BC,OAAO,GAAG,EAAzC,EAA6C;AAC3C,YAAMC,GAAG,8BAASJ,GAAG,CAACK,IAAJ,CAAS,MAAT,EAAiB;AACjCC,QAAAA,OAAO,EAAEH,OAAO,CAACG,OADgB;AAEjCC,QAAAA,MAAM,EAAEJ,OAAO,CAACI,MAFiB;AAGjCC,QAAAA,YAAY,EAAEX,iBAAiB,CAAC;AAC9BY,UAAAA,GAAG,EAAG,GAAEP,MAAO,EADe;AAE9B,aAAGC;AAF2B,SAAD,CAHE;AAOjCO,QAAAA,OAAO,EAAEP,OAAO,CAACO,OAPgB;AAQjCC,QAAAA,SAAS,EAAEjB;AARsB,OAAjB,CAAT,CAAT;AAWA,oDAAQU,GAAG,CAACQ,MAAJ,EAAR;AACD,KAjB+B;AAAA;AAAA;;AAkBhC,SAAOX,IAAP;AACD,CAnByB,CAA1B","sourcesContent":["'use strict'\n\nconst toCamel = require('./lib/object-to-camel')\nconst configure = require('./lib/configure')\nconst toUrlSearchParams = require('./lib/to-url-search-params')\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {RootAPI[\"ping\"]}\n   */\n  async function * ping (peerId, options = {}) {\n    const res = await api.post('ping', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${peerId}`,\n        ...options\n      }),\n      headers: options.headers,\n      transform: toCamel\n    })\n\n    yield * res.ndjson()\n  }\n  return ping\n})\n"]},"metadata":{},"sourceType":"script"}