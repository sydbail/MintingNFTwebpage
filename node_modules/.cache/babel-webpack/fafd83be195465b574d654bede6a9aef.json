{"ast":null,"code":"import _asyncToGenerator from \"/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport errCode from 'err-code';\nimport { UnixFS } from 'ipfs-unixfs';\nimport findShardCid from '../../utils/find-cid-in-shard.js';\nimport { decode } from '@ipld/dag-pb';\nimport contentFile from './content/file.js';\nimport contentDirectory from './content/directory.js';\nimport contentHamtShardedDirectory from './content/hamt-sharded-directory.js';\n\nconst findLinkCid = (node, name) => {\n  const link = node.Links.find(link => link.Name === name);\n  return link && link.Hash;\n};\n\nconst contentExporters = {\n  raw: contentFile,\n  file: contentFile,\n  directory: contentDirectory,\n  'hamt-sharded-directory': contentHamtShardedDirectory,\n  metadata: (cid, node, unixfs, path, resolve, depth, blockstore) => {\n    return () => [];\n  },\n  symlink: (cid, node, unixfs, path, resolve, depth, blockstore) => {\n    return () => [];\n  }\n};\n\nconst unixFsResolver = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (cid, name, path, toResolve, resolve, depth, blockstore, options) {\n    const block = yield blockstore.get(cid, options);\n    const node = decode(block);\n    let unixfs;\n    let next;\n\n    if (!name) {\n      name = cid.toString();\n    }\n\n    if (node.Data == null) {\n      throw errCode(new Error('no data in PBNode'), 'ERR_NOT_UNIXFS');\n    }\n\n    try {\n      unixfs = UnixFS.unmarshal(node.Data);\n    } catch (err) {\n      throw errCode(err, 'ERR_NOT_UNIXFS');\n    }\n\n    if (!path) {\n      path = name;\n    }\n\n    if (toResolve.length) {\n      let linkCid;\n\n      if (unixfs && unixfs.type === 'hamt-sharded-directory') {\n        linkCid = yield findShardCid(node, toResolve[0], blockstore);\n      } else {\n        linkCid = findLinkCid(node, toResolve[0]);\n      }\n\n      if (!linkCid) {\n        throw errCode(new Error('file does not exist'), 'ERR_NOT_FOUND');\n      }\n\n      const nextName = toResolve.shift();\n      const nextPath = `${path}/${nextName}`;\n      next = {\n        cid: linkCid,\n        toResolve,\n        name: nextName || '',\n        path: nextPath\n      };\n    }\n\n    return {\n      entry: {\n        type: unixfs.isDirectory() ? 'directory' : 'file',\n        name,\n        path,\n        cid,\n        content: contentExporters[unixfs.type](cid, node, unixfs, path, resolve, depth, blockstore),\n        unixfs,\n        depth,\n        node,\n        size: unixfs.fileSize()\n      },\n      next\n    };\n  });\n\n  return function unixFsResolver(_x, _x2, _x3, _x4, _x5, _x6, _x7, _x8) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport default unixFsResolver;","map":{"version":3,"sources":["/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/ipfs-unixfs-exporter/esm/src/resolvers/unixfs-v1/index.js"],"names":["errCode","UnixFS","findShardCid","decode","contentFile","contentDirectory","contentHamtShardedDirectory","findLinkCid","node","name","link","Links","find","Name","Hash","contentExporters","raw","file","directory","metadata","cid","unixfs","path","resolve","depth","blockstore","symlink","unixFsResolver","toResolve","options","block","get","next","toString","Data","Error","unmarshal","err","length","linkCid","type","nextName","shift","nextPath","entry","isDirectory","content","size","fileSize"],"mappings":"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","sourcesContent":["import errCode from 'err-code';\nimport { UnixFS } from 'ipfs-unixfs';\nimport findShardCid from '../../utils/find-cid-in-shard.js';\nimport { decode } from '@ipld/dag-pb';\nimport contentFile from './content/file.js';\nimport contentDirectory from './content/directory.js';\nimport contentHamtShardedDirectory from './content/hamt-sharded-directory.js';\nconst findLinkCid = (node, name) => {\n  const link = node.Links.find(link => link.Name === name);\n  return link && link.Hash;\n};\nconst contentExporters = {\n  raw: contentFile,\n  file: contentFile,\n  directory: contentDirectory,\n  'hamt-sharded-directory': contentHamtShardedDirectory,\n  metadata: (cid, node, unixfs, path, resolve, depth, blockstore) => {\n    return () => [];\n  },\n  symlink: (cid, node, unixfs, path, resolve, depth, blockstore) => {\n    return () => [];\n  }\n};\nconst unixFsResolver = async (cid, name, path, toResolve, resolve, depth, blockstore, options) => {\n  const block = await blockstore.get(cid, options);\n  const node = decode(block);\n  let unixfs;\n  let next;\n  if (!name) {\n    name = cid.toString();\n  }\n  if (node.Data == null) {\n    throw errCode(new Error('no data in PBNode'), 'ERR_NOT_UNIXFS');\n  }\n  try {\n    unixfs = UnixFS.unmarshal(node.Data);\n  } catch (err) {\n    throw errCode(err, 'ERR_NOT_UNIXFS');\n  }\n  if (!path) {\n    path = name;\n  }\n  if (toResolve.length) {\n    let linkCid;\n    if (unixfs && unixfs.type === 'hamt-sharded-directory') {\n      linkCid = await findShardCid(node, toResolve[0], blockstore);\n    } else {\n      linkCid = findLinkCid(node, toResolve[0]);\n    }\n    if (!linkCid) {\n      throw errCode(new Error('file does not exist'), 'ERR_NOT_FOUND');\n    }\n    const nextName = toResolve.shift();\n    const nextPath = `${ path }/${ nextName }`;\n    next = {\n      cid: linkCid,\n      toResolve,\n      name: nextName || '',\n      path: nextPath\n    };\n  }\n  return {\n    entry: {\n      type: unixfs.isDirectory() ? 'directory' : 'file',\n      name,\n      path,\n      cid,\n      content: contentExporters[unixfs.type](cid, node, unixfs, path, resolve, depth, blockstore),\n      unixfs,\n      depth,\n      node,\n      size: unixfs.fileSize()\n    },\n    next\n  };\n};\nexport default unixFsResolver;"]},"metadata":{},"sourceType":"module"}