{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst configure = require('../lib/configure');\n\nconst multipartRequest = require('../lib/multipart-request');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nconst abortSignal = require('../lib/abort-signal');\n\nconst {\n  AbortController\n} = require('native-abort-controller');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dag').API<HTTPClientExtraOptions>} DAGAPI\n */\n\n/**\n * @param {import('ipfs-core-utils/src/multicodecs')} codecs\n * @param {import('../types').Options} options\n */\n\n\nmodule.exports = (codecs, options) => {\n  const fn = configure(api => {\n    /**\n     * @type {DAGAPI[\"put\"]}\n     */\n    const put = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (dagNode, options = {}) {\n        const settings = {\n          format: 'dag-cbor',\n          hashAlg: 'sha2-256',\n          inputEnc: 'raw',\n          ...options\n        };\n        const codec = yield codecs.getCodec(settings.format);\n        const serialized = codec.encode(dagNode); // allow aborting requests on body errors\n\n        const controller = new AbortController();\n        const signal = abortSignal(controller.signal, settings.signal);\n        const res = yield api.post('dag/put', {\n          timeout: settings.timeout,\n          signal,\n          searchParams: toUrlSearchParams(settings),\n          ...(yield multipartRequest(serialized, controller, settings.headers))\n        });\n        const data = yield res.json();\n        return CID.parse(data.Cid['/']);\n      });\n\n      return function put(_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return put;\n  });\n  return fn(options);\n};","map":{"version":3,"sources":["/Users/sydneybailey/Internship/contract-testing/node_modules/ipfs-http-client/src/dag/put.js"],"names":["CID","require","configure","multipartRequest","toUrlSearchParams","abortSignal","AbortController","module","exports","codecs","options","fn","api","put","dagNode","settings","format","hashAlg","inputEnc","codec","getCodec","serialized","encode","controller","signal","res","post","timeout","searchParams","headers","data","json","parse","Cid"],"mappings":"AAAA;;;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAUC,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAME,gBAAgB,GAAGF,OAAO,CAAC,0BAAD,CAAhC;;AACA,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,6BAAD,CAAjC;;AACA,MAAMI,WAAW,GAAGJ,OAAO,CAAC,qBAAD,CAA3B;;AACA,MAAM;AAAEK,EAAAA;AAAF,IAAsBL,OAAO,CAAC,yBAAD,CAAnC;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AACAM,MAAM,CAACC,OAAP,GAAiB,CAACC,MAAD,EAASC,OAAT,KAAqB;AACpC,QAAMC,EAAE,GAAGT,SAAS,CAAEU,GAAD,IAAS;AAC5B;AACJ;AACA;AACI,UAAMC,GAAG;AAAA,mCAAG,WAAOC,OAAP,EAAgBJ,OAAO,GAAG,EAA1B,EAAiC;AAC3C,cAAMK,QAAQ,GAAG;AACfC,UAAAA,MAAM,EAAE,UADO;AAEfC,UAAAA,OAAO,EAAE,UAFM;AAGfC,UAAAA,QAAQ,EAAE,KAHK;AAIf,aAAGR;AAJY,SAAjB;AAOA,cAAMS,KAAK,SAASV,MAAM,CAACW,QAAP,CAAgBL,QAAQ,CAACC,MAAzB,CAApB;AACA,cAAMK,UAAU,GAAGF,KAAK,CAACG,MAAN,CAAaR,OAAb,CAAnB,CAT2C,CAW3C;;AACA,cAAMS,UAAU,GAAG,IAAIjB,eAAJ,EAAnB;AACA,cAAMkB,MAAM,GAAGnB,WAAW,CAACkB,UAAU,CAACC,MAAZ,EAAoBT,QAAQ,CAACS,MAA7B,CAA1B;AAEA,cAAMC,GAAG,SAASb,GAAG,CAACc,IAAJ,CAAS,SAAT,EAAoB;AACpCC,UAAAA,OAAO,EAAEZ,QAAQ,CAACY,OADkB;AAEpCH,UAAAA,MAFoC;AAGpCI,UAAAA,YAAY,EAAExB,iBAAiB,CAACW,QAAD,CAHK;AAIpC,oBACQZ,gBAAgB,CAACkB,UAAD,EAAaE,UAAb,EAAyBR,QAAQ,CAACc,OAAlC,CADxB;AAJoC,SAApB,CAAlB;AAQA,cAAMC,IAAI,SAASL,GAAG,CAACM,IAAJ,EAAnB;AAEA,eAAO/B,GAAG,CAACgC,KAAJ,CAAUF,IAAI,CAACG,GAAL,CAAS,GAAT,CAAV,CAAP;AACD,OA1BQ;;AAAA,sBAAHpB,GAAG;AAAA;AAAA;AAAA,OAAT;;AA4BA,WAAOA,GAAP;AACD,GAjCmB,CAApB;AAmCA,SAAOF,EAAE,CAACD,OAAD,CAAT;AACD,CArCD","sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst configure = require('../lib/configure')\nconst multipartRequest = require('../lib/multipart-request')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst abortSignal = require('../lib/abort-signal')\nconst { AbortController } = require('native-abort-controller')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dag').API<HTTPClientExtraOptions>} DAGAPI\n */\n\n/**\n * @param {import('ipfs-core-utils/src/multicodecs')} codecs\n * @param {import('../types').Options} options\n */\nmodule.exports = (codecs, options) => {\n  const fn = configure((api) => {\n    /**\n     * @type {DAGAPI[\"put\"]}\n     */\n    const put = async (dagNode, options = {}) => {\n      const settings = {\n        format: 'dag-cbor',\n        hashAlg: 'sha2-256',\n        inputEnc: 'raw',\n        ...options\n      }\n\n      const codec = await codecs.getCodec(settings.format)\n      const serialized = codec.encode(dagNode)\n\n      // allow aborting requests on body errors\n      const controller = new AbortController()\n      const signal = abortSignal(controller.signal, settings.signal)\n\n      const res = await api.post('dag/put', {\n        timeout: settings.timeout,\n        signal,\n        searchParams: toUrlSearchParams(settings),\n        ...(\n          await multipartRequest(serialized, controller, settings.headers)\n        )\n      })\n      const data = await res.json()\n\n      return CID.parse(data.Cid['/'])\n    }\n\n    return put\n  })\n\n  return fn(options)\n}\n"]},"metadata":{},"sourceType":"script"}