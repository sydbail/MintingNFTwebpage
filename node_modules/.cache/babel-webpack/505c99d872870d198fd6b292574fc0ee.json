{"ast":null,"code":"'use strict';\n\nvar _awaitAsyncGenerator = require(\"/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\").default;\n\nvar _wrapAsyncGenerator = require(\"/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/name').API<HTTPClientExtraOptions>} NameAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {NameAPI[\"resolve\"]}\n   */\n  function resolve(_x) {\n    return _resolve.apply(this, arguments);\n  }\n\n  function _resolve() {\n    _resolve = _wrapAsyncGenerator(function* (path, options = {}) {\n      const res = yield _awaitAsyncGenerator(api.post('name/resolve', {\n        timeout: options.timeout,\n        signal: options.signal,\n        searchParams: toUrlSearchParams({\n          arg: path,\n          stream: true,\n          ...options\n        }),\n        headers: options.headers\n      }));\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n\n      var _iteratorError;\n\n      try {\n        for (var _iterator = _asyncIterator(res.ndjson()), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n          const result = _value;\n          yield result.Path;\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            yield _awaitAsyncGenerator(_iterator.return());\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    });\n    return _resolve.apply(this, arguments);\n  }\n\n  return resolve;\n});","map":{"version":3,"sources":["/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/ipfs-http-client/src/name/resolve.js"],"names":["configure","require","toUrlSearchParams","module","exports","api","resolve","path","options","res","post","timeout","signal","searchParams","arg","stream","headers","ndjson","result","Path"],"mappings":"AAAA;;;;;;;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAMC,iBAAiB,GAAGD,OAAO,CAAC,6BAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AAEAE,MAAM,CAACC,OAAP,GAAiBJ,SAAS,CAACK,GAAG,IAAI;AAChC;AACF;AACA;AAHkC,WAIfC,OAJe;AAAA;AAAA;;AAAA;AAAA,mCAIhC,WAA0BC,IAA1B,EAAgCC,OAAO,GAAG,EAA1C,EAA8C;AAC5C,YAAMC,GAAG,8BAASJ,GAAG,CAACK,IAAJ,CAAS,cAAT,EAAyB;AACzCC,QAAAA,OAAO,EAAEH,OAAO,CAACG,OADwB;AAEzCC,QAAAA,MAAM,EAAEJ,OAAO,CAACI,MAFyB;AAGzCC,QAAAA,YAAY,EAAEX,iBAAiB,CAAC;AAC9BY,UAAAA,GAAG,EAAEP,IADyB;AAE9BQ,UAAAA,MAAM,EAAE,IAFsB;AAG9B,aAAGP;AAH2B,SAAD,CAHU;AAQzCQ,QAAAA,OAAO,EAAER,OAAO,CAACQ;AARwB,OAAzB,CAAT,CAAT;AAD4C;AAAA;;AAAA;;AAAA;AAY5C,4CAA2BP,GAAG,CAACQ,MAAJ,EAA3B,gOAAyC;AAAA,gBAAxBC,MAAwB;AACvC,gBAAMA,MAAM,CAACC,IAAb;AACD;AAd2C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAe7C,KAnB+B;AAAA;AAAA;;AAoBhC,SAAOb,OAAP;AACD,CArByB,CAA1B","sourcesContent":["'use strict'\n\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/name').API<HTTPClientExtraOptions>} NameAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {NameAPI[\"resolve\"]}\n   */\n  async function * resolve (path, options = {}) {\n    const res = await api.post('name/resolve', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        stream: true,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (const result of res.ndjson()) {\n      yield result.Path\n    }\n  }\n  return resolve\n})\n"]},"metadata":{},"sourceType":"script"}