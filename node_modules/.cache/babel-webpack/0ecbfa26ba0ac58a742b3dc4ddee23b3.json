{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/Dapp/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst toCamelWithMetadata = require('../lib/object-to-camel-with-metadata');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {FilesAPI[\"stat\"]}\n   */\n  function stat(_x) {\n    return _stat.apply(this, arguments);\n  }\n\n  function _stat() {\n    _stat = _asyncToGenerator(function* (path, options = {}) {\n      if (path && !(path instanceof CID) && typeof path !== 'string') {\n        options = path || {};\n        path = '/';\n      }\n\n      options = options || {};\n      const res = yield api.post('files/stat', {\n        timeout: options.timeout,\n        signal: options.signal,\n        searchParams: toUrlSearchParams({\n          arg: path,\n          ...options\n        }),\n        headers: options.headers\n      });\n      const data = yield res.json();\n      data.WithLocality = data.WithLocality || false;\n      return toCoreInterface(toCamelWithMetadata(data));\n    });\n    return _stat.apply(this, arguments);\n  }\n\n  return stat;\n});\n/**\n * @param {*} entry\n */\n\nfunction toCoreInterface(entry) {\n  entry.cid = CID.parse(entry.hash);\n  delete entry.hash;\n  return entry;\n}","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Dapp/node_modules/ipfs-http-client/src/files/stat.js"],"names":["CID","require","toCamelWithMetadata","configure","toUrlSearchParams","module","exports","api","stat","path","options","res","post","timeout","signal","searchParams","arg","headers","data","json","WithLocality","toCoreInterface","entry","cid","parse","hash"],"mappings":"AAAA;;;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAUC,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAMC,mBAAmB,GAAGD,OAAO,CAAC,sCAAD,CAAnC;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,6BAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AAEAI,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAACI,GAAG,IAAI;AAChC;AACF;AACA;AAHkC,WAIjBC,IAJiB;AAAA;AAAA;;AAAA;AAAA,8BAIhC,WAAqBC,IAArB,EAA2BC,OAAO,GAAG,EAArC,EAAyC;AACvC,UAAID,IAAI,IAAI,EAAEA,IAAI,YAAYT,GAAlB,CAAR,IAAkC,OAAOS,IAAP,KAAgB,QAAtD,EAAgE;AAC9DC,QAAAA,OAAO,GAAGD,IAAI,IAAI,EAAlB;AACAA,QAAAA,IAAI,GAAG,GAAP;AACD;;AAEDC,MAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AAEA,YAAMC,GAAG,SAASJ,GAAG,CAACK,IAAJ,CAAS,YAAT,EAAuB;AACvCC,QAAAA,OAAO,EAAEH,OAAO,CAACG,OADsB;AAEvCC,QAAAA,MAAM,EAAEJ,OAAO,CAACI,MAFuB;AAGvCC,QAAAA,YAAY,EAAEX,iBAAiB,CAAC;AAC9BY,UAAAA,GAAG,EAAEP,IADyB;AAE9B,aAAGC;AAF2B,SAAD,CAHQ;AAOvCO,QAAAA,OAAO,EAAEP,OAAO,CAACO;AAPsB,OAAvB,CAAlB;AASA,YAAMC,IAAI,SAASP,GAAG,CAACQ,IAAJ,EAAnB;AAEAD,MAAAA,IAAI,CAACE,YAAL,GAAoBF,IAAI,CAACE,YAAL,IAAqB,KAAzC;AACA,aAAOC,eAAe,CAACnB,mBAAmB,CAACgB,IAAD,CAApB,CAAtB;AACD,KAzB+B;AAAA;AAAA;;AA0BhC,SAAOV,IAAP;AACD,CA3ByB,CAA1B;AA6BA;AACA;AACA;;AACA,SAASa,eAAT,CAA0BC,KAA1B,EAAiC;AAC/BA,EAAAA,KAAK,CAACC,GAAN,GAAYvB,GAAG,CAACwB,KAAJ,CAAUF,KAAK,CAACG,IAAhB,CAAZ;AACA,SAAOH,KAAK,CAACG,IAAb;AACA,SAAOH,KAAP;AACD","sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst toCamelWithMetadata = require('../lib/object-to-camel-with-metadata')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {FilesAPI[\"stat\"]}\n   */\n  async function stat (path, options = {}) {\n    if (path && !(path instanceof CID) && typeof path !== 'string') {\n      options = path || {}\n      path = '/'\n    }\n\n    options = options || {}\n\n    const res = await api.post('files/stat', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    data.WithLocality = data.WithLocality || false\n    return toCoreInterface(toCamelWithMetadata(data))\n  }\n  return stat\n})\n\n/**\n * @param {*} entry\n */\nfunction toCoreInterface (entry) {\n  entry.cid = CID.parse(entry.hash)\n  delete entry.hash\n  return entry\n}\n"]},"metadata":{},"sourceType":"script"}