{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst dagPb = require('@ipld/dag-pb');\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @param {Object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n */\n\n\nmodule.exports = ({\n  repo,\n  preload\n}) => {\n  const get = require('./get')({\n    repo,\n    preload\n  });\n  /**\n   * @type {import('ipfs-core-types/src/object').API[\"stat\"]}\n   */\n\n\n  function stat(_x) {\n    return _stat.apply(this, arguments);\n  }\n\n  function _stat() {\n    _stat = _asyncToGenerator(function* (cid, options = {}) {\n      const node = yield get(cid, options);\n      const serialized = dagPb.encode(node);\n      const blockSize = serialized.length;\n      const linkLength = node.Links.reduce((a, l) => a + (l.Tsize || 0), 0);\n      return {\n        Hash: cid,\n        NumLinks: node.Links.length,\n        BlockSize: blockSize,\n        LinksSize: blockSize - (node.Data || []).length,\n        DataSize: (node.Data || []).length,\n        CumulativeSize: blockSize + linkLength\n      };\n    });\n    return _stat.apply(this, arguments);\n  }\n\n  return withTimeoutOption(stat);\n};","map":{"version":3,"sources":["/Users/sydneybailey/Internship/contract-testing/node_modules/ipfs-core/src/components/object/stat.js"],"names":["dagPb","require","withTimeoutOption","module","exports","repo","preload","get","stat","cid","options","node","serialized","encode","blockSize","length","linkLength","Links","reduce","a","l","Tsize","Hash","NumLinks","BlockSize","LinksSize","Data","DataSize","CumulativeSize"],"mappings":"AAAA;;;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,cAAD,CAArB;;AACA,MAAMC,iBAAiB,GAAGD,OAAO,CAAC,yCAAD,CAAjC;AAEA;AACA;AACA;AACA;AACA;;;AACAE,MAAM,CAACC,OAAP,GAAiB,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAD,KAAuB;AACtC,QAAMC,GAAG,GAAGN,OAAO,CAAC,OAAD,CAAP,CAAiB;AAAEI,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAjB,CAAZ;AAEA;AACF;AACA;;;AALwC,WAMvBE,IANuB;AAAA;AAAA;;AAAA;AAAA,8BAMtC,WAAqBC,GAArB,EAA0BC,OAAO,GAAG,EAApC,EAAwC;AACtC,YAAMC,IAAI,SAASJ,GAAG,CAACE,GAAD,EAAMC,OAAN,CAAtB;AACA,YAAME,UAAU,GAAGZ,KAAK,CAACa,MAAN,CAAaF,IAAb,CAAnB;AACA,YAAMG,SAAS,GAAGF,UAAU,CAACG,MAA7B;AACA,YAAMC,UAAU,GAAGL,IAAI,CAACM,KAAL,CAAWC,MAAX,CAAkB,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,IAAIC,CAAC,CAACC,KAAF,IAAW,CAAf,CAA7B,EAAgD,CAAhD,CAAnB;AAEA,aAAO;AACLC,QAAAA,IAAI,EAAEb,GADD;AAELc,QAAAA,QAAQ,EAAEZ,IAAI,CAACM,KAAL,CAAWF,MAFhB;AAGLS,QAAAA,SAAS,EAAEV,SAHN;AAILW,QAAAA,SAAS,EAAEX,SAAS,GAAG,CAACH,IAAI,CAACe,IAAL,IAAa,EAAd,EAAkBX,MAJpC;AAKLY,QAAAA,QAAQ,EAAE,CAAChB,IAAI,CAACe,IAAL,IAAa,EAAd,EAAkBX,MALvB;AAMLa,QAAAA,cAAc,EAAEd,SAAS,GAAGE;AANvB,OAAP;AAQD,KApBqC;AAAA;AAAA;;AAsBtC,SAAOd,iBAAiB,CAACM,IAAD,CAAxB;AACD,CAvBD","sourcesContent":["'use strict'\n\nconst dagPb = require('@ipld/dag-pb')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\n\n/**\n * @param {Object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n */\nmodule.exports = ({ repo, preload }) => {\n  const get = require('./get')({ repo, preload })\n\n  /**\n   * @type {import('ipfs-core-types/src/object').API[\"stat\"]}\n   */\n  async function stat (cid, options = {}) {\n    const node = await get(cid, options)\n    const serialized = dagPb.encode(node)\n    const blockSize = serialized.length\n    const linkLength = node.Links.reduce((a, l) => a + (l.Tsize || 0), 0)\n\n    return {\n      Hash: cid,\n      NumLinks: node.Links.length,\n      BlockSize: blockSize,\n      LinksSize: blockSize - (node.Data || []).length,\n      DataSize: (node.Data || []).length,\n      CumulativeSize: blockSize + linkLength\n    }\n  }\n\n  return withTimeoutOption(stat)\n}\n"]},"metadata":{},"sourceType":"script"}