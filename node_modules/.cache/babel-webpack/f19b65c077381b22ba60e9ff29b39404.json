{"ast":null,"code":"import _asyncToGenerator from \"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./web3.service\";\n\nconst noTipfsNFTArtifacts = require('../../../build/contracts/noTransferIPFSNFT.json');\n\nconst contract = require('@truffle/contract');\n\nexport class NotransferipfscontractService {\n  web3Ser;\n  noTipfs = contract(noTipfsNFTArtifacts);\n\n  constructor(web3Ser) {\n    this.web3Ser = web3Ser;\n    this.noTipfs.setProvider(web3Ser.web3.currentProvider);\n  }\n\n  getAddress() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      let not = yield _this.noTipfs.deployed();\n      const contractaddr = not.address;\n      return contractaddr;\n    })();\n  }\n\n  getOwner(id) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      let not = yield _this2.noTipfs.deployed();\n      const owner = yield not.ownerOf.call(id, {\n        from: _this2.web3Ser.web3.eth.defaultAccount\n      });\n      return owner;\n    })();\n  }\n\n  getTokenUri(id) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      let not = yield _this3.noTipfs.deployed();\n      const tokenURI = yield not.tokenURI.call(id, {\n        from: _this3.web3Ser.web3.eth.defaultAccount\n      });\n      return tokenURI;\n    })();\n  }\n\n  mintCoin(to, imagehash, metahash) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      let not = yield _this4.noTipfs.deployed();\n\n      try {\n        const value = yield not.mint(to, imagehash, metahash, {\n          from: _this4.web3Ser.web3.eth.defaultAccount\n        });\n        return value;\n      } catch (err) {\n        //alert(\"Error: An NFT has already been minted for this image\");\n        return null;\n      }\n    })();\n  }\n\n  static ɵfac = function NotransferipfscontractService_Factory(t) {\n    return new (t || NotransferipfscontractService)(i0.ɵɵinject(i1.Web3Service));\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: NotransferipfscontractService,\n    factory: NotransferipfscontractService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"sources":["/Users/sydneybailey/Internship/contract-testing/src/app/services/notransferipfscontract.service.ts"],"names":[],"mappings":";;;;AAKA,MAAM,mBAAmB,GAAG,OAAO,CAAC,iDAAD,CAAnC;;AACA,MAAM,QAAQ,GAAG,OAAO,CAAC,mBAAD,CAAxB;;AAKA,OAAM,MAAO,6BAAP,CAAoC;AAIpB,EAAA,OAAA;AAFpB,EAAA,OAAO,GAAG,QAAQ,CAAC,mBAAD,CAAX;;AAEP,EAAA,WAAA,CAAoB,OAApB,EAAwC;AAApB,SAAA,OAAA,GAAA,OAAA;AAClB,SAAK,OAAL,CAAa,WAAb,CAAyB,OAAO,CAAC,IAAR,CAAa,eAAtC;AACD;;AAEK,EAAA,UAAU,GAAA;AAAA;;AAAA;AACd,UAAI,GAAG,SAAS,KAAI,CAAC,OAAL,CAAa,QAAb,EAAhB;AACA,YAAM,YAAY,GAAG,GAAG,CAAC,OAAzB;AACA,aAAO,YAAP;AAHc;AAIf;;AAEK,EAAA,QAAQ,CAAC,EAAD,EAAQ;AAAA;;AAAA;AACpB,UAAI,GAAG,SAAS,MAAI,CAAC,OAAL,CAAa,QAAb,EAAhB;AACA,YAAM,KAAK,SAAS,GAAG,CAAC,OAAJ,CAAY,IAAZ,CAAiB,EAAjB,EAAqB;AACvC,QAAA,IAAI,EAAE,MAAI,CAAC,OAAL,CAAa,IAAb,CAAkB,GAAlB,CAAsB;AADW,OAArB,CAApB;AAGA,aAAO,KAAP;AALoB;AAMrB;;AAEK,EAAA,WAAW,CAAC,EAAD,EAAQ;AAAA;;AAAA;AACvB,UAAI,GAAG,SAAS,MAAI,CAAC,OAAL,CAAa,QAAb,EAAhB;AACA,YAAM,QAAQ,SAAS,GAAG,CAAC,QAAJ,CAAa,IAAb,CAAkB,EAAlB,EAAsB;AAC3C,QAAA,IAAI,EAAE,MAAI,CAAC,OAAL,CAAa,IAAb,CAAkB,GAAlB,CAAsB;AADe,OAAtB,CAAvB;AAGA,aAAO,QAAP;AALuB;AAMxB;;AAEK,EAAA,QAAQ,CAAC,EAAD,EAAU,SAAV,EAA6B,QAA7B,EAA6C;AAAA;;AAAA;AACzD,UAAI,GAAG,SAAS,MAAI,CAAC,OAAL,CAAa,QAAb,EAAhB;;AACA,UAAG;AACD,cAAM,KAAK,SAAS,GAAG,CAAC,IAAJ,CAAS,EAAT,EAAa,SAAb,EAAwB,QAAxB,EAAkC;AACpD,UAAA,IAAI,EAAE,MAAI,CAAC,OAAL,CAAa,IAAb,CAAkB,GAAlB,CAAsB;AADwB,SAAlC,CAApB;AAGA,eAAO,KAAP;AACD,OALD,CAKC,OAAM,GAAN,EAAW;AACZ;AACA,eAAO,IAAP;AACC;AAVwD;AAW1D;;;qBAzCU,6B,EAA6B,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,WAAA,C;AAAA,G;;WAA7B,6B;AAA6B,IAAA,OAAA,EAA7B,6BAA6B,CAAA,I;AAAA,IAAA,UAAA,EAF5B;;AAE4B","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { from } from 'rxjs';\nimport { Web3Service } from './web3.service'\n\nconst noTipfsNFTArtifacts = require('../../../build/contracts/noTransferIPFSNFT.json');\nconst contract = require('@truffle/contract');\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NotransferipfscontractService {\n\n  noTipfs = contract(noTipfsNFTArtifacts);\n\n  constructor(private web3Ser: Web3Service) {\n    this.noTipfs.setProvider(web3Ser.web3.currentProvider);\n  }\n\n  async getAddress(): Promise<string> {\n    let not = await this.noTipfs.deployed();\n    const contractaddr = not.address;\n    return contractaddr;\n  }\n\n  async getOwner(id: any): Promise<any> {\n    let not = await this.noTipfs.deployed();\n    const owner = await not.ownerOf.call(id, {\n      from: this.web3Ser.web3.eth.defaultAccount\n    });\n    return owner;\n  }\n\n  async getTokenUri(id: any): Promise<any> {\n    let not = await this.noTipfs.deployed();\n    const tokenURI = await not.tokenURI.call(id, {\n      from: this.web3Ser.web3.eth.defaultAccount\n    });\n    return tokenURI;\n  }\n\n  async mintCoin(to: any, imagehash: string, metahash: string): Promise<any>{\n    let not = await this.noTipfs.deployed();\n    try{\n      const value = await not.mint(to, imagehash, metahash, {\n        from: this.web3Ser.web3.eth.defaultAccount\n      });\n      return value;\n    }catch(err) {\n    //alert(\"Error: An NFT has already been minted for this image\");\n    return null;\n    }\n  }\n\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}