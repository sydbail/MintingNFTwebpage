{"ast":null,"code":"'use strict';\n\nvar _wrapAsyncGenerator = require(\"/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\").default;\n\nvar _awaitAsyncGenerator = require(\"/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nvar _asyncGeneratorDelegate = require(\"/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/@babel/runtime/helpers/asyncGeneratorDelegate\").default;\n\nconst tempdir = require('ipfs-utils/src/temp-dir');\n\nconst all = require('it-all');\n/**\n * Collect all values from the iterable and sort them using\n * the passed sorter function\n *\n * @template T\n * @param {AsyncIterable<T> | Iterable<T>} iterable\n * @param {(a: T, b: T) => -1 | 0 | 1} sorter\n * @returns {AsyncIterable<T>}\n */\n\n\nconst sortAll = (iterable, sorter) => {\n  return _wrapAsyncGenerator(function* () {\n    const values = yield _awaitAsyncGenerator(all(iterable));\n    yield* _asyncGeneratorDelegate(_asyncIterator(values.sort(sorter)), _awaitAsyncGenerator);\n  })();\n};\n/**\n * @param {string} s\n * @param {string} r\n */\n\n\nconst replaceStartWith = (s, r) => {\n  const matcher = new RegExp('^' + r);\n  return s.replace(matcher, '');\n};\n\nmodule.exports = {\n  sortAll,\n  tmpdir: tempdir,\n  replaceStartWith\n};","map":{"version":3,"sources":["/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/interface-datastore/src/utils.js"],"names":["tempdir","require","all","sortAll","iterable","sorter","values","sort","replaceStartWith","s","r","matcher","RegExp","replace","module","exports","tmpdir"],"mappings":"AAAA;;;;;;;;;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,yBAAD,CAAvB;;AACA,MAAMC,GAAG,GAAGD,OAAO,CAAC,QAAD,CAAnB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAME,OAAO,GAAG,CAACC,QAAD,EAAWC,MAAX,KAAsB;AACpC,SAAO,oBAAC,aAAoB;AAC1B,UAAMC,MAAM,8BAASJ,GAAG,CAACE,QAAD,CAAZ,CAAZ;AACA,kDAAQE,MAAM,CAACC,IAAP,CAAYF,MAAZ,CAAR;AACD,GAHM,GAAP;AAID,CALD;AAOA;AACA;AACA;AACA;;;AACA,MAAMG,gBAAgB,GAAG,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACjC,QAAMC,OAAO,GAAG,IAAIC,MAAJ,CAAW,MAAMF,CAAjB,CAAhB;AACA,SAAOD,CAAC,CAACI,OAAF,CAAUF,OAAV,EAAmB,EAAnB,CAAP;AACD,CAHD;;AAKAG,MAAM,CAACC,OAAP,GAAiB;AACfZ,EAAAA,OADe;AAEfa,EAAAA,MAAM,EAAEhB,OAFO;AAGfQ,EAAAA;AAHe,CAAjB","sourcesContent":["'use strict'\n\nconst tempdir = require('ipfs-utils/src/temp-dir')\nconst all = require('it-all')\n\n/**\n * Collect all values from the iterable and sort them using\n * the passed sorter function\n *\n * @template T\n * @param {AsyncIterable<T> | Iterable<T>} iterable\n * @param {(a: T, b: T) => -1 | 0 | 1} sorter\n * @returns {AsyncIterable<T>}\n */\nconst sortAll = (iterable, sorter) => {\n  return (async function * () {\n    const values = await all(iterable)\n    yield * values.sort(sorter)\n  })()\n}\n\n/**\n * @param {string} s\n * @param {string} r\n */\nconst replaceStartWith = (s, r) => {\n  const matcher = new RegExp('^' + r)\n  return s.replace(matcher, '')\n}\n\nmodule.exports = {\n  sortAll,\n  tmpdir: tempdir,\n  replaceStartWith\n}\n"]},"metadata":{},"sourceType":"script"}