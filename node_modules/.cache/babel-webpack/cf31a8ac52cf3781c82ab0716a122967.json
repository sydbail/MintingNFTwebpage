{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MixedCaseArbitrary = exports.computeNextFlags = exports.countToggledBits = void 0;\n\nconst Stream_1 = require(\"../../stream/Stream\");\n\nconst bigUintN_1 = require(\"../bigUintN\");\n\nconst NextArbitrary_1 = require(\"../../check/arbitrary/definition/NextArbitrary\");\n\nconst Converters_1 = require(\"../../check/arbitrary/definition/Converters\");\n\nconst NextValue_1 = require(\"../../check/arbitrary/definition/NextValue\");\n\nconst LazyIterableIterator_1 = require(\"../../stream/LazyIterableIterator\");\n\nfunction countToggledBits(n) {\n  let count = 0;\n\n  while (n > BigInt(0)) {\n    if (n & BigInt(1)) ++count;\n    n >>= BigInt(1);\n  }\n\n  return count;\n}\n\nexports.countToggledBits = countToggledBits;\n\nfunction computeNextFlags(flags, nextSize) {\n  const allowedMask = (BigInt(1) << BigInt(nextSize)) - BigInt(1);\n  const preservedFlags = flags & allowedMask;\n  let numMissingFlags = countToggledBits(flags - preservedFlags);\n  let nFlags = preservedFlags;\n\n  for (let mask = BigInt(1); mask <= allowedMask && numMissingFlags !== 0; mask <<= BigInt(1)) {\n    if (!(nFlags & mask)) {\n      nFlags |= mask;\n      --numMissingFlags;\n    }\n  }\n\n  return nFlags;\n}\n\nexports.computeNextFlags = computeNextFlags;\n\nclass MixedCaseArbitrary extends NextArbitrary_1.NextArbitrary {\n  constructor(stringArb, toggleCase) {\n    super();\n    this.stringArb = stringArb;\n    this.toggleCase = toggleCase;\n  }\n\n  computeTogglePositions(chars) {\n    const positions = [];\n\n    for (let idx = 0; idx !== chars.length; ++idx) {\n      if (this.toggleCase(chars[idx]) !== chars[idx]) positions.push(idx);\n    }\n\n    return positions;\n  }\n\n  applyFlagsOnChars(chars, flags, togglePositions) {\n    for (let idx = 0, mask = BigInt(1); idx !== togglePositions.length; ++idx, mask <<= BigInt(1)) {\n      if (flags & mask) chars[togglePositions[idx]] = this.toggleCase(chars[togglePositions[idx]]);\n    }\n\n    return chars;\n  }\n\n  buildContextFor(rawStringNextValue, flagsNextValue) {\n    return {\n      rawString: rawStringNextValue.value,\n      rawStringContext: rawStringNextValue.context,\n      flags: flagsNextValue.value,\n      flagsContext: flagsNextValue.context\n    };\n  }\n\n  generate(mrng, biasFactor) {\n    const rawStringNextValue = this.stringArb.generate(mrng, biasFactor);\n    const chars = [...rawStringNextValue.value];\n    const togglePositions = this.computeTogglePositions(chars);\n    const flagsArb = Converters_1.convertToNext(bigUintN_1.bigUintN(togglePositions.length));\n    const flagsNextValue = flagsArb.generate(mrng, undefined);\n    this.applyFlagsOnChars(chars, flagsNextValue.value, togglePositions);\n    return new NextValue_1.NextValue(chars.join(''), this.buildContextFor(rawStringNextValue, flagsNextValue));\n  }\n\n  canShrinkWithoutContext(value) {\n    return false;\n  }\n\n  shrink(_value, context) {\n    if (context === undefined) {\n      return Stream_1.Stream.nil();\n    }\n\n    const contextSafe = context;\n    const rawString = contextSafe.rawString;\n    const flags = contextSafe.flags;\n    return this.stringArb.shrink(rawString, contextSafe.rawStringContext).map(nRawStringNextValue => {\n      const nChars = [...nRawStringNextValue.value];\n      const nTogglePositions = this.computeTogglePositions(nChars);\n      const nFlags = computeNextFlags(flags, nTogglePositions.length);\n      this.applyFlagsOnChars(nChars, nFlags, nTogglePositions);\n      return new NextValue_1.NextValue(nChars.join(''), this.buildContextFor(nRawStringNextValue, new NextValue_1.NextValue(nFlags, undefined)));\n    }).join(LazyIterableIterator_1.makeLazy(() => {\n      const chars = [...rawString];\n      const togglePositions = this.computeTogglePositions(chars);\n      return Converters_1.convertToNext(bigUintN_1.bigUintN(togglePositions.length)).shrink(flags, contextSafe.flagsContext).map(nFlagsNextValue => {\n        const nChars = chars.slice();\n        this.applyFlagsOnChars(nChars, nFlagsNextValue.value, togglePositions);\n        return new NextValue_1.NextValue(nChars.join(''), this.buildContextFor(new NextValue_1.NextValue(rawString, contextSafe.rawStringContext), nFlagsNextValue));\n      });\n    }));\n  }\n\n}\n\nexports.MixedCaseArbitrary = MixedCaseArbitrary;","map":null,"metadata":{},"sourceType":"script"}