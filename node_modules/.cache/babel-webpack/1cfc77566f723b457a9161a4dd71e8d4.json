{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/Dapp/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n\nconst {\n  Multiaddr\n} = require('multiaddr');\n/**\n * @param {Object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\n\n\nmodule.exports = ({\n  repo\n}) => {\n  /**\n   * @type {import('ipfs-core-types/src/bootstrap').API[\"clear\"]}\n   */\n  function clear() {\n    return _clear.apply(this, arguments);\n  }\n\n  function _clear() {\n    _clear = _asyncToGenerator(function* (options = {}) {\n      /** @type {import('ipfs-core-types/src/config').Config} */\n      // @ts-ignore repo returns type unknown\n      const config = yield repo.config.getAll(options);\n      const removed = config.Bootstrap || [];\n      config.Bootstrap = [];\n      yield repo.config.replace(config);\n      return {\n        Peers: removed.map(ma => new Multiaddr(ma))\n      };\n    });\n    return _clear.apply(this, arguments);\n  }\n\n  return withTimeoutOption(clear);\n};","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Dapp/node_modules/ipfs-core/src/components/bootstrap/clear.js"],"names":["withTimeoutOption","require","Multiaddr","module","exports","repo","clear","options","config","getAll","removed","Bootstrap","replace","Peers","map","ma"],"mappings":"AAAA;;;;AAEA,MAAMA,iBAAiB,GAAGC,OAAO,CAAC,yCAAD,CAAjC;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAgBD,OAAO,CAAC,WAAD,CAA7B;AAEA;AACA;AACA;AACA;;;AACAE,MAAM,CAACC,OAAP,GAAiB,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAC7B;AACF;AACA;AAH+B,WAIdC,KAJc;AAAA;AAAA;;AAAA;AAAA,+BAI7B,WAAsBC,OAAO,GAAG,EAAhC,EAAoC;AAClC;AACA;AACA,YAAMC,MAAM,SAASH,IAAI,CAACG,MAAL,CAAYC,MAAZ,CAAmBF,OAAnB,CAArB;AACA,YAAMG,OAAO,GAAGF,MAAM,CAACG,SAAP,IAAoB,EAApC;AACAH,MAAAA,MAAM,CAACG,SAAP,GAAmB,EAAnB;AAEA,YAAMN,IAAI,CAACG,MAAL,CAAYI,OAAZ,CAAoBJ,MAApB,CAAN;AAEA,aAAO;AAAEK,QAAAA,KAAK,EAAEH,OAAO,CAACI,GAAR,CAAYC,EAAE,IAAI,IAAIb,SAAJ,CAAca,EAAd,CAAlB;AAAT,OAAP;AACD,KAd4B;AAAA;AAAA;;AAgB7B,SAAOf,iBAAiB,CAACM,KAAD,CAAxB;AACD,CAjBD","sourcesContent":["'use strict'\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\nconst { Multiaddr } = require('multiaddr')\n\n/**\n * @param {Object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\nmodule.exports = ({ repo }) => {\n  /**\n   * @type {import('ipfs-core-types/src/bootstrap').API[\"clear\"]}\n   */\n  async function clear (options = {}) {\n    /** @type {import('ipfs-core-types/src/config').Config} */\n    // @ts-ignore repo returns type unknown\n    const config = await repo.config.getAll(options)\n    const removed = config.Bootstrap || []\n    config.Bootstrap = []\n\n    await repo.config.replace(config)\n\n    return { Peers: removed.map(ma => new Multiaddr(ma)) }\n  }\n\n  return withTimeoutOption(clear)\n}\n"]},"metadata":{},"sourceType":"script"}