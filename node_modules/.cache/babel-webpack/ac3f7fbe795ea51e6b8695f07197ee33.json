{"ast":null,"code":"import _asyncToGenerator from \"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _awaitAsyncGenerator from \"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator\";\nimport _wrapAsyncGenerator from \"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator\";\nimport errCode from 'err-code';\nimport extractDataFromBlock from '../utils/extract-data-from-block.js';\nimport validateOffsetAndLength from '../utils/validate-offset-and-length.js';\n\nconst rawContent = node => {\n  function contentGenerator() {\n    return _contentGenerator.apply(this, arguments);\n  }\n\n  function _contentGenerator() {\n    _contentGenerator = _wrapAsyncGenerator(function* (options = {}) {\n      const {\n        offset,\n        length\n      } = validateOffsetAndLength(node.length, options.offset, options.length);\n      yield extractDataFromBlock(node, 0, offset, offset + length);\n    });\n    return _contentGenerator.apply(this, arguments);\n  }\n\n  return contentGenerator;\n};\n\nconst resolve = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (cid, name, path, toResolve, _resolve, depth, blockstore, options) {\n    if (toResolve.length) {\n      throw errCode(new Error(`No link named ${path} found in raw node ${cid}`), 'ERR_NOT_FOUND');\n    }\n\n    const block = yield blockstore.get(cid, options);\n    return {\n      entry: {\n        type: 'raw',\n        name,\n        path,\n        cid,\n        content: rawContent(block),\n        depth,\n        size: block.length,\n        node: block\n      }\n    };\n  });\n\n  return function resolve(_x, _x2, _x3, _x4, _x5, _x6, _x7, _x8) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport default resolve;","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Demo/node_modules/ipfs-unixfs-exporter/esm/src/resolvers/raw.js"],"names":["errCode","extractDataFromBlock","validateOffsetAndLength","rawContent","node","contentGenerator","options","offset","length","resolve","cid","name","path","toResolve","depth","blockstore","Error","block","get","entry","type","content","size"],"mappings":";;;AAAA,OAAOA,OAAP,MAAoB,UAApB;AACA,OAAOC,oBAAP,MAAiC,qCAAjC;AACA,OAAOC,uBAAP,MAAoC,wCAApC;;AACA,MAAMC,UAAU,GAAGC,IAAI,IAAI;AAAA,WACTC,gBADS;AAAA;AAAA;;AAAA;AAAA,4CACzB,WAAiCC,OAAO,GAAG,EAA3C,EAA+C;AAC7C,YAAM;AAACC,QAAAA,MAAD;AAASC,QAAAA;AAAT,UAAmBN,uBAAuB,CAACE,IAAI,CAACI,MAAN,EAAcF,OAAO,CAACC,MAAtB,EAA8BD,OAAO,CAACE,MAAtC,CAAhD;AACA,YAAMP,oBAAoB,CAACG,IAAD,EAAO,CAAP,EAAUG,MAAV,EAAkBA,MAAM,GAAGC,MAA3B,CAA1B;AACD,KAJwB;AAAA;AAAA;;AAKzB,SAAOH,gBAAP;AACD,CAND;;AAOA,MAAMI,OAAO;AAAA,+BAAG,WAAOC,GAAP,EAAYC,IAAZ,EAAkBC,IAAlB,EAAwBC,SAAxB,EAAmCJ,QAAnC,EAA4CK,KAA5C,EAAmDC,UAAnD,EAA+DT,OAA/D,EAA2E;AACzF,QAAIO,SAAS,CAACL,MAAd,EAAsB;AACpB,YAAMR,OAAO,CAAC,IAAIgB,KAAJ,CAAW,iBAAiBJ,IAAM,sBAAsBF,GAAK,EAA7D,CAAD,EAAkE,eAAlE,CAAb;AACD;;AACD,UAAMO,KAAK,SAASF,UAAU,CAACG,GAAX,CAAeR,GAAf,EAAoBJ,OAApB,CAApB;AACA,WAAO;AACLa,MAAAA,KAAK,EAAE;AACLC,QAAAA,IAAI,EAAE,KADD;AAELT,QAAAA,IAFK;AAGLC,QAAAA,IAHK;AAILF,QAAAA,GAJK;AAKLW,QAAAA,OAAO,EAAElB,UAAU,CAACc,KAAD,CALd;AAMLH,QAAAA,KANK;AAOLQ,QAAAA,IAAI,EAAEL,KAAK,CAACT,MAPP;AAQLJ,QAAAA,IAAI,EAAEa;AARD;AADF,KAAP;AAYD,GAjBY;;AAAA;AAAA;AAAA;AAAA,GAAb;;AAkBA,eAAeR,OAAf","sourcesContent":["import errCode from 'err-code';\nimport extractDataFromBlock from '../utils/extract-data-from-block.js';\nimport validateOffsetAndLength from '../utils/validate-offset-and-length.js';\nconst rawContent = node => {\n  async function* contentGenerator(options = {}) {\n    const {offset, length} = validateOffsetAndLength(node.length, options.offset, options.length);\n    yield extractDataFromBlock(node, 0, offset, offset + length);\n  }\n  return contentGenerator;\n};\nconst resolve = async (cid, name, path, toResolve, resolve, depth, blockstore, options) => {\n  if (toResolve.length) {\n    throw errCode(new Error(`No link named ${ path } found in raw node ${ cid }`), 'ERR_NOT_FOUND');\n  }\n  const block = await blockstore.get(cid, options);\n  return {\n    entry: {\n      type: 'raw',\n      name,\n      path,\n      cid,\n      content: rawContent(block),\n      depth,\n      size: block.length,\n      node: block\n    }\n  };\n};\nexport default resolve;"]},"metadata":{},"sourceType":"module"}