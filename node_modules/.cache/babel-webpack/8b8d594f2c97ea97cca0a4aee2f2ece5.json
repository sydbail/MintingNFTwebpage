{"ast":null,"code":"import _asyncToGenerator from \"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\n\nconst Web3 = require('web3');\n\nlet Web3Service = class Web3Service {\n  web3;\n\n  constructor() {\n    this.checkAndInstantiateWeb3();\n  }\n\n  checkAndInstantiateWeb3() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (window.ethereum) {\n        _this.web3 = new Web3(window.ethereum); //TODO: check alternative for enable\n\n        yield window.ethereum.enable();\n      } else if (window.web3) {\n        _this.web3 = new Web3(window.web3.currentProvider);\n        yield window.ethereum.enable();\n      } else {\n        window.alert('Non-Ethereum browser detected. Please install MetaMask plugin');\n      }\n    })();\n  }\n\n  getAccounts() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      let accounts = yield _this2.web3.eth.getAccounts();\n      _this2.web3.eth.defaultAccount = accounts[0];\n      return accounts;\n    })();\n  }\n\n  static ctorParameters = () => [];\n};\nWeb3Service = __decorate([Injectable({\n  providedIn: 'root'\n})], Web3Service);\nexport { Web3Service };","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Demo/src/app/services/web3.service.ts"],"names":[],"mappings":";;AAAA,SAAS,UAAT,QAA2B,eAA3B;;AAMA,MAAM,IAAI,GAAG,OAAO,CAAC,MAAD,CAApB;;IAMa,WAAW,GAAA,MAAX,WAAW,CAAA;AAEf,EAAA,IAAI;;AAEX,EAAA,WAAA,GAAA;AACC,SAAK,uBAAL;AACA;;AAEK,EAAA,uBAAuB,GAAA;AAAA;;AAAA;AAC3B,UAAI,MAAM,CAAC,QAAX,EAAqB;AAClB,QAAA,KAAI,CAAC,IAAL,GAAY,IAAI,IAAJ,CAAS,MAAM,CAAC,QAAhB,CAAZ,CADkB,CAElB;;AACA,cAAM,MAAM,CAAC,QAAP,CAAgB,MAAhB,EAAN;AACH,OAJA,MAIM,IAAI,MAAM,CAAC,IAAX,EAAiB;AACpB,QAAA,KAAI,CAAC,IAAL,GAAY,IAAI,IAAJ,CAAS,MAAM,CAAC,IAAP,CAAY,eAArB,CAAZ;AACA,cAAM,MAAM,CAAC,QAAP,CAAgB,MAAhB,EAAN;AACH,OAHM,MAGA;AACH,QAAA,MAAM,CAAC,KAAP,CAAa,+DAAb;AACH;AAV2B;AAW5B;;AAEK,EAAA,WAAW,GAAA;AAAA;;AAAA;AACf,UAAI,QAAQ,SAAS,MAAI,CAAC,IAAL,CAAU,GAAV,CAAc,WAAd,EAArB;AACA,MAAA,MAAI,CAAC,IAAL,CAAU,GAAV,CAAc,cAAd,GAA+B,QAAQ,CAAC,CAAD,CAAvC;AACA,aAAO,QAAP;AAHe;AAIhB;;;AAzBqB,C;AAAX,WAAW,GAAA,UAAA,CAAA,CAHvB,UAAU,CAAC;AACV,EAAA,UAAU,EAAE;AADF,CAAD,CAGa,CAAA,EAAX,WAAW,CAAX;SAAA,W","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { from } from 'rxjs';\n//enviroment variables, provides localhost:8545 as provider for HTTP\nimport { environment } from '../../environments/environment';\n\nconst Web3 = require('web3');\ndeclare var window: any;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class Web3Service {\n\n  public web3: any;\n\n  constructor() {\n  \tthis.checkAndInstantiateWeb3();\n  }\n\n  async checkAndInstantiateWeb3() {\n    if (window.ethereum) {\n       this.web3 = new Web3(window.ethereum);\n       //TODO: check alternative for enable\n       await window.ethereum.enable();\n   } else if (window.web3) {\n       this.web3 = new Web3(window.web3.currentProvider);\n       await window.ethereum.enable();\n   } else {\n       window.alert('Non-Ethereum browser detected. Please install MetaMask plugin');\n   }\n  }\n\n  async getAccounts(): Promise<any>{\n    let accounts = await this.web3.eth.getAccounts();\n    this.web3.eth.defaultAccount = accounts[0];\n    return accounts;\n  }\n\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}