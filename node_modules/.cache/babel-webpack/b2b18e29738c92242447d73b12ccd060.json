{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ConstantArbitrary = void 0;\n\nconst Stream_1 = require(\"../../stream/Stream\");\n\nconst NextArbitrary_1 = require(\"../../check/arbitrary/definition/NextArbitrary\");\n\nconst NextValue_1 = require(\"../../check/arbitrary/definition/NextValue\");\n\nconst symbols_1 = require(\"../../check/symbols\");\n\nclass ConstantArbitrary extends NextArbitrary_1.NextArbitrary {\n  constructor(values) {\n    super();\n    this.values = values;\n  }\n\n  generate(mrng, _biasFactor) {\n    const idx = this.values.length === 1 ? 0 : mrng.nextInt(0, this.values.length - 1);\n    const value = this.values[idx];\n\n    if (!symbols_1.hasCloneMethod(value)) {\n      return new NextValue_1.NextValue(value, idx);\n    }\n\n    return new NextValue_1.NextValue(value, idx, () => value[symbols_1.cloneMethod]());\n  }\n\n  canShrinkWithoutContext(value) {\n    for (let idx = 0; idx !== this.values.length; ++idx) {\n      if (Object.is(this.values[idx], value)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  shrink(value, context) {\n    if (context === 0 || Object.is(value, this.values[0])) {\n      return Stream_1.Stream.nil();\n    }\n\n    return Stream_1.Stream.of(new NextValue_1.NextValue(this.values[0], 0));\n  }\n\n}\n\nexports.ConstantArbitrary = ConstantArbitrary;","map":null,"metadata":{},"sourceType":"script"}