{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.webUrl = exports.webFragments = exports.webQueryParameters = exports.webSegment = exports.webAuthority = void 0;\n\nconst array_1 = require(\"../../arbitrary/array\");\n\nconst constantFrom_1 = require(\"../../arbitrary/constantFrom\");\n\nconst constant_1 = require(\"../../arbitrary/constant\");\n\nconst SpecificCharacterRange_1 = require(\"./helpers/SpecificCharacterRange\");\n\nconst HostArbitrary_1 = require(\"./HostArbitrary\");\n\nconst nat_1 = require(\"../../arbitrary/nat\");\n\nconst ipV4_1 = require(\"../../arbitrary/ipV4\");\n\nconst ipV4Extended_1 = require(\"../../arbitrary/ipV4Extended\");\n\nconst ipV6_1 = require(\"../../arbitrary/ipV6\");\n\nconst oneof_1 = require(\"../../arbitrary/oneof\");\n\nconst option_1 = require(\"../../arbitrary/option\");\n\nconst stringOf_1 = require(\"../../arbitrary/stringOf\");\n\nconst tuple_1 = require(\"../../arbitrary/tuple\");\n\nfunction webAuthority(constraints) {\n  const c = constraints || {};\n  const hostnameArbs = [HostArbitrary_1.domain()].concat(c.withIPv4 === true ? [ipV4_1.ipV4()] : []).concat(c.withIPv6 === true ? [ipV6_1.ipV6().map(ip => `[${ip}]`)] : []).concat(c.withIPv4Extended === true ? [ipV4Extended_1.ipV4Extended()] : []);\n  return tuple_1.tuple(c.withUserInfo === true ? option_1.option(HostArbitrary_1.hostUserInfo()) : constant_1.constant(null), oneof_1.oneof(...hostnameArbs), c.withPort === true ? option_1.option(nat_1.nat(65535)) : constant_1.constant(null)).map(([u, h, p]) => (u === null ? '' : `${u}@`) + h + (p === null ? '' : `:${p}`));\n}\n\nexports.webAuthority = webAuthority;\n\nfunction webSegment() {\n  const others = ['-', '.', '_', '~', '!', '$', '&', \"'\", '(', ')', '*', '+', ',', ';', '=', ':', '@'];\n  return stringOf_1.stringOf(SpecificCharacterRange_1.buildAlphaNumericPercentArb(others));\n}\n\nexports.webSegment = webSegment;\n\nfunction uriQueryOrFragment() {\n  const others = ['-', '.', '_', '~', '!', '$', '&', \"'\", '(', ')', '*', '+', ',', ';', '=', ':', '@', '/', '?'];\n  return stringOf_1.stringOf(SpecificCharacterRange_1.buildAlphaNumericPercentArb(others));\n}\n\nfunction webQueryParameters() {\n  return uriQueryOrFragment();\n}\n\nexports.webQueryParameters = webQueryParameters;\n\nfunction webFragments() {\n  return uriQueryOrFragment();\n}\n\nexports.webFragments = webFragments;\n\nfunction webUrl(constraints) {\n  const c = constraints || {};\n  const validSchemes = c.validSchemes || ['http', 'https'];\n  const schemeArb = constantFrom_1.constantFrom(...validSchemes);\n  const authorityArb = webAuthority(c.authoritySettings);\n  const pathArb = array_1.array(webSegment()).map(p => p.map(v => `/${v}`).join(''));\n  return tuple_1.tuple(schemeArb, authorityArb, pathArb, c.withQueryParameters === true ? option_1.option(webQueryParameters()) : constant_1.constant(null), c.withFragments === true ? option_1.option(webFragments()) : constant_1.constant(null)).map(([s, a, p, q, f]) => `${s}://${a}${p}${q === null ? '' : `?${q}`}${f === null ? '' : `#${f}`}`);\n}\n\nexports.webUrl = webUrl;","map":null,"metadata":{},"sourceType":"script"}