{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nvar _awaitAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\").default;\n\nvar _wrapAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nconst abortable = require('abortable-iterator');\n\nconst {\n  CLOSE_TIMEOUT\n} = require('./constants');\n\nconst toMultiaddr = require('libp2p-utils/src/ip-port-to-multiaddr');\n\nconst pTimeout = require('p-timeout');\n\nconst debug = require('debug');\n\nconst log = debug('libp2p:websockets:socket');\nlog.error = debug('libp2p:websockets:socket:error'); // Convert a stream into a MultiaddrConnection\n// https://github.com/libp2p/interface-transport#multiaddrconnection\n\nmodule.exports = (stream, options = {}) => {\n  const maConn = {\n    sink(source) {\n      return _asyncToGenerator(function* () {\n        if (options.signal) {\n          source = abortable(source, options.signal);\n        }\n\n        try {\n          yield stream.sink(_wrapAsyncGenerator(function* () {\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n\n            var _iteratorError;\n\n            try {\n              for (var _iterator = _asyncIterator(source), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n                const chunk = _value;\n                // Convert BufferList to Buffer\n                yield chunk instanceof Uint8Array ? chunk : chunk.slice();\n              }\n            } catch (err) {\n              _didIteratorError = true;\n              _iteratorError = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                  yield _awaitAsyncGenerator(_iterator.return());\n                }\n              } finally {\n                if (_didIteratorError) {\n                  throw _iteratorError;\n                }\n              }\n            }\n          })());\n        } catch (err) {\n          if (err.type !== 'aborted') {\n            log.error(err);\n          }\n        }\n      })();\n    },\n\n    source: options.signal ? abortable(stream.source, options.signal) : stream.source,\n    conn: stream,\n    localAddr: options.localAddr || (stream.localAddress && stream.localPort ? toMultiaddr(stream.localAddress, stream.localPort) : undefined),\n    // If the remote address was passed, use it - it may have the peer ID encapsulated\n    remoteAddr: options.remoteAddr || toMultiaddr(stream.remoteAddress, stream.remotePort),\n    timeline: {\n      open: Date.now()\n    },\n\n    close() {\n      return _asyncToGenerator(function* () {\n        const start = Date.now();\n\n        try {\n          yield pTimeout(stream.close(), CLOSE_TIMEOUT);\n        } catch (err) {\n          const {\n            host,\n            port\n          } = maConn.remoteAddr.toOptions();\n          log('timeout closing stream to %s:%s after %dms, destroying it manually', host, port, Date.now() - start);\n          stream.destroy();\n        } finally {\n          maConn.timeline.close = Date.now();\n        }\n      })();\n    }\n\n  };\n  stream.socket.once && stream.socket.once('close', () => {\n    // In instances where `close` was not explicitly called,\n    // such as an iterable stream ending, ensure we have set the close\n    // timeline\n    if (!maConn.timeline.close) {\n      maConn.timeline.close = Date.now();\n    }\n  });\n  return maConn;\n};","map":null,"metadata":{},"sourceType":"script"}