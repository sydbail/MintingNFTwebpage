{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nvar _wrapAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\").default;\n\nvar _awaitAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\").default;\n\nvar _asyncGeneratorDelegate = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncGeneratorDelegate\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst configure = require('./lib/configure');\n\nconst toUrlSearchParams = require('./lib/to-url-search-params');\n\nconst stat = require('./files/stat');\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\n\nmodule.exports = configure((api, opts) => {\n  /**\n   * @type {RootAPI[\"ls\"]}\n   */\n  function ls(_x) {\n    return _ls.apply(this, arguments);\n  }\n\n  function _ls() {\n    _ls = _wrapAsyncGenerator(function* (path, options = {}) {\n      const pathStr = `${path instanceof Uint8Array ? CID.decode(path) : path}`;\n      /**\n       * @param {*} link\n       */\n\n      function mapLink(_x2) {\n        return _mapLink.apply(this, arguments);\n      }\n\n      function _mapLink() {\n        _mapLink = _asyncToGenerator(function* (link) {\n          let hash = link.Hash;\n\n          if (hash.includes('/')) {\n            // the hash is a path, but we need the CID\n            const ipfsPath = hash.startsWith('/ipfs/') ? hash : `/ipfs/${hash}`;\n            const stats = yield stat(opts)(ipfsPath);\n            hash = stats.cid;\n          } else {\n            hash = CID.parse(hash);\n          }\n          /** @type {import('ipfs-core-types/src/root').IPFSEntry} */\n\n\n          const entry = {\n            name: link.Name,\n            path: pathStr + (link.Name ? `/${link.Name}` : ''),\n            size: link.Size,\n            cid: hash,\n            type: typeOf(link)\n          };\n\n          if (link.Mode) {\n            entry.mode = parseInt(link.Mode, 8);\n          }\n\n          if (link.Mtime !== undefined && link.Mtime !== null) {\n            entry.mtime = {\n              secs: link.Mtime\n            };\n\n            if (link.MtimeNsecs !== undefined && link.MtimeNsecs !== null) {\n              entry.mtime.nsecs = link.MtimeNsecs;\n            }\n          }\n\n          return entry;\n        });\n        return _mapLink.apply(this, arguments);\n      }\n\n      const res = yield _awaitAsyncGenerator(api.post('ls', {\n        timeout: options.timeout,\n        signal: options.signal,\n        searchParams: toUrlSearchParams({\n          arg: pathStr,\n          ...options\n        }),\n        headers: options.headers\n      }));\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n\n      var _iteratorError;\n\n      try {\n        for (var _iterator = _asyncIterator(res.ndjson()), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n          let result = _value;\n          result = result.Objects;\n\n          if (!result) {\n            throw new Error('expected .Objects in results');\n          }\n\n          result = result[0];\n\n          if (!result) {\n            throw new Error('expected one array in results.Objects');\n          }\n\n          const links = result.Links;\n\n          if (!Array.isArray(links)) {\n            throw new Error('expected one array in results.Objects[0].Links');\n          }\n\n          if (!links.length) {\n            // no links, this is a file, yield a single result\n            yield mapLink(result);\n            return;\n          }\n\n          yield* _asyncGeneratorDelegate(_asyncIterator(links.map(mapLink)), _awaitAsyncGenerator);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            yield _awaitAsyncGenerator(_iterator.return());\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    });\n    return _ls.apply(this, arguments);\n  }\n\n  return ls;\n});\n/**\n * @param {any} link\n */\n\nfunction typeOf(link) {\n  switch (link.Type) {\n    case 1:\n    case 5:\n      return 'dir';\n\n    case 2:\n      return 'file';\n\n    default:\n      return 'file';\n  }\n}","map":{"version":3,"sources":["/Users/sydneybailey/Internship/contract-testing/node_modules/ipfs-http-client/src/ls.js"],"names":["CID","require","configure","toUrlSearchParams","stat","module","exports","api","opts","ls","path","options","pathStr","Uint8Array","decode","mapLink","link","hash","Hash","includes","ipfsPath","startsWith","stats","cid","parse","entry","name","Name","size","Size","type","typeOf","Mode","mode","parseInt","Mtime","undefined","mtime","secs","MtimeNsecs","nsecs","res","post","timeout","signal","searchParams","arg","headers","ndjson","result","Objects","Error","links","Links","Array","isArray","length","map","Type"],"mappings":"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","sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst configure = require('./lib/configure')\nconst toUrlSearchParams = require('./lib/to-url-search-params')\nconst stat = require('./files/stat')\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nmodule.exports = configure((api, opts) => {\n  /**\n   * @type {RootAPI[\"ls\"]}\n   */\n  async function * ls (path, options = {}) {\n    const pathStr = `${path instanceof Uint8Array ? CID.decode(path) : path}`\n\n    /**\n     * @param {*} link\n     */\n    async function mapLink (link) {\n      let hash = link.Hash\n\n      if (hash.includes('/')) {\n        // the hash is a path, but we need the CID\n        const ipfsPath = hash.startsWith('/ipfs/') ? hash : `/ipfs/${hash}`\n        const stats = await stat(opts)(ipfsPath)\n\n        hash = stats.cid\n      } else {\n        hash = CID.parse(hash)\n      }\n\n      /** @type {import('ipfs-core-types/src/root').IPFSEntry} */\n      const entry = {\n        name: link.Name,\n        path: pathStr + (link.Name ? `/${link.Name}` : ''),\n        size: link.Size,\n        cid: hash,\n        type: typeOf(link)\n      }\n\n      if (link.Mode) {\n        entry.mode = parseInt(link.Mode, 8)\n      }\n\n      if (link.Mtime !== undefined && link.Mtime !== null) {\n        entry.mtime = {\n          secs: link.Mtime\n        }\n\n        if (link.MtimeNsecs !== undefined && link.MtimeNsecs !== null) {\n          entry.mtime.nsecs = link.MtimeNsecs\n        }\n      }\n\n      return entry\n    }\n\n    const res = await api.post('ls', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: pathStr,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (let result of res.ndjson()) {\n      result = result.Objects\n\n      if (!result) {\n        throw new Error('expected .Objects in results')\n      }\n\n      result = result[0]\n      if (!result) {\n        throw new Error('expected one array in results.Objects')\n      }\n\n      const links = result.Links\n      if (!Array.isArray(links)) {\n        throw new Error('expected one array in results.Objects[0].Links')\n      }\n\n      if (!links.length) {\n        // no links, this is a file, yield a single result\n        yield mapLink(result)\n\n        return\n      }\n\n      yield * links.map(mapLink)\n    }\n  }\n  return ls\n})\n\n/**\n * @param {any} link\n */\nfunction typeOf (link) {\n  switch (link.Type) {\n    case 1:\n    case 5:\n      return 'dir'\n    case 2:\n      return 'file'\n    default:\n      return 'file'\n  }\n}\n"]},"metadata":{},"sourceType":"script"}