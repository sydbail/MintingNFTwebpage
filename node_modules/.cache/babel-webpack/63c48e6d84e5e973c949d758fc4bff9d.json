{"ast":null,"code":"import _asyncToGenerator from \"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet UploadComponent = class UploadComponent {\n  IPFSService;\n  selectedFiles; //files selected by user with file broswer\n\n  msg; // holds message associated with upload\n\n  FileInfos = []; // list of all files uploaded\n\n  reUploads = []; // files in selected files that are already uploaded\n\n  ipfsid = null; //ID of ipfs node\n  //metadata form\n\n  showform = false; // display metadata form\n\n  showcontracts = false; // display contracts form\n\n  ipfscontracts = false; //use these vars if user selects set all forms same option\n\n  metaname;\n  metades;\n  creator;\n  value;\n  date;\n  royal;\n  sameVars = false;\n  contractselection;\n  mintingready = false;\n\n  constructor(IPFSService) {\n    this.IPFSService = IPFSService;\n  }\n\n  ngOnInit() {\n    this.start();\n  }\n\n  start() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const id = yield _this.IPFSService.getId();\n      _this.ipfsid = id.id;\n\n      if (_this.ipfsid == null) {\n        console.log(\"IPFS start up FAILED\");\n      }\n\n      const stat = yield _this.IPFSService.getStatus();\n      console.log(stat);\n      /*  To check if node is connected to peers (sharing files)\n        const peerInfos = await this.IPFSService.getPeers();\n        const peers = await this.IPFSService.getPeers();\n        console.log(peers);\n               peerInfos.forEach(info => {\n          console.log(info.id)\n          info.addrs.forEach(addr => console.log(addr.toString()))\n        })*/\n    })();\n  } //on click of choose files button\n\n\n  onChange(event) {\n    this.selectedFiles = event.target.files;\n  } //on click of upload button\n\n\n  onClick() {\n    this.msg = \"\";\n    this.reUploads = [];\n\n    if (this.selectedFiles && this.selectedFiles[0]) {\n      //if user has selected a file\n      const numOfFiles = this.selectedFiles.length; //gets length of selected files list\n\n      for (let i = 0; i < numOfFiles; i++) {\n        //for files selected\n        let name = this.selectedFiles[i].name;\n        let file = this.selectedFiles[i];\n        let match = false;\n\n        for (var t in this.FileInfos) {\n          //check if file has already been uploaded\n          if (this.FileInfos[t].name == name) {\n            match = true;\n          }\n        }\n\n        if (match) {\n          this.reUploads.push(name);\n          continue; //skip to next iteration\n        }\n\n        const reader = new FileReader();\n        reader.readAsDataURL(this.selectedFiles[i]); //read file content\n\n        reader.onload = event => {\n          var image = reader.result;\n\n          if (image) {\n            let imageInfo = {\n              id: i,\n              name: name,\n              url: image,\n              blob: file,\n              imghash: null,\n              mname: null,\n              desc: null,\n              creator: null,\n              value: null,\n              date: null,\n              royal: null,\n              metaHash: null\n            };\n            this.FileInfos.push(imageInfo);\n            this.msg = \"Success\"; //sort alphabetically by name\n\n            const sorted = this.FileInfos.sort((t1, t2) => {\n              const name1 = t1.name.toLowerCase();\n              const name2 = t2.name.toLowerCase();\n\n              if (name1 > name2) {\n                return 1;\n              }\n\n              if (name1 < name2) {\n                return -1;\n              }\n\n              return 0;\n            });\n          } else {\n            //FileReader returned no url\n            console.log(\"FAIL: File could not be read\");\n            this.msg = \"Fail\";\n          }\n        }; //end onload event\n\n      } //end for\n\n    } //end if\n\n  } // end onClick()\n  //file remove button\n\n\n  onRemove(imageObj) {\n    this.msg = \"\";\n    var index = this.FileInfos.indexOf(imageObj);\n    this.FileInfos.splice(index, 1);\n  } //ipfs upload function\n\n\n  ipfsUpload() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      _this2.showform = true;\n      _this2.ipfscontracts = true;\n\n      if (_this2.FileInfos && _this2.FileInfos[0]) {\n        //if user has selected a file\n        const len = _this2.FileInfos.length;\n\n        for (let i = 0; i < len; i++) {\n          _this2.FileInfos[i].imghash = yield _this2.IPFSService.addFile(_this2.FileInfos[i].blob);\n          console.log(\"FILE ADDED. \\nName: \" + _this2.FileInfos[i].name + \"\\nHash: \" + _this2.FileInfos[i].imghash);\n        }\n      }\n    })();\n  } //submit metadata form and convert to JSON form\n\n\n  submitMeta(files, linked) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      if (linked) {\n        for (let i = 0; i < files.length; i++) {\n          let data = {\n            name: _this3.metaname,\n            description: _this3.metades,\n            image: \"ipfs://\" + files[i].imghash,\n            ...(_this3.creator != null && {\n              creator: _this3.creator\n            }),\n            ...(_this3.value && {\n              value: _this3.value\n            }),\n            ...(_this3.date != null && {\n              date: _this3.date\n            }),\n            ...(_this3.royal != null && {\n              royalities: _this3.royal\n            })\n          };\n          let jsonObj = JSON.stringify(data);\n          console.log(\"JSON metadata: \", jsonObj);\n          files[i].metaHash = yield _this3.IPFSService.addFile(jsonObj);\n        }\n      } else {\n        for (let i = 0; i < files.length; i++) {\n          let data = {\n            name: files[i].mname,\n            description: files[i].desc,\n            image: \"ipfs://\" + files[i].imghash,\n            ...(_this3.creator != null && {\n              creator: _this3.creator\n            }),\n            ...(_this3.value && {\n              value: _this3.value\n            }),\n            ...(_this3.date != null && {\n              date: _this3.date\n            }),\n            ...(_this3.royal != null && {\n              royalities: _this3.royal\n            })\n          };\n          let jsonObj = JSON.stringify(data);\n          console.log(\"JSON metadata: \", jsonObj);\n          files[i].metaHash = yield _this3.IPFSService.addFile(jsonObj);\n        }\n      } // end else\n      //investigate wrapping ipfs files in directory\n\n\n      _this3.showcontracts = true;\n    })();\n  } //display the contracts selections if user pressed submit on ipfs form\n  //or did not use metadata\n\n\n  showContracts() {\n    this.showcontracts = true;\n  }\n\n  selectContract() {\n    if (this.contractselection) {\n      this.mintingready = true;\n    }\n  }\n\n};\nUploadComponent = __decorate([Component({\n  selector: 'app-upload',\n  templateUrl: './upload.component.html',\n  styleUrls: ['./upload.component.css']\n})], UploadComponent);\nexport { UploadComponent };","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Demo/src/app/upload/upload.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { IpfsService } from \"../services/ipfs.service\";\nimport { NgForm } from '@angular/forms'\n\n@Component({\n  selector: 'app-upload',\n  templateUrl: './upload.component.html',\n  styleUrls: ['./upload.component.css']\n})\nexport class UploadComponent implements OnInit {\n  selectedFiles?: FileList;           //files selected by user with file broswer\n  msg?: string;                       // holds message associated with upload\n  FileInfos: any[] = [];             // list of all files uploaded\n  reUploads: string[] = [];        // files in selected files that are already uploaded\n  ipfsid: string | null = null;    //ID of ipfs node\n  //metadata form\n  showform: boolean = false;         // display metadata form\n  showcontracts: boolean = false;   // display contracts form\n  ipfscontracts: boolean = false;\n\n  //use these vars if user selects set all forms same option\n  metaname?: string;\n  metades?: string;\n  creator?: string;\n  value?: string;\n  date?: any;\n  royal?: boolean;\n\n  sameVars: boolean = false;\n  contractselection?: string;\n  mintingready: boolean = false;\n\n  constructor(private IPFSService: IpfsService) { }\n\n  ngOnInit(): void {\n    this.start();\n  }\n\n  async start() {\n    const id = await this.IPFSService.getId();\n    this.ipfsid = id.id;\n    if(this.ipfsid == null){\n      console.log(\"IPFS start up FAILED\");\n    }\n    const stat = await this.IPFSService.getStatus();\n    console.log(stat);\n\n  /*  To check if node is connected to peers (sharing files)\n    const peerInfos = await this.IPFSService.getPeers();\n    const peers = await this.IPFSService.getPeers();\n    console.log(peers);\n\n    peerInfos.forEach(info => {\n      console.log(info.id)\n      info.addrs.forEach(addr => console.log(addr.toString()))\n    })*/\n  }\n\n  //on click of choose files button\n  onChange(event: any) {\n    this.selectedFiles = event.target.files;\n  }\n  //on click of upload button\n  onClick() {\n    this.msg = \"\";\n    this.reUploads = [];\n    if(this.selectedFiles && this.selectedFiles[0]) { //if user has selected a file\n      const numOfFiles = this.selectedFiles.length;  //gets length of selected files list\n\n      for (let i = 0; i < numOfFiles; i++) { //for files selected\n        let name = this.selectedFiles[i].name;\n        let file = this.selectedFiles[i];\n        let match = false;\n        for (var t in this.FileInfos) {  //check if file has already been uploaded\n            if (this.FileInfos[t].name == name) {\n              match = true;\n            }\n          }\n\n      if(match){\n        this.reUploads.push(name);\n        continue;  //skip to next iteration\n      }\n\n      const reader = new FileReader();\n      reader.readAsDataURL(this.selectedFiles[i]); //read file content\n      reader.onload = (event) => {                //when image is loaded\n        var image = reader.result as string;\n        if(image){\n          let imageInfo = {\n            id: i,\n            name: name,\n            url: image,\n            blob: file,\n            imghash: null,\n            mname: null,\n            desc: null,\n            creator: null,\n            value: null,\n            date: null,\n            royal: null,\n            metaHash: null\n          };\n          this.FileInfos.push(imageInfo);\n          this.msg = \"Success\";\n\n          //sort alphabetically by name\n          const sorted = this.FileInfos.sort((t1, t2) => {\n          const name1 = t1.name.toLowerCase();\n          const name2 = t2.name.toLowerCase();\n          if (name1 > name2) { return 1; }\n          if (name1 < name2) { return -1; }\n          return 0;\n        })\n      } else { //FileReader returned no url\n          console.log(\"FAIL: File could not be read\");\n          this.msg = \"Fail\";\n          }\n        }; //end onload event\n      } //end for\n    } //end if\n  } // end onClick()\n\n  //file remove button\n  onRemove(imageObj: any) {\n    this.msg = \"\";\n    var index = this.FileInfos.indexOf(imageObj);\n    this.FileInfos.splice(index,1);\n  }\n  //ipfs upload function\n  async ipfsUpload() {\n    this.showform = true;\n    this.ipfscontracts = true;\n    if(this.FileInfos && this.FileInfos[0]) { //if user has selected a file\n      const len = this.FileInfos.length;\n      for(let i = 0; i < len; i++){\n        this.FileInfos[i].imghash = await this.IPFSService.addFile(this.FileInfos[i].blob);\n        console.log(\"FILE ADDED. \\nName: \" + this.FileInfos[i].name + \"\\nHash: \" + this.FileInfos[i].imghash);\n      }\n    }\n  }\n\n  //submit metadata form and convert to JSON form\n  async submitMeta(files: any[], linked: boolean) {\n    if(linked){\n      for(let i=0; i<files.length; i++){\n        let data = {\n          name: this.metaname,\n          description: this.metades,\n          image: \"ipfs://\" + files[i].imghash,\n          ...(this.creator != null && {creator: this.creator}),\n          ...(this.value && {value: this.value}),\n          ...(this.date != null && {date: this.date}),\n          ...(this.royal != null && {royalities: this.royal})\n        }\n        let jsonObj = JSON.stringify(data);\n        console.log(\"JSON metadata: \", jsonObj);\n        files[i].metaHash = await this.IPFSService.addFile(jsonObj);\n      }\n    }else {\n      for(let i=0; i<files.length; i++){\n        let data = {\n          name: files[i].mname,\n          description: files[i].desc,\n          image: \"ipfs://\" + files[i].imghash,\n          ...(this.creator != null && {creator: this.creator}),\n          ...(this.value && {value: this.value}),\n          ...(this.date != null && {date: this.date}),\n          ...(this.royal != null && {royalities: this.royal})\n        }\n        let jsonObj = JSON.stringify(data);\n        console.log(\"JSON metadata: \", jsonObj);\n        files[i].metaHash = await this.IPFSService.addFile(jsonObj);\n      }\n    } // end else\n    //investigate wrapping ipfs files in directory\n    this.showcontracts = true;\n  }\n\n  //display the contracts selections if user pressed submit on ipfs form\n  //or did not use metadata\n  showContracts() {\n    this.showcontracts = true;\n  }\n\n  selectContract() {\n    if(this.contractselection){\n      this.mintingready = true;\n    }\n  }\n\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}