{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/Dapp/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @typedef {import('multiformats/cid').CIDVersion} CIDVersion\n */\n\n/**\n * @param {Object} config\n * @param {import('ipfs-core-utils/src/multicodecs')} config.codecs\n * @param {import('ipfs-core-utils/src/multihashes')} config.hashers\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n *\n */\n\n\nmodule.exports = ({\n  codecs,\n  hashers,\n  repo,\n  preload\n}) => {\n  /**\n   * @type {import('ipfs-core-types/src/block').API[\"put\"]}\n   */\n  function put(_x) {\n    return _put.apply(this, arguments);\n  }\n\n  function _put() {\n    _put = _asyncToGenerator(function* (block, options = {}) {\n      const release = options.pin ? yield repo.gcLock.readLock() : null;\n\n      try {\n        const cidVersion = options.version != null ? options.version : 0;\n        const codecName = options.format || (cidVersion === 0 ? 'dag-pb' : 'raw');\n        const hasher = yield hashers.getHasher(options.mhtype || 'sha2-256');\n        const hash = yield hasher.digest(block);\n        const codec = yield codecs.getCodec(codecName);\n        const cid = CID.create(cidVersion, codec.code, hash);\n        yield repo.blocks.put(cid, block, {\n          signal: options.signal\n        });\n\n        if (options.preload !== false) {\n          preload(cid);\n        }\n\n        if (options.pin === true) {\n          yield repo.pins.pinRecursively(cid, {\n            signal: options.signal\n          });\n        }\n\n        return cid;\n      } finally {\n        if (release) {\n          release();\n        }\n      }\n    });\n    return _put.apply(this, arguments);\n  }\n\n  return withTimeoutOption(put);\n};","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Dapp/node_modules/ipfs-core/src/components/block/put.js"],"names":["CID","require","withTimeoutOption","module","exports","codecs","hashers","repo","preload","put","block","options","release","pin","gcLock","readLock","cidVersion","version","codecName","format","hasher","getHasher","mhtype","hash","digest","codec","getCodec","cid","create","code","blocks","signal","pins","pinRecursively"],"mappings":"AAAA;;;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAUC,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAMC,iBAAiB,GAAGD,OAAO,CAAC,yCAAD,CAAjC;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAE,MAAM,CAACC,OAAP,GAAiB,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA,OAAV;AAAmBC,EAAAA,IAAnB;AAAyBC,EAAAA;AAAzB,CAAD,KAAwC;AACvD;AACF;AACA;AAHyD,WAIxCC,GAJwC;AAAA;AAAA;;AAAA;AAAA,6BAIvD,WAAoBC,KAApB,EAA2BC,OAAO,GAAG,EAArC,EAAyC;AACvC,YAAMC,OAAO,GAAGD,OAAO,CAACE,GAAR,SAAoBN,IAAI,CAACO,MAAL,CAAYC,QAAZ,EAApB,GAA6C,IAA7D;;AAEA,UAAI;AACF,cAAMC,UAAU,GAAGL,OAAO,CAACM,OAAR,IAAmB,IAAnB,GAA0BN,OAAO,CAACM,OAAlC,GAA4C,CAA/D;AACA,cAAMC,SAAS,GAAGP,OAAO,CAACQ,MAAR,KAAmBH,UAAU,KAAK,CAAf,GAAmB,QAAnB,GAA8B,KAAjD,CAAlB;AAEA,cAAMI,MAAM,SAASd,OAAO,CAACe,SAAR,CAAkBV,OAAO,CAACW,MAAR,IAAkB,UAApC,CAArB;AACA,cAAMC,IAAI,SAASH,MAAM,CAACI,MAAP,CAAcd,KAAd,CAAnB;AACA,cAAMe,KAAK,SAASpB,MAAM,CAACqB,QAAP,CAAgBR,SAAhB,CAApB;AACA,cAAMS,GAAG,GAAG3B,GAAG,CAAC4B,MAAJ,CAAWZ,UAAX,EAAuBS,KAAK,CAACI,IAA7B,EAAmCN,IAAnC,CAAZ;AAEA,cAAMhB,IAAI,CAACuB,MAAL,CAAYrB,GAAZ,CAAgBkB,GAAhB,EAAqBjB,KAArB,EAA4B;AAChCqB,UAAAA,MAAM,EAAEpB,OAAO,CAACoB;AADgB,SAA5B,CAAN;;AAIA,YAAIpB,OAAO,CAACH,OAAR,KAAoB,KAAxB,EAA+B;AAC7BA,UAAAA,OAAO,CAACmB,GAAD,CAAP;AACD;;AAED,YAAIhB,OAAO,CAACE,GAAR,KAAgB,IAApB,EAA0B;AACxB,gBAAMN,IAAI,CAACyB,IAAL,CAAUC,cAAV,CAAyBN,GAAzB,EAA8B;AAClCI,YAAAA,MAAM,EAAEpB,OAAO,CAACoB;AADkB,WAA9B,CAAN;AAGD;;AAED,eAAOJ,GAAP;AACD,OAxBD,SAwBU;AACR,YAAIf,OAAJ,EAAa;AACXA,UAAAA,OAAO;AACR;AACF;AACF,KApCsD;AAAA;AAAA;;AAsCvD,SAAOV,iBAAiB,CAACO,GAAD,CAAxB;AACD,CAvCD","sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\n\n/**\n * @typedef {import('multiformats/cid').CIDVersion} CIDVersion\n */\n\n/**\n * @param {Object} config\n * @param {import('ipfs-core-utils/src/multicodecs')} config.codecs\n * @param {import('ipfs-core-utils/src/multihashes')} config.hashers\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n *\n */\nmodule.exports = ({ codecs, hashers, repo, preload }) => {\n  /**\n   * @type {import('ipfs-core-types/src/block').API[\"put\"]}\n   */\n  async function put (block, options = {}) {\n    const release = options.pin ? await repo.gcLock.readLock() : null\n\n    try {\n      const cidVersion = options.version != null ? options.version : 0\n      const codecName = options.format || (cidVersion === 0 ? 'dag-pb' : 'raw')\n\n      const hasher = await hashers.getHasher(options.mhtype || 'sha2-256')\n      const hash = await hasher.digest(block)\n      const codec = await codecs.getCodec(codecName)\n      const cid = CID.create(cidVersion, codec.code, hash)\n\n      await repo.blocks.put(cid, block, {\n        signal: options.signal\n      })\n\n      if (options.preload !== false) {\n        preload(cid)\n      }\n\n      if (options.pin === true) {\n        await repo.pins.pinRecursively(cid, {\n          signal: options.signal\n        })\n      }\n\n      return cid\n    } finally {\n      if (release) {\n        release()\n      }\n    }\n  }\n\n  return withTimeoutOption(put)\n}\n"]},"metadata":{},"sourceType":"script"}