{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nvar _asyncGeneratorDelegate = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncGeneratorDelegate\").default;\n\nvar _awaitAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\").default;\n\nvar _wrapAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nconst {\n  EventEmitter\n} = require('events');\n\nconst errcode = require('err-code');\n\nconst libp2pRecord = require('libp2p-record');\n\nconst {\n  MemoryDatastore\n} = require('interface-datastore');\n\nconst {\n  equals: uint8ArrayEquals\n} = require('uint8arrays/equals');\n\nconst {\n  toString: uint8ArrayToString\n} = require('uint8arrays/to-string');\n\nconst RoutingTable = require('./routing');\n\nconst utils = require('./utils');\n\nconst c = require('./constants');\n\nconst Network = require('./network');\n\nconst contentFetching = require('./content-fetching');\n\nconst contentRouting = require('./content-routing');\n\nconst peerRouting = require('./peer-routing');\n\nconst Message = require('./message');\n\nconst Providers = require('./providers');\n\nconst RandomWalk = require('./random-walk');\n\nconst QueryManager = require('./query-manager');\n\nconst Record = libp2pRecord.Record;\n/**\n * @typedef {*} Libp2p\n * @typedef {*} PeerStore\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {*} Dialer\n * @typedef {*} Registrar\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('multiaddr').Multiaddr} Multiaddr\n * @typedef {object} PeerData\n * @property {PeerId} id\n * @property {Multiaddr[]} multiaddrs\n *\n * @typedef {object} RandomWalkOptions\n * @property {boolean} enabled discovery enabled (default: true)\n * @property {number} queriesPerPeriod how many queries to run per period (default: 1)\n * @property {number} interval how often to run the the random-walk process, in milliseconds (default: 300000)\n * @property {number} timeout how long to wait for the the random-walk query to run, in milliseconds (default: 30000)\n * @property {number} delay how long to wait before starting the first random walk, in milliseconds (default: 10000)\n */\n\n/**\n * A DHT implementation modeled after Kademlia with S/Kademlia modifications.\n * Original implementation in go: https://github.com/libp2p/go-libp2p-kad-dht.\n */\n\nclass KadDHT extends EventEmitter {\n  /**\n   * Create a new KadDHT.\n   *\n   * @param {Object} props\n   * @param {Libp2p} props.libp2p - the libp2p instance\n   * @param {Dialer} props.dialer - libp2p dialer instance\n   * @param {PeerId} props.peerId - peer's peerId\n   * @param {PeerStore} props.peerStore - libp2p peerStore\n   * @param {Registrar} props.registrar - libp2p registrar instance\n   * @param {string} [props.protocolPrefix = '/ipfs'] - libp2p registrar handle protocol\n   * @param {boolean} [props.forceProtocolLegacy = false] - WARNING: this is not recommended and should only be used for legacy purposes\n   * @param {number} props.kBucketSize - k-bucket size (default 20)\n   * @param {boolean} props.clientMode - If true, the DHT will not respond to queries. This should be true if your node will not be dialable. (default: false)\n   * @param {number} props.concurrency - alpha concurrency of queries (default 3)\n   * @param {Datastore} props.datastore - datastore (default MemoryDatastore)\n   * @param {object} props.validators - validators object with namespace as keys and function(key, record, callback)\n   * @param {object} props.selectors - selectors object with namespace as keys and function(key, records)\n   * @param {RandomWalkOptions} props.randomWalk - randomWalk options\n   * @param {function(import('libp2p-record').Record, PeerId): void} [props.onPut] - Called when an entry is added to or changed in the datastore\n   * @param {function(import('libp2p-record').Record): void} [props.onRemove] - Called when an entry is removed from the datastore\n   */\n  constructor({\n    libp2p,\n    dialer,\n    peerId,\n    peerStore,\n    registrar,\n    protocolPrefix = '/ipfs',\n    forceProtocolLegacy = false,\n    datastore = new MemoryDatastore(),\n    kBucketSize = c.K,\n    clientMode = false,\n    concurrency = c.ALPHA,\n    validators = {},\n    selectors = {},\n    randomWalk = {\n      enabled: false,\n      queriesPerPeriod: 1,\n      interval: 300000,\n      timeout: 30000,\n      delay: 10000\n    },\n    onPut = () => {},\n    onRemove = () => {}\n  }) {\n    super();\n\n    if (!dialer) {\n      throw new Error('libp2p-kad-dht requires an instance of Dialer');\n    }\n    /**\n     * Local reference to the libp2p instance. May be undefined.\n     *\n     * @type {Libp2p}\n     */\n\n\n    this.libp2p = libp2p;\n    /**\n     * Local reference to the libp2p dialer instance\n     *\n     * @type {Dialer}\n     */\n\n    this.dialer = dialer;\n    /**\n     * Local peer-id\n     *\n     * @type {PeerId}\n     */\n\n    this.peerId = peerId;\n    /**\n     * Local PeerStore\n     *\n     * @type {PeerStore}\n     */\n\n    this.peerStore = peerStore;\n    /**\n     * Local peer info\n     *\n     * @type {Registrar}\n     */\n\n    this.registrar = registrar;\n    /**\n     * Registrar protocol\n     *\n     * @type {string}\n     */\n\n    this.protocol = protocolPrefix + (forceProtocolLegacy ? '' : c.PROTOCOL_DHT);\n    /**\n     * k-bucket size\n     *\n     * @type {number}\n     */\n\n    this.kBucketSize = kBucketSize;\n    this._clientMode = clientMode;\n    /**\n     * ALPHA concurrency at which each query path with run, defaults to 3\n     *\n     * @type {number}\n     */\n\n    this.concurrency = concurrency;\n    /**\n     * Number of disjoint query paths to use\n     * This is set to `kBucketSize`/2 per the S/Kademlia paper\n     *\n     * @type {number}\n     */\n\n    this.disjointPaths = Math.ceil(this.kBucketSize / 2);\n    /**\n     * The routing table.\n     *\n     * @type {RoutingTable}\n     */\n\n    this.routingTable = new RoutingTable(this.peerId, this.kBucketSize);\n    /**\n     * Reference to the datastore, uses an in-memory store if none given.\n     *\n     * @type {Datastore}\n     */\n\n    this.datastore = datastore;\n    /**\n     * Provider management\n     *\n     * @type {Providers}\n     */\n\n    this.providers = new Providers(this.datastore, this.peerId);\n    this.validators = {\n      pk: libp2pRecord.validator.validators.pk,\n      ...validators\n    };\n    this.selectors = {\n      pk: libp2pRecord.selection.selectors.pk,\n      ...selectors\n    };\n    this.network = new Network(this);\n    this._log = utils.logger(this.peerId);\n    /**\n     * Random walk management\n     *\n     * @type {RandomWalk}\n     */\n\n    this.randomWalk = new RandomWalk(this, randomWalk);\n    /**\n     * Keeps track of running queries\n     *\n     * @type {QueryManager}\n     */\n\n    this._queryManager = new QueryManager();\n    this._running = false; // DHT components\n\n    this.contentFetching = contentFetching(this);\n    this.contentRouting = contentRouting(this);\n    this.peerRouting = peerRouting(this); // datastore events\n\n    this.onPut = onPut;\n    this.onRemove = onRemove;\n  }\n  /**\n   * Is this DHT running.\n   */\n\n\n  get isStarted() {\n    return this._running;\n  }\n  /**\n   * Start listening to incoming connections.\n   */\n\n\n  start() {\n    if (this._running) {\n      return;\n    }\n\n    this._running = true;\n    this.providers.start();\n\n    this._queryManager.start();\n\n    this.network.start(); // Start random walk, it will not run if it's disabled\n\n    this.randomWalk.start();\n  }\n  /**\n   * Stop accepting incoming connections and sending outgoing\n   * messages.\n   */\n\n\n  stop() {\n    this._running = false;\n    this.randomWalk.stop();\n    this.network.stop();\n\n    this._queryManager.stop();\n\n    this.providers.stop();\n  }\n  /**\n   * Store the given key/value  pair in the DHT.\n   *\n   * @param {Uint8Array} key\n   * @param {Uint8Array} value\n   * @param {Object} [options] - put options\n   * @param {number} [options.minPeers] - minimum number of peers required to successfully put (default: closestPeers.length)\n   * @returns {Promise<void>}\n   */\n\n\n  put(key, value, options = {}) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      // eslint-disable-line require-await\n      return _this3.contentFetching.put(key, value, options);\n    })();\n  }\n  /**\n   * Get the value to the given key.\n   * Times out after 1 minute by default.\n   *\n   * @param {Uint8Array} key\n   * @param {Object} [options] - get options\n   * @param {number} [options.timeout] - optional timeout (default: 60000)\n   * @returns {Promise<Uint8Array>}\n   */\n\n\n  get(key, options = {}) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      // eslint-disable-line require-await\n      return _this4.contentFetching.get(key, options);\n    })();\n  }\n  /**\n   * Get the `n` values to the given key without sorting.\n   *\n   * @param {Uint8Array} key\n   * @param {number} nvals\n   * @param {Object} [options] - get options\n   * @param {number} [options.timeout] - optional timeout (default: 60000)\n   */\n\n\n  getMany(key, nvals, options = {}) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      // eslint-disable-line require-await\n      return _this5.contentFetching.getMany(key, nvals, options);\n    })();\n  }\n  /**\n   * Remove the given key from the local datastore.\n   *\n   * @param {Uint8Array} key\n   */\n\n\n  removeLocal(key) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      _this6._log(`removeLocal: ${uint8ArrayToString(key, 'base32')}`);\n\n      const dsKey = utils.bufferToKey(key);\n\n      try {\n        yield _this6.datastore.delete(dsKey);\n      } catch (err) {\n        if (err.code === 'ERR_NOT_FOUND') {\n          return undefined;\n        }\n\n        throw err;\n      }\n    })();\n  }\n  /**\n   * @param {Uint8Array} key\n   * @param {Uint8Array} value\n   */\n\n\n  _putLocal(key, value) {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      _this7._log(`_putLocal: ${uint8ArrayToString(key, 'base32')}`);\n\n      const dsKey = utils.bufferToKey(key);\n      yield _this7.datastore.put(dsKey, value);\n    })();\n  } // ----------- Content Routing\n\n  /**\n   * Announce to the network that we can provide given key's value.\n   *\n   * @param {CID} key\n   * @returns {Promise<void>}\n   */\n\n\n  provide(key) {\n    var _this8 = this;\n\n    return _asyncToGenerator(function* () {\n      // eslint-disable-line require-await\n      return _this8.contentRouting.provide(key);\n    })();\n  }\n  /**\n   * Search the dht for up to `K` providers of the given CID.\n   *\n   * @param {CID} key\n   * @param {Object} [options] - findProviders options\n   * @param {number} [options.timeout=60000] - how long the query should maximally run, in milliseconds (default: 60000)\n   * @param {number} [options.maxNumProviders=5] - maximum number of providers to find\n   * @returns {AsyncIterable<{ id: PeerId, multiaddrs: Multiaddr[] }>}\n   */\n\n\n  findProviders(key, options = {\n    timeout: 6000,\n    maxNumProviders: 5\n  }) {\n    var _this = this;\n\n    return _wrapAsyncGenerator(function* () {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n\n      var _iteratorError;\n\n      try {\n        for (var _iterator = _asyncIterator(_this.contentRouting.findProviders(key, options)), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n          const peerData = _value;\n          yield peerData;\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            yield _awaitAsyncGenerator(_iterator.return());\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    })();\n  } // ----------- Peer Routing -----------\n\n  /**\n   * Search for a peer with the given ID.\n   *\n   * @param {PeerId} id\n   * @param {Object} [options] - findPeer options\n   * @param {number} [options.timeout=60000] - how long the query should maximally run, in milliseconds (default: 60000)\n   * @returns {Promise<{ id: PeerId, multiaddrs: Multiaddr[] }>}\n   */\n\n\n  findPeer(id, options = {\n    timeout: 60000\n  }) {\n    var _this9 = this;\n\n    return _asyncToGenerator(function* () {\n      // eslint-disable-line require-await\n      return _this9.peerRouting.findPeer(id, options);\n    })();\n  }\n  /**\n   * Kademlia 'node lookup' operation.\n   *\n   * @param {Uint8Array} key\n   * @param {Object} [options]\n   * @param {boolean} [options.shallow = false] - shallow query\n   */\n\n\n  getClosestPeers(key, options = {\n    shallow: false\n  }) {\n    var _this2 = this;\n\n    return _wrapAsyncGenerator(function* () {\n      yield* _asyncGeneratorDelegate(_asyncIterator(_this2.peerRouting.getClosestPeers(key, options)), _awaitAsyncGenerator);\n    })();\n  }\n  /**\n   * Get the public key for the given peer id.\n   *\n   * @param {PeerId} peer\n   */\n\n\n  getPublicKey(peer) {\n    return this.peerRouting.getPublicKey(peer);\n  } // ----------- Discovery -----------\n\n  /**\n   * @param {PeerId} peerId\n   * @param {Multiaddr[]} multiaddrs\n   */\n\n\n  _peerDiscovered(peerId, multiaddrs) {\n    this.emit('peer', {\n      id: peerId,\n      multiaddrs\n    });\n  } // ----------- Internals -----------\n\n  /**\n   * Returns the routing tables closest peers, for the key of\n   * the message.\n   *\n   * @param {Message} msg\n   */\n\n\n  _nearestPeersToQuery(msg) {\n    var _this10 = this;\n\n    return _asyncToGenerator(function* () {\n      const key = yield utils.convertBuffer(msg.key);\n\n      const ids = _this10.routingTable.closestPeers(key, _this10.kBucketSize);\n\n      return ids.map(p => {\n        /** @type {{ id: PeerId, addresses: { multiaddr: Multiaddr }[] }} */\n        const peer = _this10.peerStore.get(p);\n\n        return {\n          id: p,\n          multiaddrs: peer ? peer.addresses.map(address => address.multiaddr) : []\n        };\n      });\n    })();\n  }\n  /**\n   * Get the nearest peers to the given query, but iff closer\n   * than self.\n   *\n   * @param {Message} msg\n   * @param {PeerId} peerId\n   */\n\n\n  _betterPeersToQuery(msg, peerId) {\n    var _this11 = this;\n\n    return _asyncToGenerator(function* () {\n      _this11._log('betterPeersToQuery');\n\n      const closer = yield _this11._nearestPeersToQuery(msg);\n      return closer.filter(closer => {\n        if (_this11._isSelf(closer.id)) {\n          // Should bail, not sure\n          _this11._log.error('trying to return self as closer');\n\n          return false;\n        }\n\n        return !closer.id.isEqual(peerId);\n      });\n    })();\n  }\n  /**\n   * Try to fetch a given record by from the local datastore.\n   * Returns the record iff it is still valid, meaning\n   * - it was either authored by this node, or\n   * - it was received less than `MAX_RECORD_AGE` ago.\n   *\n   * @param {Uint8Array} key\n   */\n\n\n  _checkLocalDatastore(key) {\n    var _this12 = this;\n\n    return _asyncToGenerator(function* () {\n      _this12._log(`checkLocalDatastore: ${uint8ArrayToString(key)} %b`, key);\n\n      const dsKey = utils.bufferToKey(key); // Fetch value from ds\n\n      let rawRecord;\n\n      try {\n        rawRecord = yield _this12.datastore.get(dsKey);\n      } catch (err) {\n        if (err.code === 'ERR_NOT_FOUND') {\n          return undefined;\n        }\n\n        throw err;\n      } // Create record from the returned bytes\n\n\n      const record = Record.deserialize(rawRecord);\n\n      if (!record) {\n        throw errcode(new Error('Invalid record'), 'ERR_INVALID_RECORD');\n      } // Check validity: compare time received with max record age\n\n\n      if (record.timeReceived == null || utils.now() - record.timeReceived.getTime() > c.MAX_RECORD_AGE) {\n        // If record is bad delete it and return\n        yield _this12.datastore.delete(dsKey);\n\n        _this12.onRemove(record);\n\n        return undefined;\n      } // Record is valid\n\n\n      return record;\n    })();\n  }\n  /**\n   * Add the peer to the routing table and update it in the peerStore.\n   *\n   * @param {PeerId} peerId\n   */\n\n\n  _add(peerId) {\n    var _this13 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this13.routingTable.add(peerId);\n    })();\n  }\n  /**\n   * Verify a record without searching the DHT.\n   *\n   * @param {import('libp2p-record').Record} record\n   */\n\n\n  _verifyRecordLocally(record) {\n    var _this14 = this;\n\n    return _asyncToGenerator(function* () {\n      _this14._log('verifyRecordLocally');\n\n      yield libp2pRecord.validator.verifyRecord(_this14.validators, record);\n    })();\n  }\n  /**\n   * Is the given peer id our PeerId?\n   *\n   * @param {PeerId} other\n   */\n\n\n  _isSelf(other) {\n    return other && uint8ArrayEquals(this.peerId.id, other.id);\n  }\n  /**\n   * Store the given key/value pair at the peer `target`.\n   *\n   * @param {Uint8Array} key\n   * @param {Uint8Array} rec - encoded record\n   * @param {PeerId} target\n   */\n\n\n  _putValueToPeer(key, rec, target) {\n    var _this15 = this;\n\n    return _asyncToGenerator(function* () {\n      const msg = new Message(Message.TYPES.PUT_VALUE, key, 0);\n      msg.record = Record.deserialize(rec);\n      const resp = yield _this15.network.sendRequest(target, msg);\n\n      if (resp.record && !uint8ArrayEquals(resp.record.value, Record.deserialize(rec).value)) {\n        throw errcode(new Error('value not put correctly'), 'ERR_PUT_VALUE_INVALID');\n      }\n    })();\n  }\n  /**\n   * Query a particular peer for the value for the given key.\n   * It will either return the value or a list of closer peers.\n   *\n   * Note: The peerStore is updated with new addresses found for the given peer.\n   *\n   * @param {PeerId} peer\n   * @param {Uint8Array} key\n   */\n\n\n  _getValueOrPeers(peer, key) {\n    var _this16 = this;\n\n    return _asyncToGenerator(function* () {\n      const msg = yield _this16._getValueSingle(peer, key);\n      const peers = msg.closerPeers;\n      const record = msg.record;\n\n      if (record) {\n        // We have a record\n        try {\n          yield _this16._verifyRecordOnline(record);\n        } catch (err) {\n          const errMsg = 'invalid record received, discarded';\n\n          _this16._log(errMsg);\n\n          throw errcode(new Error(errMsg), 'ERR_INVALID_RECORD');\n        }\n\n        return {\n          record,\n          peers\n        };\n      }\n\n      if (peers.length > 0) {\n        return {\n          peers\n        };\n      }\n\n      throw errcode(new Error('Not found'), 'ERR_NOT_FOUND');\n    })();\n  }\n  /**\n   * Get a value via rpc call for the given parameters.\n   *\n   * @param {PeerId} peer\n   * @param {Uint8Array} key\n   */\n\n\n  _getValueSingle(peer, key) {\n    var _this17 = this;\n\n    return _asyncToGenerator(function* () {\n      // eslint-disable-line require-await\n      const msg = new Message(Message.TYPES.GET_VALUE, key, 0);\n      return _this17.network.sendRequest(peer, msg);\n    })();\n  }\n  /**\n   * Verify a record, fetching missing public keys from the network.\n   * Calls back with an error if the record is invalid.\n   *\n   * @param {import('libp2p-record').Record} record\n   * @returns {Promise<void>}\n   */\n\n\n  _verifyRecordOnline(record) {\n    var _this18 = this;\n\n    return _asyncToGenerator(function* () {\n      yield libp2pRecord.validator.verifyRecord(_this18.validators, record);\n    })();\n  }\n\n}\n\nmodule.exports = KadDHT;\nmodule.exports.multicodec = '/ipfs' + c.PROTOCOL_DHT;","map":null,"metadata":{},"sourceType":"script"}