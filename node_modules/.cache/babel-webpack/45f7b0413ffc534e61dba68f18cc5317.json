{"ast":null,"code":"import _asyncToGenerator from \"/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _awaitAsyncGenerator from \"/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator\";\nimport _wrapAsyncGenerator from \"/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator\";\nimport { CID } from 'multiformats/cid';\nimport errCode from 'err-code';\nimport * as dagCbor from '@ipld/dag-cbor';\n\nconst resolve = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator(function* (cid, name, path, toResolve, _resolve, depth, blockstore, options) {\n    const block = yield blockstore.get(cid);\n    const object = dagCbor.decode(block);\n    let subObject = object;\n    let subPath = path;\n\n    while (toResolve.length) {\n      const prop = toResolve[0];\n\n      if (prop in subObject) {\n        toResolve.shift();\n        subPath = `${subPath}/${prop}`;\n        const subObjectCid = CID.asCID(subObject[prop]);\n\n        if (subObjectCid) {\n          return {\n            entry: {\n              type: 'object',\n              name,\n              path,\n              cid,\n              node: block,\n              depth,\n              size: block.length,\n              content: function () {\n                var _ref = _wrapAsyncGenerator(function* () {\n                  yield object;\n                });\n\n                return function content() {\n                  return _ref.apply(this, arguments);\n                };\n              }()\n            },\n            next: {\n              cid: subObjectCid,\n              name: prop,\n              path: subPath,\n              toResolve\n            }\n          };\n        }\n\n        subObject = subObject[prop];\n      } else {\n        throw errCode(new Error(`No property named ${prop} found in cbor node ${cid}`), 'ERR_NO_PROP');\n      }\n    }\n\n    return {\n      entry: {\n        type: 'object',\n        name,\n        path,\n        cid,\n        node: block,\n        depth,\n        size: block.length,\n        content: function () {\n          var _ref2 = _wrapAsyncGenerator(function* () {\n            yield object;\n          });\n\n          return function content() {\n            return _ref2.apply(this, arguments);\n          };\n        }()\n      }\n    };\n  });\n\n  return function resolve(_x, _x2, _x3, _x4, _x5, _x6, _x7, _x8) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nexport default resolve;","map":{"version":3,"sources":["/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/ipfs-unixfs-exporter/esm/src/resolvers/dag-cbor.js"],"names":["CID","errCode","dagCbor","resolve","cid","name","path","toResolve","depth","blockstore","options","block","get","object","decode","subObject","subPath","length","prop","shift","subObjectCid","asCID","entry","type","node","size","content","next","Error"],"mappings":";;;AAAA,SAASA,GAAT,QAAoB,kBAApB;AACA,OAAOC,OAAP,MAAoB,UAApB;AACA,OAAO,KAAKC,OAAZ,MAAyB,gBAAzB;;AACA,MAAMC,OAAO;AAAA,gCAAG,WAAOC,GAAP,EAAYC,IAAZ,EAAkBC,IAAlB,EAAwBC,SAAxB,EAAmCJ,QAAnC,EAA4CK,KAA5C,EAAmDC,UAAnD,EAA+DC,OAA/D,EAA2E;AACzF,UAAMC,KAAK,SAASF,UAAU,CAACG,GAAX,CAAeR,GAAf,CAApB;AACA,UAAMS,MAAM,GAAGX,OAAO,CAACY,MAAR,CAAeH,KAAf,CAAf;AACA,QAAII,SAAS,GAAGF,MAAhB;AACA,QAAIG,OAAO,GAAGV,IAAd;;AACA,WAAOC,SAAS,CAACU,MAAjB,EAAyB;AACvB,YAAMC,IAAI,GAAGX,SAAS,CAAC,CAAD,CAAtB;;AACA,UAAIW,IAAI,IAAIH,SAAZ,EAAuB;AACrBR,QAAAA,SAAS,CAACY,KAAV;AACAH,QAAAA,OAAO,GAAI,GAAGA,OAAS,IAAIE,IAAM,EAAjC;AACA,cAAME,YAAY,GAAGpB,GAAG,CAACqB,KAAJ,CAAUN,SAAS,CAACG,IAAD,CAAnB,CAArB;;AACA,YAAIE,YAAJ,EAAkB;AAChB,iBAAO;AACLE,YAAAA,KAAK,EAAE;AACLC,cAAAA,IAAI,EAAE,QADD;AAELlB,cAAAA,IAFK;AAGLC,cAAAA,IAHK;AAILF,cAAAA,GAJK;AAKLoB,cAAAA,IAAI,EAAEb,KALD;AAMLH,cAAAA,KANK;AAOLiB,cAAAA,IAAI,EAAEd,KAAK,CAACM,MAPP;AAQLS,cAAAA,OAAO;AAAA,+CAAE,aAAmB;AAC1B,wBAAMb,MAAN;AACD,iBAFM;;AAAA;AAAA;AAAA;AAAA;AARF,aADF;AAaLc,YAAAA,IAAI,EAAE;AACJvB,cAAAA,GAAG,EAAEgB,YADD;AAEJf,cAAAA,IAAI,EAAEa,IAFF;AAGJZ,cAAAA,IAAI,EAAEU,OAHF;AAIJT,cAAAA;AAJI;AAbD,WAAP;AAoBD;;AACDQ,QAAAA,SAAS,GAAGA,SAAS,CAACG,IAAD,CAArB;AACD,OA3BD,MA2BO;AACL,cAAMjB,OAAO,CAAC,IAAI2B,KAAJ,CAAW,qBAAqBV,IAAM,uBAAuBd,GAAK,EAAlE,CAAD,EAAuE,aAAvE,CAAb;AACD;AACF;;AACD,WAAO;AACLkB,MAAAA,KAAK,EAAE;AACLC,QAAAA,IAAI,EAAE,QADD;AAELlB,QAAAA,IAFK;AAGLC,QAAAA,IAHK;AAILF,QAAAA,GAJK;AAKLoB,QAAAA,IAAI,EAAEb,KALD;AAMLH,QAAAA,KANK;AAOLiB,QAAAA,IAAI,EAAEd,KAAK,CAACM,MAPP;AAQLS,QAAAA,OAAO;AAAA,0CAAE,aAAmB;AAC1B,kBAAMb,MAAN;AACD,WAFM;;AAAA;AAAA;AAAA;AAAA;AARF;AADF,KAAP;AAcD,GApDY;;AAAA;AAAA;AAAA;AAAA,GAAb;;AAqDA,eAAeV,OAAf","sourcesContent":["import { CID } from 'multiformats/cid';\nimport errCode from 'err-code';\nimport * as dagCbor from '@ipld/dag-cbor';\nconst resolve = async (cid, name, path, toResolve, resolve, depth, blockstore, options) => {\n  const block = await blockstore.get(cid);\n  const object = dagCbor.decode(block);\n  let subObject = object;\n  let subPath = path;\n  while (toResolve.length) {\n    const prop = toResolve[0];\n    if (prop in subObject) {\n      toResolve.shift();\n      subPath = `${ subPath }/${ prop }`;\n      const subObjectCid = CID.asCID(subObject[prop]);\n      if (subObjectCid) {\n        return {\n          entry: {\n            type: 'object',\n            name,\n            path,\n            cid,\n            node: block,\n            depth,\n            size: block.length,\n            content: async function* () {\n              yield object;\n            }\n          },\n          next: {\n            cid: subObjectCid,\n            name: prop,\n            path: subPath,\n            toResolve\n          }\n        };\n      }\n      subObject = subObject[prop];\n    } else {\n      throw errCode(new Error(`No property named ${ prop } found in cbor node ${ cid }`), 'ERR_NO_PROP');\n    }\n  }\n  return {\n    entry: {\n      type: 'object',\n      name,\n      path,\n      cid,\n      node: block,\n      depth,\n      size: block.length,\n      content: async function* () {\n        yield object;\n      }\n    }\n  };\n};\nexport default resolve;"]},"metadata":{},"sourceType":"module"}