{"ast":null,"code":"import _asyncToGenerator from \"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/web3.service\";\nimport * as i2 from \"../services/basiccontract.service\";\nimport * as i3 from \"../services/ipfscontract.service\";\nimport * as i4 from \"../services/notransfercontract.service\";\nimport * as i5 from \"../services/notransferipfscontract.service\";\nimport * as i6 from \"@angular/common\";\nimport * as i7 from \"@angular/forms\";\n\nfunction MintComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 3);\n    i0.ɵɵelementStart(1, \"h1\");\n    i0.ɵɵtext(2, \" Mint NFTs \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"label\", 4);\n    i0.ɵɵtext(4, \"To Address: \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(5, \"input\", 5);\n    i0.ɵɵelementStart(6, \"button\", 6);\n    i0.ɵɵlistener(\"click\", function MintComponent_div_0_Template_button_click_6_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return ctx_r3.mintCoin();\n    });\n    i0.ɵɵtext(7, \" Mint \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"value\", ctx_r0.account);\n  }\n}\n\nfunction MintComponent_div_1_div_5_div_1_p_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const file_r6 = i0.ɵɵnextContext(2).$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" Token Metadata: \", file_r6.tURI, \" \");\n  }\n}\n\nfunction MintComponent_div_1_div_5_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"hr\", 12);\n    i0.ɵɵelementStart(2, \"p\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"p\");\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(6, MintComponent_div_1_div_5_div_1_p_6_Template, 2, 1, \"p\", 11);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const file_r6 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" Image: \", file_r6.name, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" TokenID: \", file_r6.tokenID, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", file_r6.tURI);\n  }\n}\n\nfunction MintComponent_div_1_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, MintComponent_div_1_div_5_div_1_Template, 7, 3, \"div\", 11);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const file_r6 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", file_r6 !== \"Err\");\n  }\n}\n\nfunction MintComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 7);\n    i0.ɵɵelementStart(1, \"h1\", 8);\n    i0.ɵɵtext(2, \" Minting Results \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"p\", 9);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(5, MintComponent_div_1_div_5_Template, 2, 1, \"div\", 10);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate3(\" \", ctx_r1.tokensMinted, \" \", ctx_r1.userContract, \" NFTs minted to account \", ctx_r1.account, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.filesList);\n  }\n}\n\nfunction MintComponent_div_2_p_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r13 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\" Owner of NFT \", ctx_r13.getownerID, \" is account \", ctx_r13.ownerAddr, \" \");\n  }\n}\n\nfunction MintComponent_div_2_div_22_p_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r16 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\" Token URI for NFT \", ctx_r16.getID, \" is \", ctx_r16.tokenURI, \" \");\n  }\n}\n\nfunction MintComponent_div_2_div_22_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r18 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelementStart(1, \"h1\");\n    i0.ɵɵtext(2, \" Get Token Metadata \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"label\", 4);\n    i0.ɵɵtext(4, \" Token ID \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"input\", 17, 18);\n    i0.ɵɵlistener(\"ngModelChange\", function MintComponent_div_2_div_22_Template_input_ngModelChange_5_listener($event) {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r17 = i0.ɵɵnextContext(2);\n      return ctx_r17.getID = $event;\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"button\", 16);\n    i0.ɵɵlistener(\"click\", function MintComponent_div_2_div_22_Template_button_click_7_listener() {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r19 = i0.ɵɵnextContext(2);\n      return ctx_r19.getURI(ctx_r19.getID);\n    });\n    i0.ɵɵtext(8, \" Check \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(9, MintComponent_div_2_div_22_p_9_Template, 2, 2, \"p\", 11);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r14 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngModel\", ctx_r14.getID);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngIf\", ctx_r14.tokenURI);\n  }\n}\n\nfunction MintComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r21 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 13);\n    i0.ɵɵelementStart(1, \"h1\");\n    i0.ɵɵtext(2, \" To view NFTs in wallet: \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 9);\n    i0.ɵɵelementStart(4, \"ol\");\n    i0.ɵɵelementStart(5, \"li\");\n    i0.ɵɵtext(6, \" Use add token button in metamask wallet \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"li\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"li\");\n    i0.ɵɵtext(10, \" Set token decimal to 0 \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"li\");\n    i0.ɵɵtext(12, \" NFTs should now appear under assets in wallet \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"h1\");\n    i0.ɵɵtext(14, \" Check Owner \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"label\", 4);\n    i0.ɵɵtext(16, \" Token ID \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(17, \"input\", 14, 15);\n    i0.ɵɵlistener(\"ngModelChange\", function MintComponent_div_2_Template_input_ngModelChange_17_listener($event) {\n      i0.ɵɵrestoreView(_r21);\n      const ctx_r20 = i0.ɵɵnextContext();\n      return ctx_r20.getownerID = $event;\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(19, \"button\", 16);\n    i0.ɵɵlistener(\"click\", function MintComponent_div_2_Template_button_click_19_listener() {\n      i0.ɵɵrestoreView(_r21);\n      const ctx_r22 = i0.ɵɵnextContext();\n      return ctx_r22.getOwner();\n    });\n    i0.ɵɵtext(20, \" Check \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(21, MintComponent_div_2_p_21_Template, 2, 2, \"p\", 11);\n    i0.ɵɵtemplate(22, MintComponent_div_2_div_22_Template, 10, 2, \"div\", 11);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(8);\n    i0.ɵɵtextInterpolate1(\" Enter contract address: \", ctx_r2.contractAddress, \" \");\n    i0.ɵɵadvance(9);\n    i0.ɵɵproperty(\"ngModel\", ctx_r2.getownerID);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.ownerAddr);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.metacontract == true);\n  }\n}\n\nexport class MintComponent {\n  _ngZone;\n  web3Service;\n  basicService;\n  ipfsconService;\n  ntbasicService;\n  ntipfsService;\n  filesList;\n  userContract;\n  window; //metamask info\n\n  account; //contract\n\n  metacontract;\n  contractAddress;\n  balance;\n  tokensMinted = 0;\n  tokenID;\n  tokenURI;\n  recipientAddress;\n  finished = false; //form vars\n\n  getID;\n  getownerID;\n  ownerAddr;\n\n  constructor(_ngZone, web3Service, basicService, ipfsconService, ntbasicService, ntipfsService) {\n    this._ngZone = _ngZone;\n    this.web3Service = web3Service;\n    this.basicService = basicService;\n    this.ipfsconService = ipfsconService;\n    this.ntbasicService = ntbasicService;\n    this.ntipfsService = ntipfsService;\n    this.onReady();\n    this.checkContract();\n  }\n\n  onReady() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      let accounts = yield _this.web3Service.getAccounts();\n      _this.account = accounts[0];\n    })();\n  }\n\n  ngOnInit() {}\n\n  checkContract() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this2.userContract == 'basicNFT') {\n        _this2.metacontract = false;\n      } else if (_this2.userContract == 'IPFSNFT') {\n        _this2.metacontract = true;\n      } else if (_this2.userContract == 'noTransferbasicNFT') {\n        _this2.metacontract = false;\n      } else {\n        _this2.metacontract = true;\n      }\n    })();\n  }\n\n  getOwner() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this3.userContract == 'basicNFT') {\n        const owner = yield _this3.basicService.getOwner(_this3.getownerID);\n        _this3.ownerAddr = owner;\n      } else if (_this3.userContract == 'IPFSNFT') {\n        const owner = yield _this3.ipfsconService.getOwner(_this3.getownerID);\n        _this3.ownerAddr = owner;\n      } else if (_this3.userContract == 'noTransferbasicNFT') {\n        const owner = yield _this3.ntbasicService.getOwner(_this3.getownerID);\n        _this3.ownerAddr = owner;\n      } else {\n        const owner = yield _this3.ntipfsService.getOwner(_this3.getownerID);\n        _this3.ownerAddr = owner;\n      }\n    })();\n  }\n\n  mintCoin() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this4.userContract == 'basicNFT') {\n        for (let i = 0; i < _this4.filesList.length; i++) {\n          const response = yield _this4.basicService.mintCoin(_this4.account);\n          _this4.contractAddress = response.logs[0].address;\n          _this4.tokensMinted += 1;\n          _this4.filesList[i].tokenID = response.logs[0].args.tokenId.toNumber();\n        }\n\n        _this4.finished = true;\n      } else if (_this4.userContract == 'IPFSNFT') {\n        for (let i = 0; i < _this4.filesList.length; i++) {\n          const response = yield _this4.ipfsconService.mintCoin(_this4.account, _this4.filesList[i].imghash, _this4.filesList[i].metaHash);\n\n          if (response === null) {\n            alert(\"Error: An NFT has already been minted for this image!\");\n\n            _this4.filesList.splice(i, 1, \"Err\");\n\n            continue;\n          }\n\n          _this4.tokensMinted += 1;\n          _this4.contractAddress = response.logs[0].address;\n          _this4.filesList[i].tokenID = response.logs[0].args.tokenId.toNumber();\n          _this4.filesList[i].tURI = yield _this4.ipfsconService.getTokenUri(_this4.filesList[i].tokenID);\n        }\n\n        _this4.finished = true;\n      } else if (_this4.userContract == 'noTransferbasicNFT') {\n        for (let i = 0; i < _this4.filesList.length; i++) {\n          const response = yield _this4.ntbasicService.mintCoin(_this4.account);\n          _this4.contractAddress = response.logs[0].address;\n          _this4.tokensMinted += 1;\n          _this4.filesList[i].tokenID = response.logs[0].args.tokenId.toNumber();\n        }\n\n        _this4.finished = true;\n      } else {\n        for (let i = 0; i < _this4.filesList.length; i++) {\n          const response = yield _this4.ntipfsService.mintCoin(_this4.account, _this4.filesList[i].imghash, _this4.filesList[i].metaHash);\n\n          if (response === null) {\n            alert(\"Error: An NFT has already been minted for this image!\");\n\n            _this4.filesList.splice(i, 1, \"Err\");\n\n            continue;\n          }\n\n          _this4.contractAddress = response.logs[0].address;\n          _this4.tokensMinted += 1;\n          _this4.filesList[i].tokenID = response.logs[0].args.tokenId.toNumber();\n          _this4.filesList[i].tURI = yield _this4.ipfsconService.getTokenUri(_this4.filesList[i].tokenID);\n        }\n\n        _this4.finished = true;\n      }\n    })();\n  } //end mint coin\n  //METADATA ONLY contracts\n\n\n  getURI(tID) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this5.userContract == 'IPFSNFT') {\n        const tokenURI = yield _this5.ipfsconService.getTokenUri(tID);\n        _this5.tokenURI = tokenURI;\n      } else if (_this5.userContract == 'noTransferIPFSNFT') {\n        const tokenURI = yield _this5.ntipfsService.getTokenUri(tID);\n        _this5.tokenURI = tokenURI;\n      } else {\n        alert(\"Your tokens do not contain Metadata\");\n      }\n    })();\n  }\n\n  static ɵfac = function MintComponent_Factory(t) {\n    return new (t || MintComponent)(i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i1.Web3Service), i0.ɵɵdirectiveInject(i2.BasicContractService), i0.ɵɵdirectiveInject(i3.IpfscontractService), i0.ɵɵdirectiveInject(i4.NotransfercontractService), i0.ɵɵdirectiveInject(i5.NotransferipfscontractService));\n  };\n  static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MintComponent,\n    selectors: [[\"app-mint\"]],\n    inputs: {\n      filesList: \"filesList\",\n      userContract: \"userContract\"\n    },\n    decls: 3,\n    vars: 3,\n    consts: [[\"class\", \"minter\", 4, \"ngIf\"], [\"class\", \"summary\", 4, \"ngIf\"], [\"class\", \"info\", 4, \"ngIf\"], [1, \"minter\"], [1, \"label\"], [\"type\", \"text\", 1, \"addressinput\", 3, \"value\"], [1, \"mint-btn\", 3, \"click\"], [1, \"summary\"], [1, \"sumTitle\"], [1, \"result\"], [4, \"ngFor\", \"ngForOf\"], [4, \"ngIf\"], [1, \"split\"], [1, \"info\"], [\"name\", \"ID\", \"type\", \"text\", \"placeholder\", \"1\", 3, \"ngModel\", \"ngModelChange\"], [\"ownerIDModel\", \"ngModel\"], [1, \"check-btn\", 3, \"click\"], [\"type\", \"text\", \"placeholder\", \"1\", 3, \"ngModel\", \"ngModelChange\"], [\"tokenIDmodel\", \"ngModel\"]],\n    template: function MintComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, MintComponent_div_0_Template, 8, 1, \"div\", 0);\n        i0.ɵɵtemplate(1, MintComponent_div_1_Template, 6, 4, \"div\", 1);\n        i0.ɵɵtemplate(2, MintComponent_div_2_Template, 23, 4, \"div\", 2);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.finished == false);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.finished);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.finished);\n      }\n    },\n    directives: [i6.NgIf, i6.NgForOf, i7.DefaultValueAccessor, i7.NgControlStatus, i7.NgModel],\n    styles: [\".minter[_ngcontent-%COMP%] {\\n  background-color: whitesmoke;\\n  width: 500px;\\n  border: 2px solid lightgrey;\\n  border-radius: 4px;\\n  padding: 10px;\\n  position: absolute;\\n  top: 150px;\\n  left: 100px;\\n}\\n.summary[_ngcontent-%COMP%] {\\n  background-color: whitesmoke;\\n  width: 500px;\\n  border: 2px solid lightgrey;\\n  border-radius: 4px;\\n  padding: 10px;\\n  position: absolute;\\n  top: 150px;\\n  left: 100px;\\n}\\n.sumTitle[_ngcontent-%COMP%] {\\n  text-align: center;\\n}\\n.split[_ngcontent-%COMP%] {\\n  width: 520px;\\n  margin: 0;\\n  position: relative;\\n  right: 10px;\\n}\\n.addressinput[_ngcontent-%COMP%] {\\n  width: 325px;\\n}\\n.mint-btn[_ngcontent-%COMP%] {\\n  font-size: 0.875rem;\\n  width: 75px;\\n  border: 2px solid #20b2aa;\\n  color: #20b2aa;\\n  background-color: whitesmoke;\\n  border-radius: 3px;\\n  padding: 5px;\\n  vertical-align: middle;\\n  position: relative;\\n  left: 10px;\\n  bottom: 2px;\\n }\\n.mint-btn[_ngcontent-%COMP%]:hover {\\n  background-color: #20b2aa;\\n  color: white;\\n  border-color: #20b2aa;\\n}\\n.result[_ngcontent-%COMP%] {\\n  color: black;\\n  font-family: 'Lato', sans-serif;\\n  font-size: 100%;\\n}\\n.info[_ngcontent-%COMP%] {\\n  text-align: left;\\n  background-color: whitesmoke;\\n  \\n  width: 500px;\\n  border: 2px solid lightgrey;\\n  border-radius: 4px;\\n  padding: 10px;\\n  position: absolute;\\n  left: 800px;\\n  top: 150px;\\n}\\n.check-btn[_ngcontent-%COMP%] {\\n  font-size: 0.875rem;\\n  width: 75px;\\n  border: 2px solid #20b2aa;\\n  color: #20b2aa;\\n  background-color: whitesmoke;\\n  border-radius: 3px;\\n  padding: 5px;\\n  vertical-align: middle;\\n  position: relative;\\n  left: 3px;\\n  bottom: 2px;\\n }\\n.check-btn[_ngcontent-%COMP%]:hover {\\n  background-color: #20b2aa;\\n  color: white;\\n  border-color: #20b2aa;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1pbnQuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLDRCQUE0QjtFQUM1QixZQUFZO0VBQ1osMkJBQTJCO0VBQzNCLGtCQUFrQjtFQUNsQixhQUFhO0VBQ2Isa0JBQWtCO0VBQ2xCLFVBQVU7RUFDVixXQUFXO0FBQ2I7QUFDQTtFQUNFLDRCQUE0QjtFQUM1QixZQUFZO0VBQ1osMkJBQTJCO0VBQzNCLGtCQUFrQjtFQUNsQixhQUFhO0VBQ2Isa0JBQWtCO0VBQ2xCLFVBQVU7RUFDVixXQUFXO0FBQ2I7QUFDQTtFQUNFLGtCQUFrQjtBQUNwQjtBQUNBO0VBQ0UsWUFBWTtFQUNaLFNBQVM7RUFDVCxrQkFBa0I7RUFDbEIsV0FBVztBQUNiO0FBQ0E7RUFDRSxZQUFZO0FBQ2Q7QUFDQTtFQUNFLG1CQUFtQjtFQUNuQixXQUFXO0VBQ1gseUJBQXlCO0VBQ3pCLGNBQWM7RUFDZCw0QkFBNEI7RUFDNUIsa0JBQWtCO0VBQ2xCLFlBQVk7RUFDWixzQkFBc0I7RUFDdEIsa0JBQWtCO0VBQ2xCLFVBQVU7RUFDVixXQUFXO0NBQ1o7QUFDRDtFQUNFLHlCQUF5QjtFQUN6QixZQUFZO0VBQ1oscUJBQXFCO0FBQ3ZCO0FBQ0E7RUFDRSxZQUFZO0VBQ1osK0JBQStCO0VBQy9CLGVBQWU7QUFDakI7QUFDQTtFQUNFLGdCQUFnQjtFQUNoQiw0QkFBNEI7RUFDNUIsa0JBQWtCO0VBQ2xCLFlBQVk7RUFDWiwyQkFBMkI7RUFDM0Isa0JBQWtCO0VBQ2xCLGFBQWE7RUFDYixrQkFBa0I7RUFDbEIsV0FBVztFQUNYLFVBQVU7QUFDWjtBQUNBO0VBQ0UsbUJBQW1CO0VBQ25CLFdBQVc7RUFDWCx5QkFBeUI7RUFDekIsY0FBYztFQUNkLDRCQUE0QjtFQUM1QixrQkFBa0I7RUFDbEIsWUFBWTtFQUNaLHNCQUFzQjtFQUN0QixrQkFBa0I7RUFDbEIsU0FBUztFQUNULFdBQVc7Q0FDWjtBQUNEO0VBQ0UseUJBQXlCO0VBQ3pCLFlBQVk7RUFDWixxQkFBcUI7QUFDdkIiLCJmaWxlIjoibWludC5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLm1pbnRlciB7XG4gIGJhY2tncm91bmQtY29sb3I6IHdoaXRlc21va2U7XG4gIHdpZHRoOiA1MDBweDtcbiAgYm9yZGVyOiAycHggc29saWQgbGlnaHRncmV5O1xuICBib3JkZXItcmFkaXVzOiA0cHg7XG4gIHBhZGRpbmc6IDEwcHg7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiAxNTBweDtcbiAgbGVmdDogMTAwcHg7XG59XG4uc3VtbWFyeSB7XG4gIGJhY2tncm91bmQtY29sb3I6IHdoaXRlc21va2U7XG4gIHdpZHRoOiA1MDBweDtcbiAgYm9yZGVyOiAycHggc29saWQgbGlnaHRncmV5O1xuICBib3JkZXItcmFkaXVzOiA0cHg7XG4gIHBhZGRpbmc6IDEwcHg7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiAxNTBweDtcbiAgbGVmdDogMTAwcHg7XG59XG4uc3VtVGl0bGUge1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG59XG4uc3BsaXQge1xuICB3aWR0aDogNTIwcHg7XG4gIG1hcmdpbjogMDtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICByaWdodDogMTBweDtcbn1cbi5hZGRyZXNzaW5wdXQge1xuICB3aWR0aDogMzI1cHg7XG59XG4ubWludC1idG4ge1xuICBmb250LXNpemU6IDAuODc1cmVtO1xuICB3aWR0aDogNzVweDtcbiAgYm9yZGVyOiAycHggc29saWQgIzIwYjJhYTtcbiAgY29sb3I6ICMyMGIyYWE7XG4gIGJhY2tncm91bmQtY29sb3I6IHdoaXRlc21va2U7XG4gIGJvcmRlci1yYWRpdXM6IDNweDtcbiAgcGFkZGluZzogNXB4O1xuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGxlZnQ6IDEwcHg7XG4gIGJvdHRvbTogMnB4O1xuIH1cbi5taW50LWJ0bjpob3ZlciB7XG4gIGJhY2tncm91bmQtY29sb3I6ICMyMGIyYWE7XG4gIGNvbG9yOiB3aGl0ZTtcbiAgYm9yZGVyLWNvbG9yOiAjMjBiMmFhO1xufVxuLnJlc3VsdCB7XG4gIGNvbG9yOiBibGFjaztcbiAgZm9udC1mYW1pbHk6ICdMYXRvJywgc2Fucy1zZXJpZjtcbiAgZm9udC1zaXplOiAxMDAlO1xufVxuLmluZm8ge1xuICB0ZXh0LWFsaWduOiBsZWZ0O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZXNtb2tlO1xuICAvKmhlaWdodDogMTE1cHg7ICovXG4gIHdpZHRoOiA1MDBweDtcbiAgYm9yZGVyOiAycHggc29saWQgbGlnaHRncmV5O1xuICBib3JkZXItcmFkaXVzOiA0cHg7XG4gIHBhZGRpbmc6IDEwcHg7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgbGVmdDogODAwcHg7XG4gIHRvcDogMTUwcHg7XG59XG4uY2hlY2stYnRuIHtcbiAgZm9udC1zaXplOiAwLjg3NXJlbTtcbiAgd2lkdGg6IDc1cHg7XG4gIGJvcmRlcjogMnB4IHNvbGlkICMyMGIyYWE7XG4gIGNvbG9yOiAjMjBiMmFhO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZXNtb2tlO1xuICBib3JkZXItcmFkaXVzOiAzcHg7XG4gIHBhZGRpbmc6IDVweDtcbiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBsZWZ0OiAzcHg7XG4gIGJvdHRvbTogMnB4O1xuIH1cbi5jaGVjay1idG46aG92ZXIge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjBiMmFhO1xuICBjb2xvcjogd2hpdGU7XG4gIGJvcmRlci1jb2xvcjogIzIwYjJhYTtcbn1cbiJdfQ== */\"]\n  });\n}","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Demo/src/app/mint/mint.component.ts","/Users/sydneybailey/Internship/Demo/src/app/mint/mint.component.html"],"names":[],"mappings":"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","sourcesContent":["import { Component, HostListener, NgZone, OnInit, Input } from '@angular/core';\nimport { Web3Service } from '../services/web3.service';\n//contract services\nimport { BasicContractService } from '../services/basiccontract.service';\nimport { IpfscontractService } from '../services/ipfscontract.service';\nimport { NotransfercontractService } from '../services/notransfercontract.service';\nimport { NotransferipfscontractService } from '../services/notransferipfscontract.service';\n\n@Component({\n  selector: 'app-mint',\n  templateUrl: './mint.component.html',\n  styleUrls: ['./mint.component.css']\n})\nexport class MintComponent implements OnInit {\n  @Input() filesList: any;\n  @Input() userContract: any;\n  window: any\n  //metamask info\n  account?: any;\n\n  //contract\n  metacontract?: boolean;\n  contractAddress?: string;\n\n  balance?: number;\n  tokensMinted: number = 0;\n  tokenID?: number;\n  tokenURI?: any;\n  recipientAddress?: string;\n  finished: boolean = false;\n\n  //form vars\n  getID?: number;\n  getownerID?: number;\n  ownerAddr?: string;\n\n  constructor(\n    private _ngZone: NgZone,\n    private web3Service: Web3Service,\n    private basicService: BasicContractService,\n    private ipfsconService: IpfscontractService,\n    private ntbasicService: NotransfercontractService,\n    private ntipfsService: NotransferipfscontractService\n    ) {\n    this.onReady();\n    this.checkContract();\n  }\n\n  async onReady() {\n    let accounts = await this.web3Service.getAccounts();\n    this.account = accounts[0];\n  }\n\n  ngOnInit(): void {}\n\n  async checkContract() {\n    if (this.userContract == 'basicNFT'){\n      this.metacontract = false;\n    } else if (this.userContract == 'IPFSNFT'){\n        this.metacontract = true;\n    } else if (this.userContract == 'noTransferbasicNFT'){\n        this.metacontract = false;\n    } else {\n        this.metacontract = true;\n     }\n  }\n\n  async getOwner() {\n    if(this.userContract == 'basicNFT'){\n      const owner = await this.basicService.getOwner(this.getownerID);\n      this.ownerAddr = owner;\n\n   } else if (this.userContract == 'IPFSNFT'){\n      const owner = await this.ipfsconService.getOwner(this.getownerID);\n      this.ownerAddr = owner;\n\n   } else if (this.userContract == 'noTransferbasicNFT'){\n      const owner = await this.ntbasicService.getOwner(this.getownerID);\n      this.ownerAddr = owner;\n\n  } else {\n      const owner = await this.ntipfsService.getOwner(this.getownerID)\n      this.ownerAddr = owner;\n    }\n  }\n\n async mintCoin () {\n    if(this.userContract == 'basicNFT'){\n      for(let i=0; i < this.filesList.length; i++ ){\n        const response = await this.basicService.mintCoin(this.account);\n        this.contractAddress = response.logs[0].address;\n        this.tokensMinted += 1;\n        this.filesList[i].tokenID = response.logs[0].args.tokenId.toNumber();\n      }\n      this.finished = true;\n    } else if (this.userContract == 'IPFSNFT'){\n      for(let i=0; i < this.filesList.length; i++ ){\n        const response = await this.ipfsconService.mintCoin(this.account, this.filesList[i].imghash, this.filesList[i].metaHash);\n        if(response === null){\n          alert(\"Error: An NFT has already been minted for this image!\");\n          this.filesList.splice(i,1,\"Err\");\n          continue;\n        }\n        this.tokensMinted += 1;\n        this.contractAddress = response.logs[0].address;\n        this.filesList[i].tokenID = response.logs[0].args.tokenId.toNumber();\n        this.filesList[i].tURI = await this.ipfsconService.getTokenUri(this.filesList[i].tokenID);\n      }\n      this.finished = true;\n    } else if (this.userContract == 'noTransferbasicNFT'){\n      for(let i=0; i < this.filesList.length; i++ ){\n        const response = await this.ntbasicService.mintCoin(this.account);\n        this.contractAddress = response.logs[0].address;\n        this.tokensMinted += 1;\n        this.filesList[i].tokenID = response.logs[0].args.tokenId.toNumber();\n      }\n      this.finished = true;\n    } else {\n      for(let i=0; i < this.filesList.length; i++ ){\n        const response = await this.ntipfsService.mintCoin(this.account, this.filesList[i].imghash, this.filesList[i].metaHash);\n        if(response === null){\n          alert(\"Error: An NFT has already been minted for this image!\");\n          this.filesList.splice(i,1, \"Err\");\n          continue;\n        }\n        this.contractAddress = response.logs[0].address;\n        this.tokensMinted += 1;\n        this.filesList[i].tokenID = response.logs[0].args.tokenId.toNumber();\n        this.filesList[i].tURI = await this.ipfsconService.getTokenUri(this.filesList[i].tokenID);\n      }\n      this.finished = true;\n    }\n  }//end mint coin\n\n  //METADATA ONLY contracts\n  async getURI(tID: any) {\n    if(this.userContract == 'IPFSNFT'){\n      const tokenURI = await this.ipfsconService.getTokenUri(tID);\n      this.tokenURI = tokenURI;\n    } else if(this.userContract == 'noTransferIPFSNFT') {\n      const tokenURI = await this.ntipfsService.getTokenUri(tID);\n      this.tokenURI = tokenURI;\n    } else {\n      alert(\"Your tokens do not contain Metadata\");\n    }\n  }\n\n}\n","<div class=\"minter\" *ngIf=\"finished==false\">\n  <h1> Mint NFTs </h1>\n  <label class=\"label\">To Address: </label>\n  <input class=\"addressinput\" type=\"text\" [value]=\"account\">\n  <button class=\"mint-btn\" (click)=\"mintCoin()\"> Mint </button>\n</div>\n\n<div class=\"summary\" *ngIf=\"finished\">\n  <h1 class=\"sumTitle\"> Minting Results </h1>\n    <p class=\"result\"> {{ tokensMinted }} {{ userContract }} NFTs minted\n      to account {{ account }} </p>\n    <div *ngFor=\"let file of filesList; index as i\">\n      <div *ngIf=\"file!=='Err'\">\n        <hr class=\"split\">\n        <p> Image: {{ file.name }} </p>\n        <p> TokenID: {{ file.tokenID }} </p>\n        <p *ngIf=\"file.tURI\"> Token Metadata: {{ file.tURI }} </p>\n      </div>\n  </div>\n</div>\n\n<div class=\"info\" *ngIf=\"finished\">\n  <h1> To view NFTs in wallet: </h1>\n  <div class=\"result\">\n    <ol>\n      <li> Use add token button in metamask wallet </li>\n      <li> Enter contract address: {{ contractAddress }} </li>\n      <li> Set token decimal to 0 </li>\n      <li> NFTs should now appear under assets in wallet </li>\n    </ol>\n  </div>\n\n  <h1> Check Owner </h1>\n  <label class=\"label\"> Token ID </label>\n  <input [(ngModel)]=\"getownerID\"\n      name=\"ID\"\n      type=\"text\"\n      placeholder=\"1\"\n      #ownerIDModel=\"ngModel\">\n  <button class=\"check-btn\" (click)=\"getOwner()\"> Check </button>\n  <p *ngIf=\"ownerAddr\"> Owner of NFT {{ getownerID }} is account {{ this.ownerAddr }} </p>\n\n  <div *ngIf=\"metacontract==true\">\n    <h1> Get Token Metadata </h1>\n    <label class=\"label\"> Token ID </label>\n    <input [(ngModel)]=\"getID\"\n      type=\"text\"\n      placeholder=\"1\"\n      #tokenIDmodel=\"ngModel\">\n    <button class=\"check-btn\" (click)=\"getURI(getID)\"> Check </button>\n    <p *ngIf=\"tokenURI\"> Token URI for NFT {{ getID }} is {{ tokenURI }} </p>\n  </div>\n</div>\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}