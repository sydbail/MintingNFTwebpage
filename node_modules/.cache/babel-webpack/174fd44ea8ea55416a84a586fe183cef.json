{"ast":null,"code":"var _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst BufferList = require('bl/BufferList');\n\nconst Reader = require('it-reader');\n\nmodule.exports = function LteReader(source) {\n  const reader = Reader(source);\n  let overflow;\n  const lteReader = {\n    [Symbol.asyncIterator]: () => lteReader,\n\n    next(bytes) {\n      return _asyncToGenerator(function* () {\n        if (overflow) {\n          let value;\n\n          if (bytes == null || overflow.length === bytes) {\n            value = overflow;\n            overflow = null;\n          } else if (overflow.length > bytes) {\n            value = overflow.shallowSlice(0, bytes);\n            overflow = overflow.shallowSlice(bytes);\n          } else if (overflow.length < bytes) {\n            const {\n              value: nextValue,\n              done\n            } = yield reader.next(bytes - overflow.length);\n\n            if (done) {\n              throw Object.assign(new Error(`stream ended before ${bytes - overflow.length} bytes became available`), {\n                code: 'ERR_UNDER_READ'\n              });\n            }\n\n            value = new BufferList([overflow, nextValue]);\n            overflow = null;\n          }\n\n          return {\n            value\n          };\n        }\n\n        return reader.next(bytes);\n      })();\n    },\n\n    nextLte(bytes) {\n      return _asyncToGenerator(function* () {\n        let {\n          done,\n          value\n        } = yield lteReader.next();\n        if (done) return {\n          done\n        };\n        if (value.length <= bytes) return {\n          value\n        };\n        value = BufferList.isBufferList(value) ? value : new BufferList(value);\n\n        if (overflow) {\n          overflow.append(value.shallowSlice(bytes));\n        } else {\n          overflow = value.shallowSlice(bytes);\n        }\n\n        return {\n          value: value.shallowSlice(0, bytes)\n        };\n      })();\n    },\n\n    return() {\n      return reader.return();\n    }\n\n  };\n  return lteReader;\n};","map":null,"metadata":{},"sourceType":"script"}