{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.integer = void 0;\n\nconst Converters_1 = require(\"../check/arbitrary/definition/Converters\");\n\nconst IntegerArbitrary_1 = require(\"./_internals/IntegerArbitrary\");\n\nfunction buildCompleteIntegerConstraints(constraints) {\n  const min = constraints.min !== undefined ? constraints.min : -0x80000000;\n  const max = constraints.max !== undefined ? constraints.max : 0x7fffffff;\n  return {\n    min,\n    max\n  };\n}\n\nfunction extractIntegerConstraints(args) {\n  if (args[0] === undefined) {\n    return {};\n  }\n\n  if (args[1] === undefined) {\n    const sargs = args;\n    if (typeof sargs[0] === 'number') return {\n      max: sargs[0]\n    };\n    return sargs[0];\n  }\n\n  const sargs = args;\n  return {\n    min: sargs[0],\n    max: sargs[1]\n  };\n}\n\nfunction integer(...args) {\n  const constraints = buildCompleteIntegerConstraints(extractIntegerConstraints(args));\n\n  if (constraints.min > constraints.max) {\n    throw new Error('fc.integer maximum value should be equal or greater than the minimum one');\n  }\n\n  const arb = new IntegerArbitrary_1.IntegerArbitrary(constraints.min, constraints.max);\n  return Converters_1.convertFromNextWithShrunkOnce(arb, arb.defaultTarget());\n}\n\nexports.integer = integer;","map":null,"metadata":{},"sourceType":"script"}