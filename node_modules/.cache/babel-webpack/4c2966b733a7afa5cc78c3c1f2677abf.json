{"ast":null,"code":"'use strict';\n/**\n * Takes an (async) iterable that emits things and returns an async iterable that\n * emits those things in fixed-sized batches.\n *\n * @template T\n * @param {AsyncIterable<T>|Iterable<T>} source\n * @param {number} [size=1]\n * @returns {AsyncIterable<T[]>}\n */\n\nvar _awaitAsyncGenerator = require(\"/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\").default;\n\nvar _wrapAsyncGenerator = require(\"/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nfunction batch(_x) {\n  return _batch.apply(this, arguments);\n}\n\nfunction _batch() {\n  _batch = _wrapAsyncGenerator(function* (source, size = 1) {\n    /** @type {T[]} */\n    let things = [];\n\n    if (size < 1) {\n      size = 1;\n    }\n\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n\n    var _iteratorError;\n\n    try {\n      for (var _iterator = _asyncIterator(source), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n        const thing = _value;\n        things.push(thing);\n\n        while (things.length >= size) {\n          yield things.slice(0, size);\n          things = things.slice(size);\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          yield _awaitAsyncGenerator(_iterator.return());\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    while (things.length) {\n      yield things.slice(0, size);\n      things = things.slice(size);\n    }\n  });\n  return _batch.apply(this, arguments);\n}\n\nmodule.exports = batch;","map":{"version":3,"sources":["/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/it-batch/index.js"],"names":["batch","source","size","things","thing","push","length","slice","module","exports"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;SACiBA,K;;;;;+BAAjB,WAAwBC,MAAxB,EAAgCC,IAAI,GAAG,CAAvC,EAA0C;AACxC;AACA,QAAIC,MAAM,GAAG,EAAb;;AAEA,QAAID,IAAI,GAAG,CAAX,EAAc;AACZA,MAAAA,IAAI,GAAG,CAAP;AACD;;AANuC;AAAA;;AAAA;;AAAA;AAQxC,0CAA0BD,MAA1B,gOAAkC;AAAA,cAAjBG,KAAiB;AAChCD,QAAAA,MAAM,CAACE,IAAP,CAAYD,KAAZ;;AAEA,eAAOD,MAAM,CAACG,MAAP,IAAiBJ,IAAxB,EAA8B;AAC5B,gBAAMC,MAAM,CAACI,KAAP,CAAa,CAAb,EAAgBL,IAAhB,CAAN;AAEAC,UAAAA,MAAM,GAAGA,MAAM,CAACI,KAAP,CAAaL,IAAb,CAAT;AACD;AACF;AAhBuC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAkBxC,WAAOC,MAAM,CAACG,MAAd,EAAsB;AACpB,YAAMH,MAAM,CAACI,KAAP,CAAa,CAAb,EAAgBL,IAAhB,CAAN;AAEAC,MAAAA,MAAM,GAAGA,MAAM,CAACI,KAAP,CAAaL,IAAb,CAAT;AACD;AACF,G;;;;AAEDM,MAAM,CAACC,OAAP,GAAiBT,KAAjB","sourcesContent":["'use strict'\n\n/**\n * Takes an (async) iterable that emits things and returns an async iterable that\n * emits those things in fixed-sized batches.\n *\n * @template T\n * @param {AsyncIterable<T>|Iterable<T>} source\n * @param {number} [size=1]\n * @returns {AsyncIterable<T[]>}\n */\nasync function * batch (source, size = 1) {\n  /** @type {T[]} */\n  let things = []\n\n  if (size < 1) {\n    size = 1\n  }\n\n  for await (const thing of source) {\n    things.push(thing)\n\n    while (things.length >= size) {\n      yield things.slice(0, size)\n\n      things = things.slice(size)\n    }\n  }\n\n  while (things.length) {\n    yield things.slice(0, size)\n\n    things = things.slice(size)\n  }\n}\n\nmodule.exports = batch\n"]},"metadata":{},"sourceType":"script"}