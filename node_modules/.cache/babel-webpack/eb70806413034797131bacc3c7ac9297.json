{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst toCamel = require('../lib/object-to-camel');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/key').API<HTTPClientExtraOptions>} KeyAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {KeyAPI[\"import\"]}\n   */\n  function importKey(_x, _x2, _x3) {\n    return _importKey.apply(this, arguments);\n  }\n\n  function _importKey() {\n    _importKey = _asyncToGenerator(function* (name, pem, password, options = {}) {\n      const res = yield api.post('key/import', {\n        timeout: options.timeout,\n        signal: options.signal,\n        searchParams: toUrlSearchParams({\n          arg: name,\n          pem,\n          password,\n          ...options\n        }),\n        headers: options.headers\n      });\n      const data = yield res.json(); // @ts-ignore server output is not typed\n\n      return toCamel(data);\n    });\n    return _importKey.apply(this, arguments);\n  }\n\n  return importKey;\n});","map":{"version":3,"sources":["/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/ipfs-http-client/src/key/import.js"],"names":["toCamel","require","configure","toUrlSearchParams","module","exports","api","importKey","name","pem","password","options","res","post","timeout","signal","searchParams","arg","headers","data","json"],"mappings":"AAAA;;;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,wBAAD,CAAvB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,6BAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AAEAG,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAACI,GAAG,IAAI;AAChC;AACF;AACA;AAHkC,WAIjBC,SAJiB;AAAA;AAAA;;AAAA;AAAA,mCAIhC,WAA0BC,IAA1B,EAAgCC,GAAhC,EAAqCC,QAArC,EAA+CC,OAAO,GAAG,EAAzD,EAA6D;AAC3D,YAAMC,GAAG,SAASN,GAAG,CAACO,IAAJ,CAAS,YAAT,EAAuB;AACvCC,QAAAA,OAAO,EAAEH,OAAO,CAACG,OADsB;AAEvCC,QAAAA,MAAM,EAAEJ,OAAO,CAACI,MAFuB;AAGvCC,QAAAA,YAAY,EAAEb,iBAAiB,CAAC;AAC9Bc,UAAAA,GAAG,EAAET,IADyB;AAE9BC,UAAAA,GAF8B;AAG9BC,UAAAA,QAH8B;AAI9B,aAAGC;AAJ2B,SAAD,CAHQ;AASvCO,QAAAA,OAAO,EAAEP,OAAO,CAACO;AATsB,OAAvB,CAAlB;AAWA,YAAMC,IAAI,SAASP,GAAG,CAACQ,IAAJ,EAAnB,CAZ2D,CAc3D;;AACA,aAAOpB,OAAO,CAACmB,IAAD,CAAd;AACD,KApB+B;AAAA;AAAA;;AAqBhC,SAAOZ,SAAP;AACD,CAtByB,CAA1B","sourcesContent":["'use strict'\n\nconst toCamel = require('../lib/object-to-camel')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/key').API<HTTPClientExtraOptions>} KeyAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {KeyAPI[\"import\"]}\n   */\n  async function importKey (name, pem, password, options = {}) {\n    const res = await api.post('key/import', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: name,\n        pem,\n        password,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    // @ts-ignore server output is not typed\n    return toCamel(data)\n  }\n  return importKey\n})\n"]},"metadata":{},"sourceType":"script"}