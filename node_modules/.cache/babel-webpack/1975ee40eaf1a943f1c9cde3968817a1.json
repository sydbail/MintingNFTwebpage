{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst multipartRequest = require('../lib/multipart-request');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nconst abortSignal = require('../lib/abort-signal');\n\nconst {\n  AbortController\n} = require('native-abort-controller');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/block').API<HTTPClientExtraOptions>} BlockAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {BlockAPI[\"put\"]}\n   */\n  function put(_x) {\n    return _put.apply(this, arguments);\n  }\n\n  function _put() {\n    _put = _asyncToGenerator(function* (data, options = {}) {\n      // allow aborting requests on body errors\n      const controller = new AbortController();\n      const signal = abortSignal(controller.signal, options.signal);\n      let res;\n\n      try {\n        const response = yield api.post('block/put', {\n          timeout: options.timeout,\n          signal: signal,\n          searchParams: toUrlSearchParams(options),\n          ...(yield multipartRequest(data, controller, options.headers))\n        });\n        res = yield response.json();\n      } catch (err) {\n        // Retry with \"protobuf\"/\"cbor\" format for go-ipfs\n        // TODO: remove when https://github.com/ipfs/go-cid/issues/75 resolved\n        if (options.format === 'dag-pb') {\n          return put(data, { ...options,\n            format: 'protobuf'\n          });\n        } else if (options.format === 'dag-cbor') {\n          return put(data, { ...options,\n            format: 'cbor'\n          });\n        }\n\n        throw err;\n      }\n\n      return CID.parse(res.Key);\n    });\n    return _put.apply(this, arguments);\n  }\n\n  return put;\n});","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Demo/node_modules/ipfs-http-client/src/block/put.js"],"names":["CID","require","multipartRequest","configure","toUrlSearchParams","abortSignal","AbortController","module","exports","api","put","data","options","controller","signal","res","response","post","timeout","searchParams","headers","json","err","format","parse","Key"],"mappings":"AAAA;;;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAUC,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAMC,gBAAgB,GAAGD,OAAO,CAAC,0BAAD,CAAhC;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,6BAAD,CAAjC;;AACA,MAAMI,WAAW,GAAGJ,OAAO,CAAC,qBAAD,CAA3B;;AACA,MAAM;AAAEK,EAAAA;AAAF,IAAsBL,OAAO,CAAC,yBAAD,CAAnC;AAEA;AACA;AACA;AACA;;;AAEAM,MAAM,CAACC,OAAP,GAAiBL,SAAS,CAACM,GAAG,IAAI;AAChC;AACF;AACA;AAHkC,WAIjBC,GAJiB;AAAA;AAAA;;AAAA;AAAA,6BAIhC,WAAoBC,IAApB,EAA0BC,OAAO,GAAG,EAApC,EAAwC;AACtC;AACA,YAAMC,UAAU,GAAG,IAAIP,eAAJ,EAAnB;AACA,YAAMQ,MAAM,GAAGT,WAAW,CAACQ,UAAU,CAACC,MAAZ,EAAoBF,OAAO,CAACE,MAA5B,CAA1B;AAEA,UAAIC,GAAJ;;AACA,UAAI;AACF,cAAMC,QAAQ,SAASP,GAAG,CAACQ,IAAJ,CAAS,WAAT,EAAsB;AAC3CC,UAAAA,OAAO,EAAEN,OAAO,CAACM,OAD0B;AAE3CJ,UAAAA,MAAM,EAAEA,MAFmC;AAG3CK,UAAAA,YAAY,EAAEf,iBAAiB,CAACQ,OAAD,CAHY;AAI3C,oBACQV,gBAAgB,CAACS,IAAD,EAAOE,UAAP,EAAmBD,OAAO,CAACQ,OAA3B,CADxB;AAJ2C,SAAtB,CAAvB;AAQAL,QAAAA,GAAG,SAASC,QAAQ,CAACK,IAAT,EAAZ;AACD,OAVD,CAUE,OAAOC,GAAP,EAAY;AACZ;AACA;AACA,YAAIV,OAAO,CAACW,MAAR,KAAmB,QAAvB,EAAiC;AAC/B,iBAAOb,GAAG,CAACC,IAAD,EAAO,EAAE,GAAGC,OAAL;AAAcW,YAAAA,MAAM,EAAE;AAAtB,WAAP,CAAV;AACD,SAFD,MAEO,IAAIX,OAAO,CAACW,MAAR,KAAmB,UAAvB,EAAmC;AACxC,iBAAOb,GAAG,CAACC,IAAD,EAAO,EAAE,GAAGC,OAAL;AAAcW,YAAAA,MAAM,EAAE;AAAtB,WAAP,CAAV;AACD;;AAED,cAAMD,GAAN;AACD;;AAED,aAAOtB,GAAG,CAACwB,KAAJ,CAAUT,GAAG,CAACU,GAAd,CAAP;AACD,KAjC+B;AAAA;AAAA;;AAmChC,SAAOf,GAAP;AACD,CApCyB,CAA1B","sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst multipartRequest = require('../lib/multipart-request')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst abortSignal = require('../lib/abort-signal')\nconst { AbortController } = require('native-abort-controller')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/block').API<HTTPClientExtraOptions>} BlockAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {BlockAPI[\"put\"]}\n   */\n  async function put (data, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    let res\n    try {\n      const response = await api.post('block/put', {\n        timeout: options.timeout,\n        signal: signal,\n        searchParams: toUrlSearchParams(options),\n        ...(\n          await multipartRequest(data, controller, options.headers)\n        )\n      })\n      res = await response.json()\n    } catch (err) {\n      // Retry with \"protobuf\"/\"cbor\" format for go-ipfs\n      // TODO: remove when https://github.com/ipfs/go-cid/issues/75 resolved\n      if (options.format === 'dag-pb') {\n        return put(data, { ...options, format: 'protobuf' })\n      } else if (options.format === 'dag-cbor') {\n        return put(data, { ...options, format: 'cbor' })\n      }\n\n      throw err\n    }\n\n    return CID.parse(res.Key)\n  }\n\n  return put\n})\n"]},"metadata":{},"sourceType":"script"}