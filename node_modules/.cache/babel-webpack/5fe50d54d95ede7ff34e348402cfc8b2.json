{"ast":null,"code":"var _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nmodule.exports = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (socket) {\n    // if the socket is closing or closed, return end\n    if (socket.readyState >= 2) {\n      throw new Error('socket closed');\n    } // if open, return\n\n\n    if (socket.readyState === 1) {\n      return;\n    }\n\n    return new Promise((resolve, reject) => {\n      const remove = socket && (socket.removeEventListener || socket.removeListener);\n\n      function cleanup() {\n        if (typeof remove === 'function') {\n          remove.call(socket, 'open', handleOpen);\n          remove.call(socket, 'error', handleErr);\n        }\n      }\n\n      function handleOpen() {\n        cleanup();\n        resolve();\n      }\n\n      function handleErr(evt) {\n        cleanup();\n        reject(evt);\n      }\n\n      socket.addEventListener('open', handleOpen);\n      socket.addEventListener('error', handleErr);\n    });\n  });\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/sydneybailey/Internship/contract-testing/node_modules/it-ws/ready.js"],"names":["module","exports","socket","readyState","Error","Promise","resolve","reject","remove","removeEventListener","removeListener","cleanup","call","handleOpen","handleErr","evt","addEventListener"],"mappings":";;AAAAA,MAAM,CAACC,OAAP;AAAA,+BAAiB,WAAMC,MAAN,EAAgB;AAC/B;AACA,QAAIA,MAAM,CAACC,UAAP,IAAqB,CAAzB,EAA4B;AAC1B,YAAM,IAAIC,KAAJ,CAAU,eAAV,CAAN;AACD,KAJ8B,CAM/B;;;AACA,QAAIF,MAAM,CAACC,UAAP,KAAsB,CAA1B,EAA6B;AAC3B;AACD;;AAED,WAAO,IAAIE,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,YAAMC,MAAM,GAAGN,MAAM,KAAKA,MAAM,CAACO,mBAAP,IAA8BP,MAAM,CAACQ,cAA1C,CAArB;;AAEA,eAASC,OAAT,GAAoB;AAClB,YAAI,OAAOH,MAAP,KAAkB,UAAtB,EAAkC;AAChCA,UAAAA,MAAM,CAACI,IAAP,CAAYV,MAAZ,EAAoB,MAApB,EAA4BW,UAA5B;AACAL,UAAAA,MAAM,CAACI,IAAP,CAAYV,MAAZ,EAAoB,OAApB,EAA6BY,SAA7B;AACD;AACF;;AAED,eAASD,UAAT,GAAuB;AACrBF,QAAAA,OAAO;AAAIL,QAAAA,OAAO;AACnB;;AAED,eAASQ,SAAT,CAAoBC,GAApB,EAAyB;AACvBJ,QAAAA,OAAO;AAAIJ,QAAAA,MAAM,CAACQ,GAAD,CAAN;AACZ;;AAEDb,MAAAA,MAAM,CAACc,gBAAP,CAAwB,MAAxB,EAAgCH,UAAhC;AACAX,MAAAA,MAAM,CAACc,gBAAP,CAAwB,OAAxB,EAAiCF,SAAjC;AACD,KApBM,CAAP;AAqBD,GAhCD;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["module.exports = async socket => {\n  // if the socket is closing or closed, return end\n  if (socket.readyState >= 2) {\n    throw new Error('socket closed')\n  }\n\n  // if open, return\n  if (socket.readyState === 1) {\n    return\n  }\n\n  return new Promise((resolve, reject) => {\n    const remove = socket && (socket.removeEventListener || socket.removeListener)\n\n    function cleanup () {\n      if (typeof remove === 'function') {\n        remove.call(socket, 'open', handleOpen)\n        remove.call(socket, 'error', handleErr)\n      }\n    }\n\n    function handleOpen () {\n      cleanup(); resolve()\n    }\n\n    function handleErr (evt) {\n      cleanup(); reject(evt)\n    }\n\n    socket.addEventListener('open', handleOpen)\n    socket.addEventListener('error', handleErr)\n  })\n}\n"]},"metadata":{},"sourceType":"script"}