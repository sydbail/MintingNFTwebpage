{"ast":null,"code":"'use strict';\n\nconst Wantlist = require('../types/wantlist');\n/**\n * @typedef {import('multiformats').CID} CID\n */\n\n\nclass Ledger {\n  /**\n   * @param {import('peer-id')} peerId\n   */\n  constructor(peerId) {\n    this.partner = peerId;\n    this.wantlist = new Wantlist();\n    this.exchangeCount = 0;\n    this.sentToPeer = new Map();\n    this.accounting = {\n      bytesSent: 0,\n      bytesRecv: 0\n    };\n  }\n  /**\n   * @param {number} n\n   */\n\n\n  sentBytes(n) {\n    this.exchangeCount++;\n    this.lastExchange = new Date().getTime();\n    this.accounting.bytesSent += n;\n  }\n  /**\n   * @param {number} n\n   */\n\n\n  receivedBytes(n) {\n    this.exchangeCount++;\n    this.lastExchange = new Date().getTime();\n    this.accounting.bytesRecv += n;\n  }\n  /**\n   *\n   * @param {CID} cid\n   * @param {number} priority\n   * @param {import('../types/message/message').Message.Wantlist.WantType} wantType\n   * @returns {void}\n   */\n\n\n  wants(cid, priority, wantType) {\n    this.wantlist.add(cid, priority, wantType);\n  }\n  /**\n   * @param {CID} cid\n   * @returns {void}\n   */\n\n\n  cancelWant(cid) {\n    this.wantlist.remove(cid);\n  }\n  /**\n   * @param {CID} cid\n   */\n\n\n  wantlistContains(cid) {\n    return this.wantlist.get(cid);\n  }\n  /**\n   * @returns {number}\n   */\n\n\n  debtRatio() {\n    return this.accounting.bytesSent / (this.accounting.bytesRecv + 1); // +1 is to prevent division by zero\n  }\n\n}\n\nmodule.exports = Ledger;","map":null,"metadata":{},"sourceType":"script"}