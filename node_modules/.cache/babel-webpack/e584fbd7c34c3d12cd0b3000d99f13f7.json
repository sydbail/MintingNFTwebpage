{"ast":null,"code":"'use strict';\n/**\n * @typedef {import('../types/message/entry')} BitswapMessageEntry\n * @typedef {import('peer-id')} PeerId\n */\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst {\n  CID\n} = require('multiformats');\n\nconst {\n  base58btc\n} = require('multiformats/bases/base58');\n\nconst Message = require('../types/message');\n\nconst WantType = Message.WantType;\n\nconst Wantlist = require('../types/wantlist');\n\nconst Ledger = require('./ledger');\n\nconst RequestQueue = require('./req-queue');\n\nconst TaskMerger = require('./task-merger');\n\nconst {\n  logger\n} = require('../utils'); // The ideal size of the batched payload. We try to pop this much data off the\n// request queue, but\n// - if there isn't any more data in the queue we send whatever we have\n// - if there are several small items in the queue (eg HAVE response) followed\n//   by one big item (eg a block) that would exceed this target size, we\n//   include the big item in the message\n\n\nconst TARGET_MESSAGE_SIZE = 16 * 1024; // If the client sends a want-have, and the engine has the corresponding block,\n// we check the size of the block and if it's small enough we send the block\n// itself, rather than sending a HAVE.\n// This constant defines the maximum size up to which we replace a HAVE with\n// a block.\n\nconst MAX_SIZE_REPLACE_HAS_WITH_BLOCK = 1024;\n\nclass DecisionEngine {\n  /**\n   * @param {PeerId} peerId\n   * @param {import('interface-blockstore').Blockstore} blockstore\n   * @param {import('../network')} network\n   * @param {import('../stats')} stats\n   * @param {Object} [opts]\n   * @param {number} [opts.targetMessageSize]\n   * @param {number} [opts.maxSizeReplaceHasWithBlock]\n   */\n  constructor(peerId, blockstore, network, stats, opts = {}) {\n    this._log = logger(peerId, 'engine');\n    this.blockstore = blockstore;\n    this.network = network;\n    this._stats = stats;\n    this._opts = this._processOpts(opts); // A list of of ledgers by their partner id\n\n    /** @type {Map<string, Ledger>} */\n\n    this.ledgerMap = new Map();\n    this._running = false; // Queue of want-have / want-block per peer\n\n    this._requestQueue = new RequestQueue(TaskMerger);\n  }\n  /**\n   * @template {Object} Opts\n   * @param {Opts} opts\n   * @returns {Opts & {maxSizeReplaceHasWithBlock:number, targetMessageSize:number}}\n   * @private\n   */\n\n\n  _processOpts(opts) {\n    return {\n      maxSizeReplaceHasWithBlock: MAX_SIZE_REPLACE_HAS_WITH_BLOCK,\n      targetMessageSize: TARGET_MESSAGE_SIZE,\n      ...opts\n    };\n  }\n\n  _scheduleProcessTasks() {\n    setTimeout(() => {\n      this._processTasks();\n    });\n  }\n  /**\n   * Pull tasks off the request queue and send a message to the corresponding\n   * peer\n   */\n\n\n  _processTasks() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (!_this._running) {\n        return;\n      }\n\n      const {\n        peerId,\n        tasks,\n        pendingSize\n      } = _this._requestQueue.popTasks(_this._opts.targetMessageSize);\n\n      if (tasks.length === 0) {\n        return;\n      } // Create a new message\n\n\n      const msg = new Message(false); // Amount of data in the request queue still waiting to be popped\n\n      msg.setPendingBytes(pendingSize); // Split out want-blocks, want-haves and DONT_HAVEs\n\n      const blockCids = [];\n      const blockTasks = new Map();\n\n      for (const task of tasks) {\n        const cid = CID.parse(task.topic);\n\n        if (task.data.haveBlock) {\n          if (task.data.isWantBlock) {\n            blockCids.push(cid);\n            blockTasks.set(task.topic, task.data);\n          } else {\n            // Add HAVES to the message\n            msg.addHave(cid);\n          }\n        } else {\n          // Add DONT_HAVEs to the message\n          msg.addDontHave(cid);\n        }\n      }\n\n      const blocks = yield _this._getBlocks(blockCids);\n\n      for (const [topic, taskData] of blockTasks) {\n        const cid = CID.parse(topic);\n        const blk = blocks.get(topic); // If the block was found (it has not been removed)\n\n        if (blk) {\n          // Add the block to the message\n          msg.addBlock(cid, blk);\n        } else {\n          // The block was not found. If the client requested DONT_HAVE,\n          // add DONT_HAVE to the message.\n          if (taskData.sendDontHave) {\n            msg.addDontHave(cid);\n          }\n        }\n      } // If there's nothing in the message, bail out\n\n\n      if (msg.empty) {\n        peerId && _this._requestQueue.tasksDone(peerId, tasks); // Trigger the next round of task processing\n\n        _this._scheduleProcessTasks();\n\n        return;\n      }\n\n      try {\n        // Send the message\n        peerId && (yield _this.network.sendMessage(peerId, msg)); // Peform sent message accounting\n\n        for (const [cidStr, block] of blocks.entries()) {\n          peerId && _this.messageSent(peerId, CID.parse(cidStr), block);\n        }\n      } catch (err) {\n        _this._log.error(err);\n      } // Free the tasks up from the request queue\n\n\n      peerId && _this._requestQueue.tasksDone(peerId, tasks); // Trigger the next round of task processing\n\n      _this._scheduleProcessTasks();\n    })();\n  }\n  /**\n   * @param {PeerId} peerId\n   * @returns {Map<string, import('../types/wantlist/entry')>}\n   */\n\n\n  wantlistForPeer(peerId) {\n    const peerIdStr = peerId.toB58String();\n    const ledger = this.ledgerMap.get(peerIdStr);\n    return ledger ? ledger.wantlist.sortedEntries() : new Map();\n  }\n  /**\n   * @param {PeerId} peerId\n   */\n\n\n  ledgerForPeer(peerId) {\n    const peerIdStr = peerId.toB58String();\n    const ledger = this.ledgerMap.get(peerIdStr);\n\n    if (!ledger) {\n      return null;\n    }\n\n    return {\n      peer: ledger.partner,\n      value: ledger.debtRatio(),\n      sent: ledger.accounting.bytesSent,\n      recv: ledger.accounting.bytesRecv,\n      exchanged: ledger.exchangeCount\n    };\n  }\n  /**\n   * @returns {PeerId[]}\n   */\n\n\n  peers() {\n    return Array.from(this.ledgerMap.values()).map(l => l.partner);\n  }\n  /**\n   * Receive blocks either from an incoming message from the network, or from\n   * blocks being added by the client on the localhost (eg IPFS add)\n   *\n   * @param {{ cid: CID, data: Uint8Array }[]} blocks\n   */\n\n\n  receivedBlocks(blocks) {\n    if (!blocks.length) {\n      return;\n    } // For each connected peer, check if it wants the block we received\n\n\n    for (const ledger of this.ledgerMap.values()) {\n      for (const block of blocks) {\n        // Filter out blocks that we don't want\n        const want = ledger.wantlistContains(block.cid);\n\n        if (!want) {\n          continue;\n        } // If the block is small enough, just send the block, even if the\n        // client asked for a HAVE\n\n\n        const blockSize = block.data.length;\n\n        const isWantBlock = this._sendAsBlock(want.wantType, blockSize);\n\n        let entrySize = blockSize;\n\n        if (!isWantBlock) {\n          entrySize = Message.blockPresenceSize(want.cid);\n        }\n\n        this._requestQueue.pushTasks(ledger.partner, [{\n          topic: want.cid.toString(base58btc),\n          priority: want.priority,\n          size: entrySize,\n          data: {\n            blockSize,\n            isWantBlock,\n            haveBlock: true,\n            sendDontHave: false\n          }\n        }]);\n      }\n    }\n\n    this._scheduleProcessTasks();\n  }\n  /**\n   * Handle incoming messages\n   *\n   * @param {PeerId} peerId\n   * @param {Message} msg\n   * @returns {Promise<void>}\n   */\n\n\n  messageReceived(peerId, msg) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const ledger = _this2._findOrCreate(peerId);\n\n      if (msg.empty) {\n        return;\n      } // If the message has a full wantlist, clear the current wantlist\n\n\n      if (msg.full) {\n        ledger.wantlist = new Wantlist();\n      } // Record the amount of block data received\n\n\n      _this2._updateBlockAccounting(msg.blocks, ledger);\n\n      if (msg.wantlist.size === 0) {\n        _this2._scheduleProcessTasks();\n\n        return;\n      } // Clear cancelled wants and add new wants to the ledger\n\n      /** @type {CID[]} */\n\n\n      const cancels = [];\n      /** @type {BitswapMessageEntry[]} */\n\n      const wants = [];\n      msg.wantlist.forEach(entry => {\n        if (entry.cancel) {\n          ledger.cancelWant(entry.cid);\n          cancels.push(entry.cid);\n        } else {\n          ledger.wants(entry.cid, entry.priority, entry.wantType);\n          wants.push(entry);\n        }\n      });\n\n      _this2._cancelWants(peerId, cancels);\n\n      yield _this2._addWants(peerId, wants);\n\n      _this2._scheduleProcessTasks();\n    })();\n  }\n  /**\n   * @private\n   * @param {PeerId} peerId\n   * @param {CID[]} cids\n   * @returns {void}\n   */\n\n\n  _cancelWants(peerId, cids) {\n    for (const c of cids) {\n      this._requestQueue.remove(c.toString(base58btc), peerId);\n    }\n  }\n  /**\n   * @private\n   * @param {PeerId} peerId\n   * @param {BitswapMessageEntry[]} wants\n   * @returns {Promise<void>}\n   */\n\n\n  _addWants(peerId, wants) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      // Get the size of each wanted block\n      const blockSizes = yield _this3._getBlockSizes(wants.map(w => w.cid));\n      const tasks = [];\n\n      for (const want of wants) {\n        const id = want.cid.toString(base58btc);\n        const blockSize = blockSizes.get(id); // If the block was not found\n\n        if (blockSize == null) {\n          // Only add the task to the queue if the requester wants a DONT_HAVE\n          if (want.sendDontHave) {\n            tasks.push({\n              topic: id,\n              priority: want.priority,\n              size: Message.blockPresenceSize(want.cid),\n              data: {\n                isWantBlock: want.wantType === WantType.Block,\n                blockSize: 0,\n                haveBlock: false,\n                sendDontHave: want.sendDontHave\n              }\n            });\n          }\n        } else {\n          // The block was found, add it to the queue\n          // If the block is small enough, just send the block, even if the\n          // client asked for a HAVE\n          const isWantBlock = _this3._sendAsBlock(want.wantType, blockSize); // entrySize is the amount of space the entry takes up in the\n          // message we send to the recipient. If we're sending a block, the\n          // entrySize is the size of the block. Otherwise it's the size of\n          // a block presence entry.\n\n\n          let entrySize = blockSize;\n\n          if (!isWantBlock) {\n            entrySize = Message.blockPresenceSize(want.cid);\n          }\n\n          tasks.push({\n            topic: id,\n            priority: want.priority,\n            size: entrySize,\n            data: {\n              isWantBlock,\n              blockSize,\n              haveBlock: true,\n              sendDontHave: want.sendDontHave\n            }\n          });\n        }\n\n        _this3._requestQueue.pushTasks(peerId, tasks);\n      }\n    })();\n  }\n  /**\n   * @private\n   * @param {import('../types/message/message').Message.Wantlist.WantType} wantType\n   * @param {number} blockSize\n   */\n\n\n  _sendAsBlock(wantType, blockSize) {\n    return wantType === WantType.Block || blockSize <= this._opts.maxSizeReplaceHasWithBlock;\n  }\n  /**\n   * @private\n   * @param {CID[]} cids\n   * @returns {Promise<Map<string, number>>}\n   */\n\n\n  _getBlockSizes(cids) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      const blocks = yield _this4._getBlocks(cids);\n      return new Map([...blocks].map(([k, v]) => [k, v.length]));\n    })();\n  }\n  /**\n   * @private\n   * @param {CID[]} cids\n   * @returns {Promise<Map<string, Uint8Array>>}\n   */\n\n\n  _getBlocks(cids) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      const res = new Map();\n      yield Promise.all(cids.map( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (cid) {\n          try {\n            const block = yield _this5.blockstore.get(cid);\n            res.set(cid.toString(base58btc), block);\n          } catch (e) {\n            if (e.code !== 'ERR_NOT_FOUND') {\n              _this5._log.error('failed to query blockstore for %s: %s', cid, e);\n            }\n          }\n        });\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }()));\n      return res;\n    })();\n  }\n  /**\n   * @private\n   * @param {Map<string, Uint8Array>} blocksMap\n   * @param {Ledger} ledger\n   */\n\n\n  _updateBlockAccounting(blocksMap, ledger) {\n    for (const block of blocksMap.values()) {\n      this._log('got block (%s bytes)', block.length);\n\n      ledger.receivedBytes(block.length);\n    }\n  }\n  /**\n   * Clear up all accounting things after message was sent\n   *\n   * @param {PeerId} peerId\n   * @param {CID} cid\n   * @param {Uint8Array} block\n   */\n\n\n  messageSent(peerId, cid, block) {\n    const ledger = this._findOrCreate(peerId);\n\n    ledger.sentBytes(block.length);\n    ledger.wantlist.remove(cid);\n  }\n  /**\n   * @param {PeerId} peerId\n   * @returns {number}\n   */\n\n\n  numBytesSentTo(peerId) {\n    return this._findOrCreate(peerId).accounting.bytesSent;\n  }\n  /**\n   * @param {PeerId} peerId\n   * @returns {number}\n   */\n\n\n  numBytesReceivedFrom(peerId) {\n    return this._findOrCreate(peerId).accounting.bytesRecv;\n  }\n  /**\n   *\n   * @param {PeerId} _peerId\n   * @returns {void}\n   */\n\n\n  peerDisconnected(_peerId) {// if (this.ledgerMap.has(peerId.toB58String())) {\n    //   this.ledgerMap.delete(peerId.toB58String())\n    // }\n    //\n    // TODO: figure out how to remove all other references\n    // in the peer request queue\n  }\n  /**\n   * @private\n   * @param {PeerId} peerId\n   * @returns {Ledger}\n   */\n\n\n  _findOrCreate(peerId) {\n    const peerIdStr = peerId.toB58String();\n    const ledger = this.ledgerMap.get(peerIdStr);\n\n    if (ledger) {\n      return ledger;\n    }\n\n    const l = new Ledger(peerId);\n    this.ledgerMap.set(peerIdStr, l);\n\n    if (this._stats) {\n      this._stats.push(peerIdStr, 'peerCount', 1);\n    }\n\n    return l;\n  }\n\n  start() {\n    this._running = true;\n  }\n\n  stop() {\n    this._running = false;\n  }\n\n}\n\nmodule.exports = DecisionEngine;","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Demo/node_modules/ipfs-bitswap/src/decision-engine/index.js"],"names":["CID","require","base58btc","Message","WantType","Wantlist","Ledger","RequestQueue","TaskMerger","logger","TARGET_MESSAGE_SIZE","MAX_SIZE_REPLACE_HAS_WITH_BLOCK","DecisionEngine","constructor","peerId","blockstore","network","stats","opts","_log","_stats","_opts","_processOpts","ledgerMap","Map","_running","_requestQueue","maxSizeReplaceHasWithBlock","targetMessageSize","_scheduleProcessTasks","setTimeout","_processTasks","tasks","pendingSize","popTasks","length","msg","setPendingBytes","blockCids","blockTasks","task","cid","parse","topic","data","haveBlock","isWantBlock","push","set","addHave","addDontHave","blocks","_getBlocks","taskData","blk","get","addBlock","sendDontHave","empty","tasksDone","sendMessage","cidStr","block","entries","messageSent","err","error","wantlistForPeer","peerIdStr","toB58String","ledger","wantlist","sortedEntries","ledgerForPeer","peer","partner","value","debtRatio","sent","accounting","bytesSent","recv","bytesRecv","exchanged","exchangeCount","peers","Array","from","values","map","l","receivedBlocks","want","wantlistContains","blockSize","_sendAsBlock","wantType","entrySize","blockPresenceSize","pushTasks","toString","priority","size","messageReceived","_findOrCreate","full","_updateBlockAccounting","cancels","wants","forEach","entry","cancel","cancelWant","_cancelWants","_addWants","cids","c","remove","blockSizes","_getBlockSizes","w","id","Block","k","v","res","Promise","all","e","code","blocksMap","receivedBytes","sentBytes","numBytesSentTo","numBytesReceivedFrom","peerDisconnected","_peerId","start","stop","module","exports"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;;;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAUC,OAAO,CAAC,cAAD,CAAvB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAgBD,OAAO,CAAC,2BAAD,CAA7B;;AAEA,MAAME,OAAO,GAAGF,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAMG,QAAQ,GAAGD,OAAO,CAACC,QAAzB;;AACA,MAAMC,QAAQ,GAAGJ,OAAO,CAAC,mBAAD,CAAxB;;AACA,MAAMK,MAAM,GAAGL,OAAO,CAAC,UAAD,CAAtB;;AACA,MAAMM,YAAY,GAAGN,OAAO,CAAC,aAAD,CAA5B;;AACA,MAAMO,UAAU,GAAGP,OAAO,CAAC,eAAD,CAA1B;;AACA,MAAM;AAAEQ,EAAAA;AAAF,IAAaR,OAAO,CAAC,UAAD,CAA1B,C,CAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMS,mBAAmB,GAAG,KAAK,IAAjC,C,CAEA;AACA;AACA;AACA;AACA;;AACA,MAAMC,+BAA+B,GAAG,IAAxC;;AAEA,MAAMC,cAAN,CAAqB;AACnB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,WAAW,CAAEC,MAAF,EAAUC,UAAV,EAAsBC,OAAtB,EAA+BC,KAA/B,EAAsCC,IAAI,GAAG,EAA7C,EAAiD;AAC1D,SAAKC,IAAL,GAAYV,MAAM,CAACK,MAAD,EAAS,QAAT,CAAlB;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKI,MAAL,GAAcH,KAAd;AACA,SAAKI,KAAL,GAAa,KAAKC,YAAL,CAAkBJ,IAAlB,CAAb,CAL0D,CAO1D;;AACA;;AACA,SAAKK,SAAL,GAAiB,IAAIC,GAAJ,EAAjB;AACA,SAAKC,QAAL,GAAgB,KAAhB,CAV0D,CAY1D;;AACA,SAAKC,aAAL,GAAqB,IAAInB,YAAJ,CAAiBC,UAAjB,CAArB;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEc,EAAAA,YAAY,CAAEJ,IAAF,EAAQ;AAClB,WAAO;AACLS,MAAAA,0BAA0B,EAAEhB,+BADvB;AAELiB,MAAAA,iBAAiB,EAAElB,mBAFd;AAGL,SAAGQ;AAHE,KAAP;AAKD;;AAEDW,EAAAA,qBAAqB,GAAI;AACvBC,IAAAA,UAAU,CAAC,MAAM;AACf,WAAKC,aAAL;AACD,KAFS,CAAV;AAGD;AAED;AACF;AACA;AACA;;;AACQA,EAAAA,aAAa,GAAI;AAAA;;AAAA;AACrB,UAAI,CAAC,KAAI,CAACN,QAAV,EAAoB;AAClB;AACD;;AAED,YAAM;AAAEX,QAAAA,MAAF;AAAUkB,QAAAA,KAAV;AAAiBC,QAAAA;AAAjB,UAAiC,KAAI,CAACP,aAAL,CAAmBQ,QAAnB,CAA4B,KAAI,CAACb,KAAL,CAAWO,iBAAvC,CAAvC;;AAEA,UAAII,KAAK,CAACG,MAAN,KAAiB,CAArB,EAAwB;AACtB;AACD,OAToB,CAWrB;;;AACA,YAAMC,GAAG,GAAG,IAAIjC,OAAJ,CAAY,KAAZ,CAAZ,CAZqB,CAcrB;;AACAiC,MAAAA,GAAG,CAACC,eAAJ,CAAoBJ,WAApB,EAfqB,CAiBrB;;AACA,YAAMK,SAAS,GAAG,EAAlB;AACA,YAAMC,UAAU,GAAG,IAAIf,GAAJ,EAAnB;;AACA,WAAK,MAAMgB,IAAX,IAAmBR,KAAnB,EAA0B;AACxB,cAAMS,GAAG,GAAGzC,GAAG,CAAC0C,KAAJ,CAAUF,IAAI,CAACG,KAAf,CAAZ;;AACA,YAAIH,IAAI,CAACI,IAAL,CAAUC,SAAd,EAAyB;AACvB,cAAIL,IAAI,CAACI,IAAL,CAAUE,WAAd,EAA2B;AACzBR,YAAAA,SAAS,CAACS,IAAV,CAAeN,GAAf;AACAF,YAAAA,UAAU,CAACS,GAAX,CAAeR,IAAI,CAACG,KAApB,EAA2BH,IAAI,CAACI,IAAhC;AACD,WAHD,MAGO;AACL;AACAR,YAAAA,GAAG,CAACa,OAAJ,CAAYR,GAAZ;AACD;AACF,SARD,MAQO;AACL;AACAL,UAAAA,GAAG,CAACc,WAAJ,CAAgBT,GAAhB;AACD;AACF;;AAED,YAAMU,MAAM,SAAS,KAAI,CAACC,UAAL,CAAgBd,SAAhB,CAArB;;AACA,WAAK,MAAM,CAACK,KAAD,EAAQU,QAAR,CAAX,IAAgCd,UAAhC,EAA4C;AAC1C,cAAME,GAAG,GAAGzC,GAAG,CAAC0C,KAAJ,CAAUC,KAAV,CAAZ;AACA,cAAMW,GAAG,GAAGH,MAAM,CAACI,GAAP,CAAWZ,KAAX,CAAZ,CAF0C,CAG1C;;AACA,YAAIW,GAAJ,EAAS;AACP;AACAlB,UAAAA,GAAG,CAACoB,QAAJ,CAAaf,GAAb,EAAkBa,GAAlB;AACD,SAHD,MAGO;AACL;AACA;AACA,cAAID,QAAQ,CAACI,YAAb,EAA2B;AACzBrB,YAAAA,GAAG,CAACc,WAAJ,CAAgBT,GAAhB;AACD;AACF;AACF,OAnDoB,CAqDrB;;;AACA,UAAIL,GAAG,CAACsB,KAAR,EAAe;AACb5C,QAAAA,MAAM,IAAI,KAAI,CAACY,aAAL,CAAmBiC,SAAnB,CAA6B7C,MAA7B,EAAqCkB,KAArC,CAAV,CADa,CAGb;;AACA,QAAA,KAAI,CAACH,qBAAL;;AAEA;AACD;;AAED,UAAI;AACF;AACAf,QAAAA,MAAM,WAAU,KAAI,CAACE,OAAL,CAAa4C,WAAb,CAAyB9C,MAAzB,EAAiCsB,GAAjC,CAAV,CAAN,CAFE,CAIF;;AACA,aAAK,MAAM,CAACyB,MAAD,EAASC,KAAT,CAAX,IAA8BX,MAAM,CAACY,OAAP,EAA9B,EAAgD;AAC9CjD,UAAAA,MAAM,IAAI,KAAI,CAACkD,WAAL,CAAiBlD,MAAjB,EAAyBd,GAAG,CAAC0C,KAAJ,CAAUmB,MAAV,CAAzB,EAA4CC,KAA5C,CAAV;AACD;AACF,OARD,CAQE,OAAOG,GAAP,EAAY;AACZ,QAAA,KAAI,CAAC9C,IAAL,CAAU+C,KAAV,CAAgBD,GAAhB;AACD,OAzEoB,CA2ErB;;;AACAnD,MAAAA,MAAM,IAAI,KAAI,CAACY,aAAL,CAAmBiC,SAAnB,CAA6B7C,MAA7B,EAAqCkB,KAArC,CAAV,CA5EqB,CA8ErB;;AACA,MAAA,KAAI,CAACH,qBAAL;AA/EqB;AAgFtB;AAED;AACF;AACA;AACA;;;AACEsC,EAAAA,eAAe,CAAErD,MAAF,EAAU;AACvB,UAAMsD,SAAS,GAAGtD,MAAM,CAACuD,WAAP,EAAlB;AACA,UAAMC,MAAM,GAAG,KAAK/C,SAAL,CAAegC,GAAf,CAAmBa,SAAnB,CAAf;AACA,WAAOE,MAAM,GAAGA,MAAM,CAACC,QAAP,CAAgBC,aAAhB,EAAH,GAAqC,IAAIhD,GAAJ,EAAlD;AACD;AAED;AACF;AACA;;;AACEiD,EAAAA,aAAa,CAAE3D,MAAF,EAAU;AACrB,UAAMsD,SAAS,GAAGtD,MAAM,CAACuD,WAAP,EAAlB;AAEA,UAAMC,MAAM,GAAG,KAAK/C,SAAL,CAAegC,GAAf,CAAmBa,SAAnB,CAAf;;AAEA,QAAI,CAACE,MAAL,EAAa;AACX,aAAO,IAAP;AACD;;AAED,WAAO;AACLI,MAAAA,IAAI,EAAEJ,MAAM,CAACK,OADR;AAELC,MAAAA,KAAK,EAAEN,MAAM,CAACO,SAAP,EAFF;AAGLC,MAAAA,IAAI,EAAER,MAAM,CAACS,UAAP,CAAkBC,SAHnB;AAILC,MAAAA,IAAI,EAAEX,MAAM,CAACS,UAAP,CAAkBG,SAJnB;AAKLC,MAAAA,SAAS,EAAEb,MAAM,CAACc;AALb,KAAP;AAOD;AAED;AACF;AACA;;;AACEC,EAAAA,KAAK,GAAI;AACP,WAAOC,KAAK,CAACC,IAAN,CAAW,KAAKhE,SAAL,CAAeiE,MAAf,EAAX,EAAoCC,GAApC,CAAyCC,CAAD,IAAOA,CAAC,CAACf,OAAjD,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEgB,EAAAA,cAAc,CAAExC,MAAF,EAAU;AACtB,QAAI,CAACA,MAAM,CAAChB,MAAZ,EAAoB;AAClB;AACD,KAHqB,CAKtB;;;AACA,SAAK,MAAMmC,MAAX,IAAqB,KAAK/C,SAAL,CAAeiE,MAAf,EAArB,EAA8C;AAC5C,WAAK,MAAM1B,KAAX,IAAoBX,MAApB,EAA4B;AAC1B;AACA,cAAMyC,IAAI,GAAGtB,MAAM,CAACuB,gBAAP,CAAwB/B,KAAK,CAACrB,GAA9B,CAAb;;AAEA,YAAI,CAACmD,IAAL,EAAW;AACT;AACD,SANyB,CAQ1B;AACA;;;AACA,cAAME,SAAS,GAAGhC,KAAK,CAAClB,IAAN,CAAWT,MAA7B;;AACA,cAAMW,WAAW,GAAG,KAAKiD,YAAL,CAAkBH,IAAI,CAACI,QAAvB,EAAiCF,SAAjC,CAApB;;AAEA,YAAIG,SAAS,GAAGH,SAAhB;;AACA,YAAI,CAAChD,WAAL,EAAkB;AAChBmD,UAAAA,SAAS,GAAG9F,OAAO,CAAC+F,iBAAR,CAA0BN,IAAI,CAACnD,GAA/B,CAAZ;AACD;;AAED,aAAKf,aAAL,CAAmByE,SAAnB,CAA6B7B,MAAM,CAACK,OAApC,EAA6C,CAAC;AAC5ChC,UAAAA,KAAK,EAAEiD,IAAI,CAACnD,GAAL,CAAS2D,QAAT,CAAkBlG,SAAlB,CADqC;AAE5CmG,UAAAA,QAAQ,EAAET,IAAI,CAACS,QAF6B;AAG5CC,UAAAA,IAAI,EAAEL,SAHsC;AAI5CrD,UAAAA,IAAI,EAAE;AACJkD,YAAAA,SADI;AAEJhD,YAAAA,WAFI;AAGJD,YAAAA,SAAS,EAAE,IAHP;AAIJY,YAAAA,YAAY,EAAE;AAJV;AAJsC,SAAD,CAA7C;AAWD;AACF;;AAED,SAAK5B,qBAAL;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACQ0E,EAAAA,eAAe,CAAEzF,MAAF,EAAUsB,GAAV,EAAe;AAAA;;AAAA;AAClC,YAAMkC,MAAM,GAAG,MAAI,CAACkC,aAAL,CAAmB1F,MAAnB,CAAf;;AAEA,UAAIsB,GAAG,CAACsB,KAAR,EAAe;AACb;AACD,OALiC,CAOlC;;;AACA,UAAItB,GAAG,CAACqE,IAAR,EAAc;AACZnC,QAAAA,MAAM,CAACC,QAAP,GAAkB,IAAIlE,QAAJ,EAAlB;AACD,OAViC,CAYlC;;;AACA,MAAA,MAAI,CAACqG,sBAAL,CAA4BtE,GAAG,CAACe,MAAhC,EAAwCmB,MAAxC;;AAEA,UAAIlC,GAAG,CAACmC,QAAJ,CAAa+B,IAAb,KAAsB,CAA1B,EAA6B;AAC3B,QAAA,MAAI,CAACzE,qBAAL;;AACA;AACD,OAlBiC,CAoBlC;;AACA;;;AACA,YAAM8E,OAAO,GAAG,EAAhB;AACA;;AACA,YAAMC,KAAK,GAAG,EAAd;AACAxE,MAAAA,GAAG,CAACmC,QAAJ,CAAasC,OAAb,CAAsBC,KAAD,IAAW;AAC9B,YAAIA,KAAK,CAACC,MAAV,EAAkB;AAChBzC,UAAAA,MAAM,CAAC0C,UAAP,CAAkBF,KAAK,CAACrE,GAAxB;AACAkE,UAAAA,OAAO,CAAC5D,IAAR,CAAa+D,KAAK,CAACrE,GAAnB;AACD,SAHD,MAGO;AACL6B,UAAAA,MAAM,CAACsC,KAAP,CAAaE,KAAK,CAACrE,GAAnB,EAAwBqE,KAAK,CAACT,QAA9B,EAAwCS,KAAK,CAACd,QAA9C;AACAY,UAAAA,KAAK,CAAC7D,IAAN,CAAW+D,KAAX;AACD;AACF,OARD;;AAUA,MAAA,MAAI,CAACG,YAAL,CAAkBnG,MAAlB,EAA0B6F,OAA1B;;AACA,YAAM,MAAI,CAACO,SAAL,CAAepG,MAAf,EAAuB8F,KAAvB,CAAN;;AAEA,MAAA,MAAI,CAAC/E,qBAAL;AAtCkC;AAuCnC;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEoF,EAAAA,YAAY,CAAEnG,MAAF,EAAUqG,IAAV,EAAgB;AAC1B,SAAK,MAAMC,CAAX,IAAgBD,IAAhB,EAAsB;AACpB,WAAKzF,aAAL,CAAmB2F,MAAnB,CAA0BD,CAAC,CAAChB,QAAF,CAAWlG,SAAX,CAA1B,EAAiDY,MAAjD;AACD;AACF;AAED;AACF;AACA;AACA;AACA;AACA;;;AACQoG,EAAAA,SAAS,CAAEpG,MAAF,EAAU8F,KAAV,EAAiB;AAAA;;AAAA;AAC9B;AACA,YAAMU,UAAU,SAAS,MAAI,CAACC,cAAL,CAAoBX,KAAK,CAACnB,GAAN,CAAU+B,CAAC,IAAIA,CAAC,CAAC/E,GAAjB,CAApB,CAAzB;AAEA,YAAMT,KAAK,GAAG,EAAd;;AACA,WAAK,MAAM4D,IAAX,IAAmBgB,KAAnB,EAA0B;AACxB,cAAMa,EAAE,GAAG7B,IAAI,CAACnD,GAAL,CAAS2D,QAAT,CAAkBlG,SAAlB,CAAX;AACA,cAAM4F,SAAS,GAAGwB,UAAU,CAAC/D,GAAX,CAAekE,EAAf,CAAlB,CAFwB,CAIxB;;AACA,YAAI3B,SAAS,IAAI,IAAjB,EAAuB;AACrB;AACA,cAAIF,IAAI,CAACnC,YAAT,EAAuB;AACrBzB,YAAAA,KAAK,CAACe,IAAN,CAAW;AACTJ,cAAAA,KAAK,EAAE8E,EADE;AAETpB,cAAAA,QAAQ,EAAET,IAAI,CAACS,QAFN;AAGTC,cAAAA,IAAI,EAAEnG,OAAO,CAAC+F,iBAAR,CAA0BN,IAAI,CAACnD,GAA/B,CAHG;AAITG,cAAAA,IAAI,EAAE;AACJE,gBAAAA,WAAW,EAAE8C,IAAI,CAACI,QAAL,KAAkB5F,QAAQ,CAACsH,KADpC;AAEJ5B,gBAAAA,SAAS,EAAE,CAFP;AAGJjD,gBAAAA,SAAS,EAAE,KAHP;AAIJY,gBAAAA,YAAY,EAAEmC,IAAI,CAACnC;AAJf;AAJG,aAAX;AAWD;AACF,SAfD,MAeO;AACL;AAEA;AACA;AACA,gBAAMX,WAAW,GAAG,MAAI,CAACiD,YAAL,CAAkBH,IAAI,CAACI,QAAvB,EAAiCF,SAAjC,CAApB,CALK,CAOL;AACA;AACA;AACA;;;AACA,cAAIG,SAAS,GAAGH,SAAhB;;AACA,cAAI,CAAChD,WAAL,EAAkB;AAChBmD,YAAAA,SAAS,GAAG9F,OAAO,CAAC+F,iBAAR,CAA0BN,IAAI,CAACnD,GAA/B,CAAZ;AACD;;AAEDT,UAAAA,KAAK,CAACe,IAAN,CAAW;AACTJ,YAAAA,KAAK,EAAE8E,EADE;AAETpB,YAAAA,QAAQ,EAAET,IAAI,CAACS,QAFN;AAGTC,YAAAA,IAAI,EAAEL,SAHG;AAITrD,YAAAA,IAAI,EAAE;AACJE,cAAAA,WADI;AAEJgD,cAAAA,SAFI;AAGJjD,cAAAA,SAAS,EAAE,IAHP;AAIJY,cAAAA,YAAY,EAAEmC,IAAI,CAACnC;AAJf;AAJG,WAAX;AAWD;;AAED,QAAA,MAAI,CAAC/B,aAAL,CAAmByE,SAAnB,CAA6BrF,MAA7B,EAAqCkB,KAArC;AACD;AAvD6B;AAwD/B;AAED;AACF;AACA;AACA;AACA;;;AACE+D,EAAAA,YAAY,CAAEC,QAAF,EAAYF,SAAZ,EAAuB;AACjC,WAAOE,QAAQ,KAAK5F,QAAQ,CAACsH,KAAtB,IACL5B,SAAS,IAAI,KAAKzE,KAAL,CAAWM,0BAD1B;AAED;AAED;AACF;AACA;AACA;AACA;;;AACQ4F,EAAAA,cAAc,CAAEJ,IAAF,EAAQ;AAAA;;AAAA;AAC1B,YAAMhE,MAAM,SAAS,MAAI,CAACC,UAAL,CAAgB+D,IAAhB,CAArB;AACA,aAAO,IAAI3F,GAAJ,CAAQ,CAAC,GAAG2B,MAAJ,EAAYsC,GAAZ,CAAgB,CAAC,CAACkC,CAAD,EAAIC,CAAJ,CAAD,KAAY,CAACD,CAAD,EAAIC,CAAC,CAACzF,MAAN,CAA5B,CAAR,CAAP;AAF0B;AAG3B;AAED;AACF;AACA;AACA;AACA;;;AACQiB,EAAAA,UAAU,CAAE+D,IAAF,EAAQ;AAAA;;AAAA;AACtB,YAAMU,GAAG,GAAG,IAAIrG,GAAJ,EAAZ;AACA,YAAMsG,OAAO,CAACC,GAAR,CAAYZ,IAAI,CAAC1B,GAAL;AAAA,qCAAS,WAAOhD,GAAP,EAAe;AACxC,cAAI;AACF,kBAAMqB,KAAK,SAAS,MAAI,CAAC/C,UAAL,CAAgBwC,GAAhB,CAAoBd,GAApB,CAApB;AACAoF,YAAAA,GAAG,CAAC7E,GAAJ,CAAQP,GAAG,CAAC2D,QAAJ,CAAalG,SAAb,CAAR,EAAiC4D,KAAjC;AACD,WAHD,CAGE,OAAOkE,CAAP,EAAU;AACV,gBAAIA,CAAC,CAACC,IAAF,KAAW,eAAf,EAAgC;AAC9B,cAAA,MAAI,CAAC9G,IAAL,CAAU+C,KAAV,CAAgB,uCAAhB,EAAyDzB,GAAzD,EAA8DuF,CAA9D;AACD;AACF;AACF,SATiB;;AAAA;AAAA;AAAA;AAAA,UAAZ,CAAN;AAUA,aAAOH,GAAP;AAZsB;AAavB;AAED;AACF;AACA;AACA;AACA;;;AACEnB,EAAAA,sBAAsB,CAAEwB,SAAF,EAAa5D,MAAb,EAAqB;AACzC,SAAK,MAAMR,KAAX,IAAoBoE,SAAS,CAAC1C,MAAV,EAApB,EAAwC;AACtC,WAAKrE,IAAL,CAAU,sBAAV,EAAkC2C,KAAK,CAAC3B,MAAxC;;AACAmC,MAAAA,MAAM,CAAC6D,aAAP,CAAqBrE,KAAK,CAAC3B,MAA3B;AACD;AACF;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACE6B,EAAAA,WAAW,CAAElD,MAAF,EAAU2B,GAAV,EAAeqB,KAAf,EAAsB;AAC/B,UAAMQ,MAAM,GAAG,KAAKkC,aAAL,CAAmB1F,MAAnB,CAAf;;AACAwD,IAAAA,MAAM,CAAC8D,SAAP,CAAiBtE,KAAK,CAAC3B,MAAvB;AACAmC,IAAAA,MAAM,CAACC,QAAP,CAAgB8C,MAAhB,CAAuB5E,GAAvB;AACD;AAED;AACF;AACA;AACA;;;AACE4F,EAAAA,cAAc,CAAEvH,MAAF,EAAU;AACtB,WAAO,KAAK0F,aAAL,CAAmB1F,MAAnB,EAA2BiE,UAA3B,CAAsCC,SAA7C;AACD;AAED;AACF;AACA;AACA;;;AAEEsD,EAAAA,oBAAoB,CAAExH,MAAF,EAAU;AAC5B,WAAO,KAAK0F,aAAL,CAAmB1F,MAAnB,EAA2BiE,UAA3B,CAAsCG,SAA7C;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEqD,EAAAA,gBAAgB,CAAEC,OAAF,EAAW,CACzB;AACA;AACA;AACA;AACA;AACA;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEhC,EAAAA,aAAa,CAAE1F,MAAF,EAAU;AACrB,UAAMsD,SAAS,GAAGtD,MAAM,CAACuD,WAAP,EAAlB;AACA,UAAMC,MAAM,GAAG,KAAK/C,SAAL,CAAegC,GAAf,CAAmBa,SAAnB,CAAf;;AACA,QAAIE,MAAJ,EAAY;AACV,aAAOA,MAAP;AACD;;AAED,UAAMoB,CAAC,GAAG,IAAIpF,MAAJ,CAAWQ,MAAX,CAAV;AAEA,SAAKS,SAAL,CAAeyB,GAAf,CAAmBoB,SAAnB,EAA8BsB,CAA9B;;AACA,QAAI,KAAKtE,MAAT,EAAiB;AACf,WAAKA,MAAL,CAAY2B,IAAZ,CAAiBqB,SAAjB,EAA4B,WAA5B,EAAyC,CAAzC;AACD;;AAED,WAAOsB,CAAP;AACD;;AAED+C,EAAAA,KAAK,GAAI;AACP,SAAKhH,QAAL,GAAgB,IAAhB;AACD;;AAEDiH,EAAAA,IAAI,GAAI;AACN,SAAKjH,QAAL,GAAgB,KAAhB;AACD;;AAldkB;;AAqdrBkH,MAAM,CAACC,OAAP,GAAiBhI,cAAjB","sourcesContent":["'use strict'\n\n/**\n * @typedef {import('../types/message/entry')} BitswapMessageEntry\n * @typedef {import('peer-id')} PeerId\n */\n\nconst { CID } = require('multiformats')\nconst { base58btc } = require('multiformats/bases/base58')\n\nconst Message = require('../types/message')\nconst WantType = Message.WantType\nconst Wantlist = require('../types/wantlist')\nconst Ledger = require('./ledger')\nconst RequestQueue = require('./req-queue')\nconst TaskMerger = require('./task-merger')\nconst { logger } = require('../utils')\n\n// The ideal size of the batched payload. We try to pop this much data off the\n// request queue, but\n// - if there isn't any more data in the queue we send whatever we have\n// - if there are several small items in the queue (eg HAVE response) followed\n//   by one big item (eg a block) that would exceed this target size, we\n//   include the big item in the message\nconst TARGET_MESSAGE_SIZE = 16 * 1024\n\n// If the client sends a want-have, and the engine has the corresponding block,\n// we check the size of the block and if it's small enough we send the block\n// itself, rather than sending a HAVE.\n// This constant defines the maximum size up to which we replace a HAVE with\n// a block.\nconst MAX_SIZE_REPLACE_HAS_WITH_BLOCK = 1024\n\nclass DecisionEngine {\n  /**\n   * @param {PeerId} peerId\n   * @param {import('interface-blockstore').Blockstore} blockstore\n   * @param {import('../network')} network\n   * @param {import('../stats')} stats\n   * @param {Object} [opts]\n   * @param {number} [opts.targetMessageSize]\n   * @param {number} [opts.maxSizeReplaceHasWithBlock]\n   */\n  constructor (peerId, blockstore, network, stats, opts = {}) {\n    this._log = logger(peerId, 'engine')\n    this.blockstore = blockstore\n    this.network = network\n    this._stats = stats\n    this._opts = this._processOpts(opts)\n\n    // A list of of ledgers by their partner id\n    /** @type {Map<string, Ledger>} */\n    this.ledgerMap = new Map()\n    this._running = false\n\n    // Queue of want-have / want-block per peer\n    this._requestQueue = new RequestQueue(TaskMerger)\n  }\n\n  /**\n   * @template {Object} Opts\n   * @param {Opts} opts\n   * @returns {Opts & {maxSizeReplaceHasWithBlock:number, targetMessageSize:number}}\n   * @private\n   */\n  _processOpts (opts) {\n    return {\n      maxSizeReplaceHasWithBlock: MAX_SIZE_REPLACE_HAS_WITH_BLOCK,\n      targetMessageSize: TARGET_MESSAGE_SIZE,\n      ...opts\n    }\n  }\n\n  _scheduleProcessTasks () {\n    setTimeout(() => {\n      this._processTasks()\n    })\n  }\n\n  /**\n   * Pull tasks off the request queue and send a message to the corresponding\n   * peer\n   */\n  async _processTasks () {\n    if (!this._running) {\n      return\n    }\n\n    const { peerId, tasks, pendingSize } = this._requestQueue.popTasks(this._opts.targetMessageSize)\n\n    if (tasks.length === 0) {\n      return\n    }\n\n    // Create a new message\n    const msg = new Message(false)\n\n    // Amount of data in the request queue still waiting to be popped\n    msg.setPendingBytes(pendingSize)\n\n    // Split out want-blocks, want-haves and DONT_HAVEs\n    const blockCids = []\n    const blockTasks = new Map()\n    for (const task of tasks) {\n      const cid = CID.parse(task.topic)\n      if (task.data.haveBlock) {\n        if (task.data.isWantBlock) {\n          blockCids.push(cid)\n          blockTasks.set(task.topic, task.data)\n        } else {\n          // Add HAVES to the message\n          msg.addHave(cid)\n        }\n      } else {\n        // Add DONT_HAVEs to the message\n        msg.addDontHave(cid)\n      }\n    }\n\n    const blocks = await this._getBlocks(blockCids)\n    for (const [topic, taskData] of blockTasks) {\n      const cid = CID.parse(topic)\n      const blk = blocks.get(topic)\n      // If the block was found (it has not been removed)\n      if (blk) {\n        // Add the block to the message\n        msg.addBlock(cid, blk)\n      } else {\n        // The block was not found. If the client requested DONT_HAVE,\n        // add DONT_HAVE to the message.\n        if (taskData.sendDontHave) {\n          msg.addDontHave(cid)\n        }\n      }\n    }\n\n    // If there's nothing in the message, bail out\n    if (msg.empty) {\n      peerId && this._requestQueue.tasksDone(peerId, tasks)\n\n      // Trigger the next round of task processing\n      this._scheduleProcessTasks()\n\n      return\n    }\n\n    try {\n      // Send the message\n      peerId && await this.network.sendMessage(peerId, msg)\n\n      // Peform sent message accounting\n      for (const [cidStr, block] of blocks.entries()) {\n        peerId && this.messageSent(peerId, CID.parse(cidStr), block)\n      }\n    } catch (err) {\n      this._log.error(err)\n    }\n\n    // Free the tasks up from the request queue\n    peerId && this._requestQueue.tasksDone(peerId, tasks)\n\n    // Trigger the next round of task processing\n    this._scheduleProcessTasks()\n  }\n\n  /**\n   * @param {PeerId} peerId\n   * @returns {Map<string, import('../types/wantlist/entry')>}\n   */\n  wantlistForPeer (peerId) {\n    const peerIdStr = peerId.toB58String()\n    const ledger = this.ledgerMap.get(peerIdStr)\n    return ledger ? ledger.wantlist.sortedEntries() : new Map()\n  }\n\n  /**\n   * @param {PeerId} peerId\n   */\n  ledgerForPeer (peerId) {\n    const peerIdStr = peerId.toB58String()\n\n    const ledger = this.ledgerMap.get(peerIdStr)\n\n    if (!ledger) {\n      return null\n    }\n\n    return {\n      peer: ledger.partner,\n      value: ledger.debtRatio(),\n      sent: ledger.accounting.bytesSent,\n      recv: ledger.accounting.bytesRecv,\n      exchanged: ledger.exchangeCount\n    }\n  }\n\n  /**\n   * @returns {PeerId[]}\n   */\n  peers () {\n    return Array.from(this.ledgerMap.values()).map((l) => l.partner)\n  }\n\n  /**\n   * Receive blocks either from an incoming message from the network, or from\n   * blocks being added by the client on the localhost (eg IPFS add)\n   *\n   * @param {{ cid: CID, data: Uint8Array }[]} blocks\n   */\n  receivedBlocks (blocks) {\n    if (!blocks.length) {\n      return\n    }\n\n    // For each connected peer, check if it wants the block we received\n    for (const ledger of this.ledgerMap.values()) {\n      for (const block of blocks) {\n        // Filter out blocks that we don't want\n        const want = ledger.wantlistContains(block.cid)\n\n        if (!want) {\n          continue\n        }\n\n        // If the block is small enough, just send the block, even if the\n        // client asked for a HAVE\n        const blockSize = block.data.length\n        const isWantBlock = this._sendAsBlock(want.wantType, blockSize)\n\n        let entrySize = blockSize\n        if (!isWantBlock) {\n          entrySize = Message.blockPresenceSize(want.cid)\n        }\n\n        this._requestQueue.pushTasks(ledger.partner, [{\n          topic: want.cid.toString(base58btc),\n          priority: want.priority,\n          size: entrySize,\n          data: {\n            blockSize,\n            isWantBlock,\n            haveBlock: true,\n            sendDontHave: false\n          }\n        }])\n      }\n    }\n\n    this._scheduleProcessTasks()\n  }\n\n  /**\n   * Handle incoming messages\n   *\n   * @param {PeerId} peerId\n   * @param {Message} msg\n   * @returns {Promise<void>}\n   */\n  async messageReceived (peerId, msg) {\n    const ledger = this._findOrCreate(peerId)\n\n    if (msg.empty) {\n      return\n    }\n\n    // If the message has a full wantlist, clear the current wantlist\n    if (msg.full) {\n      ledger.wantlist = new Wantlist()\n    }\n\n    // Record the amount of block data received\n    this._updateBlockAccounting(msg.blocks, ledger)\n\n    if (msg.wantlist.size === 0) {\n      this._scheduleProcessTasks()\n      return\n    }\n\n    // Clear cancelled wants and add new wants to the ledger\n    /** @type {CID[]} */\n    const cancels = []\n    /** @type {BitswapMessageEntry[]} */\n    const wants = []\n    msg.wantlist.forEach((entry) => {\n      if (entry.cancel) {\n        ledger.cancelWant(entry.cid)\n        cancels.push(entry.cid)\n      } else {\n        ledger.wants(entry.cid, entry.priority, entry.wantType)\n        wants.push(entry)\n      }\n    })\n\n    this._cancelWants(peerId, cancels)\n    await this._addWants(peerId, wants)\n\n    this._scheduleProcessTasks()\n  }\n\n  /**\n   * @private\n   * @param {PeerId} peerId\n   * @param {CID[]} cids\n   * @returns {void}\n   */\n  _cancelWants (peerId, cids) {\n    for (const c of cids) {\n      this._requestQueue.remove(c.toString(base58btc), peerId)\n    }\n  }\n\n  /**\n   * @private\n   * @param {PeerId} peerId\n   * @param {BitswapMessageEntry[]} wants\n   * @returns {Promise<void>}\n   */\n  async _addWants (peerId, wants) {\n    // Get the size of each wanted block\n    const blockSizes = await this._getBlockSizes(wants.map(w => w.cid))\n\n    const tasks = []\n    for (const want of wants) {\n      const id = want.cid.toString(base58btc)\n      const blockSize = blockSizes.get(id)\n\n      // If the block was not found\n      if (blockSize == null) {\n        // Only add the task to the queue if the requester wants a DONT_HAVE\n        if (want.sendDontHave) {\n          tasks.push({\n            topic: id,\n            priority: want.priority,\n            size: Message.blockPresenceSize(want.cid),\n            data: {\n              isWantBlock: want.wantType === WantType.Block,\n              blockSize: 0,\n              haveBlock: false,\n              sendDontHave: want.sendDontHave\n            }\n          })\n        }\n      } else {\n        // The block was found, add it to the queue\n\n        // If the block is small enough, just send the block, even if the\n        // client asked for a HAVE\n        const isWantBlock = this._sendAsBlock(want.wantType, blockSize)\n\n        // entrySize is the amount of space the entry takes up in the\n        // message we send to the recipient. If we're sending a block, the\n        // entrySize is the size of the block. Otherwise it's the size of\n        // a block presence entry.\n        let entrySize = blockSize\n        if (!isWantBlock) {\n          entrySize = Message.blockPresenceSize(want.cid)\n        }\n\n        tasks.push({\n          topic: id,\n          priority: want.priority,\n          size: entrySize,\n          data: {\n            isWantBlock,\n            blockSize,\n            haveBlock: true,\n            sendDontHave: want.sendDontHave\n          }\n        })\n      }\n\n      this._requestQueue.pushTasks(peerId, tasks)\n    }\n  }\n\n  /**\n   * @private\n   * @param {import('../types/message/message').Message.Wantlist.WantType} wantType\n   * @param {number} blockSize\n   */\n  _sendAsBlock (wantType, blockSize) {\n    return wantType === WantType.Block ||\n      blockSize <= this._opts.maxSizeReplaceHasWithBlock\n  }\n\n  /**\n   * @private\n   * @param {CID[]} cids\n   * @returns {Promise<Map<string, number>>}\n   */\n  async _getBlockSizes (cids) {\n    const blocks = await this._getBlocks(cids)\n    return new Map([...blocks].map(([k, v]) => [k, v.length]))\n  }\n\n  /**\n   * @private\n   * @param {CID[]} cids\n   * @returns {Promise<Map<string, Uint8Array>>}\n   */\n  async _getBlocks (cids) {\n    const res = new Map()\n    await Promise.all(cids.map(async (cid) => {\n      try {\n        const block = await this.blockstore.get(cid)\n        res.set(cid.toString(base58btc), block)\n      } catch (e) {\n        if (e.code !== 'ERR_NOT_FOUND') {\n          this._log.error('failed to query blockstore for %s: %s', cid, e)\n        }\n      }\n    }))\n    return res\n  }\n\n  /**\n   * @private\n   * @param {Map<string, Uint8Array>} blocksMap\n   * @param {Ledger} ledger\n   */\n  _updateBlockAccounting (blocksMap, ledger) {\n    for (const block of blocksMap.values()) {\n      this._log('got block (%s bytes)', block.length)\n      ledger.receivedBytes(block.length)\n    }\n  }\n\n  /**\n   * Clear up all accounting things after message was sent\n   *\n   * @param {PeerId} peerId\n   * @param {CID} cid\n   * @param {Uint8Array} block\n   */\n  messageSent (peerId, cid, block) {\n    const ledger = this._findOrCreate(peerId)\n    ledger.sentBytes(block.length)\n    ledger.wantlist.remove(cid)\n  }\n\n  /**\n   * @param {PeerId} peerId\n   * @returns {number}\n   */\n  numBytesSentTo (peerId) {\n    return this._findOrCreate(peerId).accounting.bytesSent\n  }\n\n  /**\n   * @param {PeerId} peerId\n   * @returns {number}\n   */\n\n  numBytesReceivedFrom (peerId) {\n    return this._findOrCreate(peerId).accounting.bytesRecv\n  }\n\n  /**\n   *\n   * @param {PeerId} _peerId\n   * @returns {void}\n   */\n  peerDisconnected (_peerId) {\n    // if (this.ledgerMap.has(peerId.toB58String())) {\n    //   this.ledgerMap.delete(peerId.toB58String())\n    // }\n    //\n    // TODO: figure out how to remove all other references\n    // in the peer request queue\n  }\n\n  /**\n   * @private\n   * @param {PeerId} peerId\n   * @returns {Ledger}\n   */\n  _findOrCreate (peerId) {\n    const peerIdStr = peerId.toB58String()\n    const ledger = this.ledgerMap.get(peerIdStr)\n    if (ledger) {\n      return ledger\n    }\n\n    const l = new Ledger(peerId)\n\n    this.ledgerMap.set(peerIdStr, l)\n    if (this._stats) {\n      this._stats.push(peerIdStr, 'peerCount', 1)\n    }\n\n    return l\n  }\n\n  start () {\n    this._running = true\n  }\n\n  stop () {\n    this._running = false\n  }\n}\n\nmodule.exports = DecisionEngine\n"]},"metadata":{},"sourceType":"script"}