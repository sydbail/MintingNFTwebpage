{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @param {Object} config\n * @param {import('../../types').NetworkService} config.network\n */\n\n\nmodule.exports = ({\n  network\n}) => {\n  /**\n   * @type {import('ipfs-core-types/src/swarm').API[\"peers\"]}\n   */\n  function peers() {\n    return _peers.apply(this, arguments);\n  }\n\n  function _peers() {\n    _peers = _asyncToGenerator(function* (options = {}) {\n      const {\n        libp2p\n      } = yield network.use(options);\n      const peers = [];\n\n      for (const [peerId, connections] of libp2p.connections) {\n        for (const connection of connections) {\n          /** @type {import('ipfs-core-types/src/swarm').PeersResult} */\n          const peer = {\n            addr: connection.remoteAddr,\n            peer: peerId\n          };\n\n          if (options.verbose || options.direction) {\n            peer.direction = connection.stat.direction;\n          }\n\n          if (options.verbose) {\n            peer.muxer = connection.stat.multiplexer;\n            peer.latency = 'n/a';\n            peer.streams = []; // TODO: get this from libp2p\n          }\n\n          peers.push(peer);\n        }\n      }\n\n      return peers;\n    });\n    return _peers.apply(this, arguments);\n  }\n\n  return withTimeoutOption(peers);\n};","map":null,"metadata":{},"sourceType":"script"}