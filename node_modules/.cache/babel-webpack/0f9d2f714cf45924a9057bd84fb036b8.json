{"ast":null,"code":"import _asyncToGenerator from \"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { Observable } from 'rxjs';\nimport * as i0 from \"@angular/core\";\n\nconst Web3 = require('web3');\n\nexport class Web3Service {\n  web3;\n\n  constructor() {\n    this.checkAndInstantiateWeb3();\n  }\n\n  static ɵfac = function Web3Service_Factory(t) {\n    return new (t || Web3Service)();\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: Web3Service,\n    factory: Web3Service.ɵfac,\n    providedIn: 'root'\n  });\n}\n\nfunction checkAndInstantiateWeb3() {\n  return _checkAndInstantiateWeb.apply(this, arguments);\n}\n/* Original using depreciated window.web3 methods\n  checkAndInstantiateWeb3 = () => {\n  // Checking if Web3 has been injected by the browser (Mist/MetaMask)\n  if (typeof window.web3 !== 'undefined') {\n    console.warn(\n      'Using web3 detected from external source. If you find that your accounts don\\'t appear or you have 0 MetaCoin, ensure you\\'ve configured that source properly. If using MetaMask, see the following link. Feel free to delete this warning. :) http://truffleframework.com/tutorials/truffle-and-metamask'\n    );\n    // Use Mist/MetaMask's provider\n    this.web3 = new Web3(window.web3.currentProvider);\n  } else {\n    console.warn(\n      'No web3 detected. Falling back to ${environment.HttpProvider}. You should remove this fallback when you deploy live, as it\\'s inherently insecure. Consider switching to Metamask for development. More info here: http://truffleframework.com/tutorials/truffle-and-metamask'\n    );\n    // fallback - use your fallback strategy (local node / hosted node + in-dapp id mgmt / fail)\n    this.web3 = new Web3(\n      new Web3.providers.HttpProvider(environment.HttpProvider)\n    );\n  }\n}; */\n\n\nfunction _checkAndInstantiateWeb() {\n  _checkAndInstantiateWeb = _asyncToGenerator(function* () {\n    if (window.ethereum) {\n      yield window.ethereum.send('eth_requestAccounts');\n      window.web3 = new Web3(window.ethereum);\n      return true;\n    }\n\n    return false;\n  });\n  return _checkAndInstantiateWeb.apply(this, arguments);\n}\n\ngetAccounts();\nObservable < any > {\n  return: Observable.create(observer => {\n    this.web3.eth.getAccounts((err, accs) => {\n      if (err != null) {\n        observer.error('There was an error fetching your accounts.');\n      }\n\n      if (accs.length === 0) {\n        observer.error('Couldn\\'t get any accounts! Make sure your Ethereum client is configured correctly.');\n      }\n\n      this.web3.eth.defaultAccount = accs[0]; //console.log(this.web3.eth.defaultAccount);\n\n      observer.next(accs);\n      observer.complete();\n    });\n  })\n};","map":{"version":3,"sources":["/Users/sydneybailey/Internship/contract-testing/src/app/services/web3.service.ts"],"names":[],"mappings":";AACA,SAAS,UAAT,QAA2B,MAA3B;;;AAKA,MAAM,IAAI,GAAG,OAAO,CAAC,MAAD,CAApB;;AAMA,OAAM,MAAO,WAAP,CAAkB;AAEf,EAAA,IAAI;;AAEX,EAAA,WAAA,GAAA;AACC,SAAK,uBAAL;AACA;;;qBANU,W;AAAW,G;;WAAX,W;AAAW,IAAA,OAAA,EAAX,WAAW,CAAA,I;AAAA,IAAA,UAAA,EAFV;;AAEU;;SAQP,uB;;;AASf;;;;;;;;;;;;;;;;;;AAkBK;;;;8CA3BL,aAAsC;AACpC,QAAI,MAAM,CAAC,QAAX,EAAqB;AACnB,YAAM,MAAM,CAAC,QAAP,CAAgB,IAAhB,CAAqB,qBAArB,CAAN;AACA,MAAA,MAAM,CAAC,IAAP,GAAc,IAAI,IAAJ,CAAS,MAAM,CAAC,QAAhB,CAAd;AACA,aAAO,IAAP;AACD;;AACD,WAAO,KAAP;AACD,G;;;;AAsBD,WAAW;AAAI,UAAU,GAAC,GAAX,GAAe;AAC7B,EAAA,MAAM,EAAC,UAAU,CAAC,MAAX,CAAmB,QAAD,IAAkB;AACzC,SAAK,IAAL,CAAU,GAAV,CAAc,WAAd,CAA0B,CAAC,GAAD,EAAW,IAAX,KAAwB;AAChD,UAAI,GAAG,IAAI,IAAX,EAAiB;AACf,QAAA,QAAQ,CAAC,KAAT,CAAe,4CAAf;AACD;;AAED,UAAI,IAAI,CAAC,MAAL,KAAgB,CAApB,EAAuB;AACrB,QAAA,QAAQ,CAAC,KAAT,CAAe,qFAAf;AACD;;AACJ,WAAK,IAAL,CAAU,GAAV,CAAc,cAAd,GAA+B,IAAI,CAAC,CAAD,CAAnC,CARmD,CASnD;;AACG,MAAA,QAAQ,CAAC,IAAT,CAAc,IAAd;AACA,MAAA,QAAQ,CAAC,QAAT;AACD,KAZD;AAaD,GAdM;AADsB,CAAf","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { from } from 'rxjs';\n//enviroment variables, provides localhost:8545 as provider for HTTP\nimport { environment } from '../../environments/environment';\n\nconst Web3 = require('web3');\ndeclare var window: any;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class Web3Service {\n\n  public web3: any;\n\n  constructor() {\n  \tthis.checkAndInstantiateWeb3();\n  }\n\n  async function checkAndInstantiateWeb3() {\n    if (window.ethereum) {\n      await window.ethereum.send('eth_requestAccounts');\n      window.web3 = new Web3(window.ethereum);\n      return true;\n    }\n    return false;\n  }\n\n  /* Original using depreciated window.web3 methods\n    checkAndInstantiateWeb3 = () => {\n    // Checking if Web3 has been injected by the browser (Mist/MetaMask)\n    if (typeof window.web3 !== 'undefined') {\n      console.warn(\n        'Using web3 detected from external source. If you find that your accounts don\\'t appear or you have 0 MetaCoin, ensure you\\'ve configured that source properly. If using MetaMask, see the following link. Feel free to delete this warning. :) http://truffleframework.com/tutorials/truffle-and-metamask'\n      );\n      // Use Mist/MetaMask's provider\n      this.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      console.warn(\n        'No web3 detected. Falling back to ${environment.HttpProvider}. You should remove this fallback when you deploy live, as it\\'s inherently insecure. Consider switching to Metamask for development. More info here: http://truffleframework.com/tutorials/truffle-and-metamask'\n      );\n      // fallback - use your fallback strategy (local node / hosted node + in-dapp id mgmt / fail)\n      this.web3 = new Web3(\n        new Web3.providers.HttpProvider(environment.HttpProvider)\n      );\n    }\n  }; */\n\n  getAccounts(): Observable<any>{\n  \treturn Observable.create((observer: any) => {\n  \t  this.web3.eth.getAccounts((err: any, accs: any) => {\n  \t    if (err != null) {\n  \t      observer.error('There was an error fetching your accounts.')\n  \t    }\n\n  \t    if (accs.length === 0) {\n  \t      observer.error('Couldn\\'t get any accounts! Make sure your Ethereum client is configured correctly.')\n  \t    }\n\t\t\t\tthis.web3.eth.defaultAccount = accs[0]\n\t\t\t\t//console.log(this.web3.eth.defaultAccount);\n  \t    observer.next(accs)\n  \t    observer.complete()\n  \t  });\n  \t})\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}