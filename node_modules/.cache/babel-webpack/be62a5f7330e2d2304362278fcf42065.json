{"ast":null,"code":"var _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nvar _awaitAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\").default;\n\nvar _wrapAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nconst defer = require('p-defer');\n\nconst Headers = require('./extract-headers');\n\nconst LteReader = require('./lte-reader');\n\nfunction getPadding(size) {\n  size &= 511;\n  return size && 512 - size;\n}\n\nfunction discardPadding(_x, _x2) {\n  return _discardPadding.apply(this, arguments);\n}\n\nfunction _discardPadding() {\n  _discardPadding = _asyncToGenerator(function* (reader, size) {\n    const overflow = getPadding(size);\n    if (overflow) yield reader.next(overflow);\n  });\n  return _discardPadding.apply(this, arguments);\n}\n\nmodule.exports = options => {\n  options = options || {};\n  options.highWaterMark = options.highWaterMark || 1024 * 16;\n  return source => _wrapAsyncGenerator(function* () {\n    const reader = LteReader(source);\n    let gnuLongPath, gnuLongLinkPath, paxGlobal, pax;\n\n    try {\n      while (true) {\n        let headerBytes;\n\n        try {\n          const {\n            done,\n            value\n          } = yield _awaitAsyncGenerator(reader.next(512));\n          if (done) return;\n          headerBytes = value;\n        } catch (err) {\n          // Is ok, this is the end of the stream!\n          if (err.code === 'ERR_UNDER_READ') return;\n          throw err;\n        }\n\n        const header = Headers.decode(headerBytes, options.filenameEncoding);\n        if (!header) continue;\n\n        if (header.type === 'gnu-long-path') {\n          const {\n            done,\n            value: gnuLongPathBytes\n          } = yield _awaitAsyncGenerator(reader.next(header.size));\n          if (done) return;\n          gnuLongPath = Headers.decodeLongPath(gnuLongPathBytes, options.filenameEncoding);\n          yield _awaitAsyncGenerator(discardPadding(reader, header.size));\n          continue;\n        }\n\n        if (header.type === 'gnu-long-link-path') {\n          const {\n            done,\n            value: gnuLongLinkPathBytes\n          } = yield _awaitAsyncGenerator(reader.next(header.size));\n          if (done) return;\n          gnuLongLinkPath = Headers.decodeLongPath(gnuLongLinkPathBytes, options.filenameEncoding);\n          yield _awaitAsyncGenerator(discardPadding(reader, header.size));\n          continue;\n        }\n\n        if (header.type === 'pax-global-header') {\n          const {\n            done,\n            value: paxGlobalBytes\n          } = yield _awaitAsyncGenerator(reader.next(header.size));\n          if (done) return;\n          paxGlobal = Headers.decodePax(paxGlobalBytes, options.filenameEncoding);\n          yield _awaitAsyncGenerator(discardPadding(reader, header.size));\n          continue;\n        }\n\n        if (header.type === 'pax-header') {\n          const {\n            done,\n            value: paxBytes\n          } = yield _awaitAsyncGenerator(reader.next(header.size));\n          if (done) return;\n          pax = Headers.decodePax(paxBytes, options.filenameEncoding);\n          if (paxGlobal) pax = { ...paxGlobal,\n            ...pax\n          };\n          yield _awaitAsyncGenerator(discardPadding(reader, header.size));\n          continue;\n        }\n\n        if (gnuLongPath) {\n          header.name = gnuLongPath;\n          gnuLongPath = null;\n        }\n\n        if (gnuLongLinkPath) {\n          header.linkname = gnuLongLinkPath;\n          gnuLongLinkPath = null;\n        }\n\n        if (pax) {\n          if (pax.path) header.name = pax.path;\n          if (pax.linkpath) header.linkname = pax.linkpath;\n          if (pax.size) header.size = parseInt(pax.size, 10);\n          header.pax = pax;\n          pax = null;\n        }\n\n        if (!header.size || header.type === 'directory') {\n          yield {\n            header,\n            body: _wrapAsyncGenerator(function* () {})()\n          };\n          continue;\n        }\n\n        let bytesRemaining = header.size;\n        const bodyConsumed = defer(); // Prefetch the first chunk.\n        // This allows us to stream entries for small files from the tar without\n        // explicitly streaming the body of each.\n\n        const firstChunk = yield _awaitAsyncGenerator(reader.nextLte(Math.min(bytesRemaining, options.highWaterMark)));\n        bytesRemaining -= firstChunk.value.length;\n        if (!bytesRemaining) bodyConsumed.resolve();\n\n        const body = _wrapAsyncGenerator(function* () {\n          try {\n            yield firstChunk.value;\n\n            while (bytesRemaining) {\n              const {\n                done,\n                value\n              } = yield _awaitAsyncGenerator(reader.nextLte(bytesRemaining));\n\n              if (done) {\n                bytesRemaining = 0;\n                return;\n              }\n\n              bytesRemaining -= value.length;\n              yield value;\n            }\n          } finally {\n            bodyConsumed.resolve();\n          }\n        })();\n\n        yield {\n          header,\n          body\n        }; // Wait for the body to be consumed\n\n        yield _awaitAsyncGenerator(bodyConsumed.promise); // Incase the body was not consumed entirely...\n\n        if (bytesRemaining) {\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n\n          var _iteratorError;\n\n          try {\n            for (var _iterator = _asyncIterator(body), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n              const _ = _value;\n            } // eslint-disable-line no-unused-vars,no-empty\n\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return != null) {\n                yield _awaitAsyncGenerator(_iterator.return());\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n        }\n\n        yield _awaitAsyncGenerator(discardPadding(reader, header.size));\n      }\n    } finally {\n      yield _awaitAsyncGenerator(reader.return());\n    }\n  })();\n};","map":{"version":3,"sources":["/Users/sydneybailey/Internship/contract-testing/node_modules/it-tar/extract.js"],"names":["defer","require","Headers","LteReader","getPadding","size","discardPadding","reader","overflow","next","module","exports","options","highWaterMark","source","gnuLongPath","gnuLongLinkPath","paxGlobal","pax","headerBytes","done","value","err","code","header","decode","filenameEncoding","type","gnuLongPathBytes","decodeLongPath","gnuLongLinkPathBytes","paxGlobalBytes","decodePax","paxBytes","name","linkname","path","linkpath","parseInt","body","bytesRemaining","bodyConsumed","firstChunk","nextLte","Math","min","length","resolve","promise","_","return"],"mappings":"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","sourcesContent":["const defer = require('p-defer')\nconst Headers = require('./extract-headers')\nconst LteReader = require('./lte-reader')\n\nfunction getPadding (size) {\n  size &= 511\n  return size && 512 - size\n}\n\nasync function discardPadding (reader, size) {\n  const overflow = getPadding(size)\n  if (overflow) await reader.next(overflow)\n}\n\nmodule.exports = options => {\n  options = options || {}\n  options.highWaterMark = options.highWaterMark || 1024 * 16\n\n  return source => (async function * () {\n    const reader = LteReader(source)\n    let gnuLongPath, gnuLongLinkPath, paxGlobal, pax\n\n    try {\n      while (true) {\n        let headerBytes\n        try {\n          const { done, value } = await reader.next(512)\n          if (done) return\n          headerBytes = value\n        } catch (err) {\n          // Is ok, this is the end of the stream!\n          if (err.code === 'ERR_UNDER_READ') return\n          throw err\n        }\n\n        const header = Headers.decode(headerBytes, options.filenameEncoding)\n        if (!header) continue\n\n        if (header.type === 'gnu-long-path') {\n          const { done, value: gnuLongPathBytes } = await reader.next(header.size)\n          if (done) return\n          gnuLongPath = Headers.decodeLongPath(gnuLongPathBytes, options.filenameEncoding)\n          await discardPadding(reader, header.size)\n          continue\n        }\n\n        if (header.type === 'gnu-long-link-path') {\n          const { done, value: gnuLongLinkPathBytes } = await reader.next(header.size)\n          if (done) return\n          gnuLongLinkPath = Headers.decodeLongPath(gnuLongLinkPathBytes, options.filenameEncoding)\n          await discardPadding(reader, header.size)\n          continue\n        }\n\n        if (header.type === 'pax-global-header') {\n          const { done, value: paxGlobalBytes } = await reader.next(header.size)\n          if (done) return\n          paxGlobal = Headers.decodePax(paxGlobalBytes, options.filenameEncoding)\n          await discardPadding(reader, header.size)\n          continue\n        }\n\n        if (header.type === 'pax-header') {\n          const { done, value: paxBytes } = await reader.next(header.size)\n          if (done) return\n          pax = Headers.decodePax(paxBytes, options.filenameEncoding)\n          if (paxGlobal) pax = { ...paxGlobal, ...pax }\n          await discardPadding(reader, header.size)\n          continue\n        }\n\n        if (gnuLongPath) {\n          header.name = gnuLongPath\n          gnuLongPath = null\n        }\n\n        if (gnuLongLinkPath) {\n          header.linkname = gnuLongLinkPath\n          gnuLongLinkPath = null\n        }\n\n        if (pax) {\n          if (pax.path) header.name = pax.path\n          if (pax.linkpath) header.linkname = pax.linkpath\n          if (pax.size) header.size = parseInt(pax.size, 10)\n          header.pax = pax\n          pax = null\n        }\n\n        if (!header.size || header.type === 'directory') {\n          yield { header, body: (async function * () {})() }\n          continue\n        }\n\n        let bytesRemaining = header.size\n        const bodyConsumed = defer()\n\n        // Prefetch the first chunk.\n        // This allows us to stream entries for small files from the tar without\n        // explicitly streaming the body of each.\n        const firstChunk = await reader.nextLte(Math.min(bytesRemaining, options.highWaterMark))\n        bytesRemaining -= firstChunk.value.length\n\n        if (!bytesRemaining) bodyConsumed.resolve()\n\n        const body = (async function * () {\n          try {\n            yield firstChunk.value\n\n            while (bytesRemaining) {\n              const { done, value } = await reader.nextLte(bytesRemaining)\n              if (done) {\n                bytesRemaining = 0\n                return\n              }\n              bytesRemaining -= value.length\n              yield value\n            }\n          } finally {\n            bodyConsumed.resolve()\n          }\n        })()\n\n        yield { header, body }\n\n        // Wait for the body to be consumed\n        await bodyConsumed.promise\n\n        // Incase the body was not consumed entirely...\n        if (bytesRemaining) {\n          for await (const _ of body) {} // eslint-disable-line no-unused-vars,no-empty\n        }\n\n        await discardPadding(reader, header.size)\n      }\n    } finally {\n      await reader.return()\n    }\n  })()\n}\n"]},"metadata":{},"sourceType":"script"}