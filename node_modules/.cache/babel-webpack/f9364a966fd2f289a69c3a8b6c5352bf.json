{"ast":null,"code":"'use strict';\n\nconst {\n  createRepo\n} = require('ipfs-repo');\n\nconst DatastoreLevel = require('datastore-level');\n\nconst BlockstoreDatastoreAdapter = require('blockstore-datastore-adapter');\n/**\n * @typedef {import('ipfs-repo-migrations').ProgressCallback} MigrationProgressCallback\n */\n\n/**\n * @param {import('../types').Print} print\n * @param {import('ipfs-core-utils/src/multicodecs')} codecs\n * @param {object} options\n * @param {string} [options.path]\n * @param {boolean} [options.autoMigrate]\n * @param {MigrationProgressCallback} [options.onMigrationProgress]\n */\n\n\nmodule.exports = (print, codecs, options) => {\n  const repoPath = options.path || 'ipfs';\n  return createRepo(repoPath, codeOrName => codecs.getCodec(codeOrName), {\n    root: new DatastoreLevel(repoPath, {\n      prefix: '',\n      version: 2\n    }),\n    blocks: new BlockstoreDatastoreAdapter(new DatastoreLevel(`${repoPath}/blocks`, {\n      prefix: '',\n      version: 2\n    })),\n    datastore: new DatastoreLevel(`${repoPath}/datastore`, {\n      prefix: '',\n      version: 2\n    }),\n    keys: new DatastoreLevel(`${repoPath}/keys`, {\n      prefix: '',\n      version: 2\n    }),\n    pins: new DatastoreLevel(`${repoPath}/pins`, {\n      prefix: '',\n      version: 2\n    })\n  }, {\n    autoMigrate: options.autoMigrate,\n    onMigrationProgress: options.onMigrationProgress || print\n  });\n};","map":null,"metadata":{},"sourceType":"script"}