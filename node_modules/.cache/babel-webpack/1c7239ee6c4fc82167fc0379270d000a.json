{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/Dapp/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst configure = require('../../lib/configure');\n\nconst toUrlSearchParams = require('../../lib/to-url-search-params');\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/config/profiles').API<HTTPClientExtraOptions>} ConfigProfilesAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {ConfigProfilesAPI[\"apply\"]}\n   */\n  function apply(_x) {\n    return _apply.apply(this, arguments);\n  }\n\n  function _apply() {\n    _apply = _asyncToGenerator(function* (profile, options = {}) {\n      const res = yield api.post('config/profile/apply', {\n        timeout: options.timeout,\n        signal: options.signal,\n        searchParams: toUrlSearchParams({\n          arg: profile,\n          ...options\n        }),\n        headers: options.headers\n      });\n      const data = yield res.json();\n      return {\n        original: data.OldCfg,\n        updated: data.NewCfg\n      };\n    });\n    return _apply.apply(this, arguments);\n  }\n\n  return apply;\n});","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Dapp/node_modules/ipfs-http-client/src/config/profiles/apply.js"],"names":["configure","require","toUrlSearchParams","module","exports","api","apply","profile","options","res","post","timeout","signal","searchParams","arg","headers","data","json","original","OldCfg","updated","NewCfg"],"mappings":"AAAA;;;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,qBAAD,CAAzB;;AACA,MAAMC,iBAAiB,GAAGD,OAAO,CAAC,gCAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AAEAE,MAAM,CAACC,OAAP,GAAiBJ,SAAS,CAACK,GAAG,IAAI;AAChC;AACF;AACA;AAHkC,WAIjBC,KAJiB;AAAA;AAAA;;AAAA;AAAA,+BAIhC,WAAsBC,OAAtB,EAA+BC,OAAO,GAAG,EAAzC,EAA6C;AAC3C,YAAMC,GAAG,SAASJ,GAAG,CAACK,IAAJ,CAAS,sBAAT,EAAiC;AACjDC,QAAAA,OAAO,EAAEH,OAAO,CAACG,OADgC;AAEjDC,QAAAA,MAAM,EAAEJ,OAAO,CAACI,MAFiC;AAGjDC,QAAAA,YAAY,EAAEX,iBAAiB,CAAC;AAC9BY,UAAAA,GAAG,EAAEP,OADyB;AAE9B,aAAGC;AAF2B,SAAD,CAHkB;AAOjDO,QAAAA,OAAO,EAAEP,OAAO,CAACO;AAPgC,OAAjC,CAAlB;AASA,YAAMC,IAAI,SAASP,GAAG,CAACQ,IAAJ,EAAnB;AAEA,aAAO;AACLC,QAAAA,QAAQ,EAAEF,IAAI,CAACG,MADV;AACkBC,QAAAA,OAAO,EAAEJ,IAAI,CAACK;AADhC,OAAP;AAGD,KAnB+B;AAAA;AAAA;;AAqBhC,SAAOf,KAAP;AACD,CAtByB,CAA1B","sourcesContent":["'use strict'\n\nconst configure = require('../../lib/configure')\nconst toUrlSearchParams = require('../../lib/to-url-search-params')\n\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/config/profiles').API<HTTPClientExtraOptions>} ConfigProfilesAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {ConfigProfilesAPI[\"apply\"]}\n   */\n  async function apply (profile, options = {}) {\n    const res = await api.post('config/profile/apply', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: profile,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return {\n      original: data.OldCfg, updated: data.NewCfg\n    }\n  }\n\n  return apply\n})\n"]},"metadata":{},"sourceType":"script"}