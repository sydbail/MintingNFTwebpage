{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {FilesAPI[\"flush\"]}\n   */\n  function flush(_x) {\n    return _flush.apply(this, arguments);\n  }\n\n  function _flush() {\n    _flush = _asyncToGenerator(function* (path, options = {}) {\n      if (!path || typeof path !== 'string') {\n        throw new Error('ipfs.files.flush requires a path');\n      }\n\n      const res = yield api.post('files/flush', {\n        timeout: options.timeout,\n        signal: options.signal,\n        searchParams: toUrlSearchParams({\n          arg: path,\n          ...options\n        }),\n        headers: options.headers\n      });\n      const data = yield res.json();\n      return CID.parse(data.Cid);\n    });\n    return _flush.apply(this, arguments);\n  }\n\n  return flush;\n});","map":{"version":3,"sources":["/Users/sydneybailey/Internship/contract-testing/node_modules/ipfs-http-client/src/files/flush.js"],"names":["CID","require","configure","toUrlSearchParams","module","exports","api","flush","path","options","Error","res","post","timeout","signal","searchParams","arg","headers","data","json","parse","Cid"],"mappings":"AAAA;;;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAUC,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,6BAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AAEAG,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAACI,GAAG,IAAI;AAChC;AACF;AACA;AAHkC,WAIjBC,KAJiB;AAAA;AAAA;;AAAA;AAAA,+BAIhC,WAAsBC,IAAtB,EAA4BC,OAAO,GAAG,EAAtC,EAA0C;AACxC,UAAI,CAACD,IAAD,IAAS,OAAOA,IAAP,KAAgB,QAA7B,EAAuC;AACrC,cAAM,IAAIE,KAAJ,CAAU,kCAAV,CAAN;AACD;;AAED,YAAMC,GAAG,SAASL,GAAG,CAACM,IAAJ,CAAS,aAAT,EAAwB;AACxCC,QAAAA,OAAO,EAAEJ,OAAO,CAACI,OADuB;AAExCC,QAAAA,MAAM,EAAEL,OAAO,CAACK,MAFwB;AAGxCC,QAAAA,YAAY,EAAEZ,iBAAiB,CAAC;AAC9Ba,UAAAA,GAAG,EAAER,IADyB;AAE9B,aAAGC;AAF2B,SAAD,CAHS;AAOxCQ,QAAAA,OAAO,EAAER,OAAO,CAACQ;AAPuB,OAAxB,CAAlB;AASA,YAAMC,IAAI,SAASP,GAAG,CAACQ,IAAJ,EAAnB;AAEA,aAAOnB,GAAG,CAACoB,KAAJ,CAAUF,IAAI,CAACG,GAAf,CAAP;AACD,KArB+B;AAAA;AAAA;;AAsBhC,SAAOd,KAAP;AACD,CAvByB,CAA1B","sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {FilesAPI[\"flush\"]}\n   */\n  async function flush (path, options = {}) {\n    if (!path || typeof path !== 'string') {\n      throw new Error('ipfs.files.flush requires a path')\n    }\n\n    const res = await api.post('files/flush', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return CID.parse(data.Cid)\n  }\n  return flush\n})\n"]},"metadata":{},"sourceType":"script"}