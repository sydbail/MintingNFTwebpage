{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst {\n  equals: uint8ArrayEquals\n} = require('uint8arrays/equals');\n\nconst Message = require('../../message');\n\nconst utils = require('../../utils');\n/**\n * @typedef {import('peer-id')} PeerId\n */\n\n/**\n * @param {import('../../index')} dht\n */\n\n\nmodule.exports = dht => {\n  const log = utils.logger(dht.peerId, 'rpc:find-node');\n  /**\n   * Process `FindNode` DHT messages.\n   *\n   * @param {PeerId} peerId\n   * @param {Message} msg\n   */\n\n  function findNode(_x, _x2) {\n    return _findNode.apply(this, arguments);\n  }\n\n  function _findNode() {\n    _findNode = _asyncToGenerator(function* (peerId, msg) {\n      log('start');\n      let closer;\n\n      if (uint8ArrayEquals(msg.key, dht.peerId.id)) {\n        closer = [{\n          id: dht.peerId,\n          multiaddrs: dht.libp2p.multiaddrs\n        }];\n      } else {\n        closer = yield dht._betterPeersToQuery(msg, peerId);\n      }\n\n      const response = new Message(msg.type, new Uint8Array(0), msg.clusterLevel);\n\n      if (closer.length > 0) {\n        response.closerPeers = closer;\n      } else {\n        log('handle FindNode %s: could not find anything', peerId.toB58String());\n      }\n\n      return response;\n    });\n    return _findNode.apply(this, arguments);\n  }\n\n  return findNode;\n};","map":{"version":3,"sources":["/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/libp2p-kad-dht/src/rpc/handlers/find-node.js"],"names":["equals","uint8ArrayEquals","require","Message","utils","module","exports","dht","log","logger","peerId","findNode","msg","closer","key","id","multiaddrs","libp2p","_betterPeersToQuery","response","type","Uint8Array","clusterLevel","length","closerPeers","toB58String"],"mappings":"AAAA;;;;AAEA,MAAM;AAAEA,EAAAA,MAAM,EAAEC;AAAV,IAA+BC,OAAO,CAAC,oBAAD,CAA5C;;AAEA,MAAMC,OAAO,GAAGD,OAAO,CAAC,eAAD,CAAvB;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAC,aAAD,CAArB;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;AACAG,MAAM,CAACC,OAAP,GAAkBC,GAAD,IAAS;AACxB,QAAMC,GAAG,GAAGJ,KAAK,CAACK,MAAN,CAAaF,GAAG,CAACG,MAAjB,EAAyB,eAAzB,CAAZ;AAEA;AACF;AACA;AACA;AACA;AACA;;AAR0B,WASTC,QATS;AAAA;AAAA;;AAAA;AAAA,kCASxB,WAAyBD,MAAzB,EAAiCE,GAAjC,EAAsC;AACpCJ,MAAAA,GAAG,CAAC,OAAD,CAAH;AAEA,UAAIK,MAAJ;;AACA,UAAIZ,gBAAgB,CAACW,GAAG,CAACE,GAAL,EAAUP,GAAG,CAACG,MAAJ,CAAWK,EAArB,CAApB,EAA8C;AAC5CF,QAAAA,MAAM,GAAG,CAAC;AACRE,UAAAA,EAAE,EAAER,GAAG,CAACG,MADA;AAERM,UAAAA,UAAU,EAAET,GAAG,CAACU,MAAJ,CAAWD;AAFf,SAAD,CAAT;AAID,OALD,MAKO;AACLH,QAAAA,MAAM,SAASN,GAAG,CAACW,mBAAJ,CAAwBN,GAAxB,EAA6BF,MAA7B,CAAf;AACD;;AAED,YAAMS,QAAQ,GAAG,IAAIhB,OAAJ,CAAYS,GAAG,CAACQ,IAAhB,EAAsB,IAAIC,UAAJ,CAAe,CAAf,CAAtB,EAAyCT,GAAG,CAACU,YAA7C,CAAjB;;AAEA,UAAIT,MAAM,CAACU,MAAP,GAAgB,CAApB,EAAuB;AACrBJ,QAAAA,QAAQ,CAACK,WAAT,GAAuBX,MAAvB;AACD,OAFD,MAEO;AACLL,QAAAA,GAAG,CAAC,6CAAD,EAAgDE,MAAM,CAACe,WAAP,EAAhD,CAAH;AACD;;AAED,aAAON,QAAP;AACD,KA/BuB;AAAA;AAAA;;AAiCxB,SAAOR,QAAP;AACD,CAlCD","sourcesContent":["'use strict'\n\nconst { equals: uint8ArrayEquals } = require('uint8arrays/equals')\n\nconst Message = require('../../message')\nconst utils = require('../../utils')\n\n/**\n * @typedef {import('peer-id')} PeerId\n */\n\n/**\n * @param {import('../../index')} dht\n */\nmodule.exports = (dht) => {\n  const log = utils.logger(dht.peerId, 'rpc:find-node')\n\n  /**\n   * Process `FindNode` DHT messages.\n   *\n   * @param {PeerId} peerId\n   * @param {Message} msg\n   */\n  async function findNode (peerId, msg) {\n    log('start')\n\n    let closer\n    if (uint8ArrayEquals(msg.key, dht.peerId.id)) {\n      closer = [{\n        id: dht.peerId,\n        multiaddrs: dht.libp2p.multiaddrs\n      }]\n    } else {\n      closer = await dht._betterPeersToQuery(msg, peerId)\n    }\n\n    const response = new Message(msg.type, new Uint8Array(0), msg.clusterLevel)\n\n    if (closer.length > 0) {\n      response.closerPeers = closer\n    } else {\n      log('handle FindNode %s: could not find anything', peerId.toB58String())\n    }\n\n    return response\n  }\n\n  return findNode\n}\n"]},"metadata":{},"sourceType":"script"}