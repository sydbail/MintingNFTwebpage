{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nvar _asyncGeneratorDelegate = require(\"/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/@babel/runtime/helpers/asyncGeneratorDelegate\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nvar _awaitAsyncGenerator = require(\"/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\").default;\n\nvar _wrapAsyncGenerator = require(\"/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\").default;\n\nconst {\n  encode,\n  prepare\n} = require('@ipld/dag-pb');\n\nconst {\n  UnixFS\n} = require('ipfs-unixfs');\n\nconst persist = require('./persist');\n\nconst {\n  createHAMT,\n  Bucket\n} = require('hamt-sharding');\n\nconst {\n  hamtHashCode,\n  hamtHashFn,\n  hamtBucketBits\n} = require('./hamt-constants');\n/**\n * @typedef {import('ipfs-unixfs-importer').ImporterOptions} ImporterOptions\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('ipfs-unixfs').Mtime} Mtime\n *\n * @typedef {object} ImportResult\n * @property {CID} cid\n * @property {import('@ipld/dag-pb').PBNode} node\n * @property {number} size\n *\n * @typedef {object} DirContents\n * @property {CID} [cid]\n * @property {number} [size]\n *\n * @typedef {object} DirOptions\n * @property {Mtime} [mtime]\n * @property {number} [mode]\n * @property {import('multiformats/codecs/interface').BlockCodec<any, any>} [codec]\n * @property {import('multiformats/cid').CIDVersion} [cidVersion]\n * @property {boolean} [onlyHash]\n * @property {AbortSignal} [signal]\n */\n\n/**\n * @typedef {object} DirProps\n * @property {boolean} root\n * @property {boolean} dir\n * @property {string} path\n * @property {boolean} dirty\n * @property {boolean} flat\n * @property {Dir} [parent]\n * @property {string} [parentKey]\n * @property {import('ipfs-unixfs').UnixFS} [unixfs]\n * @property {number} [mode]\n * @property {import('ipfs-unixfs').Mtime} [mtime]\n */\n\n\nclass Dir {\n  /**\n   * @param {DirProps} props\n   * @param {DirOptions} options\n   */\n  constructor(props, options) {\n    this.options = options || {};\n    this.root = props.root;\n    this.dir = props.dir;\n    this.path = props.path;\n    this.dirty = props.dirty;\n    this.flat = props.flat;\n    this.parent = props.parent;\n    this.parentKey = props.parentKey;\n    this.unixfs = props.unixfs;\n    this.mode = props.mode;\n    this.mtime = props.mtime;\n    /** @type {CID | undefined} */\n\n    this.cid = undefined;\n    /** @type {number | undefined} */\n\n    this.size = undefined;\n  }\n  /**\n   * @param {string} name\n   * @param {DirContents} value\n   */\n\n\n  put(name, value) {\n    return _asyncToGenerator(function* () {})();\n  }\n  /**\n   * @param {string} name\n   * @returns {Promise<DirContents | undefined>}\n   */\n\n\n  get(name) {\n    return Promise.resolve(this);\n  }\n  /**\n   * @returns {AsyncIterable<{ key: string, child: DirContents}>}\n   */\n\n\n  eachChildSeries() {\n    return _wrapAsyncGenerator(function* () {})();\n  }\n  /**\n   * @param {Blockstore} blockstore\n   * @returns {AsyncIterable<ImportResult>}\n   */\n\n\n  flush(blockstore) {\n    return _wrapAsyncGenerator(function* () {})();\n  }\n\n}\n\nclass DirSharded extends Dir {\n  /**\n   * @param {DirProps} props\n   * @param {DirOptions} options\n   */\n  constructor(props, options) {\n    super(props, options);\n    /** @type {Bucket<DirContents>} */\n\n    this._bucket = createHAMT({\n      hashFn: hamtHashFn,\n      bits: hamtBucketBits\n    });\n  }\n  /**\n   * @param {string} name\n   * @param {DirContents} value\n   */\n\n\n  put(name, value) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this3._bucket.put(name, value);\n    })();\n  }\n  /**\n   * @param {string} name\n   */\n\n\n  get(name) {\n    return this._bucket.get(name);\n  }\n\n  childCount() {\n    return this._bucket.leafCount();\n  }\n\n  directChildrenCount() {\n    return this._bucket.childrenCount();\n  }\n\n  onlyChild() {\n    return this._bucket.onlyChild();\n  }\n\n  eachChildSeries() {\n    var _this = this;\n\n    return _wrapAsyncGenerator(function* () {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n\n      var _iteratorError;\n\n      try {\n        for (var _iterator = _asyncIterator(_this._bucket.eachLeafSeries()), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n          const {\n            key,\n            value\n          } = _value;\n          yield {\n            key,\n            child: value\n          };\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            yield _awaitAsyncGenerator(_iterator.return());\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    })();\n  }\n  /**\n   * @param {Blockstore} blockstore\n   * @returns {AsyncIterable<ImportResult>}\n   */\n\n\n  flush(blockstore) {\n    var _this2 = this;\n\n    return _wrapAsyncGenerator(function* () {\n      yield* _asyncGeneratorDelegate(_asyncIterator(flush(_this2._bucket, blockstore, _this2, _this2.options)), _awaitAsyncGenerator);\n    })();\n  }\n\n}\n\nmodule.exports = DirSharded;\n/**\n * @param {Bucket<?>} bucket\n * @param {Blockstore} blockstore\n * @param {*} shardRoot\n * @param {DirOptions} options\n * @returns {AsyncIterable<ImportResult>}\n */\n\nfunction flush(_x, _x2, _x3, _x4) {\n  return _flush.apply(this, arguments);\n}\n\nfunction _flush() {\n  _flush = _wrapAsyncGenerator(function* (bucket, blockstore, shardRoot, options) {\n    const children = bucket._children;\n    const links = [];\n    let childrenSize = 0;\n\n    for (let i = 0; i < children.length; i++) {\n      const child = children.get(i);\n\n      if (!child) {\n        continue;\n      }\n\n      const labelPrefix = i.toString(16).toUpperCase().padStart(2, '0');\n\n      if (child instanceof Bucket) {\n        let shard;\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n\n        var _iteratorError2;\n\n        try {\n          for (var _iterator2 = _asyncIterator(yield _awaitAsyncGenerator(flush(child, blockstore, null, options))), _step2, _value2; _step2 = yield _awaitAsyncGenerator(_iterator2.next()), _iteratorNormalCompletion2 = _step2.done, _value2 = yield _awaitAsyncGenerator(_step2.value), !_iteratorNormalCompletion2; _iteratorNormalCompletion2 = true) {\n            const subShard = _value2;\n            shard = subShard;\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n              yield _awaitAsyncGenerator(_iterator2.return());\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n\n        if (!shard) {\n          throw new Error('Could not flush sharded directory, no subshard found');\n        }\n\n        links.push({\n          Name: labelPrefix,\n          Tsize: shard.size,\n          Hash: shard.cid\n        });\n        childrenSize += shard.size;\n      } else if (typeof child.value.flush === 'function') {\n        const dir = child.value;\n        let flushedDir;\n        var _iteratorNormalCompletion3 = true;\n        var _didIteratorError3 = false;\n\n        var _iteratorError3;\n\n        try {\n          for (var _iterator3 = _asyncIterator(dir.flush(blockstore)), _step3, _value3; _step3 = yield _awaitAsyncGenerator(_iterator3.next()), _iteratorNormalCompletion3 = _step3.done, _value3 = yield _awaitAsyncGenerator(_step3.value), !_iteratorNormalCompletion3; _iteratorNormalCompletion3 = true) {\n            const entry = _value3;\n            flushedDir = entry;\n            yield flushedDir;\n          }\n        } catch (err) {\n          _didIteratorError3 = true;\n          _iteratorError3 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n              yield _awaitAsyncGenerator(_iterator3.return());\n            }\n          } finally {\n            if (_didIteratorError3) {\n              throw _iteratorError3;\n            }\n          }\n        }\n\n        const label = labelPrefix + child.key;\n        links.push({\n          Name: label,\n          Tsize: flushedDir.size,\n          Hash: flushedDir.cid\n        });\n        childrenSize += flushedDir.size;\n      } else {\n        const value = child.value;\n\n        if (!value.cid) {\n          continue;\n        }\n\n        const label = labelPrefix + child.key;\n        const size = value.size;\n        links.push({\n          Name: label,\n          Tsize: size,\n          Hash: value.cid\n        });\n        childrenSize += size;\n      }\n    } // go-ipfs uses little endian, that's why we have to\n    // reverse the bit field before storing it\n\n\n    const data = Uint8Array.from(children.bitField().reverse());\n    const dir = new UnixFS({\n      type: 'hamt-sharded-directory',\n      data,\n      fanout: bucket.tableSize(),\n      hashType: hamtHashCode,\n      mtime: shardRoot && shardRoot.mtime,\n      mode: shardRoot && shardRoot.mode\n    });\n    const node = {\n      Data: dir.marshal(),\n      Links: links\n    };\n    const buffer = encode(prepare(node));\n    const cid = yield _awaitAsyncGenerator(persist(buffer, blockstore, options));\n    const size = buffer.length + childrenSize;\n    yield {\n      cid,\n      node,\n      size\n    };\n  });\n  return _flush.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/ipfs-core/src/components/files/utils/dir-sharded.js"],"names":["encode","prepare","require","UnixFS","persist","createHAMT","Bucket","hamtHashCode","hamtHashFn","hamtBucketBits","Dir","constructor","props","options","root","dir","path","dirty","flat","parent","parentKey","unixfs","mode","mtime","cid","undefined","size","put","name","value","get","Promise","resolve","eachChildSeries","flush","blockstore","DirSharded","_bucket","hashFn","bits","childCount","leafCount","directChildrenCount","childrenCount","onlyChild","eachLeafSeries","key","child","module","exports","bucket","shardRoot","children","_children","links","childrenSize","i","length","labelPrefix","toString","toUpperCase","padStart","shard","subShard","Error","push","Name","Tsize","Hash","flushedDir","entry","label","data","Uint8Array","from","bitField","reverse","type","fanout","tableSize","hashType","node","Data","marshal","Links","buffer"],"mappings":"AAAA;;;;;;;;;;;;AAEA,MAAM;AAAEA,EAAAA,MAAF;AAAUC,EAAAA;AAAV,IAAsBC,OAAO,CAAC,cAAD,CAAnC;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAaD,OAAO,CAAC,aAAD,CAA1B;;AACA,MAAME,OAAO,GAAGF,OAAO,CAAC,WAAD,CAAvB;;AACA,MAAM;AAAEG,EAAAA,UAAF;AAAcC,EAAAA;AAAd,IAAyBJ,OAAO,CAAC,eAAD,CAAtC;;AACA,MAAM;AACJK,EAAAA,YADI;AAEJC,EAAAA,UAFI;AAGJC,EAAAA;AAHI,IAIFP,OAAO,CAAC,kBAAD,CAJX;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMQ,GAAN,CAAU;AACR;AACF;AACA;AACA;AACEC,EAAAA,WAAW,CAAEC,KAAF,EAASC,OAAT,EAAkB;AAC3B,SAAKA,OAAL,GAAeA,OAAO,IAAI,EAA1B;AACA,SAAKC,IAAL,GAAYF,KAAK,CAACE,IAAlB;AACA,SAAKC,GAAL,GAAWH,KAAK,CAACG,GAAjB;AACA,SAAKC,IAAL,GAAYJ,KAAK,CAACI,IAAlB;AACA,SAAKC,KAAL,GAAaL,KAAK,CAACK,KAAnB;AACA,SAAKC,IAAL,GAAYN,KAAK,CAACM,IAAlB;AACA,SAAKC,MAAL,GAAcP,KAAK,CAACO,MAApB;AACA,SAAKC,SAAL,GAAiBR,KAAK,CAACQ,SAAvB;AACA,SAAKC,MAAL,GAAcT,KAAK,CAACS,MAApB;AACA,SAAKC,IAAL,GAAYV,KAAK,CAACU,IAAlB;AACA,SAAKC,KAAL,GAAaX,KAAK,CAACW,KAAnB;AACA;;AACA,SAAKC,GAAL,GAAWC,SAAX;AACA;;AACA,SAAKC,IAAL,GAAYD,SAAZ;AACD;AAED;AACF;AACA;AACA;;;AACQE,EAAAA,GAAG,CAAEC,IAAF,EAAQC,KAAR,EAAe;AAAA;AAAG;AAC3B;AACF;AACA;AACA;;;AACEC,EAAAA,GAAG,CAAEF,IAAF,EAAQ;AACT,WAAOG,OAAO,CAACC,OAAR,CAAgB,IAAhB,CAAP;AACD;AAED;AACF;AACA;;;AACUC,EAAAA,eAAe,GAAI;AAAA;AAAG;AAC9B;AACF;AACA;AACA;;;AACUC,EAAAA,KAAK,CAAEC,UAAF,EAAc;AAAA;AAAG;;AA5CtB;;AA+CV,MAAMC,UAAN,SAAyB1B,GAAzB,CAA6B;AAC3B;AACF;AACA;AACA;AACEC,EAAAA,WAAW,CAAEC,KAAF,EAASC,OAAT,EAAkB;AAC3B,UAAMD,KAAN,EAAaC,OAAb;AAEA;;AACA,SAAKwB,OAAL,GAAehC,UAAU,CAAC;AACxBiC,MAAAA,MAAM,EAAE9B,UADgB;AAExB+B,MAAAA,IAAI,EAAE9B;AAFkB,KAAD,CAAzB;AAID;AAED;AACF;AACA;AACA;;;AACQkB,EAAAA,GAAG,CAAEC,IAAF,EAAQC,KAAR,EAAe;AAAA;;AAAA;AACtB,YAAM,MAAI,CAACQ,OAAL,CAAaV,GAAb,CAAiBC,IAAjB,EAAuBC,KAAvB,CAAN;AADsB;AAEvB;AAED;AACF;AACA;;;AACEC,EAAAA,GAAG,CAAEF,IAAF,EAAQ;AACT,WAAO,KAAKS,OAAL,CAAaP,GAAb,CAAiBF,IAAjB,CAAP;AACD;;AAEDY,EAAAA,UAAU,GAAI;AACZ,WAAO,KAAKH,OAAL,CAAaI,SAAb,EAAP;AACD;;AAEDC,EAAAA,mBAAmB,GAAI;AACrB,WAAO,KAAKL,OAAL,CAAaM,aAAb,EAAP;AACD;;AAEDC,EAAAA,SAAS,GAAI;AACX,WAAO,KAAKP,OAAL,CAAaO,SAAb,EAAP;AACD;;AAEOX,EAAAA,eAAe,GAAI;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AACzB,4CAAmC,KAAI,CAACI,OAAL,CAAaQ,cAAb,EAAnC,gOAAkE;AAAA,gBAAjD;AAAEC,YAAAA,GAAF;AAAOjB,YAAAA;AAAP,WAAiD;AAChE,gBAAM;AACJiB,YAAAA,GADI;AAEJC,YAAAA,KAAK,EAAElB;AAFH,WAAN;AAID;AANwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAO1B;AAED;AACF;AACA;AACA;;;AACUK,EAAAA,KAAK,CAAEC,UAAF,EAAc;AAAA;;AAAA;AACzB,oDAAQD,KAAK,CAAC,MAAI,CAACG,OAAN,EAAeF,UAAf,EAA2B,MAA3B,EAAiC,MAAI,CAACtB,OAAtC,CAAb;AADyB;AAE1B;;AAzD0B;;AA4D7BmC,MAAM,CAACC,OAAP,GAAiBb,UAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;SACiBF,K;;;;;+BAAjB,WAAwBgB,MAAxB,EAAgCf,UAAhC,EAA4CgB,SAA5C,EAAuDtC,OAAvD,EAAgE;AAC9D,UAAMuC,QAAQ,GAAGF,MAAM,CAACG,SAAxB;AACA,UAAMC,KAAK,GAAG,EAAd;AACA,QAAIC,YAAY,GAAG,CAAnB;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,QAAQ,CAACK,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACxC,YAAMT,KAAK,GAAGK,QAAQ,CAACtB,GAAT,CAAa0B,CAAb,CAAd;;AAEA,UAAI,CAACT,KAAL,EAAY;AACV;AACD;;AAED,YAAMW,WAAW,GAAGF,CAAC,CAACG,QAAF,CAAW,EAAX,EAAeC,WAAf,GAA6BC,QAA7B,CAAsC,CAAtC,EAAyC,GAAzC,CAApB;;AAEA,UAAId,KAAK,YAAYzC,MAArB,EAA6B;AAC3B,YAAIwD,KAAJ;AAD2B;AAAA;;AAAA;;AAAA;AAG3B,0EAAmC5B,KAAK,CAACa,KAAD,EAAQZ,UAAR,EAAoB,IAApB,EAA0BtB,OAA1B,CAAxC,2OAA4E;AAAA,kBAA3DkD,QAA2D;AAC1ED,YAAAA,KAAK,GAAGC,QAAR;AACD;AAL0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAO3B,YAAI,CAACD,KAAL,EAAY;AACV,gBAAM,IAAIE,KAAJ,CAAU,sDAAV,CAAN;AACD;;AAEDV,QAAAA,KAAK,CAACW,IAAN,CAAW;AACTC,UAAAA,IAAI,EAAER,WADG;AAETS,UAAAA,KAAK,EAAEL,KAAK,CAACpC,IAFJ;AAGT0C,UAAAA,IAAI,EAAEN,KAAK,CAACtC;AAHH,SAAX;AAKA+B,QAAAA,YAAY,IAAIO,KAAK,CAACpC,IAAtB;AACD,OAjBD,MAiBO,IAAI,OAAOqB,KAAK,CAAClB,KAAN,CAAYK,KAAnB,KAA6B,UAAjC,EAA6C;AAClD,cAAMnB,GAAG,GAAGgC,KAAK,CAAClB,KAAlB;AACA,YAAIwC,UAAJ;AAFkD;AAAA;;AAAA;;AAAA;AAIlD,+CAA0BtD,GAAG,CAACmB,KAAJ,CAAUC,UAAV,CAA1B,0OAAiD;AAAA,kBAAhCmC,KAAgC;AAC/CD,YAAAA,UAAU,GAAGC,KAAb;AAEA,kBAAMD,UAAN;AACD;AARiD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAUlD,cAAME,KAAK,GAAGb,WAAW,GAAGX,KAAK,CAACD,GAAlC;AACAQ,QAAAA,KAAK,CAACW,IAAN,CAAW;AACTC,UAAAA,IAAI,EAAEK,KADG;AAETJ,UAAAA,KAAK,EAAEE,UAAU,CAAC3C,IAFT;AAGT0C,UAAAA,IAAI,EAAEC,UAAU,CAAC7C;AAHR,SAAX;AAMA+B,QAAAA,YAAY,IAAIc,UAAU,CAAC3C,IAA3B;AACD,OAlBM,MAkBA;AACL,cAAMG,KAAK,GAAGkB,KAAK,CAAClB,KAApB;;AAEA,YAAI,CAACA,KAAK,CAACL,GAAX,EAAgB;AACd;AACD;;AAED,cAAM+C,KAAK,GAAGb,WAAW,GAAGX,KAAK,CAACD,GAAlC;AACA,cAAMpB,IAAI,GAAGG,KAAK,CAACH,IAAnB;AAEA4B,QAAAA,KAAK,CAACW,IAAN,CAAW;AACTC,UAAAA,IAAI,EAAEK,KADG;AAETJ,UAAAA,KAAK,EAAEzC,IAFE;AAGT0C,UAAAA,IAAI,EAAEvC,KAAK,CAACL;AAHH,SAAX;AAKA+B,QAAAA,YAAY,IAAI7B,IAAhB;AACD;AACF,KAlE6D,CAoE9D;AACA;;;AACA,UAAM8C,IAAI,GAAGC,UAAU,CAACC,IAAX,CAAgBtB,QAAQ,CAACuB,QAAT,GAAoBC,OAApB,EAAhB,CAAb;AACA,UAAM7D,GAAG,GAAG,IAAIZ,MAAJ,CAAW;AACrB0E,MAAAA,IAAI,EAAE,wBADe;AAErBL,MAAAA,IAFqB;AAGrBM,MAAAA,MAAM,EAAE5B,MAAM,CAAC6B,SAAP,EAHa;AAIrBC,MAAAA,QAAQ,EAAEzE,YAJW;AAKrBgB,MAAAA,KAAK,EAAE4B,SAAS,IAAIA,SAAS,CAAC5B,KALT;AAMrBD,MAAAA,IAAI,EAAE6B,SAAS,IAAIA,SAAS,CAAC7B;AANR,KAAX,CAAZ;AASA,UAAM2D,IAAI,GAAG;AACXC,MAAAA,IAAI,EAAEnE,GAAG,CAACoE,OAAJ,EADK;AAEXC,MAAAA,KAAK,EAAE9B;AAFI,KAAb;AAIA,UAAM+B,MAAM,GAAGrF,MAAM,CAACC,OAAO,CAACgF,IAAD,CAAR,CAArB;AACA,UAAMzD,GAAG,8BAASpB,OAAO,CAACiF,MAAD,EAASlD,UAAT,EAAqBtB,OAArB,CAAhB,CAAT;AACA,UAAMa,IAAI,GAAG2D,MAAM,CAAC5B,MAAP,GAAgBF,YAA7B;AAEA,UAAM;AACJ/B,MAAAA,GADI;AAEJyD,MAAAA,IAFI;AAGJvD,MAAAA;AAHI,KAAN;AAKD,G","sourcesContent":["'use strict'\n\nconst { encode, prepare } = require('@ipld/dag-pb')\nconst { UnixFS } = require('ipfs-unixfs')\nconst persist = require('./persist')\nconst { createHAMT, Bucket } = require('hamt-sharding')\nconst {\n  hamtHashCode,\n  hamtHashFn,\n  hamtBucketBits\n} = require('./hamt-constants')\n\n/**\n * @typedef {import('ipfs-unixfs-importer').ImporterOptions} ImporterOptions\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('ipfs-unixfs').Mtime} Mtime\n *\n * @typedef {object} ImportResult\n * @property {CID} cid\n * @property {import('@ipld/dag-pb').PBNode} node\n * @property {number} size\n *\n * @typedef {object} DirContents\n * @property {CID} [cid]\n * @property {number} [size]\n *\n * @typedef {object} DirOptions\n * @property {Mtime} [mtime]\n * @property {number} [mode]\n * @property {import('multiformats/codecs/interface').BlockCodec<any, any>} [codec]\n * @property {import('multiformats/cid').CIDVersion} [cidVersion]\n * @property {boolean} [onlyHash]\n * @property {AbortSignal} [signal]\n */\n\n/**\n * @typedef {object} DirProps\n * @property {boolean} root\n * @property {boolean} dir\n * @property {string} path\n * @property {boolean} dirty\n * @property {boolean} flat\n * @property {Dir} [parent]\n * @property {string} [parentKey]\n * @property {import('ipfs-unixfs').UnixFS} [unixfs]\n * @property {number} [mode]\n * @property {import('ipfs-unixfs').Mtime} [mtime]\n */\nclass Dir {\n  /**\n   * @param {DirProps} props\n   * @param {DirOptions} options\n   */\n  constructor (props, options) {\n    this.options = options || {}\n    this.root = props.root\n    this.dir = props.dir\n    this.path = props.path\n    this.dirty = props.dirty\n    this.flat = props.flat\n    this.parent = props.parent\n    this.parentKey = props.parentKey\n    this.unixfs = props.unixfs\n    this.mode = props.mode\n    this.mtime = props.mtime\n    /** @type {CID | undefined} */\n    this.cid = undefined\n    /** @type {number | undefined} */\n    this.size = undefined\n  }\n\n  /**\n   * @param {string} name\n   * @param {DirContents} value\n   */\n  async put (name, value) { }\n  /**\n   * @param {string} name\n   * @returns {Promise<DirContents | undefined>}\n   */\n  get (name) {\n    return Promise.resolve(this)\n  }\n\n  /**\n   * @returns {AsyncIterable<{ key: string, child: DirContents}>}\n   */\n  async * eachChildSeries () { }\n  /**\n   * @param {Blockstore} blockstore\n   * @returns {AsyncIterable<ImportResult>}\n   */\n  async * flush (blockstore) { }\n}\n\nclass DirSharded extends Dir {\n  /**\n   * @param {DirProps} props\n   * @param {DirOptions} options\n   */\n  constructor (props, options) {\n    super(props, options)\n\n    /** @type {Bucket<DirContents>} */\n    this._bucket = createHAMT({\n      hashFn: hamtHashFn,\n      bits: hamtBucketBits\n    })\n  }\n\n  /**\n   * @param {string} name\n   * @param {DirContents} value\n   */\n  async put (name, value) {\n    await this._bucket.put(name, value)\n  }\n\n  /**\n   * @param {string} name\n   */\n  get (name) {\n    return this._bucket.get(name)\n  }\n\n  childCount () {\n    return this._bucket.leafCount()\n  }\n\n  directChildrenCount () {\n    return this._bucket.childrenCount()\n  }\n\n  onlyChild () {\n    return this._bucket.onlyChild()\n  }\n\n  async * eachChildSeries () {\n    for await (const { key, value } of this._bucket.eachLeafSeries()) {\n      yield {\n        key,\n        child: value\n      }\n    }\n  }\n\n  /**\n   * @param {Blockstore} blockstore\n   * @returns {AsyncIterable<ImportResult>}\n   */\n  async * flush (blockstore) {\n    yield * flush(this._bucket, blockstore, this, this.options)\n  }\n}\n\nmodule.exports = DirSharded\n\n/**\n * @param {Bucket<?>} bucket\n * @param {Blockstore} blockstore\n * @param {*} shardRoot\n * @param {DirOptions} options\n * @returns {AsyncIterable<ImportResult>}\n */\nasync function * flush (bucket, blockstore, shardRoot, options) {\n  const children = bucket._children\n  const links = []\n  let childrenSize = 0\n\n  for (let i = 0; i < children.length; i++) {\n    const child = children.get(i)\n\n    if (!child) {\n      continue\n    }\n\n    const labelPrefix = i.toString(16).toUpperCase().padStart(2, '0')\n\n    if (child instanceof Bucket) {\n      let shard\n\n      for await (const subShard of await flush(child, blockstore, null, options)) {\n        shard = subShard\n      }\n\n      if (!shard) {\n        throw new Error('Could not flush sharded directory, no subshard found')\n      }\n\n      links.push({\n        Name: labelPrefix,\n        Tsize: shard.size,\n        Hash: shard.cid\n      })\n      childrenSize += shard.size\n    } else if (typeof child.value.flush === 'function') {\n      const dir = child.value\n      let flushedDir\n\n      for await (const entry of dir.flush(blockstore)) {\n        flushedDir = entry\n\n        yield flushedDir\n      }\n\n      const label = labelPrefix + child.key\n      links.push({\n        Name: label,\n        Tsize: flushedDir.size,\n        Hash: flushedDir.cid\n      })\n\n      childrenSize += flushedDir.size\n    } else {\n      const value = child.value\n\n      if (!value.cid) {\n        continue\n      }\n\n      const label = labelPrefix + child.key\n      const size = value.size\n\n      links.push({\n        Name: label,\n        Tsize: size,\n        Hash: value.cid\n      })\n      childrenSize += size\n    }\n  }\n\n  // go-ipfs uses little endian, that's why we have to\n  // reverse the bit field before storing it\n  const data = Uint8Array.from(children.bitField().reverse())\n  const dir = new UnixFS({\n    type: 'hamt-sharded-directory',\n    data,\n    fanout: bucket.tableSize(),\n    hashType: hamtHashCode,\n    mtime: shardRoot && shardRoot.mtime,\n    mode: shardRoot && shardRoot.mode\n  })\n\n  const node = {\n    Data: dir.marshal(),\n    Links: links\n  }\n  const buffer = encode(prepare(node))\n  const cid = await persist(buffer, blockstore, options)\n  const size = buffer.length + childrenSize\n\n  yield {\n    cid,\n    node,\n    size\n  }\n}\n"]},"metadata":{},"sourceType":"script"}