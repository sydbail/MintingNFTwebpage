{"ast":null,"code":"/*eslint-disable*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\"); // Common aliases\n\n\nvar $Reader = $protobuf.Reader,\n    $Writer = $protobuf.Writer,\n    $util = $protobuf.util; // Exported root namespace\n\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.ipfs = function () {\n  /**\n   * Namespace ipfs.\n   * @exports ipfs\n   * @namespace\n   */\n  var ipfs = {};\n\n  ipfs.pin = function () {\n    /**\n     * Namespace pin.\n     * @memberof ipfs\n     * @namespace\n     */\n    var pin = {};\n\n    pin.Set = function () {\n      /**\n       * Properties of a Set.\n       * @memberof ipfs.pin\n       * @interface ISet\n       * @property {number|null} [version] Set version\n       * @property {number|null} [fanout] Set fanout\n       * @property {number|null} [seed] Set seed\n       */\n\n      /**\n       * Constructs a new Set.\n       * @memberof ipfs.pin\n       * @classdesc Represents a Set.\n       * @implements ISet\n       * @constructor\n       * @param {ipfs.pin.ISet=} [p] Properties to set\n       */\n      function Set(p) {\n        if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];\n      }\n      /**\n       * Set version.\n       * @member {number} version\n       * @memberof ipfs.pin.Set\n       * @instance\n       */\n\n\n      Set.prototype.version = 0;\n      /**\n       * Set fanout.\n       * @member {number} fanout\n       * @memberof ipfs.pin.Set\n       * @instance\n       */\n\n      Set.prototype.fanout = 0;\n      /**\n       * Set seed.\n       * @member {number} seed\n       * @memberof ipfs.pin.Set\n       * @instance\n       */\n\n      Set.prototype.seed = 0;\n      /**\n       * Encodes the specified Set message. Does not implicitly {@link ipfs.pin.Set.verify|verify} messages.\n       * @function encode\n       * @memberof ipfs.pin.Set\n       * @static\n       * @param {ipfs.pin.ISet} m Set message or plain object to encode\n       * @param {$protobuf.Writer} [w] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n      Set.encode = function encode(m, w) {\n        if (!w) w = $Writer.create();\n        if (m.version != null && Object.hasOwnProperty.call(m, \"version\")) w.uint32(8).uint32(m.version);\n        if (m.fanout != null && Object.hasOwnProperty.call(m, \"fanout\")) w.uint32(16).uint32(m.fanout);\n        if (m.seed != null && Object.hasOwnProperty.call(m, \"seed\")) w.uint32(29).fixed32(m.seed);\n        return w;\n      };\n      /**\n       * Decodes a Set message from the specified reader or buffer.\n       * @function decode\n       * @memberof ipfs.pin.Set\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n       * @param {number} [l] Message length if known beforehand\n       * @returns {ipfs.pin.Set} Set\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      Set.decode = function decode(r, l) {\n        if (!(r instanceof $Reader)) r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l,\n            m = new $root.ipfs.pin.Set();\n\n        while (r.pos < c) {\n          var t = r.uint32();\n\n          switch (t >>> 3) {\n            case 1:\n              m.version = r.uint32();\n              break;\n\n            case 2:\n              m.fanout = r.uint32();\n              break;\n\n            case 3:\n              m.seed = r.fixed32();\n              break;\n\n            default:\n              r.skipType(t & 7);\n              break;\n          }\n        }\n\n        return m;\n      };\n      /**\n       * Creates a Set message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof ipfs.pin.Set\n       * @static\n       * @param {Object.<string,*>} d Plain object\n       * @returns {ipfs.pin.Set} Set\n       */\n\n\n      Set.fromObject = function fromObject(d) {\n        if (d instanceof $root.ipfs.pin.Set) return d;\n        var m = new $root.ipfs.pin.Set();\n\n        if (d.version != null) {\n          m.version = d.version >>> 0;\n        }\n\n        if (d.fanout != null) {\n          m.fanout = d.fanout >>> 0;\n        }\n\n        if (d.seed != null) {\n          m.seed = d.seed >>> 0;\n        }\n\n        return m;\n      };\n      /**\n       * Creates a plain object from a Set message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof ipfs.pin.Set\n       * @static\n       * @param {ipfs.pin.Set} m Set\n       * @param {$protobuf.IConversionOptions} [o] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n\n\n      Set.toObject = function toObject(m, o) {\n        if (!o) o = {};\n        var d = {};\n\n        if (o.defaults) {\n          d.version = 0;\n          d.fanout = 0;\n          d.seed = 0;\n        }\n\n        if (m.version != null && m.hasOwnProperty(\"version\")) {\n          d.version = m.version;\n        }\n\n        if (m.fanout != null && m.hasOwnProperty(\"fanout\")) {\n          d.fanout = m.fanout;\n        }\n\n        if (m.seed != null && m.hasOwnProperty(\"seed\")) {\n          d.seed = m.seed;\n        }\n\n        return d;\n      };\n      /**\n       * Converts this Set to JSON.\n       * @function toJSON\n       * @memberof ipfs.pin.Set\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n\n\n      Set.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n\n      return Set;\n    }();\n\n    return pin;\n  }();\n\n  return ipfs;\n}();\n\nmodule.exports = $root;","map":null,"metadata":{},"sourceType":"script"}