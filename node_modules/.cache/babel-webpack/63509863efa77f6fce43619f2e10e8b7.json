{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/config').API<HTTPClientExtraOptions>} ConfigAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {ConfigAPI[\"set\"]}\n   */\n  const set = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(function* (key, value, options = {}) {\n      if (typeof key !== 'string') {\n        throw new Error('Invalid key type');\n      }\n\n      const params = { ...options,\n        ...encodeParam(key, value)\n      };\n      const res = yield api.post('config', {\n        timeout: options.timeout,\n        signal: options.signal,\n        searchParams: toUrlSearchParams(params),\n        headers: options.headers\n      });\n      yield res.text();\n    });\n\n    return function set(_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return set;\n});\n/**\n * @param {*} key\n * @param {*} value\n */\n\nconst encodeParam = (key, value) => {\n  switch (typeof value) {\n    case 'boolean':\n      return {\n        arg: [key, value.toString()],\n        bool: true\n      };\n\n    case 'string':\n      return {\n        arg: [key, value]\n      };\n\n    default:\n      return {\n        arg: [key, JSON.stringify(value)],\n        json: true\n      };\n  }\n};","map":null,"metadata":{},"sourceType":"script"}