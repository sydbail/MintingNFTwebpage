{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.noTrailingUnmapper = exports.noTrailingMapper = exports.singleTrailingUnmapper = exports.singleTrailingMapper = exports.multiTrailingUnmapperOne = exports.multiTrailingMapperOne = exports.multiTrailingUnmapper = exports.multiTrailingMapper = exports.onlyTrailingUnmapper = exports.onlyTrailingMapper = exports.fullySpecifiedUnmapper = exports.fullySpecifiedMapper = void 0;\n\nfunction readBh(value) {\n  if (value.length === 0) return [];else return value.split(':');\n}\n\nfunction extractEhAndL(value) {\n  const valueSplits = value.split(':');\n\n  if (valueSplits.length >= 2 && valueSplits[valueSplits.length - 1].length <= 4) {\n    return [valueSplits.slice(0, valueSplits.length - 2), `${valueSplits[valueSplits.length - 2]}:${valueSplits[valueSplits.length - 1]}`];\n  }\n\n  return [valueSplits.slice(0, valueSplits.length - 1), valueSplits[valueSplits.length - 1]];\n}\n\nfunction fullySpecifiedMapper(data) {\n  return `${data[0].join(':')}:${data[1]}`;\n}\n\nexports.fullySpecifiedMapper = fullySpecifiedMapper;\n\nfunction fullySpecifiedUnmapper(value) {\n  if (typeof value !== 'string') throw new Error('Invalid type');\n  return extractEhAndL(value);\n}\n\nexports.fullySpecifiedUnmapper = fullySpecifiedUnmapper;\n\nfunction onlyTrailingMapper(data) {\n  return `::${data[0].join(':')}:${data[1]}`;\n}\n\nexports.onlyTrailingMapper = onlyTrailingMapper;\n\nfunction onlyTrailingUnmapper(value) {\n  if (typeof value !== 'string') throw new Error('Invalid type');\n  if (!value.startsWith('::')) throw new Error('Invalid value');\n  return extractEhAndL(value.substring(2));\n}\n\nexports.onlyTrailingUnmapper = onlyTrailingUnmapper;\n\nfunction multiTrailingMapper(data) {\n  return `${data[0].join(':')}::${data[1].join(':')}:${data[2]}`;\n}\n\nexports.multiTrailingMapper = multiTrailingMapper;\n\nfunction multiTrailingUnmapper(value) {\n  if (typeof value !== 'string') throw new Error('Invalid type');\n  const [bhString, trailingString] = value.split('::', 2);\n  const [eh, l] = extractEhAndL(trailingString);\n  return [readBh(bhString), eh, l];\n}\n\nexports.multiTrailingUnmapper = multiTrailingUnmapper;\n\nfunction multiTrailingMapperOne(data) {\n  return multiTrailingMapper([data[0], [data[1]], data[2]]);\n}\n\nexports.multiTrailingMapperOne = multiTrailingMapperOne;\n\nfunction multiTrailingUnmapperOne(value) {\n  const out = multiTrailingUnmapper(value);\n  return [out[0], out[1].join(':'), out[2]];\n}\n\nexports.multiTrailingUnmapperOne = multiTrailingUnmapperOne;\n\nfunction singleTrailingMapper(data) {\n  return `${data[0].join(':')}::${data[1]}`;\n}\n\nexports.singleTrailingMapper = singleTrailingMapper;\n\nfunction singleTrailingUnmapper(value) {\n  if (typeof value !== 'string') throw new Error('Invalid type');\n  const [bhString, trailing] = value.split('::', 2);\n  return [readBh(bhString), trailing];\n}\n\nexports.singleTrailingUnmapper = singleTrailingUnmapper;\n\nfunction noTrailingMapper(data) {\n  return `${data[0].join(':')}::`;\n}\n\nexports.noTrailingMapper = noTrailingMapper;\n\nfunction noTrailingUnmapper(value) {\n  if (typeof value !== 'string') throw new Error('Invalid type');\n  if (!value.endsWith('::')) throw new Error('Invalid value');\n  return [readBh(value.substring(0, value.length - 2))];\n}\n\nexports.noTrailingUnmapper = noTrailingUnmapper;","map":null,"metadata":{},"sourceType":"script"}