{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst debug = require('debug');\n\nconst log = Object.assign(debug('libp2p:circuit:stop'), {\n  error: debug('libp2p:circuit:stop:err')\n});\n\nconst {\n  CircuitRelay: CircuitPB\n} = require('../protocol');\n\nconst multicodec = require('../multicodec');\n\nconst StreamHandler = require('./stream-handler');\n\nconst {\n  validateAddrs\n} = require('./utils');\n/**\n * @typedef {import('libp2p-interfaces/src/connection').Connection} Connection\n * @typedef {import('libp2p-interfaces/src/stream-muxer/types').MuxedStream} MuxedStream\n * @typedef {import('../protocol').ICircuitRelay} ICircuitRelay\n */\n\n/**\n * Handles incoming STOP requests\n *\n * @private\n * @param {Object} options\n * @param {Connection} options.connection\n * @param {ICircuitRelay} options.request - The CircuitRelay protobuf request (unencoded)\n * @param {StreamHandler} options.streamHandler\n * @returns {Promise<MuxedStream>|void} Resolves a duplex iterable\n */\n\n\nmodule.exports.handleStop = function handleStop({\n  connection,\n  request,\n  streamHandler\n}) {\n  // Validate the STOP request has the required input\n  try {\n    validateAddrs(request, streamHandler);\n  } catch (err) {\n    return log.error('invalid stop request via peer %s', connection.remotePeer.toB58String(), err);\n  } // The request is valid\n\n\n  log('stop request is valid');\n  streamHandler.write({\n    type: CircuitPB.Type.STATUS,\n    code: CircuitPB.Status.SUCCESS\n  });\n  return streamHandler.rest();\n};\n/**\n * Creates a STOP request\n *\n * @private\n * @param {Object} options\n * @param {Connection} options.connection\n * @param {ICircuitRelay} options.request - The CircuitRelay protobuf request (unencoded)\n * @returns {Promise<MuxedStream|void>} Resolves a duplex iterable\n */\n\n\nmodule.exports.stop = /*#__PURE__*/function () {\n  var _stop = _asyncToGenerator(function* ({\n    connection,\n    request\n  }) {\n    const {\n      stream\n    } = yield connection.newStream([multicodec.relay]);\n    log('starting stop request to %s', connection.remotePeer.toB58String());\n    const streamHandler = new StreamHandler({\n      stream\n    });\n    streamHandler.write(request);\n    const response = yield streamHandler.read();\n\n    if (!response) {\n      return streamHandler.close();\n    }\n\n    if (response.code === CircuitPB.Status.SUCCESS) {\n      log('stop request to %s was successful', connection.remotePeer.toB58String());\n      return streamHandler.rest();\n    }\n\n    log('stop request failed with code %d', response.code);\n    streamHandler.close();\n  });\n\n  function stop(_x) {\n    return _stop.apply(this, arguments);\n  }\n\n  return stop;\n}();","map":null,"metadata":{},"sourceType":"script"}