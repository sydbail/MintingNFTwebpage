{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst isIPFS = require('is-ipfs');\n\nconst toCidAndPath = require('ipfs-core-utils/src/to-cid-and-path');\n\nconst drain = require('it-drain');\n\nconst {\n  resolve\n} = require('../../utils');\n/**\n * resolves the given path by parsing out protocol-specific entries\n * (e.g. /ipns/<node-key>) and then going through the /ipfs/ entries and returning the final node\n *\n * @param {Object} context\n * @param {import('../ipns')} context.ipns\n * @param {import('ipfs-repo').IPFSRepo} context.repo\n * @param {import('ipfs-core-utils/src/multicodecs')} context.codecs\n * @param {string} name\n * @param {import('ipfs-core-types/src/utils').AbortOptions} [options]\n */\n\n\nexports.resolvePath = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* ({\n    ipns,\n    repo,\n    codecs\n  }, name, options) {\n    // ipns path\n    if (isIPFS.ipnsPath(name)) {\n      return ipns.resolve(name);\n    }\n\n    const {\n      cid,\n      path\n    } = toCidAndPath(name); // ipfs path\n\n    yield drain(resolve(cid, path || '', codecs, repo, options));\n  });\n\n  return function (_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":null,"metadata":{},"sourceType":"script"}