{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst errors = require('../errors');\n\nconst debug = require('debug');\n\nconst log = debug('ipfs:repo:lock:memory');\nconst lockFile = 'repo.lock';\n/** @type {Record<string,boolean>} */\n\nconst LOCKS = {};\n/**\n * @typedef {import('../types').LockCloser} LockCloser\n */\n\n/**\n * Lock the repo in the given dir.\n *\n * @param {string} dir\n * @returns {Promise<LockCloser>}\n */\n\nexports.lock = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (dir) {\n    const file = dir + '/' + lockFile;\n    log('locking %s', file);\n\n    if (LOCKS[file] === true) {\n      throw new errors.LockExistsError(`Lock already being held for file: ${file}`);\n    }\n\n    LOCKS[file] = true;\n    const closer = {\n      close() {\n        return _asyncToGenerator(function* () {\n          if (LOCKS[file]) {\n            delete LOCKS[file];\n          }\n        })();\n      }\n\n    };\n    return closer;\n  });\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n/**\n * Check if the repo in the given directory is locked.\n *\n * @param {string} dir\n * @returns {Promise<boolean>}\n */\n\n\nexports.locked = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator(function* (dir) {\n    const file = dir + '/' + lockFile;\n    log(`checking lock: ${file}`);\n    return Boolean(LOCKS[file]);\n  });\n\n  return function (_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();","map":null,"metadata":{},"sourceType":"script"}