{"ast":null,"code":"import _asyncIterator from \"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/esm/asyncIterator\";\nimport _asyncGeneratorDelegate from \"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/esm/asyncGeneratorDelegate\";\nimport _awaitAsyncGenerator from \"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator\";\nimport _wrapAsyncGenerator from \"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator\";\nimport dirBuilder from './dir.js';\nimport fileBuilder from './file/index.js';\nimport errCode from 'err-code';\n\nfunction isIterable(thing) {\n  return Symbol.iterator in thing;\n}\n\nfunction isAsyncIterable(thing) {\n  return Symbol.asyncIterator in thing;\n}\n\nfunction contentAsAsyncIterable(content) {\n  try {\n    if (content instanceof Uint8Array) {\n      return _wrapAsyncGenerator(function* () {\n        yield content;\n      })();\n    } else if (isIterable(content)) {\n      return _wrapAsyncGenerator(function* () {\n        yield* _asyncGeneratorDelegate(_asyncIterator(content), _awaitAsyncGenerator);\n      })();\n    } else if (isAsyncIterable(content)) {\n      return content;\n    }\n  } catch {\n    throw errCode(new Error('Content was invalid'), 'ERR_INVALID_CONTENT');\n  }\n\n  throw errCode(new Error('Content was invalid'), 'ERR_INVALID_CONTENT');\n}\n\nfunction dagBuilder(_x, _x2, _x3) {\n  return _dagBuilder.apply(this, arguments);\n}\n\nfunction _dagBuilder() {\n  _dagBuilder = _wrapAsyncGenerator(function* (source, blockstore, options) {\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n\n    var _iteratorError;\n\n    try {\n      for (var _iterator = _asyncIterator(source), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n        const entry = _value;\n\n        if (entry.path) {\n          if (entry.path.substring(0, 2) === './') {\n            options.wrapWithDirectory = true;\n          }\n\n          entry.path = entry.path.split('/').filter(path => path && path !== '.').join('/');\n        }\n\n        if (entry.content) {\n          let chunker;\n\n          if (typeof options.chunker === 'function') {\n            chunker = options.chunker;\n          } else if (options.chunker === 'rabin') {\n            chunker = (yield _awaitAsyncGenerator(import('../chunker/rabin.js'))).default;\n          } else {\n            chunker = (yield _awaitAsyncGenerator(import('../chunker/fixed-size.js'))).default;\n          }\n\n          let chunkValidator;\n\n          if (typeof options.chunkValidator === 'function') {\n            chunkValidator = options.chunkValidator;\n          } else {\n            chunkValidator = (yield _awaitAsyncGenerator(import('./validate-chunks.js'))).default;\n          }\n\n          const file = {\n            path: entry.path,\n            mtime: entry.mtime,\n            mode: entry.mode,\n            content: chunker(chunkValidator(contentAsAsyncIterable(entry.content), options), options)\n          };\n          yield () => fileBuilder(file, blockstore, options);\n        } else if (entry.path) {\n          const dir = {\n            path: entry.path,\n            mtime: entry.mtime,\n            mode: entry.mode\n          };\n          yield () => dirBuilder(dir, blockstore, options);\n        } else {\n          throw new Error('Import candidate must have content or path or both');\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          yield _awaitAsyncGenerator(_iterator.return());\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  });\n  return _dagBuilder.apply(this, arguments);\n}\n\nexport default dagBuilder;","map":null,"metadata":{},"sourceType":"module"}