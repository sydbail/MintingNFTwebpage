{"ast":null,"code":"'use strict'; // @ts-ignore\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/Dapp/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst Heap = require('heap'); // @ts-ignore\n\n\nconst distance = require('xor-distance');\n\nconst debug = require('debug');\n\nconst utils = require('../utils');\n\nconst log = debug('libp2p:dht:peer-queue');\n/**\n * @typedef {import('peer-id')} PeerId\n */\n\n/**\n * PeerQueue is a heap that sorts its entries (PeerIds) by their\n * xor distance to the inital provided key.\n */\n\nclass PeerQueue {\n  /**\n   * Create from a given peer id.\n   *\n   * @param {PeerId} id\n   * @returns {Promise<PeerQueue>}\n   */\n  static fromPeerId(id) {\n    return _asyncToGenerator(function* () {\n      const key = yield utils.convertPeerId(id);\n      return new PeerQueue(key);\n    })();\n  }\n  /**\n   * Create from a given Uint8Array.\n   *\n   * @param {Uint8Array} keyBuffer\n   * @returns {Promise<PeerQueue>}\n   */\n\n\n  static fromKey(keyBuffer) {\n    return _asyncToGenerator(function* () {\n      const key = yield utils.convertBuffer(keyBuffer);\n      return new PeerQueue(key);\n    })();\n  }\n  /**\n   * Create a new PeerQueue.\n   *\n   * @param {Uint8Array} from - The sha2-256 encoded peer id\n   */\n\n\n  constructor(from) {\n    log('create: %b', from);\n    this.from = from;\n    this.heap = new Heap(utils.xorCompare);\n  }\n  /**\n   * Add a new PeerId to the queue.\n   *\n   * @param {PeerId} id\n   */\n\n\n  enqueue(id) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      log('enqueue %s', id.toB58String());\n      const key = yield utils.convertPeerId(id);\n      const el = {\n        id: id,\n        distance: distance(_this.from, key)\n      };\n\n      _this.heap.push(el);\n    })();\n  }\n  /**\n   * Returns the closest peer to the `from` peer.\n   *\n   * @returns {PeerId}\n   */\n\n\n  dequeue() {\n    const el = this.heap.pop();\n    log('dequeue %s', el.id.toB58String());\n    return el.id;\n  }\n\n  get length() {\n    return this.heap.size();\n  }\n\n}\n\nmodule.exports = PeerQueue;","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Dapp/node_modules/libp2p-kad-dht/src/peer-list/peer-queue.js"],"names":["Heap","require","distance","debug","utils","log","PeerQueue","fromPeerId","id","key","convertPeerId","fromKey","keyBuffer","convertBuffer","constructor","from","heap","xorCompare","enqueue","toB58String","el","push","dequeue","pop","length","size","module","exports"],"mappings":"AAAA,a,CAEA;;;;AACA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB,C,CACA;;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,cAAD,CAAxB;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAC,OAAD,CAArB;;AAEA,MAAMG,KAAK,GAAGH,OAAO,CAAC,UAAD,CAArB;;AAEA,MAAMI,GAAG,GAAGF,KAAK,CAAC,uBAAD,CAAjB;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AACA,MAAMG,SAAN,CAAgB;AACd;AACF;AACA;AACA;AACA;AACA;AACyB,SAAVC,UAAU,CAAEC,EAAF,EAAM;AAAA;AAC3B,YAAMC,GAAG,SAASL,KAAK,CAACM,aAAN,CAAoBF,EAApB,CAAlB;AAEA,aAAO,IAAIF,SAAJ,CAAcG,GAAd,CAAP;AAH2B;AAI5B;AAED;AACF;AACA;AACA;AACA;AACA;;;AACsB,SAAPE,OAAO,CAAEC,SAAF,EAAa;AAAA;AAC/B,YAAMH,GAAG,SAASL,KAAK,CAACS,aAAN,CAAoBD,SAApB,CAAlB;AAEA,aAAO,IAAIN,SAAJ,CAAcG,GAAd,CAAP;AAH+B;AAIhC;AAED;AACF;AACA;AACA;AACA;;;AACEK,EAAAA,WAAW,CAAEC,IAAF,EAAQ;AACjBV,IAAAA,GAAG,CAAC,YAAD,EAAeU,IAAf,CAAH;AACA,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,IAAL,GAAY,IAAIhB,IAAJ,CAASI,KAAK,CAACa,UAAf,CAAZ;AACD;AAED;AACF;AACA;AACA;AACA;;;AACQC,EAAAA,OAAO,CAAEV,EAAF,EAAM;AAAA;;AAAA;AACjBH,MAAAA,GAAG,CAAC,YAAD,EAAeG,EAAE,CAACW,WAAH,EAAf,CAAH;AACA,YAAMV,GAAG,SAASL,KAAK,CAACM,aAAN,CAAoBF,EAApB,CAAlB;AAEA,YAAMY,EAAE,GAAG;AACTZ,QAAAA,EAAE,EAAEA,EADK;AAETN,QAAAA,QAAQ,EAAEA,QAAQ,CAAC,KAAI,CAACa,IAAN,EAAYN,GAAZ;AAFT,OAAX;;AAKA,MAAA,KAAI,CAACO,IAAL,CAAUK,IAAV,CAAeD,EAAf;AATiB;AAUlB;AAED;AACF;AACA;AACA;AACA;;;AACEE,EAAAA,OAAO,GAAI;AACT,UAAMF,EAAE,GAAG,KAAKJ,IAAL,CAAUO,GAAV,EAAX;AACAlB,IAAAA,GAAG,CAAC,YAAD,EAAee,EAAE,CAACZ,EAAH,CAAMW,WAAN,EAAf,CAAH;AACA,WAAOC,EAAE,CAACZ,EAAV;AACD;;AAES,MAANgB,MAAM,GAAI;AACZ,WAAO,KAAKR,IAAL,CAAUS,IAAV,EAAP;AACD;;AAlEa;;AAqEhBC,MAAM,CAACC,OAAP,GAAiBrB,SAAjB","sourcesContent":["'use strict'\n\n// @ts-ignore\nconst Heap = require('heap')\n// @ts-ignore\nconst distance = require('xor-distance')\nconst debug = require('debug')\n\nconst utils = require('../utils')\n\nconst log = debug('libp2p:dht:peer-queue')\n\n/**\n * @typedef {import('peer-id')} PeerId\n */\n\n/**\n * PeerQueue is a heap that sorts its entries (PeerIds) by their\n * xor distance to the inital provided key.\n */\nclass PeerQueue {\n  /**\n   * Create from a given peer id.\n   *\n   * @param {PeerId} id\n   * @returns {Promise<PeerQueue>}\n   */\n  static async fromPeerId (id) {\n    const key = await utils.convertPeerId(id)\n\n    return new PeerQueue(key)\n  }\n\n  /**\n   * Create from a given Uint8Array.\n   *\n   * @param {Uint8Array} keyBuffer\n   * @returns {Promise<PeerQueue>}\n   */\n  static async fromKey (keyBuffer) {\n    const key = await utils.convertBuffer(keyBuffer)\n\n    return new PeerQueue(key)\n  }\n\n  /**\n   * Create a new PeerQueue.\n   *\n   * @param {Uint8Array} from - The sha2-256 encoded peer id\n   */\n  constructor (from) {\n    log('create: %b', from)\n    this.from = from\n    this.heap = new Heap(utils.xorCompare)\n  }\n\n  /**\n   * Add a new PeerId to the queue.\n   *\n   * @param {PeerId} id\n   */\n  async enqueue (id) {\n    log('enqueue %s', id.toB58String())\n    const key = await utils.convertPeerId(id)\n\n    const el = {\n      id: id,\n      distance: distance(this.from, key)\n    }\n\n    this.heap.push(el)\n  }\n\n  /**\n   * Returns the closest peer to the `from` peer.\n   *\n   * @returns {PeerId}\n   */\n  dequeue () {\n    const el = this.heap.pop()\n    log('dequeue %s', el.id.toB58String())\n    return el.id\n  }\n\n  get length () {\n    return this.heap.size()\n  }\n}\n\nmodule.exports = PeerQueue\n"]},"metadata":{},"sourceType":"script"}