{"ast":null,"code":"'use strict';\n\nvar _awaitAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\").default;\n\nvar _wrapAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nconst {\n  exporter\n} = require('ipfs-unixfs-exporter');\n\nconst mergeOptions = require('merge-options').bind({\n  ignoreUndefined: true\n});\n\nconst toMfsPath = require('./utils/to-mfs-path');\n\nconst errCode = require('err-code');\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {object} DefaultOptions\n * @property {number} offset\n * @property {number} length\n * @property {AbortSignal} [signal]\n * @property {number} [timeout]\n */\n\n/**\n * @type {DefaultOptions}\n */\n\n\nconst defaultOptions = {\n  offset: 0,\n  length: Infinity\n};\n/**\n * @param {MfsContext} context\n */\n\nmodule.exports = context => {\n  /**\n   * @type {import('ipfs-core-types/src/files').API[\"read\"]}\n   */\n  function mfsRead(path, options = {}) {\n    /** @type {DefaultOptions} */\n    options = mergeOptions(defaultOptions, options);\n    return {\n      [Symbol.asyncIterator]: function () {\n        var _read = _wrapAsyncGenerator(function* () {\n          const mfsPath = yield _awaitAsyncGenerator(toMfsPath(context, path, options));\n          const result = yield _awaitAsyncGenerator(exporter(mfsPath.mfsPath, context.repo.blocks));\n\n          if (result.type !== 'file') {\n            throw errCode(new Error(`${path} was not a file`), 'ERR_NOT_FILE');\n          }\n\n          if (!result.content) {\n            throw errCode(new Error(`Could not load content stream from ${path}`), 'ERR_NO_CONTENT');\n          }\n\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n\n          var _iteratorError;\n\n          try {\n            for (var _iterator = _asyncIterator(result.content({\n              offset: options.offset,\n              length: options.length\n            })), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n              const buf = _value;\n              yield buf;\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return != null) {\n                yield _awaitAsyncGenerator(_iterator.return());\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n        });\n\n        function read() {\n          return _read.apply(this, arguments);\n        }\n\n        return read;\n      }()\n    };\n  }\n\n  return withTimeoutOption(mfsRead);\n};","map":null,"metadata":{},"sourceType":"script"}