{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.statistics = exports.sample = void 0;\n\nconst Stream_1 = require(\"../../stream/Stream\");\n\nconst Property_generic_1 = require(\"../property/Property.generic\");\n\nconst UnbiasedProperty_1 = require(\"../property/UnbiasedProperty\");\n\nconst GlobalParameters_1 = require(\"./configuration/GlobalParameters\");\n\nconst QualifiedParameters_1 = require(\"./configuration/QualifiedParameters\");\n\nconst Tosser_1 = require(\"./Tosser\");\n\nconst PathWalker_1 = require(\"./utils/PathWalker\");\n\nfunction toProperty(generator, qParams) {\n  const prop = !Object.prototype.hasOwnProperty.call(generator, 'isAsync') ? new Property_generic_1.Property(generator, () => true) : generator;\n  return qParams.unbiased === true ? new UnbiasedProperty_1.UnbiasedProperty(prop) : prop;\n}\n\nfunction streamSample(generator, params) {\n  const extendedParams = typeof params === 'number' ? Object.assign(Object.assign({}, GlobalParameters_1.readConfigureGlobal()), {\n    numRuns: params\n  }) : Object.assign(Object.assign({}, GlobalParameters_1.readConfigureGlobal()), params);\n  const qParams = QualifiedParameters_1.QualifiedParameters.read(extendedParams);\n  const tossedValues = Stream_1.stream(Tosser_1.toss(toProperty(generator, qParams), qParams.seed, qParams.randomType, qParams.examples));\n\n  if (qParams.path.length === 0) {\n    return tossedValues.take(qParams.numRuns).map(s => s().value_);\n  }\n\n  return Stream_1.stream(PathWalker_1.pathWalk(qParams.path, tossedValues.map(s => s()))).take(qParams.numRuns).map(s => s.value_);\n}\n\nfunction sample(generator, params) {\n  return [...streamSample(generator, params)];\n}\n\nexports.sample = sample;\n\nfunction statistics(generator, classify, params) {\n  const extendedParams = typeof params === 'number' ? Object.assign(Object.assign({}, GlobalParameters_1.readConfigureGlobal()), {\n    numRuns: params\n  }) : Object.assign(Object.assign({}, GlobalParameters_1.readConfigureGlobal()), params);\n  const qParams = QualifiedParameters_1.QualifiedParameters.read(extendedParams);\n  const recorded = {};\n\n  for (const g of streamSample(generator, params)) {\n    const out = classify(g);\n    const categories = Array.isArray(out) ? out : [out];\n\n    for (const c of categories) {\n      recorded[c] = (recorded[c] || 0) + 1;\n    }\n  }\n\n  const data = Object.entries(recorded).sort((a, b) => b[1] - a[1]).map(i => [i[0], `${(i[1] * 100.0 / qParams.numRuns).toFixed(2)}%`]);\n  const longestName = data.map(i => i[0].length).reduce((p, c) => Math.max(p, c), 0);\n  const longestPercent = data.map(i => i[1].length).reduce((p, c) => Math.max(p, c), 0);\n\n  for (const item of data) {\n    qParams.logger(`${item[0].padEnd(longestName, '.')}..${item[1].padStart(longestPercent, '.')}`);\n  }\n}\n\nexports.statistics = statistics;","map":null,"metadata":{},"sourceType":"script"}