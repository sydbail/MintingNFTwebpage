{"ast":null,"code":"import _asyncToGenerator from \"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { Observable } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./web3.service\";\n\nconst noTbasicNFTArtifacts = require('../../../build/contracts/noTransferbasicNFT.json');\n\nconst contract = require('@truffle/contract');\n\nexport class NotransfercontractService {\n  web3Ser;\n  noTransfer = contract(noTbasicNFTArtifacts);\n\n  constructor(web3Ser) {\n    this.web3Ser = web3Ser; // Bootstrap the MetaCoin abstraction for Use\n\n    this.noTransfer.setProvider(web3Ser.web3.currentProvider);\n  }\n\n  getBalance(account) {\n    let not;\n    return Observable.create(observer => {\n      this.noTransfer.deployed().then(instance => {\n        not = instance; //we use call here so the call doesn't try and write, making it free\n\n        return not.balanceOf.call(account, {\n          from: account\n        });\n      }).then(value => {\n        observer.next(value);\n        observer.complete();\n      }).catch(e => {\n        console.log(e);\n        observer.error(e);\n      });\n    });\n  }\n\n  getOwner(id) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      let not = _this.noTransfer.deployed();\n\n      const owner = not.ownerOf.call(id, {\n        from: _this.web3Ser.web3.eth.defaultAccount\n      });\n      return owner;\n    })();\n  }\n\n  mintCoin(to) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      let not = yield _this2.noTransfer.deployed();\n      const value = yield not.mint(to, {\n        from: _this2.web3Ser.web3.eth.defaultAccount\n      });\n      return value;\n    })();\n  }\n\n  static ɵfac = function NotransfercontractService_Factory(t) {\n    return new (t || NotransfercontractService)(i0.ɵɵinject(i1.Web3Service));\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: NotransfercontractService,\n    factory: NotransfercontractService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"sources":["/Users/sydneybailey/Internship/contract-testing/src/app/services/notransfercontract.service.ts"],"names":[],"mappings":";AACA,SAAS,UAAT,QAA2B,MAA3B;;;;AAIA,MAAM,oBAAoB,GAAG,OAAO,CAAC,kDAAD,CAApC;;AACA,MAAM,QAAQ,GAAG,OAAO,CAAC,mBAAD,CAAxB;;AAKA,OAAM,MAAO,yBAAP,CAAgC;AAIf,EAAA,OAAA;AAFrB,EAAA,UAAU,GAAG,QAAQ,CAAC,oBAAD,CAAX;;AAEV,EAAA,WAAA,CAAqB,OAArB,EAAyC;AAApB,SAAA,OAAA,GAAA,OAAA,CAAoB,CACxC;;AACA,SAAK,UAAL,CAAgB,WAAhB,CAA4B,OAAO,CAAC,IAAR,CAAa,eAAzC;AACA;;AAED,EAAA,UAAU,CAAC,OAAD,EAAa;AACvB,QAAI,GAAJ;AAEA,WAAO,UAAU,CAAC,MAAX,CAAmB,QAAD,IAAkB;AACzC,WAAK,UAAL,CACG,QADH,GAEG,IAFH,CAES,QAAD,IAAkB;AACtB,QAAA,GAAG,GAAG,QAAN,CADsB,CAEtB;;AACA,eAAO,GAAG,CAAC,SAAJ,CAAc,IAAd,CAAmB,OAAnB,EAA4B;AACjC,UAAA,IAAI,EAAE;AAD2B,SAA5B,CAAP;AAGD,OARH,EASG,IATH,CASS,KAAD,IAAe;AACnB,QAAA,QAAQ,CAAC,IAAT,CAAc,KAAd;AACA,QAAA,QAAQ,CAAC,QAAT;AACD,OAZH,EAaG,KAbH,CAaU,CAAD,IAAW;AAChB,QAAA,OAAO,CAAC,GAAR,CAAY,CAAZ;AACA,QAAA,QAAQ,CAAC,KAAT,CAAe,CAAf;AACD,OAhBH;AAiBC,KAlBI,CAAP;AAmBC;;AAEK,EAAA,QAAQ,CAAC,EAAD,EAAQ;AAAA;;AAAA;AACtB,UAAI,GAAG,GAAG,KAAI,CAAC,UAAL,CAAgB,QAAhB,EAAV;;AACE,YAAM,KAAK,GAAI,GAAG,CAAC,OAAJ,CAAY,IAAZ,CAAiB,EAAjB,EAAqB;AAClC,QAAA,IAAI,EAAE,KAAI,CAAC,OAAL,CAAa,IAAb,CAAkB,GAAlB,CAAsB;AADM,OAArB,CAAf;AAGD,aAAO,KAAP;AALqB;AAMtB;;AAEK,EAAA,QAAQ,CAAC,EAAD,EAAQ;AAAA;;AAAA;AACrB,UAAI,GAAG,SAAS,MAAI,CAAC,UAAL,CAAgB,QAAhB,EAAhB;AACE,YAAM,KAAK,SAAS,GAAG,CAAC,IAAJ,CAAS,EAAT,EAAa;AAAC,QAAA,IAAI,EAAE,MAAI,CAAC,OAAL,CAAa,IAAb,CAAkB,GAAlB,CAAsB;AAA7B,OAAb,CAApB;AACA,aAAO,KAAP;AAHmB;AAIrB;;;qBA7CW,yB,EAAyB,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,WAAA,C;AAAA,G;;WAAzB,yB;AAAyB,IAAA,OAAA,EAAzB,yBAAyB,CAAA,I;AAAA,IAAA,UAAA,EAFxB;;AAEwB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { from } from 'rxjs';\nimport { Web3Service } from './web3.service'\n\nconst noTbasicNFTArtifacts = require('../../../build/contracts/noTransferbasicNFT.json');\nconst contract = require('@truffle/contract');\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NotransfercontractService {\n\n  noTransfer = contract(noTbasicNFTArtifacts);\n\n  constructor( private web3Ser: Web3Service ) {\n  \t// Bootstrap the MetaCoin abstraction for Use\n  \tthis.noTransfer.setProvider(web3Ser.web3.currentProvider);\n  }\n\n  getBalance(account: any): Observable<number> {\n  let not;\n\n  return Observable.create((observer: any) => {\n    this.noTransfer\n      .deployed()\n      .then((instance: any) => {\n        not = instance;\n        //we use call here so the call doesn't try and write, making it free\n        return not.balanceOf.call(account, {\n          from: account\n        });\n      })\n      .then((value: any) => {\n        observer.next(value)\n        observer.complete()\n      })\n      .catch((e: any) => {\n        console.log(e);\n        observer.error(e)\n      });\n    })\n  }\n\n  async getOwner(id: any): Promise<any> {\n\t\tlet not = this.noTransfer.deployed();\n    const owner =  not.ownerOf.call(id, {\n      from: this.web3Ser.web3.eth.defaultAccount\n\t\t});\n\t  return owner;\n\t}\n\n\tasync mintCoin(to: any): Promise<any>{\n\t\tlet not = await this.noTransfer.deployed();\n    const value = await not.mint(to, {from: this.web3Ser.web3.eth.defaultAccount});\n    return value;\n\t}\n\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}