{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n\nconst first = require('it-first');\n\nconst last = require('it-last');\n\nconst {\n  resolve\n} = require('../../utils');\n\nconst errCode = require('err-code');\n/**\n * @param {Object} config\n * @param {import('ipfs-core-utils/src/multicodecs')} config.codecs\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n */\n\n\nmodule.exports = ({\n  codecs,\n  repo,\n  preload\n}) => {\n  /**\n   * @type {import('ipfs-core-types/src/dag').API[\"get\"]}\n   */\n  const get = /*#__PURE__*/function () {\n    var _get = _asyncToGenerator(function* (cid, options = {}) {\n      if (options.preload !== false) {\n        preload(cid);\n      }\n\n      if (options.path) {\n        const entry = options.localResolve ? yield first(resolve(cid, options.path, codecs, repo, options)) : yield last(resolve(cid, options.path, codecs, repo, options));\n        /** @type {import('ipfs-core-types/src/dag').GetResult} - first and last will return undefined when empty */\n\n        const result = entry;\n\n        if (!result) {\n          throw errCode(new Error('Not found'), 'ERR_NOT_FOUND');\n        }\n\n        return result;\n      }\n\n      const codec = yield codecs.getCodec(cid.code);\n      const block = yield repo.blocks.get(cid, options);\n      const node = codec.decode(block);\n      return {\n        value: node,\n        remainderPath: ''\n      };\n    });\n\n    function get(_x) {\n      return _get.apply(this, arguments);\n    }\n\n    return get;\n  }();\n\n  return withTimeoutOption(get);\n};","map":null,"metadata":{},"sourceType":"script"}