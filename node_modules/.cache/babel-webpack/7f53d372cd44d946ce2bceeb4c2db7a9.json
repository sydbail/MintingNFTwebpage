{"ast":null,"code":"import _asyncToGenerator from \"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _asyncIterator from \"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/esm/asyncIterator\";\nimport batch from 'it-batch';\n\nfunction trickleStream(_x, _x2, _x3) {\n  return _trickleStream.apply(this, arguments);\n}\n\nfunction _trickleStream() {\n  _trickleStream = _asyncToGenerator(function* (source, reduce, options) {\n    const root = new Root(options.layerRepeat);\n    let iteration = 0;\n    let maxDepth = 1;\n    let subTree = root;\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n\n    var _iteratorError;\n\n    try {\n      for (var _iterator = _asyncIterator(batch(source, options.maxChildrenPerNode)), _step, _value; _step = yield _iterator.next(), _iteratorNormalCompletion = _step.done, _value = yield _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n        const layer = _value;\n\n        if (subTree.isFull()) {\n          if (subTree !== root) {\n            root.addChild(yield subTree.reduce(reduce));\n          }\n\n          if (iteration && iteration % options.layerRepeat === 0) {\n            maxDepth++;\n          }\n\n          subTree = new SubTree(maxDepth, options.layerRepeat, iteration);\n          iteration++;\n        }\n\n        subTree.append(layer);\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          yield _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    if (subTree && subTree !== root) {\n      root.addChild(yield subTree.reduce(reduce));\n    }\n\n    return root.reduce(reduce);\n  });\n  return _trickleStream.apply(this, arguments);\n}\n\nexport default trickleStream;\n\nclass SubTree {\n  constructor(maxDepth, layerRepeat, iteration = 0) {\n    this.maxDepth = maxDepth;\n    this.layerRepeat = layerRepeat;\n    this.currentDepth = 1;\n    this.iteration = iteration;\n    this.root = this.node = this.parent = {\n      children: [],\n      depth: this.currentDepth,\n      maxDepth,\n      maxChildren: (this.maxDepth - this.currentDepth) * this.layerRepeat\n    };\n  }\n\n  isFull() {\n    if (!this.root.data) {\n      return false;\n    }\n\n    if (this.currentDepth < this.maxDepth && this.node.maxChildren) {\n      this._addNextNodeToParent(this.node);\n\n      return false;\n    }\n\n    const distantRelative = this._findParent(this.node, this.currentDepth);\n\n    if (distantRelative) {\n      this._addNextNodeToParent(distantRelative);\n\n      return false;\n    }\n\n    return true;\n  }\n\n  _addNextNodeToParent(parent) {\n    this.parent = parent;\n    const nextNode = {\n      children: [],\n      depth: parent.depth + 1,\n      parent,\n      maxDepth: this.maxDepth,\n      maxChildren: Math.floor(parent.children.length / this.layerRepeat) * this.layerRepeat\n    };\n    parent.children.push(nextNode);\n    this.currentDepth = nextNode.depth;\n    this.node = nextNode;\n  }\n\n  append(layer) {\n    this.node.data = layer;\n  }\n\n  reduce(reduce) {\n    return this._reduce(this.root, reduce);\n  }\n\n  _reduce(node, reduce) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      let children = [];\n\n      if (node.children.length) {\n        children = yield Promise.all(node.children.filter(child => child.data).map(child => _this._reduce(child, reduce)));\n      }\n\n      return reduce((node.data || []).concat(children));\n    })();\n  }\n\n  _findParent(node, depth) {\n    const parent = node.parent;\n\n    if (!parent || parent.depth === 0) {\n      return;\n    }\n\n    if (parent.children.length === parent.maxChildren || !parent.maxChildren) {\n      return this._findParent(parent, depth);\n    }\n\n    return parent;\n  }\n\n}\n\nclass Root extends SubTree {\n  constructor(layerRepeat) {\n    super(0, layerRepeat);\n    this.root.depth = 0;\n    this.currentDepth = 1;\n  }\n\n  addChild(child) {\n    this.root.children.push(child);\n  }\n\n  reduce(reduce) {\n    return reduce((this.root.data || []).concat(this.root.children));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}