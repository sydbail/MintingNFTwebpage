{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n\nconst {\n  Multiaddr\n} = require('multiaddr');\n/**\n * @param {Object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\n\n\nmodule.exports = ({\n  repo\n}) => {\n  /**\n   * @type {import('ipfs-core-types/src/bootstrap').API[\"list\"]}\n   */\n  function list() {\n    return _list.apply(this, arguments);\n  }\n\n  function _list() {\n    _list = _asyncToGenerator(function* (options = {}) {\n      /** @type {string[]|null} */\n      const peers = yield repo.config.get('Bootstrap', options);\n      return {\n        Peers: (peers || []).map(ma => new Multiaddr(ma))\n      };\n    });\n    return _list.apply(this, arguments);\n  }\n\n  return withTimeoutOption(list);\n};","map":{"version":3,"sources":["/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/ipfs-core/src/components/bootstrap/list.js"],"names":["withTimeoutOption","require","Multiaddr","module","exports","repo","list","options","peers","config","get","Peers","map","ma"],"mappings":"AAAA;;;;AAEA,MAAMA,iBAAiB,GAAGC,OAAO,CAAC,yCAAD,CAAjC;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAgBD,OAAO,CAAC,WAAD,CAA7B;AAEA;AACA;AACA;AACA;;;AACAE,MAAM,CAACC,OAAP,GAAiB,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAC7B;AACF;AACA;AAH+B,WAIdC,IAJc;AAAA;AAAA;;AAAA;AAAA,8BAI7B,WAAqBC,OAAO,GAAG,EAA/B,EAAmC;AACjC;AACA,YAAMC,KAAK,SAAUH,IAAI,CAACI,MAAL,CAAYC,GAAZ,CAAgB,WAAhB,EAA6BH,OAA7B,CAArB;AACA,aAAO;AAAEI,QAAAA,KAAK,EAAE,CAACH,KAAK,IAAI,EAAV,EAAcI,GAAd,CAAkBC,EAAE,IAAI,IAAIX,SAAJ,CAAcW,EAAd,CAAxB;AAAT,OAAP;AACD,KAR4B;AAAA;AAAA;;AAU7B,SAAOb,iBAAiB,CAACM,IAAD,CAAxB;AACD,CAXD","sourcesContent":["'use strict'\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\nconst { Multiaddr } = require('multiaddr')\n\n/**\n * @param {Object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\nmodule.exports = ({ repo }) => {\n  /**\n   * @type {import('ipfs-core-types/src/bootstrap').API[\"list\"]}\n   */\n  async function list (options = {}) {\n    /** @type {string[]|null} */\n    const peers = (await repo.config.get('Bootstrap', options))\n    return { Peers: (peers || []).map(ma => new Multiaddr(ma)) }\n  }\n\n  return withTimeoutOption(list)\n}\n"]},"metadata":{},"sourceType":"script"}