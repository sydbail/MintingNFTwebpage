{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @param {Object} config\n * @param {import('../../types').Preload} config.preload\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\n\n\nmodule.exports = ({\n  preload,\n  repo\n}) => {\n  /**\n   * @type {import('ipfs-core-types/src/block').API[\"get\"]}\n   */\n  function get(_x) {\n    return _get.apply(this, arguments);\n  }\n\n  function _get() {\n    _get = _asyncToGenerator(function* (cid, options = {}) {\n      // eslint-disable-line require-await\n      if (options.preload !== false) {\n        preload(cid);\n      }\n\n      return repo.blocks.get(cid, options);\n    });\n    return _get.apply(this, arguments);\n  }\n\n  return withTimeoutOption(get);\n};","map":{"version":3,"sources":["/Users/sydneybailey/Internship/contract-testing/node_modules/ipfs-core/src/components/block/get.js"],"names":["withTimeoutOption","require","module","exports","preload","repo","get","cid","options","blocks"],"mappings":"AAAA;;;;AAEA,MAAMA,iBAAiB,GAAGC,OAAO,CAAC,yCAAD,CAAjC;AAEA;AACA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA;AAAX,CAAD,KAAuB;AACtC;AACF;AACA;AAHwC,WAIvBC,GAJuB;AAAA;AAAA;;AAAA;AAAA,6BAItC,WAAoBC,GAApB,EAAyBC,OAAO,GAAG,EAAnC,EAAuC;AAAE;AACvC,UAAIA,OAAO,CAACJ,OAAR,KAAoB,KAAxB,EAA+B;AAC7BA,QAAAA,OAAO,CAACG,GAAD,CAAP;AACD;;AAED,aAAOF,IAAI,CAACI,MAAL,CAAYH,GAAZ,CAAgBC,GAAhB,EAAqBC,OAArB,CAAP;AACD,KAVqC;AAAA;AAAA;;AAYtC,SAAOR,iBAAiB,CAACM,GAAD,CAAxB;AACD,CAbD","sourcesContent":["'use strict'\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\n\n/**\n * @param {Object} config\n * @param {import('../../types').Preload} config.preload\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\nmodule.exports = ({ preload, repo }) => {\n  /**\n   * @type {import('ipfs-core-types/src/block').API[\"get\"]}\n   */\n  async function get (cid, options = {}) { // eslint-disable-line require-await\n    if (options.preload !== false) {\n      preload(cid)\n    }\n\n    return repo.blocks.get(cid, options)\n  }\n\n  return withTimeoutOption(get)\n}\n"]},"metadata":{},"sourceType":"script"}