{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CommandWrapper = void 0;\n\nconst stringify_1 = require(\"../../../utils/stringify\");\n\nconst symbols_1 = require(\"../../symbols\");\n\nclass CommandWrapper {\n  constructor(cmd) {\n    this.cmd = cmd;\n    this.hasRan = false;\n\n    if (stringify_1.hasToStringMethod(cmd)) {\n      const method = cmd[stringify_1.toStringMethod];\n\n      this[stringify_1.toStringMethod] = function toStringMethod() {\n        return method.call(cmd);\n      };\n    }\n\n    if (stringify_1.hasAsyncToStringMethod(cmd)) {\n      const method = cmd[stringify_1.asyncToStringMethod];\n\n      this[stringify_1.asyncToStringMethod] = function asyncToStringMethod() {\n        return method.call(cmd);\n      };\n    }\n  }\n\n  check(m) {\n    return this.cmd.check(m);\n  }\n\n  run(m, r) {\n    this.hasRan = true;\n    return this.cmd.run(m, r);\n  }\n\n  clone() {\n    if (symbols_1.hasCloneMethod(this.cmd)) return new CommandWrapper(this.cmd[symbols_1.cloneMethod]());\n    return new CommandWrapper(this.cmd);\n  }\n\n  toString() {\n    return this.cmd.toString();\n  }\n\n}\n\nexports.CommandWrapper = CommandWrapper;","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Demo/node_modules/fast-check/lib/check/model/commands/CommandWrapper.js"],"names":["Object","defineProperty","exports","value","CommandWrapper","stringify_1","require","symbols_1","constructor","cmd","hasRan","hasToStringMethod","method","toStringMethod","call","hasAsyncToStringMethod","asyncToStringMethod","check","m","run","r","clone","hasCloneMethod","cloneMethod","toString"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,cAAR,GAAyB,KAAK,CAA9B;;AACA,MAAMC,WAAW,GAAGC,OAAO,CAAC,0BAAD,CAA3B;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,eAAD,CAAzB;;AACA,MAAMF,cAAN,CAAqB;AACjBI,EAAAA,WAAW,CAACC,GAAD,EAAM;AACb,SAAKA,GAAL,GAAWA,GAAX;AACA,SAAKC,MAAL,GAAc,KAAd;;AACA,QAAIL,WAAW,CAACM,iBAAZ,CAA8BF,GAA9B,CAAJ,EAAwC;AACpC,YAAMG,MAAM,GAAGH,GAAG,CAACJ,WAAW,CAACQ,cAAb,CAAlB;;AACA,WAAKR,WAAW,CAACQ,cAAjB,IAAmC,SAASA,cAAT,GAA0B;AACzD,eAAOD,MAAM,CAACE,IAAP,CAAYL,GAAZ,CAAP;AACH,OAFD;AAGH;;AACD,QAAIJ,WAAW,CAACU,sBAAZ,CAAmCN,GAAnC,CAAJ,EAA6C;AACzC,YAAMG,MAAM,GAAGH,GAAG,CAACJ,WAAW,CAACW,mBAAb,CAAlB;;AACA,WAAKX,WAAW,CAACW,mBAAjB,IAAwC,SAASA,mBAAT,GAA+B;AACnE,eAAOJ,MAAM,CAACE,IAAP,CAAYL,GAAZ,CAAP;AACH,OAFD;AAGH;AACJ;;AACDQ,EAAAA,KAAK,CAACC,CAAD,EAAI;AACL,WAAO,KAAKT,GAAL,CAASQ,KAAT,CAAeC,CAAf,CAAP;AACH;;AACDC,EAAAA,GAAG,CAACD,CAAD,EAAIE,CAAJ,EAAO;AACN,SAAKV,MAAL,GAAc,IAAd;AACA,WAAO,KAAKD,GAAL,CAASU,GAAT,CAAaD,CAAb,EAAgBE,CAAhB,CAAP;AACH;;AACDC,EAAAA,KAAK,GAAG;AACJ,QAAId,SAAS,CAACe,cAAV,CAAyB,KAAKb,GAA9B,CAAJ,EACI,OAAO,IAAIL,cAAJ,CAAmB,KAAKK,GAAL,CAASF,SAAS,CAACgB,WAAnB,GAAnB,CAAP;AACJ,WAAO,IAAInB,cAAJ,CAAmB,KAAKK,GAAxB,CAAP;AACH;;AACDe,EAAAA,QAAQ,GAAG;AACP,WAAO,KAAKf,GAAL,CAASe,QAAT,EAAP;AACH;;AA/BgB;;AAiCrBtB,OAAO,CAACE,cAAR,GAAyBA,cAAzB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CommandWrapper = void 0;\nconst stringify_1 = require(\"../../../utils/stringify\");\nconst symbols_1 = require(\"../../symbols\");\nclass CommandWrapper {\n    constructor(cmd) {\n        this.cmd = cmd;\n        this.hasRan = false;\n        if (stringify_1.hasToStringMethod(cmd)) {\n            const method = cmd[stringify_1.toStringMethod];\n            this[stringify_1.toStringMethod] = function toStringMethod() {\n                return method.call(cmd);\n            };\n        }\n        if (stringify_1.hasAsyncToStringMethod(cmd)) {\n            const method = cmd[stringify_1.asyncToStringMethod];\n            this[stringify_1.asyncToStringMethod] = function asyncToStringMethod() {\n                return method.call(cmd);\n            };\n        }\n    }\n    check(m) {\n        return this.cmd.check(m);\n    }\n    run(m, r) {\n        this.hasRan = true;\n        return this.cmd.run(m, r);\n    }\n    clone() {\n        if (symbols_1.hasCloneMethod(this.cmd))\n            return new CommandWrapper(this.cmd[symbols_1.cloneMethod]());\n        return new CommandWrapper(this.cmd);\n    }\n    toString() {\n        return this.cmd.toString();\n    }\n}\nexports.CommandWrapper = CommandWrapper;\n"]},"metadata":{},"sourceType":"script"}