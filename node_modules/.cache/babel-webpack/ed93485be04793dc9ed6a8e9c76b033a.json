{"ast":null,"code":"var _awaitAsyncGenerator = require(\"/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\").default;\n\nvar _wrapAsyncGenerator = require(\"/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nconst BufferList = require('bl/BufferList');\n\nmodule.exports = source => {\n  const reader = _wrapAsyncGenerator(function* () {\n    let bytes = yield; // Allows us to receive 8 when reader.next(8) is called\n\n    let bl = new BufferList();\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n\n    var _iteratorError;\n\n    try {\n      for (var _iterator = _asyncIterator(source), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n        const chunk = _value;\n\n        if (!bytes) {\n          bytes = yield bl.append(chunk);\n          bl = new BufferList();\n          continue;\n        }\n\n        bl.append(chunk);\n\n        while (bl.length >= bytes) {\n          const data = bl.shallowSlice(0, bytes);\n          bl.consume(bytes);\n          bytes = yield data; // If we no longer want a specific byte length, we yield the rest now\n\n          if (!bytes) {\n            if (bl.length) {\n              bytes = yield bl;\n              bl = new BufferList();\n            }\n\n            break; // bytes is null and/or no more buffer to yield\n          }\n        }\n      } // Consumer wants more bytes but the source has ended and our buffer\n      // is not big enough to satisfy.\n\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          yield _awaitAsyncGenerator(_iterator.return());\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    if (bytes) {\n      throw Object.assign(new Error(`stream ended before ${bytes} bytes became available`), {\n        code: 'ERR_UNDER_READ',\n        buffer: bl\n      });\n    }\n  })();\n\n  reader.next();\n  return reader;\n};","map":{"version":3,"sources":["/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/it-reader/index.js"],"names":["BufferList","require","module","exports","source","reader","bytes","bl","chunk","append","length","data","shallowSlice","consume","Object","assign","Error","code","buffer","next"],"mappings":";;;;;;AAAA,MAAMA,UAAU,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AAEAC,MAAM,CAACC,OAAP,GAAiBC,MAAM,IAAI;AACzB,QAAMC,MAAM,GAAG,oBAAC,aAAoB;AAClC,QAAIC,KAAK,GAAG,KAAZ,CADkC,CAChB;;AAClB,QAAIC,EAAE,GAAG,IAAIP,UAAJ,EAAT;AAFkC;AAAA;;AAAA;;AAAA;AAIlC,0CAA0BI,MAA1B,gOAAkC;AAAA,cAAjBI,KAAiB;;AAChC,YAAI,CAACF,KAAL,EAAY;AACVA,UAAAA,KAAK,GAAG,MAAMC,EAAE,CAACE,MAAH,CAAUD,KAAV,CAAd;AACAD,UAAAA,EAAE,GAAG,IAAIP,UAAJ,EAAL;AACA;AACD;;AAEDO,QAAAA,EAAE,CAACE,MAAH,CAAUD,KAAV;;AAEA,eAAOD,EAAE,CAACG,MAAH,IAAaJ,KAApB,EAA2B;AACzB,gBAAMK,IAAI,GAAGJ,EAAE,CAACK,YAAH,CAAgB,CAAhB,EAAmBN,KAAnB,CAAb;AACAC,UAAAA,EAAE,CAACM,OAAH,CAAWP,KAAX;AACAA,UAAAA,KAAK,GAAG,MAAMK,IAAd,CAHyB,CAKzB;;AACA,cAAI,CAACL,KAAL,EAAY;AACV,gBAAIC,EAAE,CAACG,MAAP,EAAe;AACbJ,cAAAA,KAAK,GAAG,MAAMC,EAAd;AACAA,cAAAA,EAAE,GAAG,IAAIP,UAAJ,EAAL;AACD;;AACD,kBALU,CAKJ;AACP;AACF;AACF,OA3BiC,CA6BlC;AACA;;AA9BkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA+BlC,QAAIM,KAAJ,EAAW;AACT,YAAMQ,MAAM,CAACC,MAAP,CACJ,IAAIC,KAAJ,CAAW,uBAAsBV,KAAM,yBAAvC,CADI,EAEJ;AAAEW,QAAAA,IAAI,EAAE,gBAAR;AAA0BC,QAAAA,MAAM,EAAEX;AAAlC,OAFI,CAAN;AAID;AACF,GArCc,GAAf;;AAuCAF,EAAAA,MAAM,CAACc,IAAP;AACA,SAAOd,MAAP;AACD,CA1CD","sourcesContent":["const BufferList = require('bl/BufferList')\n\nmodule.exports = source => {\n  const reader = (async function * () {\n    let bytes = yield // Allows us to receive 8 when reader.next(8) is called\n    let bl = new BufferList()\n\n    for await (const chunk of source) {\n      if (!bytes) {\n        bytes = yield bl.append(chunk)\n        bl = new BufferList()\n        continue\n      }\n\n      bl.append(chunk)\n\n      while (bl.length >= bytes) {\n        const data = bl.shallowSlice(0, bytes)\n        bl.consume(bytes)\n        bytes = yield data\n\n        // If we no longer want a specific byte length, we yield the rest now\n        if (!bytes) {\n          if (bl.length) {\n            bytes = yield bl\n            bl = new BufferList()\n          }\n          break // bytes is null and/or no more buffer to yield\n        }\n      }\n    }\n\n    // Consumer wants more bytes but the source has ended and our buffer\n    // is not big enough to satisfy.\n    if (bytes) {\n      throw Object.assign(\n        new Error(`stream ended before ${bytes} bytes became available`),\n        { code: 'ERR_UNDER_READ', buffer: bl }\n      )\n    }\n  })()\n\n  reader.next()\n  return reader\n}\n"]},"metadata":{},"sourceType":"script"}