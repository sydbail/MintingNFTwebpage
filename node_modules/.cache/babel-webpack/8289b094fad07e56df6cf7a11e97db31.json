{"ast":null,"code":"\"use strict\"; // Following http://www.w3.org/TR/css3-selectors/#nth-child-pseudo\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parse = void 0; // [ ['-'|'+']? INTEGER? {N} [ S* ['-'|'+'] S* INTEGER ]?\n\nvar RE_NTH_ELEMENT = /^([+-]?\\d*n)?\\s*(?:([+-]?)\\s*(\\d+))?$/;\n/**\n * Parses an expression.\n *\n * @throws An `Error` if parsing fails.\n * @returns An array containing the integer step size and the integer offset of the nth rule.\n * @example nthCheck.parse(\"2n+3\"); // returns [2, 3]\n */\n\nfunction parse(formula) {\n  formula = formula.trim().toLowerCase();\n\n  if (formula === \"even\") {\n    return [2, 0];\n  } else if (formula === \"odd\") {\n    return [2, 1];\n  }\n\n  var parsed = formula.match(RE_NTH_ELEMENT);\n\n  if (!parsed) {\n    throw new Error(\"n-th rule couldn't be parsed ('\" + formula + \"')\");\n  }\n\n  var a;\n\n  if (parsed[1]) {\n    a = parseInt(parsed[1], 10);\n\n    if (isNaN(a)) {\n      a = parsed[1].startsWith(\"-\") ? -1 : 1;\n    }\n  } else a = 0;\n\n  var b = (parsed[2] === \"-\" ? -1 : 1) * (parsed[3] ? parseInt(parsed[3], 10) : 0);\n  return [a, b];\n}\n\nexports.parse = parse;","map":null,"metadata":{},"sourceType":"script"}