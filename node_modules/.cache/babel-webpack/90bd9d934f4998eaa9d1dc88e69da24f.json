{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst intervals = new Map();\n\nconst _generateId = () => `${Date.now()}:${Math.floor(Math.random() * 1000000)}`;\n/**\n * Run a given task each {interval} ms\n *\n * @param {() => Promise} task\n * @param {number} interval\n * @param {string} id\n */\n\n\nfunction _runPeriodically(_x, _x2, _x3) {\n  return _runPeriodically2.apply(this, arguments);\n}\n/**\n * Asynchronous setInterval that is properly delayed using promises and can be delayed on boot.\n *\n * @param {() => Promise} task\n * @param {number} interval\n * @param {number} [delay = interval]\n * @returns {string}\n */\n\n\nfunction _runPeriodically2() {\n  _runPeriodically2 = _asyncToGenerator(function* (task, interval, id) {\n    while (intervals.get(id)) {\n      try {\n        yield task();\n      } catch (err) {\n        // Throw global context error if handler throws\n        setTimeout(() => {\n          throw err;\n        }, 1);\n        break;\n      }\n\n      if (!intervals.get(id)) {\n        break;\n      }\n\n      yield new Promise(resolve => {\n        const _timeout = setTimeout(resolve, interval);\n\n        intervals.set(id, _timeout);\n      });\n    }\n  });\n  return _runPeriodically2.apply(this, arguments);\n}\n\nfunction setDelayedInterval(task, interval, delay) {\n  delay = delay || interval;\n\n  const id = _generateId();\n\n  const _timeout = setTimeout(() => {\n    _runPeriodically(task, interval, id);\n  }, delay);\n\n  intervals.set(id, _timeout);\n  return id;\n}\n/**\n * Clear delayed interval.\n *\n * @param {string} id\n */\n\n\nfunction clearDelayedInterval(id) {\n  const _timeout = intervals.get(id);\n\n  if (_timeout) {\n    clearTimeout(_timeout);\n    intervals.delete(id);\n  }\n}\n\nmodule.exports = {\n  setDelayedInterval,\n  clearDelayedInterval\n};","map":{"version":3,"sources":["/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/set-delayed-interval/src/index.js"],"names":["intervals","Map","_generateId","Date","now","Math","floor","random","_runPeriodically","task","interval","id","get","err","setTimeout","Promise","resolve","_timeout","set","setDelayedInterval","delay","clearDelayedInterval","clearTimeout","delete","module","exports"],"mappings":"AAAA;;;;AAEA,MAAMA,SAAS,GAAG,IAAIC,GAAJ,EAAlB;;AAEA,MAAMC,WAAW,GAAG,MAAO,GAAEC,IAAI,CAACC,GAAL,EAAW,IAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,OAA3B,CAAoC,EAA/E;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;SACeC,gB;;;AAsBf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;wCA7BA,WAAiCC,IAAjC,EAAuCC,QAAvC,EAAiDC,EAAjD,EAAqD;AACnD,WAAOX,SAAS,CAACY,GAAV,CAAcD,EAAd,CAAP,EAA0B;AACxB,UAAI;AACF,cAAMF,IAAI,EAAV;AACD,OAFD,CAEE,OAAOI,GAAP,EAAY;AACZ;AACAC,QAAAA,UAAU,CAAC,MAAM;AAAE,gBAAMD,GAAN;AAAW,SAApB,EAAsB,CAAtB,CAAV;AACA;AACD;;AAED,UAAI,CAACb,SAAS,CAACY,GAAV,CAAcD,EAAd,CAAL,EAAwB;AACtB;AACD;;AAED,YAAM,IAAII,OAAJ,CAAYC,OAAO,IAAI;AAC3B,cAAMC,QAAQ,GAAGH,UAAU,CAACE,OAAD,EAAUN,QAAV,CAA3B;;AAEAV,QAAAA,SAAS,CAACkB,GAAV,CAAcP,EAAd,EAAkBM,QAAlB;AACD,OAJK,CAAN;AAKD;AACF,G;;;;AAUD,SAASE,kBAAT,CAA6BV,IAA7B,EAAmCC,QAAnC,EAA6CU,KAA7C,EAAoD;AAClDA,EAAAA,KAAK,GAAGA,KAAK,IAAIV,QAAjB;;AAEA,QAAMC,EAAE,GAAGT,WAAW,EAAtB;;AACA,QAAMe,QAAQ,GAAGH,UAAU,CAAC,MAAM;AAChCN,IAAAA,gBAAgB,CAACC,IAAD,EAAOC,QAAP,EAAiBC,EAAjB,CAAhB;AACD,GAF0B,EAExBS,KAFwB,CAA3B;;AAIApB,EAAAA,SAAS,CAACkB,GAAV,CAAcP,EAAd,EAAkBM,QAAlB;AAEA,SAAON,EAAP;AACD;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASU,oBAAT,CAA+BV,EAA/B,EAAmC;AACjC,QAAMM,QAAQ,GAAGjB,SAAS,CAACY,GAAV,CAAcD,EAAd,CAAjB;;AAEA,MAAIM,QAAJ,EAAc;AACZK,IAAAA,YAAY,CAACL,QAAD,CAAZ;AACAjB,IAAAA,SAAS,CAACuB,MAAV,CAAiBZ,EAAjB;AACD;AACF;;AAEDa,MAAM,CAACC,OAAP,GAAiB;AACfN,EAAAA,kBADe;AAEfE,EAAAA;AAFe,CAAjB","sourcesContent":["'use strict'\n\nconst intervals = new Map()\n\nconst _generateId = () => `${Date.now()}:${Math.floor(Math.random() * 1000000)}`\n\n/**\n * Run a given task each {interval} ms\n *\n * @param {() => Promise} task\n * @param {number} interval\n * @param {string} id\n */\nasync function _runPeriodically (task, interval, id) {\n  while (intervals.get(id)) {\n    try {\n      await task()\n    } catch (err) {\n      // Throw global context error if handler throws\n      setTimeout(() => { throw err }, 1)\n      break\n    }\n\n    if (!intervals.get(id)) {\n      break\n    }\n\n    await new Promise(resolve => {\n      const _timeout = setTimeout(resolve, interval)\n\n      intervals.set(id, _timeout)\n    })\n  }\n}\n\n/**\n * Asynchronous setInterval that is properly delayed using promises and can be delayed on boot.\n *\n * @param {() => Promise} task\n * @param {number} interval\n * @param {number} [delay = interval]\n * @returns {string}\n */\nfunction setDelayedInterval (task, interval, delay) {\n  delay = delay || interval\n\n  const id = _generateId()\n  const _timeout = setTimeout(() => {\n    _runPeriodically(task, interval, id)\n  }, delay)\n\n  intervals.set(id, _timeout)\n\n  return id\n}\n\n/**\n * Clear delayed interval.\n *\n * @param {string} id\n */\nfunction clearDelayedInterval (id) {\n  const _timeout = intervals.get(id)\n\n  if (_timeout) {\n    clearTimeout(_timeout)\n    intervals.delete(id)\n  }\n}\n\nmodule.exports = {\n  setDelayedInterval,\n  clearDelayedInterval\n}\n"]},"metadata":{},"sourceType":"script"}