{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst crypto = require('libp2p-crypto');\n\nconst {\n  sha256\n} = require('multiformats/hashes/sha2');\n\nconst PeerId = require('peer-id');\n\nconst {\n  AbortController\n} = require('abort-controller');\n\nconst errcode = require('err-code');\n\nconst times = require('p-times');\n\nconst c = require('./constants');\n\nconst {\n  logger\n} = require('./utils');\n/**\n * @typedef {import('./')} DHT\n * @typedef {import('./').RandomWalkOptions} RandomWalkOptions\n */\n\n\nclass RandomWalk {\n  /**\n   * @class\n   * @param {DHT} dht\n   * @param {RandomWalkOptions} options\n   */\n  constructor(dht, options) {\n    if (!dht) {\n      throw new Error('Random Walk needs an instance of the Kademlia DHT');\n    }\n\n    this._kadDHT = dht;\n    this._options = { ...c.defaultRandomWalk,\n      ...options\n    };\n    this.log = logger(dht.peerId, 'random-walk');\n    /** @type {*} */\n\n    this._timeoutId = undefined;\n  }\n  /**\n   * Start the Random Walk process. This means running a number of queries\n   * every interval requesting random data. This is done to keep the dht\n   * healthy over time.\n   *\n   * @returns {void}\n   */\n\n\n  start() {\n    if (this._running) {\n      return;\n    }\n\n    this._running = true; // Don't run twice\n\n    if (this._timeoutId || !this._options.enabled) {\n      return;\n    } // Start doing random walks after `this._options.delay`\n\n\n    this._timeoutId = setTimeout(() => {\n      // Start runner immediately\n      this._runPeriodically();\n    }, this._options.delay);\n  }\n  /**\n   * Stop the random-walk process. Any active\n   * queries will be aborted.\n   *\n   * @returns {void}\n   */\n\n\n  stop() {\n    this._running = false;\n\n    if (this._timeoutId) {\n      clearTimeout(this._timeoutId);\n      this._timeoutId = undefined;\n    }\n\n    this._controller && this._controller.abort();\n  }\n  /**\n   * Run function `randomWalk._walk` on every `options.interval` ms\n   *\n   * @private\n   */\n\n\n  _runPeriodically() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      // run until the walk has been stopped\n      while (_this._timeoutId) {\n        try {\n          yield _this._walk(_this._options.queriesPerPeriod, _this._options.timeout);\n        } catch (err) {\n          _this._kadDHT._log.error('random-walk:error', err);\n        }\n\n        if (!_this._running) {\n          return;\n        } // Each subsequent walk should run on a `this._options.interval` interval\n\n\n        yield new Promise(resolve => {\n          _this._timeoutId = setTimeout(resolve, _this._options.interval);\n        });\n      }\n    })();\n  }\n  /**\n   * Do the random walk work.\n   *\n   * @param {number} queries\n   * @param {number} walkTimeout\n   *\n   * @private\n   */\n\n\n  _walk(queries, walkTimeout) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      _this2.log('start');\n\n      _this2._controller = new AbortController();\n\n      try {\n        yield times(queries, /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(function* (index) {\n            _this2.log('running query %d', index);\n\n            try {\n              const id = yield _this2._randomPeerId(); // Check if we've happened to already abort\n\n              if (!_this2._controller) return;\n              yield _this2._query(id, {\n                timeout: walkTimeout,\n                signal: _this2._controller.signal\n              });\n            } catch (err) {\n              if (err && err.code !== 'ETIMEDOUT') {\n                _this2.log.error('query %d finished with error', index, err);\n\n                throw err;\n              }\n            }\n\n            _this2.log('finished query %d', index);\n          });\n\n          return function (_x) {\n            return _ref.apply(this, arguments);\n          };\n        }());\n      } finally {\n        _this2._controller = null;\n\n        _this2.log('finished queries');\n      }\n    })();\n  }\n  /**\n   * The query run during a random walk request.\n   *\n   * TODO: While query currently supports an abort controller, it is not\n   * yet supported by `DHT.findPeer`. Once https://github.com/libp2p/js-libp2p-kad-dht/pull/82\n   * is complete, and AbortController support has been added to the\n   * DHT query functions, the abort here will just work, provided the\n   * functions support `options.signal`. Once done, this todo should be\n   * removed.\n   *\n   * @param {PeerId} id\n   * @param {object} options\n   * @param {number} options.timeout\n   * @param {AbortSignal} options.signal\n   *\n   * @private\n   */\n\n\n  _query(id, options) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      _this3.log('query:%s', id.toB58String());\n\n      let peer;\n\n      try {\n        peer = yield _this3._kadDHT.findPeer(id, options);\n      } catch (err) {\n        if (err && err.code === 'ERR_NOT_FOUND') {\n          // expected case, we asked for random stuff after all\n          return;\n        }\n\n        throw err;\n      }\n\n      _this3.log('query:found', peer); // wait what, there was something found? Lucky day!\n\n\n      throw errcode(new Error(`random-walk: ACTUALLY FOUND PEER: ${peer}, ${id.toB58String()}`), 'ERR_FOUND_RANDOM_PEER');\n    })();\n  }\n  /**\n   * Generate a random peer id for random-walk purposes.\n   *\n   * @returns {Promise<PeerId>}\n   *\n   * @private\n   */\n\n\n  _randomPeerId() {\n    return _asyncToGenerator(function* () {\n      const digest = yield sha256.digest(crypto.randomBytes(16));\n      return new PeerId(digest.bytes);\n    })();\n  }\n\n}\n\nmodule.exports = RandomWalk;","map":null,"metadata":{},"sourceType":"script"}