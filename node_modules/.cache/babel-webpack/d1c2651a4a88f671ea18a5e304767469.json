{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nconst isIpfs = require('is-ipfs');\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst PeerID = require('peer-id');\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n\nconst {\n  resolve: res\n} = require('../utils');\n/**\n * @param {Object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('ipfs-core-utils/src/multicodecs')} config.codecs\n * @param {import('ipfs-core-utils/src/multibases')} config.bases\n * @param {import('ipfs-core-types/src/name').API} config.name\n */\n\n\nmodule.exports = ({\n  repo,\n  codecs,\n  bases,\n  name\n}) => {\n  /**\n   * @type {import('ipfs-core-types/src/root').API[\"resolve\"]}\n   */\n  function resolve(_x) {\n    return _resolve.apply(this, arguments);\n  }\n\n  function _resolve() {\n    _resolve = _asyncToGenerator(function* (path, opts = {}) {\n      if (!isIpfs.path(path)) {\n        throw new Error('invalid argument ' + path);\n      }\n\n      if (isIpfs.ipnsPath(path)) {\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n\n        var _iteratorError;\n\n        try {\n          for (var _iterator = _asyncIterator(name.resolve(path, opts)), _step, _value; _step = yield _iterator.next(), _iteratorNormalCompletion = _step.done, _value = yield _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n            const resolvedPath = _value;\n            path = resolvedPath;\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              yield _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      }\n\n      const [, schema, hash, ...rest] = path.split('/'); // ['', 'ipfs', 'hash', ...path]\n\n      const base = opts.cidBase ? yield bases.getBase(opts.cidBase) : undefined;\n      const bytes = parseBytes(hash); // nothing to resolve return the input\n\n      if (rest.length === 0) {\n        const str = base ? base.encoder.encode(bytes) : hash;\n        return `/${schema}/${str}`;\n      }\n\n      const cid = CID.decode(bytes);\n      path = rest.join('/');\n      const results = res(cid, path, codecs, repo, opts);\n      let value = cid;\n      let remainderPath = path;\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n\n      var _iteratorError2;\n\n      try {\n        for (var _iterator2 = _asyncIterator(results), _step2, _value2; _step2 = yield _iterator2.next(), _iteratorNormalCompletion2 = _step2.done, _value2 = yield _step2.value, !_iteratorNormalCompletion2; _iteratorNormalCompletion2 = true) {\n          const result = _value2;\n\n          if (result.value instanceof CID) {\n            value = result.value;\n            remainderPath = result.remainderPath;\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            yield _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      return `/ipfs/${value.toString(base && base.encoder)}${remainderPath ? '/' + remainderPath : ''}`;\n    });\n    return _resolve.apply(this, arguments);\n  }\n\n  return withTimeoutOption(resolve);\n};\n/**\n * Parse the input as a PeerID or a CID or throw an error\n *\n * @param {string} str\n */\n\n\nfunction parseBytes(str) {\n  try {\n    return PeerID.parse(str).toBytes();\n  } catch {\n    return CID.parse(str).bytes;\n  }\n}","map":null,"metadata":{},"sourceType":"script"}