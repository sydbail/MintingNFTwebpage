{"ast":null,"code":"var _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst {\n  default: ENSJS,\n  getEnsAddress\n} = require(\"@ensdomains/ensjs\");\n\nconst {\n  isAddress\n} = require(\"web3-utils\");\n\nmodule.exports = {\n  convertENSNames: function () {\n    var _ref = _asyncToGenerator(function* ({\n      ens,\n      inputArgs,\n      methodABI,\n      inputParams,\n      web3,\n      networkId\n    }) {\n      const {\n        registryAddress\n      } = ens;\n      let args;\n\n      if (inputArgs.length && methodABI) {\n        args = yield this.convertENSArgsNames({\n          inputArgs,\n          methodABI,\n          web3,\n          registryAddress,\n          networkId\n        });\n      } else {\n        args = inputArgs;\n      }\n\n      let params;\n\n      if (inputParams) {\n        params = yield this.convertENSParamsNames({\n          inputParams,\n          web3,\n          registryAddress,\n          networkId\n        });\n      }\n\n      return {\n        args,\n        params\n      };\n    });\n\n    return function convertENSNames(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }(),\n  getNewENSJS: function ({\n    provider,\n    registryAddress,\n    networkId\n  }) {\n    return new ENSJS({\n      provider,\n      ensAddress: registryAddress || getEnsAddress(networkId)\n    });\n  },\n  resolveNameToAddress: function () {\n    var _ref2 = _asyncToGenerator(function* ({\n      name,\n      provider,\n      registryAddress,\n      networkId\n    }) {\n      let ensjs;\n\n      try {\n        ensjs = this.getNewENSJS({\n          provider,\n          registryAddress,\n          networkId\n        });\n      } catch (error) {\n        const message = \"There was a problem initializing the ENS library.\" + \"Please ensure you have the address of the registry set correctly.\" + ` Truffle is currently using ${registryAddress}.`;\n        throw new Error(`${message} - ${error.message}`);\n      }\n\n      return yield ensjs.name(name).getAddress(\"ETH\");\n    });\n\n    return function resolveNameToAddress(_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }(),\n  convertENSArgsNames: function ({\n    inputArgs,\n    methodABI,\n    web3,\n    registryAddress,\n    networkId\n  }) {\n    if (methodABI.inputs.length === 0) return inputArgs;\n    const convertedNames = inputArgs.map((argument, index) => {\n      if (index + 1 > methodABI.inputs.length) {\n        return argument;\n      } else if (methodABI.inputs[index].type === \"address\") {\n        // Check all address arguments for ENS names\n        const argIsAddress = isAddress(argument);\n        if (argIsAddress) return argument;\n        return this.resolveNameToAddress({\n          name: argument,\n          provider: web3.currentProvider,\n          registryAddress,\n          networkId\n        });\n      } else {\n        return argument;\n      }\n    });\n    return Promise.all(convertedNames);\n  },\n  convertENSParamsNames: function () {\n    var _ref3 = _asyncToGenerator(function* ({\n      inputParams,\n      web3,\n      registryAddress,\n      networkId\n    }) {\n      if (inputParams.from && !isAddress(inputParams.from)) {\n        const newFrom = yield this.resolveNameToAddress({\n          name: inputParams.from,\n          provider: web3.currentProvider,\n          networkId,\n          registryAddress\n        });\n        return { ...inputParams,\n          from: newFrom\n        };\n      } else {\n        return inputParams;\n      }\n    });\n\n    return function convertENSParamsNames(_x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }()\n};","map":{"version":3,"sources":["/Users/sydneybailey/Internship/contract-testing/node_modules/@truffle/contract/lib/utils/ens.js"],"names":["default","ENSJS","getEnsAddress","require","isAddress","module","exports","convertENSNames","ens","inputArgs","methodABI","inputParams","web3","networkId","registryAddress","args","length","convertENSArgsNames","params","convertENSParamsNames","getNewENSJS","provider","ensAddress","resolveNameToAddress","name","ensjs","error","message","Error","getAddress","inputs","convertedNames","map","argument","index","type","argIsAddress","currentProvider","Promise","all","from","newFrom"],"mappings":"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","sourcesContent":["const { default: ENSJS, getEnsAddress } = require(\"@ensdomains/ensjs\");\nconst { isAddress } = require(\"web3-utils\");\n\nmodule.exports = {\n  convertENSNames: async function ({\n    ens,\n    inputArgs,\n    methodABI,\n    inputParams,\n    web3,\n    networkId\n  }) {\n    const { registryAddress } = ens;\n    let args;\n    if (inputArgs.length && methodABI) {\n      args = await this.convertENSArgsNames({\n        inputArgs,\n        methodABI,\n        web3,\n        registryAddress,\n        networkId\n      });\n    } else {\n      args = inputArgs;\n    }\n    let params;\n    if (inputParams) {\n      params = await this.convertENSParamsNames({\n        inputParams,\n        web3,\n        registryAddress,\n        networkId\n      });\n    }\n    return { args, params };\n  },\n\n  getNewENSJS: function ({ provider, registryAddress, networkId }) {\n    return new ENSJS({\n      provider,\n      ensAddress: registryAddress || getEnsAddress(networkId)\n    });\n  },\n\n  resolveNameToAddress: async function ({\n    name,\n    provider,\n    registryAddress,\n    networkId\n  }) {\n    let ensjs;\n    try {\n      ensjs = this.getNewENSJS({\n        provider,\n        registryAddress,\n        networkId\n      });\n    } catch (error) {\n      const message =\n        \"There was a problem initializing the ENS library.\" +\n        \"Please ensure you have the address of the registry set correctly.\" +\n        ` Truffle is currently using ${registryAddress}.`;\n      throw new Error(`${message} - ${error.message}`);\n    }\n    return await ensjs.name(name).getAddress(\"ETH\");\n  },\n\n  convertENSArgsNames: function ({\n    inputArgs,\n    methodABI,\n    web3,\n    registryAddress,\n    networkId\n  }) {\n    if (methodABI.inputs.length === 0) return inputArgs;\n\n    const convertedNames = inputArgs.map((argument, index) => {\n      if (index + 1 > methodABI.inputs.length) {\n        return argument;\n      } else if (methodABI.inputs[index].type === \"address\") {\n        // Check all address arguments for ENS names\n        const argIsAddress = isAddress(argument);\n        if (argIsAddress) return argument;\n        return this.resolveNameToAddress({\n          name: argument,\n          provider: web3.currentProvider,\n          registryAddress,\n          networkId\n        });\n      } else {\n        return argument;\n      }\n    });\n    return Promise.all(convertedNames);\n  },\n\n  convertENSParamsNames: async function ({\n    inputParams,\n    web3,\n    registryAddress,\n    networkId\n  }) {\n    if (inputParams.from && !isAddress(inputParams.from)) {\n      const newFrom = await this.resolveNameToAddress({\n        name: inputParams.from,\n        provider: web3.currentProvider,\n        networkId,\n        registryAddress\n      });\n      return {\n        ...inputParams,\n        from: newFrom\n      };\n    } else {\n      return inputParams;\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"script"}