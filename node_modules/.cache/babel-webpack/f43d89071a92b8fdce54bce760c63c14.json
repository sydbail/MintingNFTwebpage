{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nvar _wrapAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\").default;\n\nvar _awaitAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nvar _asyncGeneratorDelegate = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncGeneratorDelegate\").default;\n\nconst PeerId = require('peer-id');\n\nconst errCode = require('err-code');\n\nconst {\n  NotEnabledError\n} = require('../errors');\n\nconst get = require('dlv');\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @param {Object} config\n * @param {import('../types').NetworkService} config.network\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\n\n\nmodule.exports = ({\n  network,\n  repo\n}) => {\n  const {\n    get,\n    put,\n    findProvs,\n    findPeer,\n    provide,\n    query\n  } = {\n    /**\n     * @type {import('ipfs-core-types/src/dht').API[\"get\"]}\n     */\n    get(key, options = {}) {\n      return _asyncToGenerator(function* () {\n        const {\n          libp2p\n        } = yield use(network, options);\n        return libp2p._dht.get(key, options);\n      })();\n    },\n\n    /**\n     * @type {import('ipfs-core-types/src/dht').API[\"put\"]}\n     */\n    put(key, value, options) {\n      return _wrapAsyncGenerator(function* () {\n        const {\n          libp2p\n        } = yield _awaitAsyncGenerator(use(network, options));\n        yield* _asyncGeneratorDelegate(_asyncIterator(libp2p._dht.put(key, value)), _awaitAsyncGenerator);\n      })();\n    },\n\n    /**\n     * @type {import('ipfs-core-types/src/dht').API[\"findProvs\"]}\n     */\n    findProvs(cid, options = {\n      numProviders: 20\n    }) {\n      return _wrapAsyncGenerator(function* () {\n        const {\n          libp2p\n        } = yield _awaitAsyncGenerator(use(network, options));\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n\n        var _iteratorError;\n\n        try {\n          for (var _iterator = _asyncIterator(libp2p._dht.findProviders(cid, {\n            maxNumProviders: options.numProviders,\n            signal: options.signal\n          })), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n            const peer = _value;\n            yield {\n              id: peer.id.toB58String(),\n              addrs: peer.addrs\n            };\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              yield _awaitAsyncGenerator(_iterator.return());\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      })();\n    },\n\n    /**\n     * @type {import('ipfs-core-types/src/dht').API[\"findPeer\"]}\n     */\n    findPeer(peerId, options) {\n      return _asyncToGenerator(function* () {\n        const {\n          libp2p\n        } = yield use(network, options);\n        const peer = yield libp2p._dht.findPeer(PeerId.parse(peerId));\n        return {\n          id: peer.id.toB58String(),\n          addrs: peer.multiaddrs\n        };\n      })();\n    },\n\n    /**\n     * @type {import('ipfs-core-types/src/dht').API[\"provide\"]}\n     */\n    provide(cids, options = {\n      recursive: false\n    }) {\n      return _wrapAsyncGenerator(function* () {\n        const {\n          libp2p\n        } = yield _awaitAsyncGenerator(use(network, options));\n        const cidArr = Array.isArray(cids) ? cids : [cids]; // ensure blocks are actually local\n\n        const hasCids = yield _awaitAsyncGenerator(Promise.all(cidArr.map(cid => repo.blocks.has(cid))));\n        const hasAll = hasCids.every(has => has);\n\n        if (!hasAll) {\n          throw errCode(new Error('block(s) not found locally, cannot provide'), 'ERR_BLOCK_NOT_FOUND');\n        }\n\n        if (options.recursive) {\n          // TODO: Implement recursive providing\n          throw errCode(new Error('not implemented yet'), 'ERR_NOT_IMPLEMENTED_YET');\n        }\n\n        for (const cid of cidArr) {\n          yield libp2p._dht.provide(cid);\n        }\n      })();\n    },\n\n    /**\n     * @type {import('ipfs-core-types/src/dht').API[\"query\"]}\n     */\n    query(peerId, options) {\n      return _wrapAsyncGenerator(function* () {\n        const {\n          libp2p\n        } = yield _awaitAsyncGenerator(use(network, options));\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n\n        var _iteratorError2;\n\n        try {\n          for (var _iterator2 = _asyncIterator(libp2p._dht.getClosestPeers(PeerId.parse(peerId).toBytes())), _step2, _value2; _step2 = yield _awaitAsyncGenerator(_iterator2.next()), _iteratorNormalCompletion2 = _step2.done, _value2 = yield _awaitAsyncGenerator(_step2.value), !_iteratorNormalCompletion2; _iteratorNormalCompletion2 = true) {\n            const closerPeerId = _value2;\n            yield {\n              id: closerPeerId.toB58String(),\n              addrs: [] // TODO: get addrs?\n\n            };\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n              yield _awaitAsyncGenerator(_iterator2.return());\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n      })();\n    }\n\n  };\n  return {\n    get: withTimeoutOption(get),\n    put: withTimeoutOption(put),\n    findProvs: withTimeoutOption(findProvs),\n    findPeer: withTimeoutOption(findPeer),\n    provide: withTimeoutOption(provide),\n    query: withTimeoutOption(query)\n  };\n};\n/**\n * @param {import('../types').NetworkService} network\n * @param {import('ipfs-core-types/src/utils').AbortOptions} [options]\n */\n\n\nconst use = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (network, options) {\n    const net = yield network.use(options);\n\n    if (get(net.libp2p, '_config.dht.enabled', false)) {\n      return net;\n    } else {\n      throw new NotEnabledError('dht not enabled');\n    }\n  });\n\n  return function use(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":null,"metadata":{},"sourceType":"script"}