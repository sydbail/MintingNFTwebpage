{"ast":null,"code":"'use strict';\n\nvar _awaitAsyncGenerator = require(\"/Users/sydneybailey/Internship/Dapp/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\").default;\n\nvar _wrapAsyncGenerator = require(\"/Users/sydneybailey/Internship/Dapp/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\").default;\n\nconst createAdd = require('./add');\n\nconst createAddAll = require('./add-all');\n\nconst createLs = require('./ls');\n\nconst createRm = require('./rm');\n\nconst createRmAll = require('./rm-all');\n\nclass PinAPI {\n  /**\n   * @param {Object} config\n   * @param {import('ipfs-core-utils/src/multicodecs')} config.codecs\n   * @param {import('ipfs-repo').IPFSRepo} config.repo\n   */\n  constructor({\n    codecs,\n    repo\n  }) {\n    const addAll = createAddAll({\n      codecs,\n      repo\n    });\n    this.addAll = addAll;\n    this.add = createAdd({\n      addAll\n    });\n    const rmAll = createRmAll({\n      codecs,\n      repo\n    });\n    this.rmAll = rmAll;\n    this.rm = createRm({\n      rmAll\n    });\n    this.ls = createLs({\n      codecs,\n      repo\n    });\n    /** @type {import('ipfs-core-types/src/pin/remote').API} */\n\n    this.remote = {\n      add: (cid, options = {}) => Promise.reject(new Error('Not implemented')),\n      ls: function () {\n        var _ref = _wrapAsyncGenerator(function* (query, options = {}) {\n          return Promise.reject(new Error('Not implemented'));\n        });\n\n        return function ls(_x) {\n          return _ref.apply(this, arguments);\n        };\n      }(),\n      // eslint-disable-line require-yield\n      rm: (query, options = {}) => Promise.reject(new Error('Not implemented')),\n      rmAll: (query, options = {}) => Promise.reject(new Error('Not implemented')),\n      service: {\n        add: (name, credentials) => Promise.reject(new Error('Not implemented')),\n        rm: (name, options = {}) => Promise.reject(new Error('Not implemented')),\n        // @ts-ignore return types seem to be broken by a recent ts release. doesn't matter here because\n        // we are just throwing. Will be removed by https://github.com/protocol/web3-dev-team/pull/58\n        ls: (options = {}) => Promise.reject(new Error('Not implemented'))\n      }\n    };\n  }\n\n}\n\nmodule.exports = PinAPI;","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Dapp/node_modules/ipfs-core/src/components/pin/index.js"],"names":["createAdd","require","createAddAll","createLs","createRm","createRmAll","PinAPI","constructor","codecs","repo","addAll","add","rmAll","rm","ls","remote","cid","options","Promise","reject","Error","query","service","name","credentials","module","exports"],"mappings":"AAAA;;;;;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,OAAD,CAAzB;;AACA,MAAMC,YAAY,GAAGD,OAAO,CAAC,WAAD,CAA5B;;AACA,MAAME,QAAQ,GAAGF,OAAO,CAAC,MAAD,CAAxB;;AACA,MAAMG,QAAQ,GAAGH,OAAO,CAAC,MAAD,CAAxB;;AACA,MAAMI,WAAW,GAAGJ,OAAO,CAAC,UAAD,CAA3B;;AAEA,MAAMK,MAAN,CAAa;AACX;AACF;AACA;AACA;AACA;AACEC,EAAAA,WAAW,CAAE;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,GAAF,EAAoB;AAC7B,UAAMC,MAAM,GAAGR,YAAY,CAAC;AAAEM,MAAAA,MAAF;AAAUC,MAAAA;AAAV,KAAD,CAA3B;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,GAAL,GAAWX,SAAS,CAAC;AAAEU,MAAAA;AAAF,KAAD,CAApB;AACA,UAAME,KAAK,GAAGP,WAAW,CAAC;AAAEG,MAAAA,MAAF;AAAUC,MAAAA;AAAV,KAAD,CAAzB;AACA,SAAKG,KAAL,GAAaA,KAAb;AACA,SAAKC,EAAL,GAAUT,QAAQ,CAAC;AAAEQ,MAAAA;AAAF,KAAD,CAAlB;AACA,SAAKE,EAAL,GAAUX,QAAQ,CAAC;AAAEK,MAAAA,MAAF;AAAUC,MAAAA;AAAV,KAAD,CAAlB;AAEA;;AACA,SAAKM,MAAL,GAAc;AACZJ,MAAAA,GAAG,EAAE,CAACK,GAAD,EAAMC,OAAO,GAAG,EAAhB,KAAuBC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,iBAAV,CAAf,CADhB;AAEZN,MAAAA,EAAE;AAAA,uCAAE,WAAkBO,KAAlB,EAAyBJ,OAAO,GAAG,EAAnC,EAAuC;AAAE,iBAAOC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,iBAAV,CAAf,CAAP;AAAqD,SAAhG;;AAAA;AAAA;AAAA;AAAA,SAFU;AAEwF;AACpGP,MAAAA,EAAE,EAAE,CAACQ,KAAD,EAAQJ,OAAO,GAAG,EAAlB,KAAyBC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,iBAAV,CAAf,CAHjB;AAIZR,MAAAA,KAAK,EAAE,CAACS,KAAD,EAAQJ,OAAO,GAAG,EAAlB,KAAyBC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,iBAAV,CAAf,CAJpB;AAKZE,MAAAA,OAAO,EAAE;AACPX,QAAAA,GAAG,EAAE,CAACY,IAAD,EAAOC,WAAP,KAAuBN,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,iBAAV,CAAf,CADrB;AAEPP,QAAAA,EAAE,EAAE,CAACU,IAAD,EAAON,OAAO,GAAG,EAAjB,KAAwBC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,iBAAV,CAAf,CAFrB;AAGP;AACA;AACAN,QAAAA,EAAE,EAAE,CAACG,OAAO,GAAG,EAAX,KAAkBC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,iBAAV,CAAf;AALf;AALG,KAAd;AAaD;;AA7BU;;AAgCbK,MAAM,CAACC,OAAP,GAAiBpB,MAAjB","sourcesContent":["'use strict'\n\nconst createAdd = require('./add')\nconst createAddAll = require('./add-all')\nconst createLs = require('./ls')\nconst createRm = require('./rm')\nconst createRmAll = require('./rm-all')\n\nclass PinAPI {\n  /**\n   * @param {Object} config\n   * @param {import('ipfs-core-utils/src/multicodecs')} config.codecs\n   * @param {import('ipfs-repo').IPFSRepo} config.repo\n   */\n  constructor ({ codecs, repo }) {\n    const addAll = createAddAll({ codecs, repo })\n    this.addAll = addAll\n    this.add = createAdd({ addAll })\n    const rmAll = createRmAll({ codecs, repo })\n    this.rmAll = rmAll\n    this.rm = createRm({ rmAll })\n    this.ls = createLs({ codecs, repo })\n\n    /** @type {import('ipfs-core-types/src/pin/remote').API} */\n    this.remote = {\n      add: (cid, options = {}) => Promise.reject(new Error('Not implemented')),\n      ls: async function * (query, options = {}) { return Promise.reject(new Error('Not implemented')) }, // eslint-disable-line require-yield\n      rm: (query, options = {}) => Promise.reject(new Error('Not implemented')),\n      rmAll: (query, options = {}) => Promise.reject(new Error('Not implemented')),\n      service: {\n        add: (name, credentials) => Promise.reject(new Error('Not implemented')),\n        rm: (name, options = {}) => Promise.reject(new Error('Not implemented')),\n        // @ts-ignore return types seem to be broken by a recent ts release. doesn't matter here because\n        // we are just throwing. Will be removed by https://github.com/protocol/web3-dev-team/pull/58\n        ls: (options = {}) => Promise.reject(new Error('Not implemented'))\n      }\n    }\n  }\n}\n\nmodule.exports = PinAPI\n"]},"metadata":{},"sourceType":"script"}