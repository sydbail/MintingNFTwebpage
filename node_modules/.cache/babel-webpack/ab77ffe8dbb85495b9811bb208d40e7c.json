{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nconst {\n  Multiaddr\n} = require('multiaddr');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bootstrap').API<HTTPClientExtraOptions>} BootstrapAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {BootstrapAPI[\"reset\"]}\n   */\n  function reset() {\n    return _reset.apply(this, arguments);\n  }\n\n  function _reset() {\n    _reset = _asyncToGenerator(function* (options = {}) {\n      const res = yield api.post('bootstrap/add', {\n        timeout: options.timeout,\n        signal: options.signal,\n        searchParams: toUrlSearchParams({ ...options,\n          default: true\n        }),\n        headers: options.headers\n      });\n      const {\n        Peers\n      } = yield res.json();\n      return {\n        Peers: Peers.map((\n        /** @type {string} */\n        ma) => new Multiaddr(ma))\n      };\n    });\n    return _reset.apply(this, arguments);\n  }\n\n  return reset;\n});","map":{"version":3,"sources":["/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/ipfs-http-client/src/bootstrap/reset.js"],"names":["configure","require","toUrlSearchParams","Multiaddr","module","exports","api","reset","options","res","post","timeout","signal","searchParams","default","headers","Peers","json","map","ma"],"mappings":"AAAA;;;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAMC,iBAAiB,GAAGD,OAAO,CAAC,6BAAD,CAAjC;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAgBF,OAAO,CAAC,WAAD,CAA7B;AAEA;AACA;AACA;AACA;;;AAEAG,MAAM,CAACC,OAAP,GAAiBL,SAAS,CAACM,GAAG,IAAI;AAChC;AACF;AACA;AAHkC,WAIjBC,KAJiB;AAAA;AAAA;;AAAA;AAAA,+BAIhC,WAAsBC,OAAO,GAAG,EAAhC,EAAoC;AAClC,YAAMC,GAAG,SAASH,GAAG,CAACI,IAAJ,CAAS,eAAT,EAA0B;AAC1CC,QAAAA,OAAO,EAAEH,OAAO,CAACG,OADyB;AAE1CC,QAAAA,MAAM,EAAEJ,OAAO,CAACI,MAF0B;AAG1CC,QAAAA,YAAY,EAAEX,iBAAiB,CAAC,EAC9B,GAAGM,OAD2B;AAE9BM,UAAAA,OAAO,EAAE;AAFqB,SAAD,CAHW;AAO1CC,QAAAA,OAAO,EAAEP,OAAO,CAACO;AAPyB,OAA1B,CAAlB;AAUA,YAAM;AAAEC,QAAAA;AAAF,gBAAkBP,GAAG,CAACQ,IAAJ,EAAxB;AAEA,aAAO;AAAED,QAAAA,KAAK,EAAEA,KAAK,CAACE,GAAN,CAAU;AAAC;AAAsBC,QAAAA,EAAvB,KAA8B,IAAIhB,SAAJ,CAAcgB,EAAd,CAAxC;AAAT,OAAP;AACD,KAlB+B;AAAA;AAAA;;AAoBhC,SAAOZ,KAAP;AACD,CArByB,CAA1B","sourcesContent":["'use strict'\n\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst { Multiaddr } = require('multiaddr')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bootstrap').API<HTTPClientExtraOptions>} BootstrapAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {BootstrapAPI[\"reset\"]}\n   */\n  async function reset (options = {}) {\n    const res = await api.post('bootstrap/add', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        ...options,\n        default: true\n      }),\n      headers: options.headers\n    })\n\n    const { Peers } = await res.json()\n\n    return { Peers: Peers.map((/** @type {string} */ ma) => new Multiaddr(ma)) }\n  }\n\n  return reset\n})\n"]},"metadata":{},"sourceType":"script"}