{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst mkdir = require('./mkdir');\n\nconst stat = require('./stat');\n\nconst log = require('debug')('ipfs:mfs:cp');\n\nconst errCode = require('err-code');\n\nconst updateTree = require('./utils/update-tree');\n\nconst updateMfsRoot = require('./utils/update-mfs-root');\n\nconst addLink = require('./utils/add-link');\n\nconst toMfsPath = require('./utils/to-mfs-path');\n\nconst mergeOptions = require('merge-options').bind({\n  ignoreUndefined: true\n});\n\nconst toTrail = require('./utils/to-trail');\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @typedef {import('@ipld/dag-pb').PBNode} DAGNode\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('multiformats/cid').CIDVersion} CIDVersion\n * @typedef {import('ipfs-unixfs').Mtime} Mtime\n * @typedef {import('./utils/to-mfs-path').MfsPath} MfsPath\n * @typedef {import('./utils/to-trail').MfsTrail} MfsTrail\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {object} DefaultOptions\n * @property {boolean} parents\n * @property {boolean} flush\n * @property {string} hashAlg\n * @property {CIDVersion} cidVersion\n * @property {number} shardSplitThreshold\n * @property {AbortSignal} [signal]\n * @property {number} [timeout]\n */\n\n/**\n * @type {DefaultOptions}\n */\n\n\nconst defaultOptions = {\n  parents: false,\n  flush: true,\n  hashAlg: 'sha2-256',\n  cidVersion: 0,\n  shardSplitThreshold: 1000\n};\n/**\n * @param {MfsContext} context\n */\n\nmodule.exports = context => {\n  /**\n   * @type {import('ipfs-core-types/src/files').API[\"cp\"]}\n   */\n  function mfsCp(_x, _x2) {\n    return _mfsCp.apply(this, arguments);\n  }\n\n  function _mfsCp() {\n    _mfsCp = _asyncToGenerator(function* (from, to, opts = {}) {\n      /** @type {DefaultOptions} */\n      const options = mergeOptions(defaultOptions, opts);\n\n      if (!Array.isArray(from)) {\n        from = [from];\n      }\n\n      const sources = yield Promise.all(from.map((\n      /** @type {CID | string} */\n      path) => toMfsPath(context, path, options)));\n      let destination = yield toMfsPath(context, to, options);\n\n      if (!sources.length || !destination) {\n        throw errCode(new Error('Please supply at least one source'), 'ERR_INVALID_PARAMS');\n      } // make sure all sources exist\n\n\n      const missing = sources.find(source => !source.exists);\n\n      if (missing) {\n        throw errCode(new Error(`${missing.path} does not exist`), 'ERR_INVALID_PARAMS');\n      }\n\n      const destinationIsDirectory = isDirectory(destination);\n\n      if (destination.exists) {\n        log('Destination exists'); // @ts-ignore ts seems to think `sources` will always have a length of 10\n\n        if (sources.length === 1 && !destinationIsDirectory) {\n          throw errCode(new Error('directory already has entry by that name'), 'ERR_ALREADY_EXISTS');\n        }\n      } else {\n        log('Destination does not exist');\n\n        if (sources.length > 1) {\n          // copying multiple files to one location, destination will be a directory\n          if (!options.parents) {\n            throw errCode(new Error('destination did not exist, pass -p to create intermediate directories'), 'ERR_INVALID_PARAMS');\n          }\n\n          yield mkdir(context)(destination.path, options);\n          destination = yield toMfsPath(context, destination.path, options);\n        } else if (destination.parts.length > 1) {\n          // copying to a folder, create it if necessary\n          const parentFolder = `/${destination.parts.slice(0, -1).join('/')}`;\n\n          try {\n            yield stat(context)(parentFolder, options);\n          } catch (err) {\n            if (err.code !== 'ERR_NOT_FOUND') {\n              throw err;\n            }\n\n            if (!options.parents) {\n              throw errCode(new Error('destination did not exist, pass -p to create intermediate directories'), 'ERR_INVALID_PARAMS');\n            }\n\n            yield mkdir(context)(parentFolder, options);\n            destination = yield toMfsPath(context, destination.path, options);\n          }\n        }\n      }\n\n      const destinationPath = isDirectory(destination) ? destination.mfsPath : destination.mfsDirectory;\n      const trail = yield toTrail(context, destinationPath); // @ts-ignore ts seems to think `sources` will always have a length of 10\n\n      if (sources.length === 1) {\n        const source = sources.pop();\n\n        if (!source) {\n          throw errCode(new Error('could not find source'), 'ERR_INVALID_PARAMS');\n        }\n\n        const destinationName = destinationIsDirectory ? source.name : destination.name;\n        log(`Only one source, copying to destination ${destinationIsDirectory ? 'directory' : 'file'} ${destinationName}`);\n        return copyToFile(context, source, destinationName, trail, options);\n      }\n\n      log('Multiple sources, wrapping in a directory');\n      return copyToDirectory(context, sources, destination, trail, options);\n    });\n    return _mfsCp.apply(this, arguments);\n  }\n\n  return withTimeoutOption(mfsCp);\n};\n/**\n * @param {*} destination\n */\n\n\nconst isDirectory = destination => {\n  return destination.unixfs && destination.unixfs.type && destination.unixfs.type.includes('directory');\n};\n/**\n * @param {MfsContext} context\n * @param {MfsPath} source\n * @param {string} destination\n * @param {MfsTrail[]} destinationTrail\n * @param {DefaultOptions} options\n */\n\n\nconst copyToFile = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (context, source, destination, destinationTrail, options) {\n    let parent = destinationTrail.pop();\n\n    if (!parent) {\n      throw errCode(new Error('destination had no parent'), 'ERR_INVALID_PARAMS');\n    }\n\n    parent = yield addSourceToParent(context, source, destination, parent, options); // update the tree with the new containing directory\n\n    destinationTrail.push(parent);\n    const newRootCid = yield updateTree(context, destinationTrail, options); // Update the MFS record with the new CID for the root of the tree\n\n    yield updateMfsRoot(context, newRootCid, options);\n  });\n\n  return function copyToFile(_x3, _x4, _x5, _x6, _x7) {\n    return _ref.apply(this, arguments);\n  };\n}();\n/**\n * @param {MfsContext} context\n * @param {MfsPath[]} sources\n * @param {*} destination\n * @param {MfsTrail[]} destinationTrail\n * @param {DefaultOptions} options\n */\n\n\nconst copyToDirectory = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator(function* (context, sources, destination, destinationTrail, options) {\n    // copy all the sources to the destination\n    for (let i = 0; i < sources.length; i++) {\n      const source = sources[i];\n      destination = yield addSourceToParent(context, source, source.name, destination, options);\n    } // update the tree with the new containing directory\n\n\n    destinationTrail[destinationTrail.length - 1] = destination;\n    const newRootCid = yield updateTree(context, destinationTrail, options); // Update the MFS record with the new CID for the root of the tree\n\n    yield updateMfsRoot(context, newRootCid, options);\n  });\n\n  return function copyToDirectory(_x8, _x9, _x10, _x11, _x12) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n/**\n * @param {MfsContext} context\n * @param {MfsPath} source\n * @param {string} childName\n * @param {*} parent\n * @param {DefaultOptions} options\n * @returns {Promise<MfsTrail>}\n */\n\n\nconst addSourceToParent = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator(function* (context, source, childName, parent, options) {\n    const sourceBlock = yield context.repo.blocks.get(source.cid);\n    const {\n      node,\n      cid,\n      size\n    } = yield addLink(context, {\n      parentCid: parent.cid,\n      size: sourceBlock.length,\n      cid: source.cid,\n      name: childName,\n      hashAlg: options.hashAlg,\n      cidVersion: options.cidVersion,\n      flush: options.flush,\n      shardSplitThreshold: options.shardSplitThreshold\n    });\n    parent.node = node;\n    parent.cid = cid;\n    parent.size = size;\n    return parent;\n  });\n\n  return function addSourceToParent(_x13, _x14, _x15, _x16, _x17) {\n    return _ref3.apply(this, arguments);\n  };\n}();","map":null,"metadata":{},"sourceType":"script"}