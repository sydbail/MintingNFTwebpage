{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @param {Object} config\n * @param {import('../../types').NetworkService} config.network\n */\n\n\nmodule.exports = ({\n  network\n}) => {\n  /**\n   * @type {import('ipfs-core-types/src/swarm').API[\"addrs\"]}\n   */\n  function addrs() {\n    return _addrs.apply(this, arguments);\n  }\n\n  function _addrs() {\n    _addrs = _asyncToGenerator(function* (options = {}) {\n      // eslint-disable-line require-await\n      const peers = [];\n      const {\n        libp2p\n      } = yield network.use(options);\n\n      for (const [peerId, peer] of libp2p.peerStore.peers.entries()) {\n        peers.push({\n          id: peerId,\n          // @ts-ignore - libp2p types are missing\n          addrs: peer.addresses.map(mi => mi.multiaddr)\n        });\n      }\n\n      return peers;\n    });\n    return _addrs.apply(this, arguments);\n  }\n\n  return withTimeoutOption(addrs);\n};","map":null,"metadata":{},"sourceType":"script"}