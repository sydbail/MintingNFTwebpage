{"ast":null,"code":"'use strict';\n\nvar _awaitAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\").default;\n\nvar _wrapAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nconst varint = require('varint');\n\nconst BufferList = require('bl/BufferList'); // Decode a chunk and yield an _array_ of decoded messages\n\n\nmodule.exports = source => function () {\n  var _decode = _wrapAsyncGenerator(function* () {\n    const decoder = new Decoder();\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n\n    var _iteratorError;\n\n    try {\n      for (var _iterator = _asyncIterator(source), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n        const chunk = _value;\n        const msgs = decoder.write(chunk);\n        if (msgs.length) yield msgs;\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          yield _awaitAsyncGenerator(_iterator.return());\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  });\n\n  function decode() {\n    return _decode.apply(this, arguments);\n  }\n\n  return decode;\n}()();\n\nclass Decoder {\n  constructor() {\n    this._buffer = new BufferList(); // optimization to allow varint to take a BufferList (well a proxy to)\n\n    this._bufferProxy = new Proxy({}, {\n      get: (_, prop) => prop[0] === 'l' ? this._buffer[prop] : this._buffer.get(parseInt(prop))\n    });\n    this._headerInfo = null;\n  }\n  /**\n   * @param {Uint8Array|BufferList} chunk\n   * @returns {object[]} An array of message objects\n   */\n\n\n  write(chunk) {\n    if (!chunk || !chunk.length) return [];\n\n    this._buffer.append(chunk);\n\n    const msgs = [];\n\n    while (true) {\n      if (!this._headerInfo) {\n        try {\n          this._headerInfo = this._decodeHeader(this._bufferProxy);\n        } catch (_) {\n          break; // We haven't received enough data yet\n        }\n      }\n\n      const {\n        id,\n        type,\n        length,\n        offset\n      } = this._headerInfo;\n      const bufferedDataLength = this._buffer.length - offset;\n      if (bufferedDataLength < length) break; // not enough data yet\n\n      msgs.push({\n        id,\n        type,\n        data: this._buffer.shallowSlice(offset, offset + length)\n      });\n\n      this._buffer.consume(offset + length);\n\n      this._headerInfo = null;\n    }\n\n    return msgs;\n  }\n  /**\n   * Attempts to decode the message header from the buffer\n   *\n   * @private\n   * @param {Uint8Array} data\n   * @returns {*} message header (id, type, offset, length)\n   */\n\n\n  _decodeHeader(data) {\n    const h = varint.decode(data);\n    let offset = varint.decode.bytes;\n    const length = varint.decode(data, offset);\n    offset += varint.decode.bytes;\n    return {\n      id: h >> 3,\n      type: h & 7,\n      offset,\n      length\n    };\n  }\n\n}","map":null,"metadata":{},"sourceType":"script"}