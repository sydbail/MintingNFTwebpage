{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst log = require('debug')('ipfs:repo:migrator:repo:init');\n\nconst {\n  CONFIG_KEY,\n  VERSION_KEY\n} = require('../utils');\n\nconst {\n  MissingRepoOptionsError\n} = require('../errors');\n/**\n * @param {import('../types').Backends} backends\n */\n\n\nfunction isRepoInitialized(_x) {\n  return _isRepoInitialized.apply(this, arguments);\n}\n\nfunction _isRepoInitialized() {\n  _isRepoInitialized = _asyncToGenerator(function* (backends) {\n    if (!backends) {\n      throw new MissingRepoOptionsError('Please pass repo options when trying to open a repo');\n    }\n\n    const root = backends.root;\n\n    try {\n      yield root.open();\n      const versionCheck = yield root.has(VERSION_KEY);\n      const configCheck = yield root.has(CONFIG_KEY);\n\n      if (!versionCheck || !configCheck) {\n        log(`Version entry present: ${versionCheck}`);\n        log(`Config entry present: ${configCheck}`);\n        return false;\n      }\n\n      return true;\n    } catch (e) {\n      log('While checking if repo is initialized error was thrown: ' + e.message);\n      return false;\n    } finally {\n      if (root !== undefined) {\n        try {\n          yield root.close();\n        } catch {}\n      }\n    }\n  });\n  return _isRepoInitialized.apply(this, arguments);\n}\n\nmodule.exports = {\n  isRepoInitialized\n};","map":null,"metadata":{},"sourceType":"script"}