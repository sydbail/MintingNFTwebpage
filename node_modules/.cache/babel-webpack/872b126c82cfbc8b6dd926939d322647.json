{"ast":null,"code":"'use strict';\n\nconst {\n  Key\n} = require('interface-datastore');\n\nconst {\n  CID\n} = require('multiformats');\n\nconst raw = require('multiformats/codecs/raw');\n\nconst errCode = require('err-code');\n\nconst {\n  base32\n} = require('multiformats/bases/base32');\n\nconst Digest = require('multiformats/hashes/digest');\n/**\n * Transform a cid to the appropriate datastore key.\n *\n * @param {CID} c\n */\n\n\nfunction cidToKey(c) {\n  const cid = CID.asCID(c);\n\n  if (cid == null) {\n    throw errCode(new Error('Not a valid cid'), 'ERR_INVALID_CID');\n  }\n\n  const encoded = base32.encode(cid.multihash.bytes);\n  return new Key('/' + encoded.slice(1).toUpperCase(), false);\n}\n/**\n * Transform a datastore Key instance to a CID\n * As Key is a multihash of the CID, it is reconstructed using IPLD's RAW codec.\n * Hence it is highly probable that stored CID will differ from a CID retrieved from blockstore.\n *\n * @param {Key} key\n */\n\n\nfunction keyToCid(key) {\n  // Block key is of the form /<base32 encoded string>\n  return CID.createV1(raw.code, keyToMultihash(key));\n}\n/**\n * @param {Key | string} key\n */\n\n\nfunction keyToMultihash(key) {\n  return Digest.decode(base32.decode(`b${key.toString().toLowerCase().substring(1)}`));\n}\n\nmodule.exports = {\n  cidToKey,\n  keyToCid,\n  keyToMultihash\n};","map":null,"metadata":{},"sourceType":"script"}