{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/Dapp/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst Key = require('interface-datastore').Key;\n\nconst debug = require('debug');\n\nconst log = debug('ipfs:repo:version');\n\nconst {\n  toString: uint8ArrayToString\n} = require('uint8arrays/to-string');\n\nconst {\n  fromString: uint8ArrayFromString\n} = require('uint8arrays/from-string');\n\nconst {\n  hasWithFallback,\n  getWithFallback // @ts-ignore\n\n} = require('ipfs-repo-migrations/src/utils');\n\nconst versionKey = new Key('version');\n/**\n *\n * @param {import('interface-datastore').Datastore} store\n */\n\nmodule.exports = store => {\n  return {\n    /**\n     * Check if a version file exists.\n     *\n     */\n    exists() {\n      return _asyncToGenerator(function* () {\n        // eslint-disable-line require-await\n        // level-js@5.x cannot read keys from level-js@4.x dbs so fall back to\n        // using IndexedDB API with string keys - only necessary until we do\n        // the migratiion to v10 or above\n        return hasWithFallback(versionKey, store.has.bind(store), store);\n      })();\n    },\n\n    /**\n     * Get the current version.\n     *\n     * @returns {Promise<number>}\n     */\n    get() {\n      return _asyncToGenerator(function* () {\n        // level-js@5.x cannot read keys from level-js@4.x dbs so fall back to\n        // using IndexedDB API with string keys - only necessary until we do\n        // the migratiion to v10 or above\n        const buf = yield getWithFallback(versionKey, store.get.bind(store), store.has.bind(store), store);\n        return parseInt(uint8ArrayToString(buf), 10);\n      })();\n    },\n\n    /**\n     * Set the version of the repo, writing it to the underlying store.\n     *\n     * @param {number} version\n     * @returns {Promise<void>}\n     */\n    set(version) {\n      return store.put(versionKey, uint8ArrayFromString(String(version)));\n    },\n\n    /**\n     * Check the current version, and returns true if versions matches\n     *\n     * @param {number} expected\n     */\n    check(expected) {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        const version = yield _this.get();\n        log('comparing version: %s and %s', version, expected); // Version 6 and 7 are the same\n        // TODO: Clean up the compatibility logic. Repo feature detection would be ideal, or a better version schema\n\n        const compatibleVersion = version === 6 && expected === 7 || expected === 6 && version === 7;\n        return version === expected || compatibleVersion;\n      })();\n    }\n\n  };\n};","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Dapp/node_modules/ipfs-repo/src/version.js"],"names":["Key","require","debug","log","toString","uint8ArrayToString","fromString","uint8ArrayFromString","hasWithFallback","getWithFallback","versionKey","module","exports","store","exists","has","bind","get","buf","parseInt","set","version","put","String","check","expected","compatibleVersion"],"mappings":"AAAA;;;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,qBAAD,CAAP,CAA+BD,GAA3C;;AACA,MAAME,KAAK,GAAGD,OAAO,CAAC,OAAD,CAArB;;AACA,MAAME,GAAG,GAAGD,KAAK,CAAC,mBAAD,CAAjB;;AACA,MAAM;AAAEE,EAAAA,QAAQ,EAAEC;AAAZ,IAAmCJ,OAAO,CAAC,uBAAD,CAAhD;;AACA,MAAM;AAAEK,EAAAA,UAAU,EAAEC;AAAd,IAAuCN,OAAO,CAAC,yBAAD,CAApD;;AACA,MAAM;AACJO,EAAAA,eADI;AAEJC,EAAAA,eAFI,CAGN;;AAHM,IAIFR,OAAO,CAAC,gCAAD,CAJX;;AAMA,MAAMS,UAAU,GAAG,IAAIV,GAAJ,CAAQ,SAAR,CAAnB;AAEA;AACA;AACA;AACA;;AACAW,MAAM,CAACC,OAAP,GAAkBC,KAAD,IAAW;AAC1B,SAAO;AACL;AACJ;AACA;AACA;AACUC,IAAAA,MAAN,GAAgB;AAAA;AAAE;AAChB;AACA;AACA;AACA,eAAON,eAAe,CAACE,UAAD,EAAaG,KAAK,CAACE,GAAN,CAAUC,IAAV,CAAeH,KAAf,CAAb,EAAoCA,KAApC,CAAtB;AAJc;AAKf,KAVI;;AAWL;AACJ;AACA;AACA;AACA;AACUI,IAAAA,GAAN,GAAa;AAAA;AACX;AACA;AACA;AACA,cAAMC,GAAG,SAAST,eAAe,CAACC,UAAD,EAAaG,KAAK,CAACI,GAAN,CAAUD,IAAV,CAAeH,KAAf,CAAb,EAAoCA,KAAK,CAACE,GAAN,CAAUC,IAAV,CAAeH,KAAf,CAApC,EAA2DA,KAA3D,CAAjC;AACA,eAAOM,QAAQ,CAACd,kBAAkB,CAACa,GAAD,CAAnB,EAA0B,EAA1B,CAAf;AALW;AAMZ,KAtBI;;AAuBL;AACJ;AACA;AACA;AACA;AACA;AACIE,IAAAA,GAAG,CAAEC,OAAF,EAAW;AACZ,aAAOR,KAAK,CAACS,GAAN,CAAUZ,UAAV,EAAsBH,oBAAoB,CAACgB,MAAM,CAACF,OAAD,CAAP,CAA1C,CAAP;AACD,KA/BI;;AAgCL;AACJ;AACA;AACA;AACA;AACUG,IAAAA,KAAN,CAAaC,QAAb,EAAuB;AAAA;;AAAA;AACrB,cAAMJ,OAAO,SAAS,KAAI,CAACJ,GAAL,EAAtB;AACAd,QAAAA,GAAG,CAAC,8BAAD,EAAiCkB,OAAjC,EAA0CI,QAA1C,CAAH,CAFqB,CAGrB;AACA;;AACA,cAAMC,iBAAiB,GAAIL,OAAO,KAAK,CAAZ,IAAiBI,QAAQ,KAAK,CAA/B,IAAsCA,QAAQ,KAAK,CAAb,IAAkBJ,OAAO,KAAK,CAA9F;AAEA,eAAOA,OAAO,KAAKI,QAAZ,IAAwBC,iBAA/B;AAPqB;AAQtB;;AA7CI,GAAP;AA+CD,CAhDD","sourcesContent":["'use strict'\n\nconst Key = require('interface-datastore').Key\nconst debug = require('debug')\nconst log = debug('ipfs:repo:version')\nconst { toString: uint8ArrayToString } = require('uint8arrays/to-string')\nconst { fromString: uint8ArrayFromString } = require('uint8arrays/from-string')\nconst {\n  hasWithFallback,\n  getWithFallback\n// @ts-ignore\n} = require('ipfs-repo-migrations/src/utils')\n\nconst versionKey = new Key('version')\n\n/**\n *\n * @param {import('interface-datastore').Datastore} store\n */\nmodule.exports = (store) => {\n  return {\n    /**\n     * Check if a version file exists.\n     *\n     */\n    async exists () { // eslint-disable-line require-await\n      // level-js@5.x cannot read keys from level-js@4.x dbs so fall back to\n      // using IndexedDB API with string keys - only necessary until we do\n      // the migratiion to v10 or above\n      return hasWithFallback(versionKey, store.has.bind(store), store)\n    },\n    /**\n     * Get the current version.\n     *\n     * @returns {Promise<number>}\n     */\n    async get () {\n      // level-js@5.x cannot read keys from level-js@4.x dbs so fall back to\n      // using IndexedDB API with string keys - only necessary until we do\n      // the migratiion to v10 or above\n      const buf = await getWithFallback(versionKey, store.get.bind(store), store.has.bind(store), store)\n      return parseInt(uint8ArrayToString(buf), 10)\n    },\n    /**\n     * Set the version of the repo, writing it to the underlying store.\n     *\n     * @param {number} version\n     * @returns {Promise<void>}\n     */\n    set (version) {\n      return store.put(versionKey, uint8ArrayFromString(String(version)))\n    },\n    /**\n     * Check the current version, and returns true if versions matches\n     *\n     * @param {number} expected\n     */\n    async check (expected) {\n      const version = await this.get()\n      log('comparing version: %s and %s', version, expected)\n      // Version 6 and 7 are the same\n      // TODO: Clean up the compatibility logic. Repo feature detection would be ideal, or a better version schema\n      const compatibleVersion = (version === 6 && expected === 7) || (expected === 6 && version === 7)\n\n      return version === expected || compatibleVersion\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}