{"ast":null,"code":"\"use strict\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.typedIntArrayArbitraryArbitraryBuilder = void 0;\n\nconst array_1 = require(\"../../array\");\n\nfunction typedIntArrayArbitraryArbitraryBuilder(constraints, defaultMin, defaultMax, TypedArrayClass, arbitraryBuilder) {\n  const generatorName = TypedArrayClass.name;\n\n  const {\n    min = defaultMin,\n    max = defaultMax\n  } = constraints,\n        arrayConstraints = __rest(constraints, [\"min\", \"max\"]);\n\n  if (min > max) {\n    throw new Error(`Invalid range passed to ${generatorName}: min must be lower than or equal to max`);\n  }\n\n  if (min < defaultMin) {\n    throw new Error(`Invalid min value passed to ${generatorName}: min must be greater than or equal to ${defaultMin}`);\n  }\n\n  if (max > defaultMax) {\n    throw new Error(`Invalid max value passed to ${generatorName}: max must be lower than or equal to ${defaultMax}`);\n  }\n\n  return array_1.array(arbitraryBuilder({\n    min,\n    max\n  }), arrayConstraints).map(data => TypedArrayClass.from(data));\n}\n\nexports.typedIntArrayArbitraryArbitraryBuilder = typedIntArrayArbitraryArbitraryBuilder;","map":null,"metadata":{},"sourceType":"script"}