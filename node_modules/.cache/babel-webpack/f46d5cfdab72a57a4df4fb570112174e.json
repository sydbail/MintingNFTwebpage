{"ast":null,"code":"'use strict';\n\nvar _awaitAsyncGenerator = require(\"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\").default;\n\nvar _wrapAsyncGenerator = require(\"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nconst {\n  exporter\n} = require('ipfs-unixfs-exporter');\n\nconst errCode = require('err-code');\n\nconst {\n  normalizeCidPath,\n  mapFile\n} = require('../utils');\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n\nconst {\n  CID\n} = require('multiformats/cid');\n/**\n * @typedef {Object} Context\n * @property {import('ipfs-repo').IPFSRepo} repo\n * @property {import('../types').Preload} preload\n *\n * @param {Context} context\n */\n\n\nmodule.exports = function ({\n  repo,\n  preload\n}) {\n  /**\n   * @type {import('ipfs-core-types/src/root').API[\"ls\"]}\n   */\n  function ls(_x) {\n    return _ls.apply(this, arguments);\n  }\n\n  function _ls() {\n    _ls = _wrapAsyncGenerator(function* (ipfsPath, options = {}) {\n      const legacyPath = normalizeCidPath(ipfsPath);\n      const pathComponents = legacyPath.split('/');\n\n      if (options.preload !== false) {\n        preload(CID.parse(pathComponents[0]));\n      }\n\n      const ipfsPathOrCid = CID.asCID(legacyPath) || legacyPath;\n      const file = yield _awaitAsyncGenerator(exporter(ipfsPathOrCid, repo.blocks, options));\n\n      if (file.type === 'file') {\n        yield mapFile(file);\n        return;\n      }\n\n      if (file.type === 'directory') {\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n\n        var _iteratorError;\n\n        try {\n          for (var _iterator = _asyncIterator(file.content()), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n            const child = _value;\n            yield mapFile(child);\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              yield _awaitAsyncGenerator(_iterator.return());\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        return;\n      }\n\n      throw errCode(new Error(`Unknown UnixFS type ${file.type}`), 'ERR_UNKNOWN_UNIXFS_TYPE');\n    });\n    return _ls.apply(this, arguments);\n  }\n\n  return withTimeoutOption(ls);\n};","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Demo/node_modules/ipfs-core/src/components/ls.js"],"names":["exporter","require","errCode","normalizeCidPath","mapFile","withTimeoutOption","CID","module","exports","repo","preload","ls","ipfsPath","options","legacyPath","pathComponents","split","parse","ipfsPathOrCid","asCID","file","blocks","type","content","child","Error"],"mappings":"AAAA;;;;;;;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAeC,OAAO,CAAC,sBAAD,CAA5B;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAM;AAAEE,EAAAA,gBAAF;AAAoBC,EAAAA;AAApB,IAAgCH,OAAO,CAAC,UAAD,CAA7C;;AACA,MAAMI,iBAAiB,GAAGJ,OAAO,CAAC,yCAAD,CAAjC;;AACA,MAAM;AAAEK,EAAAA;AAAF,IAAUL,OAAO,CAAC,kBAAD,CAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAM,MAAM,CAACC,OAAP,GAAiB,UAAU;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAV,EAA6B;AAC5C;AACF;AACA;AAH8C,WAI3BC,EAJ2B;AAAA;AAAA;;AAAA;AAAA,8BAI5C,WAAqBC,QAArB,EAA+BC,OAAO,GAAG,EAAzC,EAA6C;AAC3C,YAAMC,UAAU,GAAGX,gBAAgB,CAACS,QAAD,CAAnC;AACA,YAAMG,cAAc,GAAGD,UAAU,CAACE,KAAX,CAAiB,GAAjB,CAAvB;;AAEA,UAAIH,OAAO,CAACH,OAAR,KAAoB,KAAxB,EAA+B;AAC7BA,QAAAA,OAAO,CAACJ,GAAG,CAACW,KAAJ,CAAUF,cAAc,CAAC,CAAD,CAAxB,CAAD,CAAP;AACD;;AAED,YAAMG,aAAa,GAAGZ,GAAG,CAACa,KAAJ,CAAUL,UAAV,KAAyBA,UAA/C;AACA,YAAMM,IAAI,8BAASpB,QAAQ,CAACkB,aAAD,EAAgBT,IAAI,CAACY,MAArB,EAA6BR,OAA7B,CAAjB,CAAV;;AAEA,UAAIO,IAAI,CAACE,IAAL,KAAc,MAAlB,EAA0B;AACxB,cAAMlB,OAAO,CAACgB,IAAD,CAAb;AACA;AACD;;AAED,UAAIA,IAAI,CAACE,IAAL,KAAc,WAAlB,EAA+B;AAAA;AAAA;;AAAA;;AAAA;AAC7B,8CAA0BF,IAAI,CAACG,OAAL,EAA1B,gOAA0C;AAAA,kBAAzBC,KAAyB;AACxC,kBAAMpB,OAAO,CAACoB,KAAD,CAAb;AACD;AAH4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAK7B;AACD;;AAED,YAAMtB,OAAO,CAAC,IAAIuB,KAAJ,CAAW,uBAAsBL,IAAI,CAACE,IAAK,EAA3C,CAAD,EAAgD,yBAAhD,CAAb;AACD,KA7B2C;AAAA;AAAA;;AA+B5C,SAAOjB,iBAAiB,CAACM,EAAD,CAAxB;AACD,CAhCD","sourcesContent":["'use strict'\n\nconst { exporter } = require('ipfs-unixfs-exporter')\nconst errCode = require('err-code')\nconst { normalizeCidPath, mapFile } = require('../utils')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\nconst { CID } = require('multiformats/cid')\n\n/**\n * @typedef {Object} Context\n * @property {import('ipfs-repo').IPFSRepo} repo\n * @property {import('../types').Preload} preload\n *\n * @param {Context} context\n */\nmodule.exports = function ({ repo, preload }) {\n  /**\n   * @type {import('ipfs-core-types/src/root').API[\"ls\"]}\n   */\n  async function * ls (ipfsPath, options = {}) {\n    const legacyPath = normalizeCidPath(ipfsPath)\n    const pathComponents = legacyPath.split('/')\n\n    if (options.preload !== false) {\n      preload(CID.parse(pathComponents[0]))\n    }\n\n    const ipfsPathOrCid = CID.asCID(legacyPath) || legacyPath\n    const file = await exporter(ipfsPathOrCid, repo.blocks, options)\n\n    if (file.type === 'file') {\n      yield mapFile(file)\n      return\n    }\n\n    if (file.type === 'directory') {\n      for await (const child of file.content()) {\n        yield mapFile(child)\n      }\n\n      return\n    }\n\n    throw errCode(new Error(`Unknown UnixFS type ${file.type}`), 'ERR_UNKNOWN_UNIXFS_TYPE')\n  }\n\n  return withTimeoutOption(ls)\n}\n"]},"metadata":{},"sourceType":"script"}