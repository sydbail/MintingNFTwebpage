{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nvar _wrapAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\").default;\n\nvar _awaitAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\").default;\n\nvar _asyncGeneratorDelegate = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncGeneratorDelegate\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst configure = require('./lib/configure');\n\nconst toUrlSearchParams = require('./lib/to-url-search-params');\n\nconst stat = require('./files/stat');\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\n\nmodule.exports = configure((api, opts) => {\n  /**\n   * @type {RootAPI[\"ls\"]}\n   */\n  function ls(_x) {\n    return _ls.apply(this, arguments);\n  }\n\n  function _ls() {\n    _ls = _wrapAsyncGenerator(function* (path, options = {}) {\n      const pathStr = `${path instanceof Uint8Array ? CID.decode(path) : path}`;\n      /**\n       * @param {*} link\n       */\n\n      function mapLink(_x2) {\n        return _mapLink.apply(this, arguments);\n      }\n\n      function _mapLink() {\n        _mapLink = _asyncToGenerator(function* (link) {\n          let hash = link.Hash;\n\n          if (hash.includes('/')) {\n            // the hash is a path, but we need the CID\n            const ipfsPath = hash.startsWith('/ipfs/') ? hash : `/ipfs/${hash}`;\n            const stats = yield stat(opts)(ipfsPath);\n            hash = stats.cid;\n          } else {\n            hash = CID.parse(hash);\n          }\n          /** @type {import('ipfs-core-types/src/root').IPFSEntry} */\n\n\n          const entry = {\n            name: link.Name,\n            path: pathStr + (link.Name ? `/${link.Name}` : ''),\n            size: link.Size,\n            cid: hash,\n            type: typeOf(link)\n          };\n\n          if (link.Mode) {\n            entry.mode = parseInt(link.Mode, 8);\n          }\n\n          if (link.Mtime !== undefined && link.Mtime !== null) {\n            entry.mtime = {\n              secs: link.Mtime\n            };\n\n            if (link.MtimeNsecs !== undefined && link.MtimeNsecs !== null) {\n              entry.mtime.nsecs = link.MtimeNsecs;\n            }\n          }\n\n          return entry;\n        });\n        return _mapLink.apply(this, arguments);\n      }\n\n      const res = yield _awaitAsyncGenerator(api.post('ls', {\n        timeout: options.timeout,\n        signal: options.signal,\n        searchParams: toUrlSearchParams({\n          arg: pathStr,\n          ...options\n        }),\n        headers: options.headers\n      }));\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n\n      var _iteratorError;\n\n      try {\n        for (var _iterator = _asyncIterator(res.ndjson()), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n          let result = _value;\n          result = result.Objects;\n\n          if (!result) {\n            throw new Error('expected .Objects in results');\n          }\n\n          result = result[0];\n\n          if (!result) {\n            throw new Error('expected one array in results.Objects');\n          }\n\n          const links = result.Links;\n\n          if (!Array.isArray(links)) {\n            throw new Error('expected one array in results.Objects[0].Links');\n          }\n\n          if (!links.length) {\n            // no links, this is a file, yield a single result\n            yield mapLink(result);\n            return;\n          }\n\n          yield* _asyncGeneratorDelegate(_asyncIterator(links.map(mapLink)), _awaitAsyncGenerator);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            yield _awaitAsyncGenerator(_iterator.return());\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    });\n    return _ls.apply(this, arguments);\n  }\n\n  return ls;\n});\n/**\n * @param {any} link\n */\n\nfunction typeOf(link) {\n  switch (link.Type) {\n    case 1:\n    case 5:\n      return 'dir';\n\n    case 2:\n      return 'file';\n\n    default:\n      return 'file';\n  }\n}","map":null,"metadata":{},"sourceType":"script"}