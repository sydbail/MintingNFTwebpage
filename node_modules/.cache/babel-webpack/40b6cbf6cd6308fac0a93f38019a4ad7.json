{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SchedulerImplem = void 0;\n\nconst TextEscaper_1 = require(\"../../../check/arbitrary/helpers/TextEscaper\");\n\nconst symbols_1 = require(\"../../../check/symbols\");\n\nconst stringify_1 = require(\"../../../utils/stringify\");\n\nclass SchedulerImplem {\n  constructor(act, taskSelector) {\n    this.act = act;\n    this.taskSelector = taskSelector;\n    this.lastTaskId = 0;\n    this.sourceTaskSelector = taskSelector.clone();\n    this.scheduledTasks = [];\n    this.triggeredTasks = [];\n  }\n\n  static buildLog(reportItem) {\n    return `[task\\${${reportItem.taskId}}] ${reportItem.label.length !== 0 ? `${reportItem.schedulingType}::${reportItem.label}` : reportItem.schedulingType} ${reportItem.status}${reportItem.outputValue !== undefined ? ` with value ${TextEscaper_1.escapeForTemplateString(reportItem.outputValue)}` : ''}`;\n  }\n\n  log(schedulingType, taskId, label, metadata, status, data) {\n    this.triggeredTasks.push({\n      status,\n      schedulingType,\n      taskId,\n      label,\n      metadata,\n      outputValue: data !== undefined ? stringify_1.stringify(data) : undefined\n    });\n  }\n\n  scheduleInternal(schedulingType, label, task, metadata, thenTaskToBeAwaited) {\n    let trigger = null;\n    const taskId = ++this.lastTaskId;\n    const scheduledPromise = new Promise((resolve, reject) => {\n      trigger = () => {\n        (thenTaskToBeAwaited ? task.then(() => thenTaskToBeAwaited()) : task).then(data => {\n          this.log(schedulingType, taskId, label, metadata, 'resolved', data);\n          return resolve(data);\n        }, err => {\n          this.log(schedulingType, taskId, label, metadata, 'rejected', err);\n          return reject(err);\n        });\n      };\n    });\n    this.scheduledTasks.push({\n      original: task,\n      scheduled: scheduledPromise,\n      trigger: trigger,\n      schedulingType,\n      taskId,\n      label,\n      metadata\n    });\n    return scheduledPromise;\n  }\n\n  schedule(task, label, metadata) {\n    return this.scheduleInternal('promise', label || '', task, metadata);\n  }\n\n  scheduleFunction(asyncFunction) {\n    return (...args) => this.scheduleInternal('function', `${asyncFunction.name}(${args.map(stringify_1.stringify).join(',')})`, asyncFunction(...args), undefined);\n  }\n\n  scheduleSequence(sequenceBuilders) {\n    const status = {\n      done: false,\n      faulty: false\n    };\n    const dummyResolvedPromise = {\n      then: f => f()\n    };\n\n    let resolveSequenceTask = () => {};\n\n    const sequenceTask = new Promise(resolve => resolveSequenceTask = resolve);\n    sequenceBuilders.reduce((previouslyScheduled, item) => {\n      const [builder, label, metadata] = typeof item === 'function' ? [item, item.name, undefined] : [item.builder, item.label, item.metadata];\n      return previouslyScheduled.then(() => {\n        const scheduled = this.scheduleInternal('sequence', label, dummyResolvedPromise, metadata, () => builder());\n        scheduled.catch(() => {\n          status.faulty = true;\n          resolveSequenceTask();\n        });\n        return scheduled;\n      });\n    }, dummyResolvedPromise).then(() => {\n      status.done = true;\n      resolveSequenceTask();\n    }, () => {});\n    return Object.assign(status, {\n      task: Promise.resolve(sequenceTask).then(() => {\n        return {\n          done: status.done,\n          faulty: status.faulty\n        };\n      })\n    });\n  }\n\n  count() {\n    return this.scheduledTasks.length;\n  }\n\n  internalWaitOne() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this.scheduledTasks.length === 0) {\n        throw new Error('No task scheduled');\n      }\n\n      const taskIndex = _this.taskSelector.nextTaskIndex(_this.scheduledTasks);\n\n      const [scheduledTask] = _this.scheduledTasks.splice(taskIndex, 1);\n\n      scheduledTask.trigger();\n\n      try {\n        yield scheduledTask.scheduled;\n      } catch (_err) {}\n    })();\n  }\n\n  waitOne() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this2.act( /*#__PURE__*/_asyncToGenerator(function* () {\n        return yield _this2.internalWaitOne();\n      }));\n    })();\n  }\n\n  waitAll() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      while (_this3.scheduledTasks.length > 0) {\n        yield _this3.waitOne();\n      }\n    })();\n  }\n\n  report() {\n    return [...this.triggeredTasks, ...this.scheduledTasks.map(t => ({\n      status: 'pending',\n      schedulingType: t.schedulingType,\n      taskId: t.taskId,\n      label: t.label,\n      metadata: t.metadata\n    }))];\n  }\n\n  toString() {\n    return 'schedulerFor()`\\n' + this.report().map(SchedulerImplem.buildLog).map(log => `-> ${log}`).join('\\n') + '`';\n  }\n\n  [symbols_1.cloneMethod]() {\n    return new SchedulerImplem(this.act, this.sourceTaskSelector);\n  }\n\n}\n\nexports.SchedulerImplem = SchedulerImplem;","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Demo/node_modules/fast-check/lib/arbitrary/_internals/implementations/SchedulerImplem.js"],"names":["Object","defineProperty","exports","value","SchedulerImplem","TextEscaper_1","require","symbols_1","stringify_1","constructor","act","taskSelector","lastTaskId","sourceTaskSelector","clone","scheduledTasks","triggeredTasks","buildLog","reportItem","taskId","label","length","schedulingType","status","outputValue","undefined","escapeForTemplateString","log","metadata","data","push","stringify","scheduleInternal","task","thenTaskToBeAwaited","trigger","scheduledPromise","Promise","resolve","reject","then","err","original","scheduled","schedule","scheduleFunction","asyncFunction","args","name","map","join","scheduleSequence","sequenceBuilders","done","faulty","dummyResolvedPromise","f","resolveSequenceTask","sequenceTask","reduce","previouslyScheduled","item","builder","catch","assign","count","internalWaitOne","Error","taskIndex","nextTaskIndex","scheduledTask","splice","_err","waitOne","waitAll","report","t","toString","cloneMethod"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SchedulerImplem = void 0;\nconst TextEscaper_1 = require(\"../../../check/arbitrary/helpers/TextEscaper\");\nconst symbols_1 = require(\"../../../check/symbols\");\nconst stringify_1 = require(\"../../../utils/stringify\");\nclass SchedulerImplem {\n    constructor(act, taskSelector) {\n        this.act = act;\n        this.taskSelector = taskSelector;\n        this.lastTaskId = 0;\n        this.sourceTaskSelector = taskSelector.clone();\n        this.scheduledTasks = [];\n        this.triggeredTasks = [];\n    }\n    static buildLog(reportItem) {\n        return `[task\\${${reportItem.taskId}}] ${reportItem.label.length !== 0 ? `${reportItem.schedulingType}::${reportItem.label}` : reportItem.schedulingType} ${reportItem.status}${reportItem.outputValue !== undefined ? ` with value ${TextEscaper_1.escapeForTemplateString(reportItem.outputValue)}` : ''}`;\n    }\n    log(schedulingType, taskId, label, metadata, status, data) {\n        this.triggeredTasks.push({\n            status,\n            schedulingType,\n            taskId,\n            label,\n            metadata,\n            outputValue: data !== undefined ? stringify_1.stringify(data) : undefined,\n        });\n    }\n    scheduleInternal(schedulingType, label, task, metadata, thenTaskToBeAwaited) {\n        let trigger = null;\n        const taskId = ++this.lastTaskId;\n        const scheduledPromise = new Promise((resolve, reject) => {\n            trigger = () => {\n                (thenTaskToBeAwaited ? task.then(() => thenTaskToBeAwaited()) : task).then((data) => {\n                    this.log(schedulingType, taskId, label, metadata, 'resolved', data);\n                    return resolve(data);\n                }, (err) => {\n                    this.log(schedulingType, taskId, label, metadata, 'rejected', err);\n                    return reject(err);\n                });\n            };\n        });\n        this.scheduledTasks.push({\n            original: task,\n            scheduled: scheduledPromise,\n            trigger: trigger,\n            schedulingType,\n            taskId,\n            label,\n            metadata,\n        });\n        return scheduledPromise;\n    }\n    schedule(task, label, metadata) {\n        return this.scheduleInternal('promise', label || '', task, metadata);\n    }\n    scheduleFunction(asyncFunction) {\n        return (...args) => this.scheduleInternal('function', `${asyncFunction.name}(${args.map(stringify_1.stringify).join(',')})`, asyncFunction(...args), undefined);\n    }\n    scheduleSequence(sequenceBuilders) {\n        const status = { done: false, faulty: false };\n        const dummyResolvedPromise = { then: (f) => f() };\n        let resolveSequenceTask = () => { };\n        const sequenceTask = new Promise((resolve) => (resolveSequenceTask = resolve));\n        sequenceBuilders\n            .reduce((previouslyScheduled, item) => {\n            const [builder, label, metadata] = typeof item === 'function' ? [item, item.name, undefined] : [item.builder, item.label, item.metadata];\n            return previouslyScheduled.then(() => {\n                const scheduled = this.scheduleInternal('sequence', label, dummyResolvedPromise, metadata, () => builder());\n                scheduled.catch(() => {\n                    status.faulty = true;\n                    resolveSequenceTask();\n                });\n                return scheduled;\n            });\n        }, dummyResolvedPromise)\n            .then(() => {\n            status.done = true;\n            resolveSequenceTask();\n        }, () => {\n        });\n        return Object.assign(status, {\n            task: Promise.resolve(sequenceTask).then(() => {\n                return { done: status.done, faulty: status.faulty };\n            }),\n        });\n    }\n    count() {\n        return this.scheduledTasks.length;\n    }\n    async internalWaitOne() {\n        if (this.scheduledTasks.length === 0) {\n            throw new Error('No task scheduled');\n        }\n        const taskIndex = this.taskSelector.nextTaskIndex(this.scheduledTasks);\n        const [scheduledTask] = this.scheduledTasks.splice(taskIndex, 1);\n        scheduledTask.trigger();\n        try {\n            await scheduledTask.scheduled;\n        }\n        catch (_err) {\n        }\n    }\n    async waitOne() {\n        await this.act(async () => await this.internalWaitOne());\n    }\n    async waitAll() {\n        while (this.scheduledTasks.length > 0) {\n            await this.waitOne();\n        }\n    }\n    report() {\n        return [\n            ...this.triggeredTasks,\n            ...this.scheduledTasks.map((t) => ({\n                status: 'pending',\n                schedulingType: t.schedulingType,\n                taskId: t.taskId,\n                label: t.label,\n                metadata: t.metadata,\n            })),\n        ];\n    }\n    toString() {\n        return ('schedulerFor()`\\n' +\n            this.report()\n                .map(SchedulerImplem.buildLog)\n                .map((log) => `-> ${log}`)\n                .join('\\n') +\n            '`');\n    }\n    [symbols_1.cloneMethod]() {\n        return new SchedulerImplem(this.act, this.sourceTaskSelector);\n    }\n}\nexports.SchedulerImplem = SchedulerImplem;\n"]},"metadata":{},"sourceType":"script"}