{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst cp = require('./cp');\n\nconst rm = require('./rm');\n\nconst mergeOptions = require('merge-options').bind({\n  ignoreUndefined: true\n});\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @typedef {import('multiformats/cid').CIDVersion} CIDVersion\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {object} DefaultOptions\n * @property {boolean} parents\n * @property {boolean} flush\n * @property {CIDVersion} cidVersion\n * @property {string} hashAlg\n * @property {number} shardSplitThreshold\n * @property {AbortSignal} [signal]\n * @property {number} [timeout]\n */\n\n/**\n * @type {DefaultOptions}\n */\n\n\nconst defaultOptions = {\n  parents: false,\n  flush: true,\n  cidVersion: 0,\n  hashAlg: 'sha2-256',\n  shardSplitThreshold: 1000\n};\n/**\n * @param {MfsContext} context\n */\n\nmodule.exports = context => {\n  /**\n   * @type {import('ipfs-core-types/src/files').API[\"mv\"]}\n   */\n  function mfsMv(_x, _x2) {\n    return _mfsMv.apply(this, arguments);\n  }\n\n  function _mfsMv() {\n    _mfsMv = _asyncToGenerator(function* (from, to, options = {}) {\n      /** @type {DefaultOptions} */\n      const opts = mergeOptions(defaultOptions, options);\n      yield cp(context)(from, to, opts);\n      yield rm(context)(from, { ...opts,\n        recursive: true\n      });\n    });\n    return _mfsMv.apply(this, arguments);\n  }\n\n  return withTimeoutOption(mfsMv);\n};","map":{"version":3,"sources":["/Users/sydneybailey/Internship/contract-testing/node_modules/ipfs-core/src/components/files/mv.js"],"names":["cp","require","rm","mergeOptions","bind","ignoreUndefined","withTimeoutOption","defaultOptions","parents","flush","cidVersion","hashAlg","shardSplitThreshold","module","exports","context","mfsMv","from","to","options","opts","recursive"],"mappings":"AAAA;;;;AAEA,MAAMA,EAAE,GAAGC,OAAO,CAAC,MAAD,CAAlB;;AACA,MAAMC,EAAE,GAAGD,OAAO,CAAC,MAAD,CAAlB;;AACA,MAAME,YAAY,GAAGF,OAAO,CAAC,eAAD,CAAP,CAAyBG,IAAzB,CAA8B;AAAEC,EAAAA,eAAe,EAAE;AAAnB,CAA9B,CAArB;;AACA,MAAMC,iBAAiB,GAAGL,OAAO,CAAC,yCAAD,CAAjC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AACA,MAAMM,cAAc,GAAG;AACrBC,EAAAA,OAAO,EAAE,KADY;AAErBC,EAAAA,KAAK,EAAE,IAFc;AAGrBC,EAAAA,UAAU,EAAE,CAHS;AAIrBC,EAAAA,OAAO,EAAE,UAJY;AAKrBC,EAAAA,mBAAmB,EAAE;AALA,CAAvB;AAQA;AACA;AACA;;AACAC,MAAM,CAACC,OAAP,GAAkBC,OAAD,IAAa;AAC5B;AACF;AACA;AAH8B,WAIbC,KAJa;AAAA;AAAA;;AAAA;AAAA,+BAI5B,WAAsBC,IAAtB,EAA4BC,EAA5B,EAAgCC,OAAO,GAAG,EAA1C,EAA8C;AAC5C;AACA,YAAMC,IAAI,GAAGjB,YAAY,CAACI,cAAD,EAAiBY,OAAjB,CAAzB;AAEA,YAAMnB,EAAE,CAACe,OAAD,CAAF,CAAYE,IAAZ,EAAkBC,EAAlB,EAAsBE,IAAtB,CAAN;AACA,YAAMlB,EAAE,CAACa,OAAD,CAAF,CAAYE,IAAZ,EAAkB,EACtB,GAAGG,IADmB;AAEtBC,QAAAA,SAAS,EAAE;AAFW,OAAlB,CAAN;AAID,KAb2B;AAAA;AAAA;;AAe5B,SAAOf,iBAAiB,CAACU,KAAD,CAAxB;AACD,CAhBD","sourcesContent":["'use strict'\n\nconst cp = require('./cp')\nconst rm = require('./rm')\nconst mergeOptions = require('merge-options').bind({ ignoreUndefined: true })\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\n\n/**\n * @typedef {import('multiformats/cid').CIDVersion} CIDVersion\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {object} DefaultOptions\n * @property {boolean} parents\n * @property {boolean} flush\n * @property {CIDVersion} cidVersion\n * @property {string} hashAlg\n * @property {number} shardSplitThreshold\n * @property {AbortSignal} [signal]\n * @property {number} [timeout]\n */\n\n/**\n * @type {DefaultOptions}\n */\nconst defaultOptions = {\n  parents: false,\n  flush: true,\n  cidVersion: 0,\n  hashAlg: 'sha2-256',\n  shardSplitThreshold: 1000\n}\n\n/**\n * @param {MfsContext} context\n */\nmodule.exports = (context) => {\n  /**\n   * @type {import('ipfs-core-types/src/files').API[\"mv\"]}\n   */\n  async function mfsMv (from, to, options = {}) {\n    /** @type {DefaultOptions} */\n    const opts = mergeOptions(defaultOptions, options)\n\n    await cp(context)(from, to, opts)\n    await rm(context)(from, {\n      ...opts,\n      recursive: true\n    })\n  }\n\n  return withTimeoutOption(mfsMv)\n}\n"]},"metadata":{},"sourceType":"script"}