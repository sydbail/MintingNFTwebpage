{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nconst {\n  Multiaddr\n} = require('multiaddr');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bootstrap').API<HTTPClientExtraOptions>} BootstrapAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {BootstrapAPI[\"rm\"]}\n   */\n  function rm(_x) {\n    return _rm.apply(this, arguments);\n  }\n\n  function _rm() {\n    _rm = _asyncToGenerator(function* (addr, options = {}) {\n      const res = yield api.post('bootstrap/rm', {\n        timeout: options.timeout,\n        signal: options.signal,\n        searchParams: toUrlSearchParams({\n          arg: addr,\n          ...options\n        }),\n        headers: options.headers\n      });\n      const {\n        Peers\n      } = yield res.json();\n      return {\n        Peers: Peers.map((\n        /** @type {string} */\n        ma) => new Multiaddr(ma))\n      };\n    });\n    return _rm.apply(this, arguments);\n  }\n\n  return rm;\n});","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Demo/node_modules/ipfs-http-client/src/bootstrap/rm.js"],"names":["configure","require","toUrlSearchParams","Multiaddr","module","exports","api","rm","addr","options","res","post","timeout","signal","searchParams","arg","headers","Peers","json","map","ma"],"mappings":"AAAA;;;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAMC,iBAAiB,GAAGD,OAAO,CAAC,6BAAD,CAAjC;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAgBF,OAAO,CAAC,WAAD,CAA7B;AAEA;AACA;AACA;AACA;;;AAEAG,MAAM,CAACC,OAAP,GAAiBL,SAAS,CAACM,GAAG,IAAI;AAChC;AACF;AACA;AAHkC,WAIjBC,EAJiB;AAAA;AAAA;;AAAA;AAAA,4BAIhC,WAAmBC,IAAnB,EAAyBC,OAAO,GAAG,EAAnC,EAAuC;AACrC,YAAMC,GAAG,SAASJ,GAAG,CAACK,IAAJ,CAAS,cAAT,EAAyB;AACzCC,QAAAA,OAAO,EAAEH,OAAO,CAACG,OADwB;AAEzCC,QAAAA,MAAM,EAAEJ,OAAO,CAACI,MAFyB;AAGzCC,QAAAA,YAAY,EAAEZ,iBAAiB,CAAC;AAC9Ba,UAAAA,GAAG,EAAEP,IADyB;AAE9B,aAAGC;AAF2B,SAAD,CAHU;AAOzCO,QAAAA,OAAO,EAAEP,OAAO,CAACO;AAPwB,OAAzB,CAAlB;AAUA,YAAM;AAAEC,QAAAA;AAAF,gBAAkBP,GAAG,CAACQ,IAAJ,EAAxB;AAEA,aAAO;AAAED,QAAAA,KAAK,EAAEA,KAAK,CAACE,GAAN,CAAU;AAAC;AAAsBC,QAAAA,EAAvB,KAA8B,IAAIjB,SAAJ,CAAciB,EAAd,CAAxC;AAAT,OAAP;AACD,KAlB+B;AAAA;AAAA;;AAoBhC,SAAOb,EAAP;AACD,CArByB,CAA1B","sourcesContent":["'use strict'\n\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst { Multiaddr } = require('multiaddr')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bootstrap').API<HTTPClientExtraOptions>} BootstrapAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {BootstrapAPI[\"rm\"]}\n   */\n  async function rm (addr, options = {}) {\n    const res = await api.post('bootstrap/rm', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: addr,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    const { Peers } = await res.json()\n\n    return { Peers: Peers.map((/** @type {string} */ ma) => new Multiaddr(ma)) }\n  }\n\n  return rm\n})\n"]},"metadata":{},"sourceType":"script"}