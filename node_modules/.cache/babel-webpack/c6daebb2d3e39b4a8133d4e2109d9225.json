{"ast":null,"code":"import { Token, Type } from './token.js';\nimport { assertEnoughData, decodeErrPrefix } from './common.js';\nimport * as uint from './0uint.js';\nimport { encodeBytes } from './2bytes.js';\nimport { toString } from './byte-utils.js';\n\nfunction toToken(data, pos, prefix, length) {\n  const totLength = prefix + length;\n  assertEnoughData(data, pos, totLength);\n  return new Token(Type.string, toString(data, pos + prefix, pos + totLength), totLength);\n}\n\nexport function decodeStringCompact(data, pos, minor, _options) {\n  return toToken(data, pos, 1, minor);\n}\nexport function decodeString8(data, pos, _minor, options) {\n  return toToken(data, pos, 2, uint.readUint8(data, pos + 1, options));\n}\nexport function decodeString16(data, pos, _minor, options) {\n  return toToken(data, pos, 3, uint.readUint16(data, pos + 1, options));\n}\nexport function decodeString32(data, pos, _minor, options) {\n  return toToken(data, pos, 5, uint.readUint32(data, pos + 1, options));\n}\nexport function decodeString64(data, pos, _minor, options) {\n  const l = uint.readUint64(data, pos + 1, options);\n\n  if (typeof l === 'bigint') {\n    throw new Error(`${decodeErrPrefix} 64-bit integer string lengths not supported`);\n  }\n\n  return toToken(data, pos, 9, l);\n}\nexport const encodeString = encodeBytes;","map":null,"metadata":{},"sourceType":"module"}