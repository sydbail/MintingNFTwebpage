{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/Dapp/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/Dapp/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nconst {\n  concat: uint8ArrayConcat\n} = require('uint8arrays/concat');\n/**\n * Takes an (async) iterable that yields buffer-like-objects and concats them\n * into one buffer\n * @param {AsyncIterable<Uint8Array>|Iterable<Uint8Array>} stream\n */\n\n\nfunction toBuffer(_x) {\n  return _toBuffer.apply(this, arguments);\n}\n\nfunction _toBuffer() {\n  _toBuffer = _asyncToGenerator(function* (stream) {\n    let buffer = new Uint8Array(0);\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n\n    var _iteratorError;\n\n    try {\n      for (var _iterator = _asyncIterator(stream), _step, _value; _step = yield _iterator.next(), _iteratorNormalCompletion = _step.done, _value = yield _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n        const buf = _value;\n        buffer = uint8ArrayConcat([buffer, buf], buffer.length + buf.length);\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          yield _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return buffer;\n  });\n  return _toBuffer.apply(this, arguments);\n}\n\nmodule.exports = toBuffer;","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Dapp/node_modules/it-to-buffer/index.js"],"names":["concat","uint8ArrayConcat","require","toBuffer","stream","buffer","Uint8Array","buf","length","module","exports"],"mappings":"AAAA;;;;;;AAEA,MAAM;AAAEA,EAAAA,MAAM,EAAEC;AAAV,IAA+BC,OAAO,CAAC,oBAAD,CAA5C;AAEA;AACA;AACA;AACA;AACA;;;SACeC,Q;;;;;gCAAf,WAAyBC,MAAzB,EAAiC;AAC/B,QAAIC,MAAM,GAAG,IAAIC,UAAJ,CAAe,CAAf,CAAb;AAD+B;AAAA;;AAAA;;AAAA;AAG/B,0CAAwBF,MAAxB,oLAAgC;AAAA,cAAfG,GAAe;AAC9BF,QAAAA,MAAM,GAAGJ,gBAAgB,CAAC,CAACI,MAAD,EAASE,GAAT,CAAD,EAAgBF,MAAM,CAACG,MAAP,GAAgBD,GAAG,CAACC,MAApC,CAAzB;AACD;AAL8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAO/B,WAAOH,MAAP;AACD,G;;;;AAEDI,MAAM,CAACC,OAAP,GAAiBP,QAAjB","sourcesContent":["'use strict'\n\nconst { concat: uint8ArrayConcat } = require('uint8arrays/concat')\n\n/**\n * Takes an (async) iterable that yields buffer-like-objects and concats them\n * into one buffer\n * @param {AsyncIterable<Uint8Array>|Iterable<Uint8Array>} stream\n */\nasync function toBuffer (stream) {\n  let buffer = new Uint8Array(0)\n\n  for await (const buf of stream) {\n    buffer = uint8ArrayConcat([buffer, buf], buffer.length + buf.length)\n  }\n\n  return buffer\n}\n\nmodule.exports = toBuffer\n"]},"metadata":{},"sourceType":"script"}