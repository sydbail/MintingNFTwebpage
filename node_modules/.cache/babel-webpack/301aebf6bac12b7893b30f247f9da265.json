{"ast":null,"code":"/* eslint-env browser */\n'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst TLRU = require('../utils/tlru');\n\nconst {\n  default: PQueue\n} = require('p-queue');\n\nconst HTTP = require('ipfs-utils/src/http'); // Avoid sending multiple queries for the same hostname by caching results\n\n\nconst cache = new TLRU(1000); // TODO: /api/v0/dns does not return TTL yet: https://github.com/ipfs/go-ipfs/issues/5884\n// However we know browsers themselves cache DNS records for at least 1 minute,\n// which acts a provisional default ttl: https://stackoverflow.com/a/36917902/11518426\n\nconst ttl = 60 * 1000; // browsers limit concurrent connections per host,\n// we don't want preload calls to exhaust the limit (~6)\n\nconst httpQueue = new PQueue({\n  concurrency: 4\n});\n/**\n * @param {{ Path: string, Message: string }} response\n */\n\nconst ipfsPath = response => {\n  if (response.Path) return response.Path;\n  throw new Error(response.Message);\n};\n/**\n * @param {string} fqdn\n * @param {object} opts\n */\n\n\nmodule.exports = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (fqdn, opts) {\n    // eslint-disable-line require-await\n\n    /**\n     * @param {string} fqdn\n     * @param {object} opts\n     * @param {boolean} [opts.nocache]\n     */\n    const resolveDnslink = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(function* (fqdn, opts = {}) {\n        // @ts-ignore - URLSearchParams does not take boolean options, only strings\n        const searchParams = new URLSearchParams(opts);\n        searchParams.set('arg', fqdn); // try cache first\n\n        const query = searchParams.toString();\n\n        if (!opts.nocache && cache.has(query)) {\n          const response = cache.get(query);\n          return ipfsPath(response);\n        } // fallback to delegated DNS resolver\n\n\n        const response = yield httpQueue.add( /*#__PURE__*/_asyncToGenerator(function* () {\n          // Delegated HTTP resolver sending DNSLink queries to ipfs.io\n          // TODO: replace hardcoded host with configurable DNS over HTTPS: https://github.com/ipfs/js-ipfs/issues/2212\n          const res = yield HTTP.get('https://ipfs.io/api/v0/dns', {\n            searchParams\n          });\n          const query = new URL(res.url).search.slice(1);\n          const json = yield res.json();\n          cache.set(query, json, ttl);\n          return json;\n        }));\n        return ipfsPath(response);\n      });\n\n      return function resolveDnslink(_x3) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    return resolveDnslink(fqdn, opts);\n  });\n\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":null,"metadata":{},"sourceType":"script"}