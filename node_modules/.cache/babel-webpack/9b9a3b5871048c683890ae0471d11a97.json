{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst {\n  Multiaddr\n} = require('multiaddr');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/swarm').API<HTTPClientExtraOptions>} SwarmAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {SwarmAPI[\"peers\"]}\n   */\n  function peers() {\n    return _peers.apply(this, arguments);\n  }\n\n  function _peers() {\n    _peers = _asyncToGenerator(function* (options = {}) {\n      const res = yield api.post('swarm/peers', {\n        timeout: options.timeout,\n        signal: options.signal,\n        searchParams: toUrlSearchParams(options),\n        headers: options.headers\n      });\n      /** @type {{ Peers: { Peer: string, Addr: string, Muxer?: string, Latency?: string, Streams?: string[], Direction?: 0 | 1 }[] }} */\n\n      const {\n        Peers\n      } = yield res.json();\n      return (Peers || []).map(peer => {\n        return {\n          addr: new Multiaddr(peer.Addr),\n          peer: peer.Peer,\n          muxer: peer.Muxer,\n          latency: peer.Latency,\n          streams: peer.Streams,\n          direction: peer.Direction == null ? undefined : peer.Direction === 0 ? 'inbound' : 'outbound'\n        };\n      });\n    });\n    return _peers.apply(this, arguments);\n  }\n\n  return peers;\n});","map":null,"metadata":{},"sourceType":"script"}