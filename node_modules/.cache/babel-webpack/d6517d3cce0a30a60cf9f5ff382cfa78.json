{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst configure = require('../../lib/configure');\n\nconst toUrlSearchParams = require('../../lib/to-url-search-params');\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object/patch').API<HTTPClientExtraOptions>} ObjectPatchAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {ObjectPatchAPI[\"addLink\"]}\n   */\n  function addLink(_x, _x2) {\n    return _addLink.apply(this, arguments);\n  }\n\n  function _addLink() {\n    _addLink = _asyncToGenerator(function* (cid, dLink, options = {}) {\n      const res = yield api.post('object/patch/add-link', {\n        timeout: options.timeout,\n        signal: options.signal,\n        searchParams: toUrlSearchParams({\n          arg: [`${cid}`, // @ts-ignore loose types\n          dLink.Name || dLink.name || '', // @ts-ignore loose types\n          (dLink.Hash || dLink.cid || '').toString() || null],\n          ...options\n        }),\n        headers: options.headers\n      });\n      const {\n        Hash\n      } = yield res.json();\n      return CID.parse(Hash);\n    });\n    return _addLink.apply(this, arguments);\n  }\n\n  return addLink;\n});","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Demo/node_modules/ipfs-http-client/src/object/patch/add-link.js"],"names":["CID","require","configure","toUrlSearchParams","module","exports","api","addLink","cid","dLink","options","res","post","timeout","signal","searchParams","arg","Name","name","Hash","toString","headers","json","parse"],"mappings":"AAAA;;;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAUC,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,qBAAD,CAAzB;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,gCAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AAEAG,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAACI,GAAG,IAAI;AAChC;AACF;AACA;AAHkC,WAIjBC,OAJiB;AAAA;AAAA;;AAAA;AAAA,iCAIhC,WAAwBC,GAAxB,EAA6BC,KAA7B,EAAoCC,OAAO,GAAG,EAA9C,EAAkD;AAChD,YAAMC,GAAG,SAASL,GAAG,CAACM,IAAJ,CAAS,uBAAT,EAAkC;AAClDC,QAAAA,OAAO,EAAEH,OAAO,CAACG,OADiC;AAElDC,QAAAA,MAAM,EAAEJ,OAAO,CAACI,MAFkC;AAGlDC,QAAAA,YAAY,EAAEZ,iBAAiB,CAAC;AAC9Ba,UAAAA,GAAG,EAAE,CACF,GAAER,GAAI,EADJ,EAEH;AACAC,UAAAA,KAAK,CAACQ,IAAN,IAAcR,KAAK,CAACS,IAApB,IAA4B,EAHzB,EAIH;AACA,WAACT,KAAK,CAACU,IAAN,IAAcV,KAAK,CAACD,GAApB,IAA2B,EAA5B,EAAgCY,QAAhC,MAA8C,IAL3C,CADyB;AAQ9B,aAAGV;AAR2B,SAAD,CAHmB;AAalDW,QAAAA,OAAO,EAAEX,OAAO,CAACW;AAbiC,OAAlC,CAAlB;AAgBA,YAAM;AAAEF,QAAAA;AAAF,gBAAiBR,GAAG,CAACW,IAAJ,EAAvB;AAEA,aAAOtB,GAAG,CAACuB,KAAJ,CAAUJ,IAAV,CAAP;AACD,KAxB+B;AAAA;AAAA;;AA0BhC,SAAOZ,OAAP;AACD,CA3ByB,CAA1B","sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst configure = require('../../lib/configure')\nconst toUrlSearchParams = require('../../lib/to-url-search-params')\n\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object/patch').API<HTTPClientExtraOptions>} ObjectPatchAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {ObjectPatchAPI[\"addLink\"]}\n   */\n  async function addLink (cid, dLink, options = {}) {\n    const res = await api.post('object/patch/add-link', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: [\n          `${cid}`,\n          // @ts-ignore loose types\n          dLink.Name || dLink.name || '',\n          // @ts-ignore loose types\n          (dLink.Hash || dLink.cid || '').toString() || null\n        ],\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    const { Hash } = await res.json()\n\n    return CID.parse(Hash)\n  }\n\n  return addLink\n})\n"]},"metadata":{},"sourceType":"script"}