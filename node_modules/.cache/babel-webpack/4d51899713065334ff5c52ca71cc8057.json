{"ast":null,"code":"import _asyncToGenerator from \"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _awaitAsyncGenerator from \"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator\";\nimport _wrapAsyncGenerator from \"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator\";\nimport _asyncIterator from \"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/esm/asyncIterator\";\nimport { UnixFS } from 'ipfs-unixfs';\nimport persist from '../../utils/persist.js';\nimport * as dagPb from '@ipld/dag-pb';\nimport * as raw from 'multiformats/codecs/raw';\n\nfunction bufferImporter(_x, _x2, _x3) {\n  return _bufferImporter.apply(this, arguments);\n}\n\nfunction _bufferImporter() {\n  _bufferImporter = _wrapAsyncGenerator(function* (file, block, options) {\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n\n    var _iteratorError;\n\n    try {\n      for (var _iterator = _asyncIterator(file.content), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n        let buffer = _value;\n        yield /*#__PURE__*/_asyncToGenerator(function* () {\n          options.progress(buffer.length, file.path);\n          let unixfs;\n          const opts = {\n            codec: dagPb,\n            cidVersion: options.cidVersion,\n            hasher: options.hasher,\n            onlyHash: options.onlyHash\n          };\n\n          if (options.rawLeaves) {\n            opts.codec = raw;\n            opts.cidVersion = 1;\n          } else {\n            unixfs = new UnixFS({\n              type: options.leafType,\n              data: buffer,\n              mtime: file.mtime,\n              mode: file.mode\n            });\n            buffer = dagPb.encode({\n              Data: unixfs.marshal(),\n              Links: []\n            });\n          }\n\n          return {\n            cid: yield persist(buffer, block, opts),\n            unixfs,\n            size: buffer.length\n          };\n        });\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          yield _awaitAsyncGenerator(_iterator.return());\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  });\n  return _bufferImporter.apply(this, arguments);\n}\n\nexport default bufferImporter;","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Demo/node_modules/ipfs-unixfs-importer/esm/src/dag-builder/file/buffer-importer.js"],"names":["UnixFS","persist","dagPb","raw","bufferImporter","file","block","options","content","buffer","progress","length","path","unixfs","opts","codec","cidVersion","hasher","onlyHash","rawLeaves","type","leafType","data","mtime","mode","encode","Data","marshal","Links","cid","size"],"mappings":";;;;AAAA,SAASA,MAAT,QAAuB,aAAvB;AACA,OAAOC,OAAP,MAAoB,wBAApB;AACA,OAAO,KAAKC,KAAZ,MAAuB,cAAvB;AACA,OAAO,KAAKC,GAAZ,MAAqB,yBAArB;;SACgBC,c;;;;;wCAAhB,WAA+BC,IAA/B,EAAqCC,KAArC,EAA4CC,OAA5C,EAAqD;AAAA;AAAA;;AAAA;;AAAA;AACnD,0CAAyBF,IAAI,CAACG,OAA9B,gOAAuC;AAAA,YAAxBC,MAAwB;AACrC,6CAAM,aAAY;AAChBF,UAAAA,OAAO,CAACG,QAAR,CAAiBD,MAAM,CAACE,MAAxB,EAAgCN,IAAI,CAACO,IAArC;AACA,cAAIC,MAAJ;AACA,gBAAMC,IAAI,GAAG;AACXC,YAAAA,KAAK,EAAEb,KADI;AAEXc,YAAAA,UAAU,EAAET,OAAO,CAACS,UAFT;AAGXC,YAAAA,MAAM,EAAEV,OAAO,CAACU,MAHL;AAIXC,YAAAA,QAAQ,EAAEX,OAAO,CAACW;AAJP,WAAb;;AAMA,cAAIX,OAAO,CAACY,SAAZ,EAAuB;AACrBL,YAAAA,IAAI,CAACC,KAAL,GAAaZ,GAAb;AACAW,YAAAA,IAAI,CAACE,UAAL,GAAkB,CAAlB;AACD,WAHD,MAGO;AACLH,YAAAA,MAAM,GAAG,IAAIb,MAAJ,CAAW;AAClBoB,cAAAA,IAAI,EAAEb,OAAO,CAACc,QADI;AAElBC,cAAAA,IAAI,EAAEb,MAFY;AAGlBc,cAAAA,KAAK,EAAElB,IAAI,CAACkB,KAHM;AAIlBC,cAAAA,IAAI,EAAEnB,IAAI,CAACmB;AAJO,aAAX,CAAT;AAMAf,YAAAA,MAAM,GAAGP,KAAK,CAACuB,MAAN,CAAa;AACpBC,cAAAA,IAAI,EAAEb,MAAM,CAACc,OAAP,EADc;AAEpBC,cAAAA,KAAK,EAAE;AAFa,aAAb,CAAT;AAID;;AACD,iBAAO;AACLC,YAAAA,GAAG,QAAQ5B,OAAO,CAACQ,MAAD,EAASH,KAAT,EAAgBQ,IAAhB,CADb;AAELD,YAAAA,MAFK;AAGLiB,YAAAA,IAAI,EAAErB,MAAM,CAACE;AAHR,WAAP;AAKD,SA7BD;AA8BD;AAhCkD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiCpD,G;;;;AACD,eAAeP,cAAf","sourcesContent":["import { UnixFS } from 'ipfs-unixfs';\nimport persist from '../../utils/persist.js';\nimport * as dagPb from '@ipld/dag-pb';\nimport * as raw from 'multiformats/codecs/raw';\nasync function* bufferImporter(file, block, options) {\n  for await (let buffer of file.content) {\n    yield async () => {\n      options.progress(buffer.length, file.path);\n      let unixfs;\n      const opts = {\n        codec: dagPb,\n        cidVersion: options.cidVersion,\n        hasher: options.hasher,\n        onlyHash: options.onlyHash\n      };\n      if (options.rawLeaves) {\n        opts.codec = raw;\n        opts.cidVersion = 1;\n      } else {\n        unixfs = new UnixFS({\n          type: options.leafType,\n          data: buffer,\n          mtime: file.mtime,\n          mode: file.mode\n        });\n        buffer = dagPb.encode({\n          Data: unixfs.marshal(),\n          Links: []\n        });\n      }\n      return {\n        cid: await persist(buffer, block, opts),\n        unixfs,\n        size: buffer.length\n      };\n    };\n  }\n}\nexport default bufferImporter;"]},"metadata":{},"sourceType":"module"}