{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nconst {\n  fromString: uint8ArrayFromString\n} = require('uint8arrays/from-string');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object').API<HTTPClientExtraOptions>} ObjectAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {ObjectAPI[\"get\"]}\n   */\n  function get(_x) {\n    return _get.apply(this, arguments);\n  }\n\n  function _get() {\n    _get = _asyncToGenerator(function* (cid, options = {}) {\n      const res = yield api.post('object/get', {\n        timeout: options.timeout,\n        signal: options.signal,\n        searchParams: toUrlSearchParams({\n          arg: `${cid instanceof Uint8Array ? CID.decode(cid) : cid}`,\n          dataEncoding: 'base64',\n          ...options\n        }),\n        headers: options.headers\n      });\n      const data = yield res.json();\n      return {\n        Data: uint8ArrayFromString(data.Data, 'base64pad'),\n        Links: (data.Links || []).map((\n        /** @type {any} */\n        link) => ({\n          Name: link.Name,\n          Hash: CID.parse(link.Hash),\n          Tsize: link.Size\n        }))\n      };\n    });\n    return _get.apply(this, arguments);\n  }\n\n  return get;\n});","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Demo/node_modules/ipfs-http-client/src/object/get.js"],"names":["CID","require","configure","toUrlSearchParams","fromString","uint8ArrayFromString","module","exports","api","get","cid","options","res","post","timeout","signal","searchParams","arg","Uint8Array","decode","dataEncoding","headers","data","json","Data","Links","map","link","Name","Hash","parse","Tsize","Size"],"mappings":"AAAA;;;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAUC,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,6BAAD,CAAjC;;AACA,MAAM;AAAEG,EAAAA,UAAU,EAAEC;AAAd,IAAuCJ,OAAO,CAAC,yBAAD,CAApD;AAEA;AACA;AACA;AACA;;;AAEAK,MAAM,CAACC,OAAP,GAAiBL,SAAS,CAACM,GAAG,IAAI;AAChC;AACF;AACA;AAHkC,WAIjBC,GAJiB;AAAA;AAAA;;AAAA;AAAA,6BAIhC,WAAoBC,GAApB,EAAyBC,OAAO,GAAG,EAAnC,EAAuC;AACrC,YAAMC,GAAG,SAASJ,GAAG,CAACK,IAAJ,CAAS,YAAT,EAAuB;AACvCC,QAAAA,OAAO,EAAEH,OAAO,CAACG,OADsB;AAEvCC,QAAAA,MAAM,EAAEJ,OAAO,CAACI,MAFuB;AAGvCC,QAAAA,YAAY,EAAEb,iBAAiB,CAAC;AAC9Bc,UAAAA,GAAG,EAAG,GAAEP,GAAG,YAAYQ,UAAf,GAA4BlB,GAAG,CAACmB,MAAJ,CAAWT,GAAX,CAA5B,GAA8CA,GAAI,EAD5B;AAE9BU,UAAAA,YAAY,EAAE,QAFgB;AAG9B,aAAGT;AAH2B,SAAD,CAHQ;AAQvCU,QAAAA,OAAO,EAAEV,OAAO,CAACU;AARsB,OAAvB,CAAlB;AAUA,YAAMC,IAAI,SAASV,GAAG,CAACW,IAAJ,EAAnB;AAEA,aAAO;AACLC,QAAAA,IAAI,EAAEnB,oBAAoB,CAACiB,IAAI,CAACE,IAAN,EAAY,WAAZ,CADrB;AAELC,QAAAA,KAAK,EAAE,CAACH,IAAI,CAACG,KAAL,IAAc,EAAf,EAAmBC,GAAnB,CAAuB;AAAC;AAAmBC,QAAAA,IAApB,MAA8B;AAC1DC,UAAAA,IAAI,EAAED,IAAI,CAACC,IAD+C;AAE1DC,UAAAA,IAAI,EAAE7B,GAAG,CAAC8B,KAAJ,CAAUH,IAAI,CAACE,IAAf,CAFoD;AAG1DE,UAAAA,KAAK,EAAEJ,IAAI,CAACK;AAH8C,SAA9B,CAAvB;AAFF,OAAP;AAQD,KAzB+B;AAAA;AAAA;;AA0BhC,SAAOvB,GAAP;AACD,CA3ByB,CAA1B","sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst { fromString: uint8ArrayFromString } = require('uint8arrays/from-string')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object').API<HTTPClientExtraOptions>} ObjectAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {ObjectAPI[\"get\"]}\n   */\n  async function get (cid, options = {}) {\n    const res = await api.post('object/get', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${cid instanceof Uint8Array ? CID.decode(cid) : cid}`,\n        dataEncoding: 'base64',\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return {\n      Data: uint8ArrayFromString(data.Data, 'base64pad'),\n      Links: (data.Links || []).map((/** @type {any} */ link) => ({\n        Name: link.Name,\n        Hash: CID.parse(link.Hash),\n        Tsize: link.Size\n      }))\n    }\n  }\n  return get\n})\n"]},"metadata":{},"sourceType":"script"}