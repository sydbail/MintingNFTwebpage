{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst {\n  UnixFS\n} = require('ipfs-unixfs');\n\nconst dagPb = require('@ipld/dag-pb');\n\nconst {\n  CID\n} = require('multiformats/cid');\n/**\n * @typedef {import('ipfs-unixfs').MtimeLike} MtimeLike\n * @typedef {import('multiformats/cid').CIDVersion} CIDVersion\n * @typedef {import('../').MfsContext} MfsContext\n */\n\n/**\n * @param {MfsContext} context\n * @param {'file' | 'directory'} type\n * @param {object} options\n * @param {string} options.hashAlg\n * @param {CIDVersion} options.cidVersion\n * @param {boolean} options.flush\n * @param {MtimeLike} [options.mtime]\n * @param {number} [options.mode]\n */\n\n\nconst createNode = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (context, type, options) {\n    const metadata = new UnixFS({\n      type,\n      mode: options.mode,\n      // @ts-ignore TODO: restore hrtime support to ipfs-unixfs constructor - it's in the code, just not the signature\n      mtime: options.mtime\n    }); // Persist the new parent PBNode\n\n    const hasher = yield context.hashers.getHasher(options.hashAlg);\n    const node = {\n      Data: metadata.marshal(),\n      Links: []\n    };\n    const buf = dagPb.encode(node);\n    const hash = yield hasher.digest(buf);\n    const cid = CID.create(options.cidVersion, dagPb.code, hash);\n\n    if (options.flush) {\n      yield context.repo.blocks.put(cid, buf);\n    }\n\n    return {\n      cid,\n      node\n    };\n  });\n\n  return function createNode(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nmodule.exports = createNode;","map":{"version":3,"sources":["/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/ipfs-core/src/components/files/utils/create-node.js"],"names":["UnixFS","require","dagPb","CID","createNode","context","type","options","metadata","mode","mtime","hasher","hashers","getHasher","hashAlg","node","Data","marshal","Links","buf","encode","hash","digest","cid","create","cidVersion","code","flush","repo","blocks","put","module","exports"],"mappings":"AAAA;;;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAaC,OAAO,CAAC,aAAD,CAA1B;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,cAAD,CAArB;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAUF,OAAO,CAAC,kBAAD,CAAvB;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMG,UAAU;AAAA,+BAAG,WAAOC,OAAP,EAAgBC,IAAhB,EAAsBC,OAAtB,EAAkC;AACnD,UAAMC,QAAQ,GAAG,IAAIR,MAAJ,CAAW;AAC1BM,MAAAA,IAD0B;AAE1BG,MAAAA,IAAI,EAAEF,OAAO,CAACE,IAFY;AAG1B;AACAC,MAAAA,KAAK,EAAEH,OAAO,CAACG;AAJW,KAAX,CAAjB,CADmD,CAQnD;;AACA,UAAMC,MAAM,SAASN,OAAO,CAACO,OAAR,CAAgBC,SAAhB,CAA0BN,OAAO,CAACO,OAAlC,CAArB;AACA,UAAMC,IAAI,GAAG;AACXC,MAAAA,IAAI,EAAER,QAAQ,CAACS,OAAT,EADK;AAEXC,MAAAA,KAAK,EAAE;AAFI,KAAb;AAIA,UAAMC,GAAG,GAAGjB,KAAK,CAACkB,MAAN,CAAaL,IAAb,CAAZ;AACA,UAAMM,IAAI,SAASV,MAAM,CAACW,MAAP,CAAcH,GAAd,CAAnB;AACA,UAAMI,GAAG,GAAGpB,GAAG,CAACqB,MAAJ,CAAWjB,OAAO,CAACkB,UAAnB,EAA+BvB,KAAK,CAACwB,IAArC,EAA2CL,IAA3C,CAAZ;;AAEA,QAAId,OAAO,CAACoB,KAAZ,EAAmB;AACjB,YAAMtB,OAAO,CAACuB,IAAR,CAAaC,MAAb,CAAoBC,GAApB,CAAwBP,GAAxB,EAA6BJ,GAA7B,CAAN;AACD;;AAED,WAAO;AACLI,MAAAA,GADK;AAELR,MAAAA;AAFK,KAAP;AAID,GA1Be;;AAAA,kBAAVX,UAAU;AAAA;AAAA;AAAA,GAAhB;;AA4BA2B,MAAM,CAACC,OAAP,GAAiB5B,UAAjB","sourcesContent":["'use strict'\n\nconst { UnixFS } = require('ipfs-unixfs')\nconst dagPb = require('@ipld/dag-pb')\nconst { CID } = require('multiformats/cid')\n\n/**\n * @typedef {import('ipfs-unixfs').MtimeLike} MtimeLike\n * @typedef {import('multiformats/cid').CIDVersion} CIDVersion\n * @typedef {import('../').MfsContext} MfsContext\n */\n\n/**\n * @param {MfsContext} context\n * @param {'file' | 'directory'} type\n * @param {object} options\n * @param {string} options.hashAlg\n * @param {CIDVersion} options.cidVersion\n * @param {boolean} options.flush\n * @param {MtimeLike} [options.mtime]\n * @param {number} [options.mode]\n */\nconst createNode = async (context, type, options) => {\n  const metadata = new UnixFS({\n    type,\n    mode: options.mode,\n    // @ts-ignore TODO: restore hrtime support to ipfs-unixfs constructor - it's in the code, just not the signature\n    mtime: options.mtime\n  })\n\n  // Persist the new parent PBNode\n  const hasher = await context.hashers.getHasher(options.hashAlg)\n  const node = {\n    Data: metadata.marshal(),\n    Links: []\n  }\n  const buf = dagPb.encode(node)\n  const hash = await hasher.digest(buf)\n  const cid = CID.create(options.cidVersion, dagPb.code, hash)\n\n  if (options.flush) {\n    await context.repo.blocks.put(cid, buf)\n  }\n\n  return {\n    cid,\n    node\n  }\n}\n\nmodule.exports = createNode\n"]},"metadata":{},"sourceType":"script"}