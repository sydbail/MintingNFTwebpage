{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.buildCompareFunctionArbitrary = void 0;\n\nconst TextEscaper_1 = require(\"../../../check/arbitrary/helpers/TextEscaper\");\n\nconst symbols_1 = require(\"../../../check/symbols\");\n\nconst hash_1 = require(\"../../../utils/hash\");\n\nconst stringify_1 = require(\"../../../utils/stringify\");\n\nconst integer_1 = require(\"../../integer\");\n\nconst tuple_1 = require(\"../../tuple\");\n\nfunction buildCompareFunctionArbitrary(cmp) {\n  return tuple_1.tuple(integer_1.integer().noShrink(), integer_1.integer(1, 0xffffffff).noShrink()).map(([seed, hashEnvSize]) => {\n    const producer = () => {\n      const recorded = {};\n\n      const f = (a, b) => {\n        const reprA = stringify_1.stringify(a);\n        const reprB = stringify_1.stringify(b);\n        const hA = hash_1.hash(`${seed}${reprA}`) % hashEnvSize;\n        const hB = hash_1.hash(`${seed}${reprB}`) % hashEnvSize;\n        const val = cmp(hA, hB);\n        recorded[`[${reprA},${reprB}]`] = val;\n        return val;\n      };\n\n      return Object.assign(f, {\n        toString: () => {\n          const seenValues = Object.keys(recorded).sort().map(k => `${k} => ${stringify_1.stringify(recorded[k])}`).map(line => `/* ${TextEscaper_1.escapeForMultilineComments(line)} */`);\n          return `function(a, b) {\n  // With hash and stringify coming from fast-check${seenValues.length !== 0 ? `\\n  ${seenValues.join('\\n  ')}` : ''}\n  const cmp = ${cmp};\n  const hA = hash('${seed}' + stringify(a)) % ${hashEnvSize};\n  const hB = hash('${seed}' + stringify(b)) % ${hashEnvSize};\n  return cmp(hA, hB);\n}`;\n        },\n        [symbols_1.cloneMethod]: producer\n      });\n    };\n\n    return producer();\n  });\n}\n\nexports.buildCompareFunctionArbitrary = buildCompareFunctionArbitrary;","map":null,"metadata":{},"sourceType":"script"}