{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst errcode = require('err-code');\n\nconst {\n  pipe\n} = require('it-pipe');\n\nconst lp = require('it-length-prefixed');\n\nconst pTimeout = require('p-timeout');\n\nconst {\n  consume\n} = require('streaming-iterables');\n\nconst first = require('it-first');\n\nconst MulticodecTopology = require('libp2p-interfaces/src/topology/multicodec-topology');\n\nconst rpc = require('./rpc');\n\nconst c = require('./constants');\n\nconst Message = require('./message');\n\nconst utils = require('./utils');\n/**\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('libp2p-interfaces/src/stream-muxer/types').MuxedStream} MuxedStream\n */\n\n/**\n * Handle network operations for the dht\n */\n\n\nclass Network {\n  /**\n   * Create a new network\n   *\n   * @param {import('./index')} dht\n   */\n  constructor(dht) {\n    this.dht = dht;\n    this.readMessageTimeout = c.READ_MESSAGE_TIMEOUT;\n    this._log = utils.logger(this.dht.peerId, 'net');\n    this._rpc = rpc(this.dht);\n    this._onPeerConnected = this._onPeerConnected.bind(this);\n    this._running = false;\n  }\n  /**\n   * Start the network\n   */\n\n\n  start() {\n    if (this._running) {\n      return;\n    }\n\n    if (!this.dht.isStarted) {\n      throw errcode(new Error('Can not start network'), 'ERR_CANNOT_START_NETWORK');\n    }\n\n    this._running = true; // Only respond to queries when not in client mode\n\n    if (this.dht._clientMode === false) {\n      // Incoming streams\n      this.dht.registrar.handle(this.dht.protocol, this._rpc);\n    } // register protocol with topology\n\n\n    const topology = new MulticodecTopology({\n      multicodecs: [this.dht.protocol],\n      handlers: {\n        onConnect: this._onPeerConnected,\n        onDisconnect: () => {}\n      }\n    });\n    this._registrarId = this.dht.registrar.register(topology);\n  }\n  /**\n   * Stop all network activity\n   */\n\n\n  stop() {\n    if (!this.dht.isStarted && !this.isStarted) {\n      return;\n    }\n\n    this._running = false; // unregister protocol and handlers\n\n    if (this._registrarId) {\n      this.dht.registrar.unregister(this._registrarId);\n    }\n  }\n  /**\n   * Is the network online?\n   *\n   * @type {boolean}\n   */\n\n\n  get isStarted() {\n    return this._running;\n  }\n  /**\n   * Are all network components there?\n   *\n   * @type {boolean}\n   */\n\n\n  get isConnected() {\n    // TODO add a way to check if switch has started or not\n    return this.dht.isStarted && this.isStarted;\n  }\n  /**\n   * Registrar notifies a connection successfully with dht protocol.\n   *\n   * @param {PeerId} peerId - remote peer id\n   */\n\n\n  _onPeerConnected(peerId) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this.dht._add(peerId);\n\n      _this._log('added to the routing table: %s', peerId.toB58String());\n    })();\n  }\n  /**\n   * Send a request and record RTT for latency measurements.\n   *\n   * @async\n   * @param {PeerId} to - The peer that should receive a message\n   * @param {Message} msg - The message to send.\n   */\n\n\n  sendRequest(to, msg) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      // TODO: record latency\n      if (!_this2.isConnected) {\n        throw errcode(new Error('Network is offline'), 'ERR_NETWORK_OFFLINE');\n      }\n\n      const id = to.toB58String();\n\n      _this2._log('sending to: %s', id);\n\n      let conn = _this2.dht.registrar.connectionManager.get(to);\n\n      if (!conn) {\n        conn = yield _this2.dht.dialer.connectToPeer(to);\n      }\n\n      const {\n        stream\n      } = yield conn.newStream(_this2.dht.protocol);\n      return _this2._writeReadMessage(stream, msg.serialize());\n    })();\n  }\n  /**\n   * Sends a message without expecting an answer.\n   *\n   * @param {PeerId} to\n   * @param {Message} msg\n   */\n\n\n  sendMessage(to, msg) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      if (!_this3.isConnected) {\n        throw errcode(new Error('Network is offline'), 'ERR_NETWORK_OFFLINE');\n      }\n\n      const id = to.toB58String();\n\n      _this3._log('sending to: %s', id);\n\n      let conn = _this3.dht.registrar.connectionManager.get(to);\n\n      if (!conn) {\n        conn = yield _this3.dht.dialer.connectToPeer(to);\n      }\n\n      const {\n        stream\n      } = yield conn.newStream(_this3.dht.protocol);\n      return _this3._writeMessage(stream, msg.serialize());\n    })();\n  }\n  /**\n   * Write a message and read its response.\n   * If no response is received after the specified timeout\n   * this will error out.\n   *\n   * @param {MuxedStream} stream - the stream to use\n   * @param {Uint8Array} msg - the message to send\n   */\n\n\n  _writeReadMessage(stream, msg) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      // eslint-disable-line require-await\n      return pTimeout(writeReadMessage(stream, msg), _this4.readMessageTimeout);\n    })();\n  }\n  /**\n   * Write a message to the given stream.\n   *\n   * @param {MuxedStream} stream - the stream to use\n   * @param {Uint8Array} msg - the message to send\n   */\n\n\n  _writeMessage(stream, msg) {\n    return pipe([msg], lp.encode(), stream, consume);\n  }\n\n}\n/**\n * @param {MuxedStream} stream\n * @param {Uint8Array} msg\n */\n\n\nfunction writeReadMessage(_x, _x2) {\n  return _writeReadMessage.apply(this, arguments);\n}\n\nfunction _writeReadMessage() {\n  _writeReadMessage = _asyncToGenerator(function* (stream, msg) {\n    const res = yield pipe([msg], lp.encode(), stream, lp.decode(),\n    /*#__PURE__*/\n\n    /**\n     * @param {AsyncIterable<Uint8Array>} source\n     */\n    function () {\n      var _ref = _asyncToGenerator(function* (source) {\n        const buf = yield first(source);\n\n        if (buf) {\n          return buf.slice();\n        }\n      });\n\n      return function (_x3) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n\n    if (res.length === 0) {\n      throw errcode(new Error('No message received'), 'ERR_NO_MESSAGE_RECEIVED');\n    }\n\n    return Message.deserialize(res);\n  });\n  return _writeReadMessage.apply(this, arguments);\n}\n\nmodule.exports = Network;","map":{"version":3,"sources":["/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/libp2p-kad-dht/src/network.js"],"names":["errcode","require","pipe","lp","pTimeout","consume","first","MulticodecTopology","rpc","c","Message","utils","Network","constructor","dht","readMessageTimeout","READ_MESSAGE_TIMEOUT","_log","logger","peerId","_rpc","_onPeerConnected","bind","_running","start","isStarted","Error","_clientMode","registrar","handle","protocol","topology","multicodecs","handlers","onConnect","onDisconnect","_registrarId","register","stop","unregister","isConnected","_add","toB58String","sendRequest","to","msg","id","conn","connectionManager","get","dialer","connectToPeer","stream","newStream","_writeReadMessage","serialize","sendMessage","_writeMessage","writeReadMessage","encode","res","decode","source","buf","slice","length","deserialize","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst errcode = require('err-code')\n\nconst { pipe } = require('it-pipe')\nconst lp = require('it-length-prefixed')\nconst pTimeout = require('p-timeout')\nconst { consume } = require('streaming-iterables')\nconst first = require('it-first')\n\nconst MulticodecTopology = require('libp2p-interfaces/src/topology/multicodec-topology')\n\nconst rpc = require('./rpc')\nconst c = require('./constants')\nconst Message = require('./message')\nconst utils = require('./utils')\n\n/**\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('libp2p-interfaces/src/stream-muxer/types').MuxedStream} MuxedStream\n */\n\n/**\n * Handle network operations for the dht\n */\nclass Network {\n  /**\n   * Create a new network\n   *\n   * @param {import('./index')} dht\n   */\n  constructor (dht) {\n    this.dht = dht\n    this.readMessageTimeout = c.READ_MESSAGE_TIMEOUT\n    this._log = utils.logger(this.dht.peerId, 'net')\n    this._rpc = rpc(this.dht)\n    this._onPeerConnected = this._onPeerConnected.bind(this)\n    this._running = false\n  }\n\n  /**\n   * Start the network\n   */\n  start () {\n    if (this._running) {\n      return\n    }\n\n    if (!this.dht.isStarted) {\n      throw errcode(new Error('Can not start network'), 'ERR_CANNOT_START_NETWORK')\n    }\n\n    this._running = true\n\n    // Only respond to queries when not in client mode\n    if (this.dht._clientMode === false) {\n      // Incoming streams\n      this.dht.registrar.handle(this.dht.protocol, this._rpc)\n    }\n\n    // register protocol with topology\n    const topology = new MulticodecTopology({\n      multicodecs: [this.dht.protocol],\n      handlers: {\n        onConnect: this._onPeerConnected,\n        onDisconnect: () => {}\n      }\n    })\n    this._registrarId = this.dht.registrar.register(topology)\n  }\n\n  /**\n   * Stop all network activity\n   */\n  stop () {\n    if (!this.dht.isStarted && !this.isStarted) {\n      return\n    }\n    this._running = false\n\n    // unregister protocol and handlers\n    if (this._registrarId) {\n      this.dht.registrar.unregister(this._registrarId)\n    }\n  }\n\n  /**\n   * Is the network online?\n   *\n   * @type {boolean}\n   */\n  get isStarted () {\n    return this._running\n  }\n\n  /**\n   * Are all network components there?\n   *\n   * @type {boolean}\n   */\n  get isConnected () {\n    // TODO add a way to check if switch has started or not\n    return this.dht.isStarted && this.isStarted\n  }\n\n  /**\n   * Registrar notifies a connection successfully with dht protocol.\n   *\n   * @param {PeerId} peerId - remote peer id\n   */\n  async _onPeerConnected (peerId) {\n    await this.dht._add(peerId)\n    this._log('added to the routing table: %s', peerId.toB58String())\n  }\n\n  /**\n   * Send a request and record RTT for latency measurements.\n   *\n   * @async\n   * @param {PeerId} to - The peer that should receive a message\n   * @param {Message} msg - The message to send.\n   */\n  async sendRequest (to, msg) {\n    // TODO: record latency\n    if (!this.isConnected) {\n      throw errcode(new Error('Network is offline'), 'ERR_NETWORK_OFFLINE')\n    }\n\n    const id = to.toB58String()\n    this._log('sending to: %s', id)\n\n    let conn = this.dht.registrar.connectionManager.get(to)\n    if (!conn) {\n      conn = await this.dht.dialer.connectToPeer(to)\n    }\n\n    const { stream } = await conn.newStream(this.dht.protocol)\n\n    return this._writeReadMessage(stream, msg.serialize())\n  }\n\n  /**\n   * Sends a message without expecting an answer.\n   *\n   * @param {PeerId} to\n   * @param {Message} msg\n   */\n  async sendMessage (to, msg) {\n    if (!this.isConnected) {\n      throw errcode(new Error('Network is offline'), 'ERR_NETWORK_OFFLINE')\n    }\n\n    const id = to.toB58String()\n    this._log('sending to: %s', id)\n\n    let conn = this.dht.registrar.connectionManager.get(to)\n    if (!conn) {\n      conn = await this.dht.dialer.connectToPeer(to)\n    }\n    const { stream } = await conn.newStream(this.dht.protocol)\n\n    return this._writeMessage(stream, msg.serialize())\n  }\n\n  /**\n   * Write a message and read its response.\n   * If no response is received after the specified timeout\n   * this will error out.\n   *\n   * @param {MuxedStream} stream - the stream to use\n   * @param {Uint8Array} msg - the message to send\n   */\n  async _writeReadMessage (stream, msg) { // eslint-disable-line require-await\n    return pTimeout(\n      writeReadMessage(stream, msg),\n      this.readMessageTimeout\n    )\n  }\n\n  /**\n   * Write a message to the given stream.\n   *\n   * @param {MuxedStream} stream - the stream to use\n   * @param {Uint8Array} msg - the message to send\n   */\n  _writeMessage (stream, msg) {\n    return pipe(\n      [msg],\n      lp.encode(),\n      stream,\n      consume\n    )\n  }\n}\n\n/**\n * @param {MuxedStream} stream\n * @param {Uint8Array} msg\n */\nasync function writeReadMessage (stream, msg) {\n  const res = await pipe(\n    [msg],\n    lp.encode(),\n    stream,\n    lp.decode(),\n    /**\n     * @param {AsyncIterable<Uint8Array>} source\n     */\n    async source => {\n      const buf = await first(source)\n\n      if (buf) {\n        return buf.slice()\n      }\n    }\n  )\n\n  if (res.length === 0) {\n    throw errcode(new Error('No message received'), 'ERR_NO_MESSAGE_RECEIVED')\n  }\n\n  return Message.deserialize(res)\n}\n\nmodule.exports = Network\n"]},"metadata":{},"sourceType":"script"}