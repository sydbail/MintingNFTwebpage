{"ast":null,"code":"import _asyncToGenerator from \"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _asyncIterator from \"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/esm/asyncIterator\";\nimport batch from 'it-batch';\n\nfunction balanced(source, reduce, options) {\n  return reduceToParents(source, reduce, options);\n}\n\nfunction reduceToParents(_x, _x2, _x3) {\n  return _reduceToParents.apply(this, arguments);\n}\n\nfunction _reduceToParents() {\n  _reduceToParents = _asyncToGenerator(function* (source, reduce, options) {\n    const roots = [];\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n\n    var _iteratorError;\n\n    try {\n      for (var _iterator = _asyncIterator(batch(source, options.maxChildrenPerNode)), _step, _value; _step = yield _iterator.next(), _iteratorNormalCompletion = _step.done, _value = yield _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n        const chunked = _value;\n        roots.push(yield reduce(chunked));\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          yield _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    if (roots.length > 1) {\n      return reduceToParents(roots, reduce, options);\n    }\n\n    return roots[0];\n  });\n  return _reduceToParents.apply(this, arguments);\n}\n\nexport default balanced;","map":null,"metadata":{},"sourceType":"module"}