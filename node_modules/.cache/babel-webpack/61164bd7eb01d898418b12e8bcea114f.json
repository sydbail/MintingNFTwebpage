{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst repoInit = require('./init');\n\nconst {\n  MissingRepoOptionsError,\n  NotInitializedRepoError\n} = require('../errors');\n\nconst {\n  VERSION_KEY\n} = require('../utils');\n\nconst {\n  fromString: uint8ArrayFromString\n} = require('uint8arrays/from-string');\n\nconst {\n  toString: uint8ArrayToString\n} = require('uint8arrays/to-string');\n/**\n * Function that has responsibility to retrieve version of repo from its root datastore's instance.\n * This function needs to be cross-repo-version functional to be able to fetch any version number,\n * even in case of change of repo's versioning.\n *\n * @param {import('../types').Backends} backends\n */\n\n\nfunction getVersion(_x) {\n  return _getVersion.apply(this, arguments);\n}\n/**\n * Function for setting a version in cross-repo-version manner.\n *\n * @param {number} version\n * @param {import('../types').Backends} backends\n */\n\n\nfunction _getVersion() {\n  _getVersion = _asyncToGenerator(function* (backends) {\n    if (!(yield repoInit.isRepoInitialized(backends))) {\n      throw new NotInitializedRepoError('Repo is not initialized!');\n    }\n\n    const store = backends.root;\n    yield store.open();\n\n    try {\n      return parseInt(uint8ArrayToString(yield store.get(VERSION_KEY)));\n    } finally {\n      yield store.close();\n    }\n  });\n  return _getVersion.apply(this, arguments);\n}\n\nfunction setVersion(_x2, _x3) {\n  return _setVersion.apply(this, arguments);\n}\n\nfunction _setVersion() {\n  _setVersion = _asyncToGenerator(function* (version, backends) {\n    if (!backends) {\n      throw new MissingRepoOptionsError('Please pass repo options when trying to open a repo');\n    }\n\n    const store = backends.root;\n    yield store.open();\n    yield store.put(VERSION_KEY, uint8ArrayFromString(String(version)));\n    yield store.close();\n  });\n  return _setVersion.apply(this, arguments);\n}\n\nmodule.exports = {\n  getVersion,\n  setVersion\n};","map":null,"metadata":{},"sourceType":"script"}