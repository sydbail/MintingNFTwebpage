{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst {\n  base58btc\n} = require('multiformats/bases/base58');\n\nconst utils = require('../utils');\n\nconst Run = require('./run');\n/**\n * @typedef {import('peer-id')} PeerId\n * @typedef {{from: PeerId, val: Uint8Array}} DHTQueryValue\n * @typedef {{from: PeerId, err: Error}} DHTQueryError\n * @typedef {DHTQueryValue | DHTQueryError} DHTQueryResult\n * @typedef {import('../').PeerData} PeerData\n *\n * @typedef {{ pathComplete?: boolean, queryComplete?: boolean, closerPeers?: PeerData[], peer?: PeerData, success?: boolean }} QueryResult\n */\n\n/**\n * User-supplied function to set up an individual disjoint path. Per-path\n * query state should be held in this function's closure.\n *\n * Accepts the numeric index from zero to numPaths - 1 and returns a function\n * to call on each peer in the query.\n *\n * @typedef {(pathIndex: number, numPaths: number) => QueryFunc } MakeQueryFunc\n */\n\n/**\n * Query function\n *\n * @typedef {(peer: PeerId) => Promise<QueryResult> } QueryFunc\n */\n\n/**\n * Divide peers up into disjoint paths (subqueries). Any peer can only be used once over all paths.\n * Within each path, query peers from closest to farthest away.\n */\n\n\nclass Query {\n  /**\n   * Create a new query. The makePath function is called once per disjoint path, so that per-path\n   * variables can be created in that scope. makePath then returns the actual query function (queryFunc) to\n   * use when on that path.\n   *\n   * @param {import('../index')} dht - DHT instance\n   * @param {Uint8Array} key\n   * @param {MakeQueryFunc} makePath - Called to set up each disjoint path. Must return the query function.\n   */\n  constructor(dht, key, makePath) {\n    this.dht = dht;\n    this.key = key;\n    this.makePath = makePath;\n    this._log = utils.logger(this.dht.peerId, 'query:' + base58btc.baseEncode(key));\n    this.running = false;\n    this._onStart = this._onStart.bind(this);\n    this._onComplete = this._onComplete.bind(this);\n  }\n  /**\n   * Run this query, start with the given list of peers first.\n   *\n   * @param {PeerId[]} peers\n   */\n\n\n  run(peers) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      // eslint-disable-line require-await\n      if (!_this.dht._queryManager.running) {\n        _this._log.error('Attempt to run query after shutdown');\n\n        return {\n          finalSet: new Set(),\n          paths: []\n        };\n      }\n\n      if (peers.length === 0) {\n        _this._log.error('Running query with no peers');\n\n        return {\n          finalSet: new Set(),\n          paths: []\n        };\n      }\n\n      _this._run = new Run(_this);\n\n      _this._log(`query running with K=${_this.dht.kBucketSize}, A=${_this.dht.concurrency}, D=${Math.min(_this.dht.disjointPaths, peers.length)}`);\n\n      _this._run.once('start', _this._onStart);\n\n      _this._run.once('complete', _this._onComplete);\n\n      return _this._run.execute(peers);\n    })();\n  }\n  /**\n   * Called when the run starts.\n   */\n\n\n  _onStart() {\n    this.running = true;\n    this._startTime = Date.now();\n\n    this._log('query:start'); // Register this query so we can stop it if the DHT stops\n\n\n    this.dht._queryManager.queryStarted(this);\n  }\n  /**\n   * Called when the run completes (even if there's an error).\n   */\n\n\n  _onComplete() {\n    // Ensure worker queues for all paths are stopped at the end of the query\n    this.stop();\n  }\n  /**\n   * Stop the query.\n   */\n\n\n  stop() {\n    this._log(`query:done in ${Date.now() - (this._startTime || 0)}ms`);\n\n    if (this._run) {\n      this._log(`${this._run.errors.length} of ${this._run.peersSeen.size} peers errored (${this._run.errors.length / this._run.peersSeen.size * 100}% fail rate)`);\n    }\n\n    if (!this.running) {\n      return;\n    }\n\n    this.running = false;\n\n    if (this._run) {\n      this._run.removeListener('start', this._onStart);\n\n      this._run.removeListener('complete', this._onComplete);\n\n      this._run.stop();\n    }\n\n    this.dht._queryManager.queryCompleted(this);\n  }\n\n}\n\nmodule.exports = Query;","map":null,"metadata":{},"sourceType":"script"}