{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst dagPb = require('@ipld/dag-pb');\n\nconst {\n  sha256\n} = require('multiformats/hashes/sha2');\n\nconst {\n  UnixFS\n} = require('ipfs-unixfs');\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n\nconst {\n  CID\n} = require('multiformats/cid');\n/**\n * @param {Object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n */\n\n\nmodule.exports = ({\n  repo,\n  preload\n}) => {\n  /**\n   * @type {import('ipfs-core-types/src/object').API[\"new\"]}\n   */\n  function _new() {\n    return _new2.apply(this, arguments);\n  }\n\n  function _new2() {\n    _new2 = _asyncToGenerator(function* (options = {}) {\n      let data;\n\n      if (options.template) {\n        if (options.template === 'unixfs-dir') {\n          data = new UnixFS({\n            type: 'directory'\n          }).marshal();\n        } else {\n          throw new Error('unknown template');\n        }\n      }\n\n      const buf = dagPb.encode({\n        Data: data,\n        Links: []\n      });\n      const hash = yield sha256.digest(buf);\n      const cid = CID.createV0(hash);\n      yield repo.blocks.put(cid, buf, {\n        signal: options.signal\n      });\n\n      if (options.preload !== false) {\n        preload(cid);\n      }\n\n      return cid;\n    });\n    return _new2.apply(this, arguments);\n  }\n\n  return withTimeoutOption(_new);\n};","map":null,"metadata":{},"sourceType":"script"}