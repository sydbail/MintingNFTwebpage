{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/Dapp/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst {\n  Key\n} = require('interface-datastore');\n\nconst MFS_ROOT_KEY = new Key('/local/filesroot');\n/**\n * @param {import('../../src/types').Backends} backends\n * @param {import('../../src/types').MigrationProgressCallback} onProgress\n */\n\nfunction storeMfsRootInDatastore(_x) {\n  return _storeMfsRootInDatastore.apply(this, arguments);\n}\n/**\n * @param {import('../../src/types').Backends} backends\n * @param {import('../../src/types').MigrationProgressCallback} onProgress\n */\n\n\nfunction _storeMfsRootInDatastore() {\n  _storeMfsRootInDatastore = _asyncToGenerator(function* (backends, onProgress = () => {}) {\n    onProgress(100, 'Migrating MFS root to repo datastore');\n    yield backends.root.open();\n    yield backends.datastore.open();\n    const root = yield backends.root.get(MFS_ROOT_KEY);\n    yield backends.datastore.put(MFS_ROOT_KEY, root);\n    yield backends.root.delete(MFS_ROOT_KEY);\n    yield backends.datastore.close();\n    yield backends.root.close();\n    onProgress(100, 'Stored MFS root in repo datastore');\n  });\n  return _storeMfsRootInDatastore.apply(this, arguments);\n}\n\nfunction storeMfsRootInRoot(_x2) {\n  return _storeMfsRootInRoot.apply(this, arguments);\n}\n/** @type {import('../../src/types').Migration} */\n\n\nfunction _storeMfsRootInRoot() {\n  _storeMfsRootInRoot = _asyncToGenerator(function* (backends, onProgress = () => {}) {\n    onProgress(100, 'Migrating MFS root to repo root datastore');\n    yield backends.root.open();\n    yield backends.datastore.open();\n    const root = yield backends.datastore.get(MFS_ROOT_KEY);\n    yield backends.root.put(MFS_ROOT_KEY, root);\n    yield backends.datastore.delete(MFS_ROOT_KEY);\n    yield backends.datastore.close();\n    yield backends.root.close();\n    onProgress(100, 'Stored MFS root in repo root datastore');\n  });\n  return _storeMfsRootInRoot.apply(this, arguments);\n}\n\nmodule.exports = {\n  version: 11,\n  description: 'Store mfs root in the datastore',\n  migrate: storeMfsRootInDatastore,\n  revert: storeMfsRootInRoot\n};","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Dapp/node_modules/ipfs-repo-migrations/migrations/migration-11/index.js"],"names":["Key","require","MFS_ROOT_KEY","storeMfsRootInDatastore","backends","onProgress","root","open","datastore","get","put","delete","close","storeMfsRootInRoot","module","exports","version","description","migrate","revert"],"mappings":"AAAA;;;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAUC,OAAO,CAAC,qBAAD,CAAvB;;AAEA,MAAMC,YAAY,GAAG,IAAIF,GAAJ,CAAQ,kBAAR,CAArB;AAEA;AACA;AACA;AACA;;SACeG,uB;;;AAgBf;AACA;AACA;AACA;;;;+CAnBA,WAAwCC,QAAxC,EAAkDC,UAAU,GAAG,MAAM,CAAE,CAAvE,EAAyE;AACvEA,IAAAA,UAAU,CAAC,GAAD,EAAM,sCAAN,CAAV;AAEA,UAAMD,QAAQ,CAACE,IAAT,CAAcC,IAAd,EAAN;AACA,UAAMH,QAAQ,CAACI,SAAT,CAAmBD,IAAnB,EAAN;AAEA,UAAMD,IAAI,SAASF,QAAQ,CAACE,IAAT,CAAcG,GAAd,CAAkBP,YAAlB,CAAnB;AACA,UAAME,QAAQ,CAACI,SAAT,CAAmBE,GAAnB,CAAuBR,YAAvB,EAAqCI,IAArC,CAAN;AACA,UAAMF,QAAQ,CAACE,IAAT,CAAcK,MAAd,CAAqBT,YAArB,CAAN;AAEA,UAAME,QAAQ,CAACI,SAAT,CAAmBI,KAAnB,EAAN;AACA,UAAMR,QAAQ,CAACE,IAAT,CAAcM,KAAd,EAAN;AAEAP,IAAAA,UAAU,CAAC,GAAD,EAAM,mCAAN,CAAV;AACD,G;;;;SAMcQ,kB;;;AAgBf;;;;0CAhBA,WAAmCT,QAAnC,EAA6CC,UAAU,GAAG,MAAM,CAAE,CAAlE,EAAoE;AAClEA,IAAAA,UAAU,CAAC,GAAD,EAAM,2CAAN,CAAV;AAEA,UAAMD,QAAQ,CAACE,IAAT,CAAcC,IAAd,EAAN;AACA,UAAMH,QAAQ,CAACI,SAAT,CAAmBD,IAAnB,EAAN;AAEA,UAAMD,IAAI,SAASF,QAAQ,CAACI,SAAT,CAAmBC,GAAnB,CAAuBP,YAAvB,CAAnB;AACA,UAAME,QAAQ,CAACE,IAAT,CAAcI,GAAd,CAAkBR,YAAlB,EAAgCI,IAAhC,CAAN;AACA,UAAMF,QAAQ,CAACI,SAAT,CAAmBG,MAAnB,CAA0BT,YAA1B,CAAN;AAEA,UAAME,QAAQ,CAACI,SAAT,CAAmBI,KAAnB,EAAN;AACA,UAAMR,QAAQ,CAACE,IAAT,CAAcM,KAAd,EAAN;AAEAP,IAAAA,UAAU,CAAC,GAAD,EAAM,wCAAN,CAAV;AACD,G;;;;AAGDS,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,OAAO,EAAE,EADM;AAEfC,EAAAA,WAAW,EAAE,iCAFE;AAGfC,EAAAA,OAAO,EAAEf,uBAHM;AAIfgB,EAAAA,MAAM,EAAEN;AAJO,CAAjB","sourcesContent":["'use strict'\n\nconst { Key } = require('interface-datastore')\n\nconst MFS_ROOT_KEY = new Key('/local/filesroot')\n\n/**\n * @param {import('../../src/types').Backends} backends\n * @param {import('../../src/types').MigrationProgressCallback} onProgress\n */\nasync function storeMfsRootInDatastore (backends, onProgress = () => {}) {\n  onProgress(100, 'Migrating MFS root to repo datastore')\n\n  await backends.root.open()\n  await backends.datastore.open()\n\n  const root = await backends.root.get(MFS_ROOT_KEY)\n  await backends.datastore.put(MFS_ROOT_KEY, root)\n  await backends.root.delete(MFS_ROOT_KEY)\n\n  await backends.datastore.close()\n  await backends.root.close()\n\n  onProgress(100, 'Stored MFS root in repo datastore')\n}\n\n/**\n * @param {import('../../src/types').Backends} backends\n * @param {import('../../src/types').MigrationProgressCallback} onProgress\n */\nasync function storeMfsRootInRoot (backends, onProgress = () => {}) {\n  onProgress(100, 'Migrating MFS root to repo root datastore')\n\n  await backends.root.open()\n  await backends.datastore.open()\n\n  const root = await backends.datastore.get(MFS_ROOT_KEY)\n  await backends.root.put(MFS_ROOT_KEY, root)\n  await backends.datastore.delete(MFS_ROOT_KEY)\n\n  await backends.datastore.close()\n  await backends.root.close()\n\n  onProgress(100, 'Stored MFS root in repo root datastore')\n}\n\n/** @type {import('../../src/types').Migration} */\nmodule.exports = {\n  version: 11,\n  description: 'Store mfs root in the datastore',\n  migrate: storeMfsRootInDatastore,\n  revert: storeMfsRootInRoot\n}\n"]},"metadata":{},"sourceType":"script"}