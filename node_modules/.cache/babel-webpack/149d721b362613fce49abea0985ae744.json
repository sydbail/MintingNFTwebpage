{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nconst debug = require('debug');\n\nconst {\n  EventEmitter\n} = require('events');\n\nconst errcode = require('err-code');\n\nconst {\n  pipe\n} = require('it-pipe');\n\nconst MulticodecTopology = require('../topology/multicodec-topology');\n\nconst {\n  codes\n} = require('./errors');\n\nconst {\n  RPC\n} = require('./message/rpc');\n\nconst PeerStreams = require('./peer-streams');\n\nconst {\n  SignaturePolicy\n} = require('./signature-policy');\n\nconst utils = require('./utils');\n\nconst {\n  signMessage,\n  verifySignature\n} = require('./message/sign');\n/**\n * @typedef {any} Libp2p\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('bl')} BufferList\n * @typedef {import('../stream-muxer/types').MuxedStream} MuxedStream\n * @typedef {import('../connection/connection')} Connection\n * @typedef {import('./signature-policy').SignaturePolicyType} SignaturePolicyType\n * @typedef {import('./message/rpc').IRPC} IRPC\n * @typedef {import('./message/rpc').RPC.SubOpts} RPCSubOpts\n * @typedef {import('./message/rpc').RPC.Message} RPCMessage\n */\n\n/**\n * @typedef {Object} InMessage\n * @property {string} [from]\n * @property {string} receivedFrom\n * @property {string[]} topicIDs\n * @property {Uint8Array} [seqno]\n * @property {Uint8Array} data\n * @property {Uint8Array} [signature]\n * @property {Uint8Array} [key]\n *\n * @typedef {Object} PubsubProperties\n * @property {string} debugName - log namespace\n * @property {Array<string>|string} multicodecs - protocol identificers to connect\n * @property {Libp2p} libp2p\n *\n * @typedef {Object} PubsubOptions\n * @property {SignaturePolicyType} [globalSignaturePolicy = SignaturePolicy.StrictSign] - defines how signatures should be handled\n * @property {boolean} [canRelayMessage = false] - if can relay messages not subscribed\n * @property {boolean} [emitSelf = false] - if publish should emit to self, if subscribed\n */\n\n/**\n * PubsubBaseProtocol handles the peers and connections logic for pubsub routers\n * and specifies the API that pubsub routers should have.\n */\n\n\nclass PubsubBaseProtocol extends EventEmitter {\n  /**\n   * @param {PubsubProperties & PubsubOptions} props\n   * @abstract\n   */\n  constructor({\n    debugName,\n    multicodecs,\n    libp2p,\n    globalSignaturePolicy = SignaturePolicy.StrictSign,\n    canRelayMessage = false,\n    emitSelf = false\n  }) {\n    if (typeof debugName !== 'string') {\n      throw new Error('a debugname `string` is required');\n    }\n\n    if (!multicodecs) {\n      throw new Error('multicodecs are required');\n    }\n\n    if (!libp2p) {\n      throw new Error('libp2p is required');\n    }\n\n    super();\n    this.log = Object.assign(debug(debugName), {\n      err: debug(`${debugName}:error`)\n    });\n    /**\n     * @type {Array<string>}\n     */\n\n    this.multicodecs = utils.ensureArray(multicodecs);\n    this._libp2p = libp2p;\n    this.registrar = libp2p.registrar;\n    /**\n     * @type {PeerId}\n     */\n\n    this.peerId = libp2p.peerId;\n    this.started = false;\n    /**\n     * Map of topics to which peers are subscribed to\n     *\n     * @type {Map<string, Set<string>>}\n     */\n\n    this.topics = new Map();\n    /**\n     * List of our subscriptions\n     *\n     * @type {Set<string>}\n     */\n\n    this.subscriptions = new Set();\n    /**\n     * Map of peer streams\n     *\n     * @type {Map<string, import('./peer-streams')>}\n     */\n\n    this.peers = new Map(); // validate signature policy\n\n    if (!SignaturePolicy[globalSignaturePolicy]) {\n      throw errcode(new Error('Invalid global signature policy'), codes.ERR_INVALID_SIGNATURE_POLICY);\n    }\n    /**\n     * The signature policy to follow by default\n     *\n     * @type {string}\n     */\n\n\n    this.globalSignaturePolicy = globalSignaturePolicy;\n    /**\n     * If router can relay received messages, even if not subscribed\n     *\n     * @type {boolean}\n     */\n\n    this.canRelayMessage = canRelayMessage;\n    /**\n     * if publish should emit to self, if subscribed\n     *\n     * @type {boolean}\n     */\n\n    this.emitSelf = emitSelf;\n    /**\n     * Topic validator function\n     *\n     * @typedef {function(string, InMessage): Promise<void>} validator\n     */\n\n    /**\n     * Topic validator map\n     *\n     * Keyed by topic\n     * Topic validators are functions with the following input:\n     *\n     * @type {Map<string, validator>}\n     */\n\n    this.topicValidators = new Map();\n    this._registrarId = undefined;\n    this._onIncomingStream = this._onIncomingStream.bind(this);\n    this._onPeerConnected = this._onPeerConnected.bind(this);\n    this._onPeerDisconnected = this._onPeerDisconnected.bind(this);\n  } // LIFECYCLE METHODS\n\n  /**\n   * Register the pubsub protocol onto the libp2p node.\n   *\n   * @returns {void}\n   */\n\n\n  start() {\n    if (this.started) {\n      return;\n    }\n\n    this.log('starting'); // Incoming streams\n    // Called after a peer dials us\n\n    this.registrar.handle(this.multicodecs, this._onIncomingStream); // register protocol with topology\n    // Topology callbacks called on connection manager changes\n\n    const topology = new MulticodecTopology({\n      multicodecs: this.multicodecs,\n      handlers: {\n        onConnect: this._onPeerConnected,\n        onDisconnect: this._onPeerDisconnected\n      }\n    });\n    this._registrarId = this.registrar.register(topology);\n    this.log('started');\n    this.started = true;\n  }\n  /**\n   * Unregister the pubsub protocol and the streams with other peers will be closed.\n   *\n   * @returns {void}\n   */\n\n\n  stop() {\n    if (!this.started) {\n      return;\n    } // unregister protocol and handlers\n\n\n    this.registrar.unregister(this._registrarId);\n    this.log('stopping');\n    this.peers.forEach(peerStreams => peerStreams.close());\n    this.peers = new Map();\n    this.subscriptions = new Set();\n    this.started = false;\n    this.log('stopped');\n  }\n  /**\n   * On an inbound stream opened.\n   *\n   * @protected\n   * @param {Object} props\n   * @param {string} props.protocol\n   * @param {MuxedStream} props.stream\n   * @param {Connection} props.connection - connection\n   */\n\n\n  _onIncomingStream({\n    protocol,\n    stream,\n    connection\n  }) {\n    const peerId = connection.remotePeer;\n    const idB58Str = peerId.toB58String();\n\n    const peer = this._addPeer(peerId, protocol);\n\n    const inboundStream = peer.attachInboundStream(stream);\n\n    this._processMessages(idB58Str, inboundStream, peer);\n  }\n  /**\n   * Registrar notifies an established connection with pubsub protocol.\n   *\n   * @protected\n   * @param {PeerId} peerId - remote peer-id\n   * @param {Connection} conn - connection to the peer\n   */\n\n\n  _onPeerConnected(peerId, conn) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const idB58Str = peerId.toB58String();\n\n      _this.log('connected', idB58Str);\n\n      try {\n        const {\n          stream,\n          protocol\n        } = yield conn.newStream(_this.multicodecs);\n\n        const peer = _this._addPeer(peerId, protocol);\n\n        yield peer.attachOutboundStream(stream);\n      } catch (err) {\n        _this.log.err(err);\n      } // Immediately send my own subscriptions to the newly established conn\n\n\n      _this._sendSubscriptions(idB58Str, Array.from(_this.subscriptions), true);\n    })();\n  }\n  /**\n   * Registrar notifies a closing connection with pubsub protocol.\n   *\n   * @protected\n   * @param {PeerId} peerId - peerId\n   * @param {Error} [err] - error for connection end\n   */\n\n\n  _onPeerDisconnected(peerId, err) {\n    const idB58Str = peerId.toB58String();\n    this.log('connection ended', idB58Str, err ? err.message : '');\n\n    this._removePeer(peerId);\n  }\n  /**\n   * Notifies the router that a peer has been connected\n   *\n   * @protected\n   * @param {PeerId} peerId\n   * @param {string} protocol\n   * @returns {PeerStreams}\n   */\n\n\n  _addPeer(peerId, protocol) {\n    const id = peerId.toB58String();\n    const existing = this.peers.get(id); // If peer streams already exists, do nothing\n\n    if (existing) {\n      return existing;\n    } // else create a new peer streams\n\n\n    this.log('new peer', id);\n    const peerStreams = new PeerStreams({\n      id: peerId,\n      protocol\n    });\n    this.peers.set(id, peerStreams);\n    peerStreams.once('close', () => this._removePeer(peerId));\n    return peerStreams;\n  }\n  /**\n   * Notifies the router that a peer has been disconnected.\n   *\n   * @protected\n   * @param {PeerId} peerId\n   * @returns {PeerStreams | undefined}\n   */\n\n\n  _removePeer(peerId) {\n    if (!peerId) return;\n    const id = peerId.toB58String();\n    const peerStreams = this.peers.get(id);\n    if (!peerStreams) return; // close peer streams\n\n    peerStreams.removeAllListeners();\n    peerStreams.close(); // delete peer streams\n\n    this.log('delete peer', id);\n    this.peers.delete(id); // remove peer from topics map\n\n    for (const peers of this.topics.values()) {\n      peers.delete(id);\n    }\n\n    return peerStreams;\n  } // MESSAGE METHODS\n\n  /**\n   * Responsible for processing each RPC message received by other peers.\n   *\n   * @param {string} idB58Str - peer id string in base58\n   * @param {AsyncIterable<Uint8Array|BufferList>} stream - inbound stream\n   * @param {PeerStreams} peerStreams - PubSub peer\n   * @returns {Promise<void>}\n   */\n\n\n  _processMessages(idB58Str, stream, peerStreams) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        yield pipe(stream, /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(function* (source) {\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n\n            var _iteratorError;\n\n            try {\n              for (var _iterator = _asyncIterator(source), _step, _value; _step = yield _iterator.next(), _iteratorNormalCompletion = _step.done, _value = yield _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n                const data = _value;\n                const rpcBytes = data instanceof Uint8Array ? data : data.slice();\n\n                const rpcMsg = _this2._decodeRpc(rpcBytes);\n\n                yield _this2._processRpc(idB58Str, peerStreams, rpcMsg);\n              }\n            } catch (err) {\n              _didIteratorError = true;\n              _iteratorError = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                  yield _iterator.return();\n                }\n              } finally {\n                if (_didIteratorError) {\n                  throw _iteratorError;\n                }\n              }\n            }\n          });\n\n          return function (_x) {\n            return _ref.apply(this, arguments);\n          };\n        }());\n      } catch (err) {\n        _this2._onPeerDisconnected(peerStreams.id, err);\n      }\n    })();\n  }\n  /**\n   * Handles an rpc request from a peer\n   *\n   * @param {string} idB58Str\n   * @param {PeerStreams} peerStreams\n   * @param {RPC} rpc\n   * @returns {Promise<boolean>}\n   */\n\n\n  _processRpc(idB58Str, peerStreams, rpc) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      _this3.log('rpc from', idB58Str);\n\n      const subs = rpc.subscriptions;\n      const msgs = rpc.msgs;\n\n      if (subs.length) {\n        // update peer subscriptions\n        subs.forEach(subOpt => {\n          _this3._processRpcSubOpt(idB58Str, subOpt);\n        });\n\n        _this3.emit('pubsub:subscription-change', peerStreams.id, subs);\n      }\n\n      if (!_this3._acceptFrom(idB58Str)) {\n        _this3.log('received message from unacceptable peer %s', idB58Str);\n\n        return false;\n      }\n\n      if (msgs.length) {\n        // @ts-ignore RPC message is modified\n        for (const message of msgs) {\n          if (!(_this3.canRelayMessage || message.topicIDs && message.topicIDs.some(topic => _this3.subscriptions.has(topic)))) {\n            _this3.log('received message we didn\\'t subscribe to. Dropping.');\n\n            continue;\n          }\n\n          const msg = utils.normalizeInRpcMessage(message, idB58Str);\n          yield _this3._processRpcMessage(msg);\n        }\n      }\n\n      return true;\n    })();\n  }\n  /**\n   * Handles a subscription change from a peer\n   *\n   * @param {string} id\n   * @param {RPC.ISubOpts} subOpt\n   */\n\n\n  _processRpcSubOpt(id, subOpt) {\n    const t = subOpt.topicID;\n\n    if (!t) {\n      return;\n    }\n\n    let topicSet = this.topics.get(t);\n\n    if (!topicSet) {\n      topicSet = new Set();\n      this.topics.set(t, topicSet);\n    }\n\n    if (subOpt.subscribe) {\n      // subscribe peer to new topic\n      topicSet.add(id);\n    } else {\n      // unsubscribe from existing topic\n      topicSet.delete(id);\n    }\n  }\n  /**\n   * Handles an message from a peer\n   *\n   * @param {InMessage} msg\n   * @returns {Promise<void>}\n   */\n\n\n  _processRpcMessage(msg) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this4.peerId.toB58String() === msg.from && !_this4.emitSelf) {\n        return;\n      } // Ensure the message is valid before processing it\n\n\n      try {\n        yield _this4.validate(msg);\n      } catch (err) {\n        _this4.log('Message is invalid, dropping it. %O', err);\n\n        return;\n      } // Emit to self\n\n\n      _this4._emitMessage(msg);\n\n      return _this4._publish(utils.normalizeOutRpcMessage(msg));\n    })();\n  }\n  /**\n   * Emit a message from a peer\n   *\n   * @param {InMessage} message\n   */\n\n\n  _emitMessage(message) {\n    message.topicIDs.forEach(topic => {\n      if (this.subscriptions.has(topic)) {\n        this.emit(topic, message);\n      }\n    });\n  }\n  /**\n   * The default msgID implementation\n   * Child class can override this.\n   *\n   * @param {InMessage} msg - the message object\n   * @returns {Promise<Uint8Array> | Uint8Array} message id as bytes\n   */\n\n\n  getMsgId(msg) {\n    const signaturePolicy = this.globalSignaturePolicy;\n\n    switch (signaturePolicy) {\n      case SignaturePolicy.StrictSign:\n        // @ts-ignore seqno is optional in protobuf definition but it will exist\n        return utils.msgId(msg.from, msg.seqno);\n\n      case SignaturePolicy.StrictNoSign:\n        return utils.noSignMsgId(msg.data);\n\n      default:\n        throw errcode(new Error('Cannot get message id: unhandled signature policy: ' + signaturePolicy), codes.ERR_UNHANDLED_SIGNATURE_POLICY);\n    }\n  }\n  /**\n   * Whether to accept a message from a peer\n   * Override to create a graylist\n   *\n   * @param {string} id\n   * @returns {boolean}\n   */\n\n\n  _acceptFrom(id) {\n    return true;\n  }\n  /**\n   * Decode Uint8Array into an RPC object.\n   * This can be override to use a custom router protobuf.\n   *\n   * @param {Uint8Array} bytes\n   * @returns {RPC}\n   */\n\n\n  _decodeRpc(bytes) {\n    return RPC.decode(bytes);\n  }\n  /**\n   * Encode RPC object into a Uint8Array.\n   * This can be override to use a custom router protobuf.\n   *\n   * @param {IRPC} rpc\n   * @returns {Uint8Array}\n   */\n\n\n  _encodeRpc(rpc) {\n    return RPC.encode(rpc).finish();\n  }\n  /**\n   * Send an rpc object to a peer\n   *\n   * @param {string} id - peer id\n   * @param {IRPC} rpc\n   * @returns {void}\n   */\n\n\n  _sendRpc(id, rpc) {\n    const peerStreams = this.peers.get(id);\n\n    if (!peerStreams || !peerStreams.isWritable) {\n      const msg = `Cannot send RPC to ${id} as there is no open stream to it available`;\n      this.log.err(msg);\n      return;\n    }\n\n    peerStreams.write(this._encodeRpc(rpc));\n  }\n  /**\n   * Send subscroptions to a peer\n   *\n   * @param {string} id - peer id\n   * @param {string[]} topics\n   * @param {boolean} subscribe - set to false for unsubscriptions\n   * @returns {void}\n   */\n\n\n  _sendSubscriptions(id, topics, subscribe) {\n    return this._sendRpc(id, {\n      subscriptions: topics.map(t => ({\n        topicID: t,\n        subscribe: subscribe\n      }))\n    });\n  }\n  /**\n   * Validates the given message. The signature will be checked for authenticity.\n   * Throws an error on invalid messages\n   *\n   * @param {InMessage} message\n   * @returns {Promise<void>}\n   */\n\n\n  validate(message) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      // eslint-disable-line require-await\n      const signaturePolicy = _this5.globalSignaturePolicy;\n\n      switch (signaturePolicy) {\n        case SignaturePolicy.StrictNoSign:\n          if (message.from) {\n            throw errcode(new Error('StrictNoSigning: from should not be present'), codes.ERR_UNEXPECTED_FROM);\n          }\n\n          if (message.signature) {\n            throw errcode(new Error('StrictNoSigning: signature should not be present'), codes.ERR_UNEXPECTED_SIGNATURE);\n          }\n\n          if (message.key) {\n            throw errcode(new Error('StrictNoSigning: key should not be present'), codes.ERR_UNEXPECTED_KEY);\n          }\n\n          if (message.seqno) {\n            throw errcode(new Error('StrictNoSigning: seqno should not be present'), codes.ERR_UNEXPECTED_SEQNO);\n          }\n\n          break;\n\n        case SignaturePolicy.StrictSign:\n          if (!message.signature) {\n            throw errcode(new Error('StrictSigning: Signing required and no signature was present'), codes.ERR_MISSING_SIGNATURE);\n          }\n\n          if (!message.seqno) {\n            throw errcode(new Error('StrictSigning: Signing required and no seqno was present'), codes.ERR_MISSING_SEQNO);\n          }\n\n          if (!(yield verifySignature(message))) {\n            throw errcode(new Error('StrictSigning: Invalid message signature'), codes.ERR_INVALID_SIGNATURE);\n          }\n\n          break;\n\n        default:\n          throw errcode(new Error('Cannot validate message: unhandled signature policy: ' + signaturePolicy), codes.ERR_UNHANDLED_SIGNATURE_POLICY);\n      }\n\n      for (const topic of message.topicIDs) {\n        const validatorFn = _this5.topicValidators.get(topic);\n\n        if (validatorFn) {\n          yield validatorFn(topic, message);\n        }\n      }\n    })();\n  }\n  /**\n   * Normalizes the message and signs it, if signing is enabled.\n   * Should be used by the routers to create the message to send.\n   *\n   * @protected\n   * @param {InMessage} message\n   * @returns {Promise<InMessage>}\n   */\n\n\n  _buildMessage(message) {\n    const signaturePolicy = this.globalSignaturePolicy;\n\n    switch (signaturePolicy) {\n      case SignaturePolicy.StrictSign:\n        message.from = this.peerId.toB58String();\n        message.seqno = utils.randomSeqno();\n        return signMessage(this.peerId, message);\n\n      case SignaturePolicy.StrictNoSign:\n        return Promise.resolve(message);\n\n      default:\n        throw errcode(new Error('Cannot build message: unhandled signature policy: ' + signaturePolicy), codes.ERR_UNHANDLED_SIGNATURE_POLICY);\n    }\n  } // API METHODS\n\n  /**\n   * Get a list of the peer-ids that are subscribed to one topic.\n   *\n   * @param {string} topic\n   * @returns {Array<string>}\n   */\n\n\n  getSubscribers(topic) {\n    if (!this.started) {\n      throw errcode(new Error('not started yet'), 'ERR_NOT_STARTED_YET');\n    }\n\n    if (!topic || typeof topic !== 'string') {\n      throw errcode(new Error('a string topic must be provided'), 'ERR_NOT_VALID_TOPIC');\n    }\n\n    const peersInTopic = this.topics.get(topic);\n\n    if (!peersInTopic) {\n      return [];\n    }\n\n    return Array.from(peersInTopic);\n  }\n  /**\n   * Publishes messages to all subscribed peers\n   *\n   * @param {string} topic\n   * @param {Uint8Array} message\n   * @returns {Promise<void>}\n   */\n\n\n  publish(topic, message) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      if (!_this6.started) {\n        throw new Error('Pubsub has not started');\n      }\n\n      _this6.log('publish', topic, message);\n\n      const from = _this6.peerId.toB58String();\n\n      const msgObject = {\n        receivedFrom: from,\n        data: message,\n        topicIDs: [topic]\n      }; // ensure that the message follows the signature policy\n\n      const outMsg = yield _this6._buildMessage(msgObject); // @ts-ignore different type as from is converted\n\n      const msg = utils.normalizeInRpcMessage(outMsg); // Emit to self if I'm interested and emitSelf enabled\n\n      _this6.emitSelf && _this6._emitMessage(msg); // send to all the other peers\n\n      yield _this6._publish(msg);\n    })();\n  }\n  /**\n   * Overriding the implementation of publish should handle the appropriate algorithms for the publish/subscriber implementation.\n   * For example, a Floodsub implementation might simply publish each message to each topic for every peer\n   *\n   * @abstract\n   * @param {InMessage|RPCMessage} message\n   * @returns {Promise<void>}\n   *\n   */\n\n\n  _publish(message) {\n    throw errcode(new Error('publish must be implemented by the subclass'), 'ERR_NOT_IMPLEMENTED');\n  }\n  /**\n   * Subscribes to a given topic.\n   *\n   * @abstract\n   * @param {string} topic\n   * @returns {void}\n   */\n\n\n  subscribe(topic) {\n    if (!this.started) {\n      throw new Error('Pubsub has not started');\n    }\n\n    if (!this.subscriptions.has(topic)) {\n      this.subscriptions.add(topic);\n      this.peers.forEach((_, id) => this._sendSubscriptions(id, [topic], true));\n    }\n  }\n  /**\n   * Unsubscribe from the given topic.\n   *\n   * @param {string} topic\n   * @returns {void}\n   */\n\n\n  unsubscribe(topic) {\n    if (!this.started) {\n      throw new Error('Pubsub is not started');\n    }\n\n    if (this.subscriptions.has(topic) && this.listenerCount(topic) === 0) {\n      this.subscriptions.delete(topic);\n      this.peers.forEach((_, id) => this._sendSubscriptions(id, [topic], false));\n    }\n  }\n  /**\n   * Get the list of topics which the peer is subscribed to.\n   *\n   * @returns {Array<string>}\n   */\n\n\n  getTopics() {\n    if (!this.started) {\n      throw new Error('Pubsub is not started');\n    }\n\n    return Array.from(this.subscriptions);\n  }\n\n}\n\nPubsubBaseProtocol.utils = utils;\nPubsubBaseProtocol.SignaturePolicy = SignaturePolicy;\nmodule.exports = PubsubBaseProtocol;","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Demo/node_modules/libp2p-interfaces/src/pubsub/index.js"],"names":["debug","require","EventEmitter","errcode","pipe","MulticodecTopology","codes","RPC","PeerStreams","SignaturePolicy","utils","signMessage","verifySignature","PubsubBaseProtocol","constructor","debugName","multicodecs","libp2p","globalSignaturePolicy","StrictSign","canRelayMessage","emitSelf","Error","log","Object","assign","err","ensureArray","_libp2p","registrar","peerId","started","topics","Map","subscriptions","Set","peers","ERR_INVALID_SIGNATURE_POLICY","topicValidators","_registrarId","undefined","_onIncomingStream","bind","_onPeerConnected","_onPeerDisconnected","start","handle","topology","handlers","onConnect","onDisconnect","register","stop","unregister","forEach","peerStreams","close","protocol","stream","connection","remotePeer","idB58Str","toB58String","peer","_addPeer","inboundStream","attachInboundStream","_processMessages","conn","newStream","attachOutboundStream","_sendSubscriptions","Array","from","message","_removePeer","id","existing","get","set","once","removeAllListeners","delete","values","source","data","rpcBytes","Uint8Array","slice","rpcMsg","_decodeRpc","_processRpc","rpc","subs","msgs","length","subOpt","_processRpcSubOpt","emit","_acceptFrom","topicIDs","some","topic","has","msg","normalizeInRpcMessage","_processRpcMessage","t","topicID","topicSet","subscribe","add","validate","_emitMessage","_publish","normalizeOutRpcMessage","getMsgId","signaturePolicy","msgId","seqno","StrictNoSign","noSignMsgId","ERR_UNHANDLED_SIGNATURE_POLICY","bytes","decode","_encodeRpc","encode","finish","_sendRpc","isWritable","write","map","ERR_UNEXPECTED_FROM","signature","ERR_UNEXPECTED_SIGNATURE","key","ERR_UNEXPECTED_KEY","ERR_UNEXPECTED_SEQNO","ERR_MISSING_SIGNATURE","ERR_MISSING_SEQNO","ERR_INVALID_SIGNATURE","validatorFn","_buildMessage","randomSeqno","Promise","resolve","getSubscribers","peersInTopic","publish","msgObject","receivedFrom","outMsg","_","unsubscribe","listenerCount","getTopics","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst debug = require('debug')\nconst { EventEmitter } = require('events')\nconst errcode = require('err-code')\n\nconst { pipe } = require('it-pipe')\n\nconst MulticodecTopology = require('../topology/multicodec-topology')\nconst { codes } = require('./errors')\n\nconst { RPC } = require('./message/rpc')\nconst PeerStreams = require('./peer-streams')\nconst { SignaturePolicy } = require('./signature-policy')\nconst utils = require('./utils')\n\nconst {\n  signMessage,\n  verifySignature\n} = require('./message/sign')\n\n/**\n * @typedef {any} Libp2p\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('bl')} BufferList\n * @typedef {import('../stream-muxer/types').MuxedStream} MuxedStream\n * @typedef {import('../connection/connection')} Connection\n * @typedef {import('./signature-policy').SignaturePolicyType} SignaturePolicyType\n * @typedef {import('./message/rpc').IRPC} IRPC\n * @typedef {import('./message/rpc').RPC.SubOpts} RPCSubOpts\n * @typedef {import('./message/rpc').RPC.Message} RPCMessage\n */\n\n/**\n * @typedef {Object} InMessage\n * @property {string} [from]\n * @property {string} receivedFrom\n * @property {string[]} topicIDs\n * @property {Uint8Array} [seqno]\n * @property {Uint8Array} data\n * @property {Uint8Array} [signature]\n * @property {Uint8Array} [key]\n *\n * @typedef {Object} PubsubProperties\n * @property {string} debugName - log namespace\n * @property {Array<string>|string} multicodecs - protocol identificers to connect\n * @property {Libp2p} libp2p\n *\n * @typedef {Object} PubsubOptions\n * @property {SignaturePolicyType} [globalSignaturePolicy = SignaturePolicy.StrictSign] - defines how signatures should be handled\n * @property {boolean} [canRelayMessage = false] - if can relay messages not subscribed\n * @property {boolean} [emitSelf = false] - if publish should emit to self, if subscribed\n */\n\n/**\n * PubsubBaseProtocol handles the peers and connections logic for pubsub routers\n * and specifies the API that pubsub routers should have.\n */\nclass PubsubBaseProtocol extends EventEmitter {\n  /**\n   * @param {PubsubProperties & PubsubOptions} props\n   * @abstract\n   */\n  constructor ({\n    debugName,\n    multicodecs,\n    libp2p,\n    globalSignaturePolicy = SignaturePolicy.StrictSign,\n    canRelayMessage = false,\n    emitSelf = false\n  }) {\n    if (typeof debugName !== 'string') {\n      throw new Error('a debugname `string` is required')\n    }\n\n    if (!multicodecs) {\n      throw new Error('multicodecs are required')\n    }\n\n    if (!libp2p) {\n      throw new Error('libp2p is required')\n    }\n\n    super()\n\n    this.log = Object.assign(debug(debugName), {\n      err: debug(`${debugName}:error`)\n    })\n\n    /**\n     * @type {Array<string>}\n     */\n    this.multicodecs = utils.ensureArray(multicodecs)\n    this._libp2p = libp2p\n    this.registrar = libp2p.registrar\n    /**\n     * @type {PeerId}\n     */\n    this.peerId = libp2p.peerId\n\n    this.started = false\n\n    /**\n     * Map of topics to which peers are subscribed to\n     *\n     * @type {Map<string, Set<string>>}\n     */\n    this.topics = new Map()\n\n    /**\n     * List of our subscriptions\n     *\n     * @type {Set<string>}\n     */\n    this.subscriptions = new Set()\n\n    /**\n     * Map of peer streams\n     *\n     * @type {Map<string, import('./peer-streams')>}\n     */\n    this.peers = new Map()\n\n    // validate signature policy\n    if (!SignaturePolicy[globalSignaturePolicy]) {\n      throw errcode(new Error('Invalid global signature policy'), codes.ERR_INVALID_SIGNATURE_POLICY)\n    }\n\n    /**\n     * The signature policy to follow by default\n     *\n     * @type {string}\n     */\n    this.globalSignaturePolicy = globalSignaturePolicy\n\n    /**\n     * If router can relay received messages, even if not subscribed\n     *\n     * @type {boolean}\n     */\n    this.canRelayMessage = canRelayMessage\n\n    /**\n     * if publish should emit to self, if subscribed\n     *\n     * @type {boolean}\n     */\n    this.emitSelf = emitSelf\n\n    /**\n     * Topic validator function\n     *\n     * @typedef {function(string, InMessage): Promise<void>} validator\n     */\n    /**\n     * Topic validator map\n     *\n     * Keyed by topic\n     * Topic validators are functions with the following input:\n     *\n     * @type {Map<string, validator>}\n     */\n    this.topicValidators = new Map()\n\n    this._registrarId = undefined\n    this._onIncomingStream = this._onIncomingStream.bind(this)\n    this._onPeerConnected = this._onPeerConnected.bind(this)\n    this._onPeerDisconnected = this._onPeerDisconnected.bind(this)\n  }\n\n  // LIFECYCLE METHODS\n\n  /**\n   * Register the pubsub protocol onto the libp2p node.\n   *\n   * @returns {void}\n   */\n  start () {\n    if (this.started) {\n      return\n    }\n    this.log('starting')\n\n    // Incoming streams\n    // Called after a peer dials us\n    this.registrar.handle(this.multicodecs, this._onIncomingStream)\n\n    // register protocol with topology\n    // Topology callbacks called on connection manager changes\n    const topology = new MulticodecTopology({\n      multicodecs: this.multicodecs,\n      handlers: {\n        onConnect: this._onPeerConnected,\n        onDisconnect: this._onPeerDisconnected\n      }\n    })\n    this._registrarId = this.registrar.register(topology)\n\n    this.log('started')\n    this.started = true\n  }\n\n  /**\n   * Unregister the pubsub protocol and the streams with other peers will be closed.\n   *\n   * @returns {void}\n   */\n  stop () {\n    if (!this.started) {\n      return\n    }\n\n    // unregister protocol and handlers\n    this.registrar.unregister(this._registrarId)\n\n    this.log('stopping')\n    this.peers.forEach((peerStreams) => peerStreams.close())\n\n    this.peers = new Map()\n    this.subscriptions = new Set()\n    this.started = false\n    this.log('stopped')\n  }\n\n  /**\n   * On an inbound stream opened.\n   *\n   * @protected\n   * @param {Object} props\n   * @param {string} props.protocol\n   * @param {MuxedStream} props.stream\n   * @param {Connection} props.connection - connection\n   */\n  _onIncomingStream ({ protocol, stream, connection }) {\n    const peerId = connection.remotePeer\n    const idB58Str = peerId.toB58String()\n    const peer = this._addPeer(peerId, protocol)\n    const inboundStream = peer.attachInboundStream(stream)\n\n    this._processMessages(idB58Str, inboundStream, peer)\n  }\n\n  /**\n   * Registrar notifies an established connection with pubsub protocol.\n   *\n   * @protected\n   * @param {PeerId} peerId - remote peer-id\n   * @param {Connection} conn - connection to the peer\n   */\n  async _onPeerConnected (peerId, conn) {\n    const idB58Str = peerId.toB58String()\n    this.log('connected', idB58Str)\n\n    try {\n      const { stream, protocol } = await conn.newStream(this.multicodecs)\n      const peer = this._addPeer(peerId, protocol)\n      await peer.attachOutboundStream(stream)\n    } catch (err) {\n      this.log.err(err)\n    }\n\n    // Immediately send my own subscriptions to the newly established conn\n    this._sendSubscriptions(idB58Str, Array.from(this.subscriptions), true)\n  }\n\n  /**\n   * Registrar notifies a closing connection with pubsub protocol.\n   *\n   * @protected\n   * @param {PeerId} peerId - peerId\n   * @param {Error} [err] - error for connection end\n   */\n  _onPeerDisconnected (peerId, err) {\n    const idB58Str = peerId.toB58String()\n\n    this.log('connection ended', idB58Str, err ? err.message : '')\n    this._removePeer(peerId)\n  }\n\n  /**\n   * Notifies the router that a peer has been connected\n   *\n   * @protected\n   * @param {PeerId} peerId\n   * @param {string} protocol\n   * @returns {PeerStreams}\n   */\n  _addPeer (peerId, protocol) {\n    const id = peerId.toB58String()\n    const existing = this.peers.get(id)\n\n    // If peer streams already exists, do nothing\n    if (existing) {\n      return existing\n    }\n\n    // else create a new peer streams\n    this.log('new peer', id)\n\n    const peerStreams = new PeerStreams({\n      id: peerId,\n      protocol\n    })\n\n    this.peers.set(id, peerStreams)\n    peerStreams.once('close', () => this._removePeer(peerId))\n\n    return peerStreams\n  }\n\n  /**\n   * Notifies the router that a peer has been disconnected.\n   *\n   * @protected\n   * @param {PeerId} peerId\n   * @returns {PeerStreams | undefined}\n   */\n  _removePeer (peerId) {\n    if (!peerId) return\n    const id = peerId.toB58String()\n    const peerStreams = this.peers.get(id)\n    if (!peerStreams) return\n\n    // close peer streams\n    peerStreams.removeAllListeners()\n    peerStreams.close()\n\n    // delete peer streams\n    this.log('delete peer', id)\n    this.peers.delete(id)\n\n    // remove peer from topics map\n    for (const peers of this.topics.values()) {\n      peers.delete(id)\n    }\n\n    return peerStreams\n  }\n\n  // MESSAGE METHODS\n\n  /**\n   * Responsible for processing each RPC message received by other peers.\n   *\n   * @param {string} idB58Str - peer id string in base58\n   * @param {AsyncIterable<Uint8Array|BufferList>} stream - inbound stream\n   * @param {PeerStreams} peerStreams - PubSub peer\n   * @returns {Promise<void>}\n   */\n  async _processMessages (idB58Str, stream, peerStreams) {\n    try {\n      await pipe(\n        stream,\n        async (source) => {\n          for await (const data of source) {\n            const rpcBytes = data instanceof Uint8Array ? data : data.slice()\n            const rpcMsg = this._decodeRpc(rpcBytes)\n\n            await this._processRpc(idB58Str, peerStreams, rpcMsg)\n          }\n        }\n      )\n    } catch (err) {\n      this._onPeerDisconnected(peerStreams.id, err)\n    }\n  }\n\n  /**\n   * Handles an rpc request from a peer\n   *\n   * @param {string} idB58Str\n   * @param {PeerStreams} peerStreams\n   * @param {RPC} rpc\n   * @returns {Promise<boolean>}\n   */\n  async _processRpc (idB58Str, peerStreams, rpc) {\n    this.log('rpc from', idB58Str)\n    const subs = rpc.subscriptions\n    const msgs = rpc.msgs\n\n    if (subs.length) {\n      // update peer subscriptions\n      subs.forEach((subOpt) => {\n        this._processRpcSubOpt(idB58Str, subOpt)\n      })\n      this.emit('pubsub:subscription-change', peerStreams.id, subs)\n    }\n\n    if (!this._acceptFrom(idB58Str)) {\n      this.log('received message from unacceptable peer %s', idB58Str)\n      return false\n    }\n\n    if (msgs.length) {\n      // @ts-ignore RPC message is modified\n      for (const message of msgs) {\n        if (!(this.canRelayMessage || (message.topicIDs && message.topicIDs.some((topic) => this.subscriptions.has(topic))))) {\n          this.log('received message we didn\\'t subscribe to. Dropping.')\n          continue\n        }\n        const msg = utils.normalizeInRpcMessage(message, idB58Str)\n        await this._processRpcMessage(msg)\n      }\n    }\n    return true\n  }\n\n  /**\n   * Handles a subscription change from a peer\n   *\n   * @param {string} id\n   * @param {RPC.ISubOpts} subOpt\n   */\n  _processRpcSubOpt (id, subOpt) {\n    const t = subOpt.topicID\n\n    if (!t) {\n      return\n    }\n\n    let topicSet = this.topics.get(t)\n    if (!topicSet) {\n      topicSet = new Set()\n      this.topics.set(t, topicSet)\n    }\n\n    if (subOpt.subscribe) {\n      // subscribe peer to new topic\n      topicSet.add(id)\n    } else {\n      // unsubscribe from existing topic\n      topicSet.delete(id)\n    }\n  }\n\n  /**\n   * Handles an message from a peer\n   *\n   * @param {InMessage} msg\n   * @returns {Promise<void>}\n   */\n  async _processRpcMessage (msg) {\n    if (this.peerId.toB58String() === msg.from && !this.emitSelf) {\n      return\n    }\n\n    // Ensure the message is valid before processing it\n    try {\n      await this.validate(msg)\n    } catch (err) {\n      this.log('Message is invalid, dropping it. %O', err)\n      return\n    }\n\n    // Emit to self\n    this._emitMessage(msg)\n\n    return this._publish(utils.normalizeOutRpcMessage(msg))\n  }\n\n  /**\n   * Emit a message from a peer\n   *\n   * @param {InMessage} message\n   */\n  _emitMessage (message) {\n    message.topicIDs.forEach((topic) => {\n      if (this.subscriptions.has(topic)) {\n        this.emit(topic, message)\n      }\n    })\n  }\n\n  /**\n   * The default msgID implementation\n   * Child class can override this.\n   *\n   * @param {InMessage} msg - the message object\n   * @returns {Promise<Uint8Array> | Uint8Array} message id as bytes\n   */\n  getMsgId (msg) {\n    const signaturePolicy = this.globalSignaturePolicy\n    switch (signaturePolicy) {\n      case SignaturePolicy.StrictSign:\n        // @ts-ignore seqno is optional in protobuf definition but it will exist\n        return utils.msgId(msg.from, msg.seqno)\n      case SignaturePolicy.StrictNoSign:\n        return utils.noSignMsgId(msg.data)\n      default:\n        throw errcode(new Error('Cannot get message id: unhandled signature policy: ' + signaturePolicy), codes.ERR_UNHANDLED_SIGNATURE_POLICY)\n    }\n  }\n\n  /**\n   * Whether to accept a message from a peer\n   * Override to create a graylist\n   *\n   * @param {string} id\n   * @returns {boolean}\n   */\n  _acceptFrom (id) {\n    return true\n  }\n\n  /**\n   * Decode Uint8Array into an RPC object.\n   * This can be override to use a custom router protobuf.\n   *\n   * @param {Uint8Array} bytes\n   * @returns {RPC}\n   */\n  _decodeRpc (bytes) {\n    return RPC.decode(bytes)\n  }\n\n  /**\n   * Encode RPC object into a Uint8Array.\n   * This can be override to use a custom router protobuf.\n   *\n   * @param {IRPC} rpc\n   * @returns {Uint8Array}\n   */\n  _encodeRpc (rpc) {\n    return RPC.encode(rpc).finish()\n  }\n\n  /**\n   * Send an rpc object to a peer\n   *\n   * @param {string} id - peer id\n   * @param {IRPC} rpc\n   * @returns {void}\n   */\n  _sendRpc (id, rpc) {\n    const peerStreams = this.peers.get(id)\n    if (!peerStreams || !peerStreams.isWritable) {\n      const msg = `Cannot send RPC to ${id} as there is no open stream to it available`\n\n      this.log.err(msg)\n      return\n    }\n    peerStreams.write(this._encodeRpc(rpc))\n  }\n\n  /**\n   * Send subscroptions to a peer\n   *\n   * @param {string} id - peer id\n   * @param {string[]} topics\n   * @param {boolean} subscribe - set to false for unsubscriptions\n   * @returns {void}\n   */\n  _sendSubscriptions (id, topics, subscribe) {\n    return this._sendRpc(id, {\n      subscriptions: topics.map(t => ({ topicID: t, subscribe: subscribe }))\n    })\n  }\n\n  /**\n   * Validates the given message. The signature will be checked for authenticity.\n   * Throws an error on invalid messages\n   *\n   * @param {InMessage} message\n   * @returns {Promise<void>}\n   */\n  async validate (message) { // eslint-disable-line require-await\n    const signaturePolicy = this.globalSignaturePolicy\n    switch (signaturePolicy) {\n      case SignaturePolicy.StrictNoSign:\n        if (message.from) {\n          throw errcode(new Error('StrictNoSigning: from should not be present'), codes.ERR_UNEXPECTED_FROM)\n        }\n        if (message.signature) {\n          throw errcode(new Error('StrictNoSigning: signature should not be present'), codes.ERR_UNEXPECTED_SIGNATURE)\n        }\n        if (message.key) {\n          throw errcode(new Error('StrictNoSigning: key should not be present'), codes.ERR_UNEXPECTED_KEY)\n        }\n        if (message.seqno) {\n          throw errcode(new Error('StrictNoSigning: seqno should not be present'), codes.ERR_UNEXPECTED_SEQNO)\n        }\n        break\n      case SignaturePolicy.StrictSign:\n        if (!message.signature) {\n          throw errcode(new Error('StrictSigning: Signing required and no signature was present'), codes.ERR_MISSING_SIGNATURE)\n        }\n        if (!message.seqno) {\n          throw errcode(new Error('StrictSigning: Signing required and no seqno was present'), codes.ERR_MISSING_SEQNO)\n        }\n        if (!(await verifySignature(message))) {\n          throw errcode(new Error('StrictSigning: Invalid message signature'), codes.ERR_INVALID_SIGNATURE)\n        }\n        break\n      default:\n        throw errcode(new Error('Cannot validate message: unhandled signature policy: ' + signaturePolicy), codes.ERR_UNHANDLED_SIGNATURE_POLICY)\n    }\n\n    for (const topic of message.topicIDs) {\n      const validatorFn = this.topicValidators.get(topic)\n      if (validatorFn) {\n        await validatorFn(topic, message)\n      }\n    }\n  }\n\n  /**\n   * Normalizes the message and signs it, if signing is enabled.\n   * Should be used by the routers to create the message to send.\n   *\n   * @protected\n   * @param {InMessage} message\n   * @returns {Promise<InMessage>}\n   */\n  _buildMessage (message) {\n    const signaturePolicy = this.globalSignaturePolicy\n    switch (signaturePolicy) {\n      case SignaturePolicy.StrictSign:\n        message.from = this.peerId.toB58String()\n        message.seqno = utils.randomSeqno()\n        return signMessage(this.peerId, message)\n      case SignaturePolicy.StrictNoSign:\n        return Promise.resolve(message)\n      default:\n        throw errcode(new Error('Cannot build message: unhandled signature policy: ' + signaturePolicy), codes.ERR_UNHANDLED_SIGNATURE_POLICY)\n    }\n  }\n\n  // API METHODS\n\n  /**\n   * Get a list of the peer-ids that are subscribed to one topic.\n   *\n   * @param {string} topic\n   * @returns {Array<string>}\n   */\n  getSubscribers (topic) {\n    if (!this.started) {\n      throw errcode(new Error('not started yet'), 'ERR_NOT_STARTED_YET')\n    }\n\n    if (!topic || typeof topic !== 'string') {\n      throw errcode(new Error('a string topic must be provided'), 'ERR_NOT_VALID_TOPIC')\n    }\n\n    const peersInTopic = this.topics.get(topic)\n    if (!peersInTopic) {\n      return []\n    }\n    return Array.from(peersInTopic)\n  }\n\n  /**\n   * Publishes messages to all subscribed peers\n   *\n   * @param {string} topic\n   * @param {Uint8Array} message\n   * @returns {Promise<void>}\n   */\n  async publish (topic, message) {\n    if (!this.started) {\n      throw new Error('Pubsub has not started')\n    }\n\n    this.log('publish', topic, message)\n\n    const from = this.peerId.toB58String()\n    const msgObject = {\n      receivedFrom: from,\n      data: message,\n      topicIDs: [topic]\n    }\n\n    // ensure that the message follows the signature policy\n    const outMsg = await this._buildMessage(msgObject)\n    // @ts-ignore different type as from is converted\n    const msg = utils.normalizeInRpcMessage(outMsg)\n\n    // Emit to self if I'm interested and emitSelf enabled\n    this.emitSelf && this._emitMessage(msg)\n\n    // send to all the other peers\n    await this._publish(msg)\n  }\n\n  /**\n   * Overriding the implementation of publish should handle the appropriate algorithms for the publish/subscriber implementation.\n   * For example, a Floodsub implementation might simply publish each message to each topic for every peer\n   *\n   * @abstract\n   * @param {InMessage|RPCMessage} message\n   * @returns {Promise<void>}\n   *\n   */\n  _publish (message) {\n    throw errcode(new Error('publish must be implemented by the subclass'), 'ERR_NOT_IMPLEMENTED')\n  }\n\n  /**\n   * Subscribes to a given topic.\n   *\n   * @abstract\n   * @param {string} topic\n   * @returns {void}\n   */\n  subscribe (topic) {\n    if (!this.started) {\n      throw new Error('Pubsub has not started')\n    }\n\n    if (!this.subscriptions.has(topic)) {\n      this.subscriptions.add(topic)\n      this.peers.forEach((_, id) => this._sendSubscriptions(id, [topic], true))\n    }\n  }\n\n  /**\n   * Unsubscribe from the given topic.\n   *\n   * @param {string} topic\n   * @returns {void}\n   */\n  unsubscribe (topic) {\n    if (!this.started) {\n      throw new Error('Pubsub is not started')\n    }\n\n    if (this.subscriptions.has(topic) && this.listenerCount(topic) === 0) {\n      this.subscriptions.delete(topic)\n      this.peers.forEach((_, id) => this._sendSubscriptions(id, [topic], false))\n    }\n  }\n\n  /**\n   * Get the list of topics which the peer is subscribed to.\n   *\n   * @returns {Array<string>}\n   */\n  getTopics () {\n    if (!this.started) {\n      throw new Error('Pubsub is not started')\n    }\n\n    return Array.from(this.subscriptions)\n  }\n}\n\nPubsubBaseProtocol.utils = utils\nPubsubBaseProtocol.SignaturePolicy = SignaturePolicy\n\nmodule.exports = PubsubBaseProtocol\n"]},"metadata":{},"sourceType":"script"}