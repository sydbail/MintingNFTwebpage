{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst toCamel = require('../lib/object-to-camel');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/key').API<HTTPClientExtraOptions>} KeyAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {KeyAPI[\"gen\"]}\n   */\n  function gen(_x) {\n    return _gen.apply(this, arguments);\n  }\n\n  function _gen() {\n    _gen = _asyncToGenerator(function* (name, options = {\n      type: 'rsa',\n      size: 2048\n    }) {\n      const res = yield api.post('key/gen', {\n        timeout: options.timeout,\n        signal: options.signal,\n        searchParams: toUrlSearchParams({\n          arg: name,\n          ...options\n        }),\n        headers: options.headers\n      });\n      const data = yield res.json(); // @ts-ignore server output is not typed\n\n      return toCamel(data);\n    });\n    return _gen.apply(this, arguments);\n  }\n\n  return gen;\n});","map":{"version":3,"sources":["/Users/sydneybailey/Internship/contract-testing/node_modules/ipfs-http-client/src/key/gen.js"],"names":["toCamel","require","configure","toUrlSearchParams","module","exports","api","gen","name","options","type","size","res","post","timeout","signal","searchParams","arg","headers","data","json"],"mappings":"AAAA;;;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,wBAAD,CAAvB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,6BAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AAEAG,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAACI,GAAG,IAAI;AAChC;AACF;AACA;AAHkC,WAIjBC,GAJiB;AAAA;AAAA;;AAAA;AAAA,6BAIhC,WAAoBC,IAApB,EAA0BC,OAAO,GAAG;AAAEC,MAAAA,IAAI,EAAE,KAAR;AAAeC,MAAAA,IAAI,EAAE;AAArB,KAApC,EAAiE;AAC/D,YAAMC,GAAG,SAASN,GAAG,CAACO,IAAJ,CAAS,SAAT,EAAoB;AACpCC,QAAAA,OAAO,EAAEL,OAAO,CAACK,OADmB;AAEpCC,QAAAA,MAAM,EAAEN,OAAO,CAACM,MAFoB;AAGpCC,QAAAA,YAAY,EAAEb,iBAAiB,CAAC;AAC9Bc,UAAAA,GAAG,EAAET,IADyB;AAE9B,aAAGC;AAF2B,SAAD,CAHK;AAOpCS,QAAAA,OAAO,EAAET,OAAO,CAACS;AAPmB,OAApB,CAAlB;AASA,YAAMC,IAAI,SAASP,GAAG,CAACQ,IAAJ,EAAnB,CAV+D,CAY/D;;AACA,aAAOpB,OAAO,CAACmB,IAAD,CAAd;AACD,KAlB+B;AAAA;AAAA;;AAmBhC,SAAOZ,GAAP;AACD,CApByB,CAA1B","sourcesContent":["'use strict'\n\nconst toCamel = require('../lib/object-to-camel')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/key').API<HTTPClientExtraOptions>} KeyAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {KeyAPI[\"gen\"]}\n   */\n  async function gen (name, options = { type: 'rsa', size: 2048 }) {\n    const res = await api.post('key/gen', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: name,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    // @ts-ignore server output is not typed\n    return toCamel(data)\n  }\n  return gen\n})\n"]},"metadata":{},"sourceType":"script"}