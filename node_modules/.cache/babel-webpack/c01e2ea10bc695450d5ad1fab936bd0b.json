{"ast":null,"code":"import _awaitAsyncGenerator from \"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator\";\nimport _wrapAsyncGenerator from \"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator\";\nimport _asyncIterator from \"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/esm/asyncIterator\";\nimport parallelBatch from 'it-parallel-batch';\nimport defaultOptions from './options.js';\nexport function importer(_x, _x2) {\n  return _importer.apply(this, arguments);\n}\n\nfunction _importer() {\n  _importer = _wrapAsyncGenerator(function* (source, blockstore, options = {}) {\n    const opts = defaultOptions(options);\n    let dagBuilder;\n\n    if (typeof options.dagBuilder === 'function') {\n      dagBuilder = options.dagBuilder;\n    } else {\n      dagBuilder = (yield _awaitAsyncGenerator(import('./dag-builder/index.js'))).default;\n    }\n\n    let treeBuilder;\n\n    if (typeof options.treeBuilder === 'function') {\n      treeBuilder = options.treeBuilder;\n    } else {\n      treeBuilder = (yield _awaitAsyncGenerator(import('./tree-builder.js'))).default;\n    }\n\n    let candidates;\n\n    if (Symbol.asyncIterator in source || Symbol.iterator in source) {\n      candidates = source;\n    } else {\n      candidates = [source];\n    }\n\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n\n    var _iteratorError;\n\n    try {\n      for (var _iterator = _asyncIterator(treeBuilder(parallelBatch(dagBuilder(candidates, blockstore, opts), opts.fileImportConcurrency), blockstore, opts)), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n        const entry = _value;\n        yield {\n          cid: entry.cid,\n          path: entry.path,\n          unixfs: entry.unixfs,\n          size: entry.size\n        };\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          yield _awaitAsyncGenerator(_iterator.return());\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  });\n  return _importer.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/sydneybailey/Internship/contract-testing/node_modules/ipfs-unixfs-importer/esm/src/index.js"],"names":["parallelBatch","defaultOptions","importer","source","blockstore","options","opts","dagBuilder","default","treeBuilder","candidates","Symbol","asyncIterator","iterator","fileImportConcurrency","entry","cid","path","unixfs","size"],"mappings":";;;AAAA,OAAOA,aAAP,MAA0B,mBAA1B;AACA,OAAOC,cAAP,MAA2B,cAA3B;AACA,gBAAuBC,QAAvB;AAAA;AAAA;;;kCAAO,WAAyBC,MAAzB,EAAiCC,UAAjC,EAA6CC,OAAO,GAAG,EAAvD,EAA2D;AAChE,UAAMC,IAAI,GAAGL,cAAc,CAACI,OAAD,CAA3B;AACA,QAAIE,UAAJ;;AACA,QAAI,OAAOF,OAAO,CAACE,UAAf,KAA8B,UAAlC,EAA8C;AAC5CA,MAAAA,UAAU,GAAGF,OAAO,CAACE,UAArB;AACD,KAFD,MAEO;AACLA,MAAAA,UAAU,GAAG,4BAAO,OAAO,wBAAP,CAAP,GAAyCC,OAAtD;AACD;;AACD,QAAIC,WAAJ;;AACA,QAAI,OAAOJ,OAAO,CAACI,WAAf,KAA+B,UAAnC,EAA+C;AAC7CA,MAAAA,WAAW,GAAGJ,OAAO,CAACI,WAAtB;AACD,KAFD,MAEO;AACLA,MAAAA,WAAW,GAAG,4BAAO,OAAO,mBAAP,CAAP,GAAoCD,OAAlD;AACD;;AACD,QAAIE,UAAJ;;AACA,QAAIC,MAAM,CAACC,aAAP,IAAwBT,MAAxB,IAAkCQ,MAAM,CAACE,QAAP,IAAmBV,MAAzD,EAAiE;AAC/DO,MAAAA,UAAU,GAAGP,MAAb;AACD,KAFD,MAEO;AACLO,MAAAA,UAAU,GAAG,CAACP,MAAD,CAAb;AACD;;AAnB+D;AAAA;;AAAA;;AAAA;AAoBhE,0CAA0BM,WAAW,CAACT,aAAa,CAACO,UAAU,CAACG,UAAD,EAAaN,UAAb,EAAyBE,IAAzB,CAAX,EAA2CA,IAAI,CAACQ,qBAAhD,CAAd,EAAsFV,UAAtF,EAAkGE,IAAlG,CAArC,gOAA8I;AAAA,cAA7HS,KAA6H;AAC5I,cAAM;AACJC,UAAAA,GAAG,EAAED,KAAK,CAACC,GADP;AAEJC,UAAAA,IAAI,EAAEF,KAAK,CAACE,IAFR;AAGJC,UAAAA,MAAM,EAAEH,KAAK,CAACG,MAHV;AAIJC,UAAAA,IAAI,EAAEJ,KAAK,CAACI;AAJR,SAAN;AAMD;AA3B+D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA4BjE,G","sourcesContent":["import parallelBatch from 'it-parallel-batch';\nimport defaultOptions from './options.js';\nexport async function* importer(source, blockstore, options = {}) {\n  const opts = defaultOptions(options);\n  let dagBuilder;\n  if (typeof options.dagBuilder === 'function') {\n    dagBuilder = options.dagBuilder;\n  } else {\n    dagBuilder = (await import('./dag-builder/index.js')).default;\n  }\n  let treeBuilder;\n  if (typeof options.treeBuilder === 'function') {\n    treeBuilder = options.treeBuilder;\n  } else {\n    treeBuilder = (await import('./tree-builder.js')).default;\n  }\n  let candidates;\n  if (Symbol.asyncIterator in source || Symbol.iterator in source) {\n    candidates = source;\n  } else {\n    candidates = [source];\n  }\n  for await (const entry of treeBuilder(parallelBatch(dagBuilder(candidates, blockstore, opts), opts.fileImportConcurrency), blockstore, opts)) {\n    yield {\n      cid: entry.cid,\n      path: entry.path,\n      unixfs: entry.unixfs,\n      size: entry.size\n    };\n  }\n}"]},"metadata":{},"sourceType":"module"}