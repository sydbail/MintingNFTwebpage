{"ast":null,"code":"import _asyncToGenerator from \"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!/Users/sydneybailey/Internship/Demo/node_modules/@ngtools/webpack/src/loaders/direct-resource.js!./mint.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./mint.component.css\";\nimport { Component, NgZone, Input } from '@angular/core';\nimport { Web3Service } from '../services/web3.service'; //contract services\n\nimport { BasicContractService } from '../services/basiccontract.service';\nimport { IpfscontractService } from '../services/ipfscontract.service';\nimport { NotransfercontractService } from '../services/notransfercontract.service';\nimport { NotransferipfscontractService } from '../services/notransferipfscontract.service';\nlet MintComponent = class MintComponent {\n  _ngZone;\n  web3Service;\n  basicService;\n  ipfsconService;\n  ntbasicService;\n  ntipfsService;\n  filesList;\n  userContract;\n  window; //metamask info\n\n  account; //contract\n\n  metacontract;\n  contractAddress;\n  balance;\n  tokensMinted = 0;\n  tokenID;\n  tokenURI;\n  recipientAddress;\n  finished = false; //form vars\n\n  getID;\n  getownerID;\n  ownerAddr;\n\n  constructor(_ngZone, web3Service, basicService, ipfsconService, ntbasicService, ntipfsService) {\n    this._ngZone = _ngZone;\n    this.web3Service = web3Service;\n    this.basicService = basicService;\n    this.ipfsconService = ipfsconService;\n    this.ntbasicService = ntbasicService;\n    this.ntipfsService = ntipfsService;\n    this.onReady();\n    this.checkContract();\n  }\n\n  onReady() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      let accounts = yield _this.web3Service.getAccounts();\n      _this.account = accounts[0];\n    })();\n  }\n\n  ngOnInit() {}\n\n  checkContract() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this2.userContract == 'basicNFT') {\n        _this2.metacontract = false;\n      } else if (_this2.userContract == 'IPFSNFT') {\n        _this2.metacontract = true;\n      } else if (_this2.userContract == 'noTransferbasicNFT') {\n        _this2.metacontract = false;\n      } else {\n        _this2.metacontract = true;\n      }\n    })();\n  }\n\n  getOwner() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this3.userContract == 'basicNFT') {\n        const owner = yield _this3.basicService.getOwner(_this3.getownerID);\n        _this3.ownerAddr = owner;\n      } else if (_this3.userContract == 'IPFSNFT') {\n        const owner = yield _this3.ipfsconService.getOwner(_this3.getownerID);\n        _this3.ownerAddr = owner;\n      } else if (_this3.userContract == 'noTransferbasicNFT') {\n        const owner = yield _this3.ntbasicService.getOwner(_this3.getownerID);\n        _this3.ownerAddr = owner;\n      } else {\n        const owner = yield _this3.ntipfsService.getOwner(_this3.getownerID);\n        _this3.ownerAddr = owner;\n      }\n    })();\n  }\n\n  mintCoin() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this4.userContract == 'basicNFT') {\n        for (let i = 0; i < _this4.filesList.length; i++) {\n          const response = yield _this4.basicService.mintCoin(_this4.account);\n          _this4.contractAddress = response.logs[0].address;\n          _this4.tokensMinted += 1;\n          _this4.filesList[i].tokenID = response.logs[0].args.tokenId.toNumber();\n        }\n\n        _this4.finished = true;\n      } else if (_this4.userContract == 'IPFSNFT') {\n        for (let i = 0; i < _this4.filesList.length; i++) {\n          const response = yield _this4.ipfsconService.mintCoin(_this4.account, _this4.filesList[i].imghash, _this4.filesList[i].metaHash);\n\n          if (response === null) {\n            alert(\"Error: An NFT has already been minted for this image!\");\n\n            _this4.filesList.splice(i, 1, \"Err\");\n\n            continue;\n          }\n\n          _this4.tokensMinted += 1;\n          _this4.contractAddress = response.logs[0].address;\n          _this4.filesList[i].tokenID = response.logs[0].args.tokenId.toNumber();\n          _this4.filesList[i].tURI = yield _this4.ipfsconService.getTokenUri(_this4.filesList[i].tokenID);\n        }\n\n        _this4.finished = true;\n      } else if (_this4.userContract == 'noTransferbasicNFT') {\n        for (let i = 0; i < _this4.filesList.length; i++) {\n          const response = yield _this4.ntbasicService.mintCoin(_this4.account);\n          _this4.contractAddress = response.logs[0].address;\n          _this4.tokensMinted += 1;\n          _this4.filesList[i].tokenID = response.logs[0].args.tokenId.toNumber();\n        }\n\n        _this4.finished = true;\n      } else {\n        for (let i = 0; i < _this4.filesList.length; i++) {\n          const response = yield _this4.ntipfsService.mintCoin(_this4.account, _this4.filesList[i].imghash, _this4.filesList[i].metaHash);\n\n          if (response === null) {\n            alert(\"Error: An NFT has already been minted for this image!\");\n\n            _this4.filesList.splice(i, 1, \"Err\");\n\n            continue;\n          }\n\n          _this4.contractAddress = response.logs[0].address;\n          _this4.tokensMinted += 1;\n          _this4.filesList[i].tokenID = response.logs[0].args.tokenId.toNumber();\n          _this4.filesList[i].tURI = yield _this4.ipfsconService.getTokenUri(_this4.filesList[i].tokenID);\n        }\n\n        _this4.finished = true;\n      }\n    })();\n  } //end mint coin\n  //METADATA ONLY contracts\n\n\n  getURI(tID) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this5.userContract == 'IPFSNFT') {\n        const tokenURI = yield _this5.ipfsconService.getTokenUri(tID);\n        _this5.tokenURI = tokenURI;\n      } else if (_this5.userContract == 'noTransferIPFSNFT') {\n        const tokenURI = yield _this5.ntipfsService.getTokenUri(tID);\n        _this5.tokenURI = tokenURI;\n      } else {\n        alert(\"Your tokens do not contain Metadata\");\n      }\n    })();\n  }\n\n  static ctorParameters = () => [{\n    type: NgZone\n  }, {\n    type: Web3Service\n  }, {\n    type: BasicContractService\n  }, {\n    type: IpfscontractService\n  }, {\n    type: NotransfercontractService\n  }, {\n    type: NotransferipfscontractService\n  }];\n  static propDecorators = {\n    filesList: [{\n      type: Input\n    }],\n    userContract: [{\n      type: Input\n    }]\n  };\n};\nMintComponent = __decorate([Component({\n  selector: 'app-mint',\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], MintComponent);\nexport { MintComponent };","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Demo/src/app/mint/mint.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, HostListener, NgZone, OnInit, Input } from '@angular/core';\nimport { Web3Service } from '../services/web3.service';\n//contract services\nimport { BasicContractService } from '../services/basiccontract.service';\nimport { IpfscontractService } from '../services/ipfscontract.service';\nimport { NotransfercontractService } from '../services/notransfercontract.service';\nimport { NotransferipfscontractService } from '../services/notransferipfscontract.service';\n\n@Component({\n  selector: 'app-mint',\n  templateUrl: './mint.component.html',\n  styleUrls: ['./mint.component.css']\n})\nexport class MintComponent implements OnInit {\n  @Input() filesList: any;\n  @Input() userContract: any;\n  window: any\n  //metamask info\n  account?: any;\n\n  //contract\n  metacontract?: boolean;\n  contractAddress?: string;\n\n  balance?: number;\n  tokensMinted: number = 0;\n  tokenID?: number;\n  tokenURI?: any;\n  recipientAddress?: string;\n  finished: boolean = false;\n\n  //form vars\n  getID?: number;\n  getownerID?: number;\n  ownerAddr?: string;\n\n  constructor(\n    private _ngZone: NgZone,\n    private web3Service: Web3Service,\n    private basicService: BasicContractService,\n    private ipfsconService: IpfscontractService,\n    private ntbasicService: NotransfercontractService,\n    private ntipfsService: NotransferipfscontractService\n    ) {\n    this.onReady();\n    this.checkContract();\n  }\n\n  async onReady() {\n    let accounts = await this.web3Service.getAccounts();\n    this.account = accounts[0];\n  }\n\n  ngOnInit(): void {}\n\n  async checkContract() {\n    if (this.userContract == 'basicNFT'){\n      this.metacontract = false;\n    } else if (this.userContract == 'IPFSNFT'){\n        this.metacontract = true;\n    } else if (this.userContract == 'noTransferbasicNFT'){\n        this.metacontract = false;\n    } else {\n        this.metacontract = true;\n     }\n  }\n\n  async getOwner() {\n    if(this.userContract == 'basicNFT'){\n      const owner = await this.basicService.getOwner(this.getownerID);\n      this.ownerAddr = owner;\n\n   } else if (this.userContract == 'IPFSNFT'){\n      const owner = await this.ipfsconService.getOwner(this.getownerID);\n      this.ownerAddr = owner;\n\n   } else if (this.userContract == 'noTransferbasicNFT'){\n      const owner = await this.ntbasicService.getOwner(this.getownerID);\n      this.ownerAddr = owner;\n\n  } else {\n      const owner = await this.ntipfsService.getOwner(this.getownerID)\n      this.ownerAddr = owner;\n    }\n  }\n\n async mintCoin () {\n    if(this.userContract == 'basicNFT'){\n      for(let i=0; i < this.filesList.length; i++ ){\n        const response = await this.basicService.mintCoin(this.account);\n        this.contractAddress = response.logs[0].address;\n        this.tokensMinted += 1;\n        this.filesList[i].tokenID = response.logs[0].args.tokenId.toNumber();\n      }\n      this.finished = true;\n    } else if (this.userContract == 'IPFSNFT'){\n      for(let i=0; i < this.filesList.length; i++ ){\n        const response = await this.ipfsconService.mintCoin(this.account, this.filesList[i].imghash, this.filesList[i].metaHash);\n        if(response === null){\n          alert(\"Error: An NFT has already been minted for this image!\");\n          this.filesList.splice(i,1,\"Err\");\n          continue;\n        }\n        this.tokensMinted += 1;\n        this.contractAddress = response.logs[0].address;\n        this.filesList[i].tokenID = response.logs[0].args.tokenId.toNumber();\n        this.filesList[i].tURI = await this.ipfsconService.getTokenUri(this.filesList[i].tokenID);\n      }\n      this.finished = true;\n    } else if (this.userContract == 'noTransferbasicNFT'){\n      for(let i=0; i < this.filesList.length; i++ ){\n        const response = await this.ntbasicService.mintCoin(this.account);\n        this.contractAddress = response.logs[0].address;\n        this.tokensMinted += 1;\n        this.filesList[i].tokenID = response.logs[0].args.tokenId.toNumber();\n      }\n      this.finished = true;\n    } else {\n      for(let i=0; i < this.filesList.length; i++ ){\n        const response = await this.ntipfsService.mintCoin(this.account, this.filesList[i].imghash, this.filesList[i].metaHash);\n        if(response === null){\n          alert(\"Error: An NFT has already been minted for this image!\");\n          this.filesList.splice(i,1, \"Err\");\n          continue;\n        }\n        this.contractAddress = response.logs[0].address;\n        this.tokensMinted += 1;\n        this.filesList[i].tokenID = response.logs[0].args.tokenId.toNumber();\n        this.filesList[i].tURI = await this.ipfsconService.getTokenUri(this.filesList[i].tokenID);\n      }\n      this.finished = true;\n    }\n  }//end mint coin\n\n  //METADATA ONLY contracts\n  async getURI(tID: any) {\n    if(this.userContract == 'IPFSNFT'){\n      const tokenURI = await this.ipfsconService.getTokenUri(tID);\n      this.tokenURI = tokenURI;\n    } else if(this.userContract == 'noTransferIPFSNFT') {\n      const tokenURI = await this.ntipfsService.getTokenUri(tID);\n      this.tokenURI = tokenURI;\n    } else {\n      alert(\"Your tokens do not contain Metadata\");\n    }\n  }\n\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}