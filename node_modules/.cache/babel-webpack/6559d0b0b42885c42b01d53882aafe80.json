{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst debug = require('debug');\n\nconst log = Object.assign(debug('libp2p:ping'), {\n  error: debug('libp2p:ping:err')\n});\n\nconst errCode = require('err-code');\n\nconst crypto = require('libp2p-crypto');\n\nconst {\n  pipe\n} = require('it-pipe'); // @ts-ignore it-buffer has no types exported\n\n\nconst {\n  toBuffer\n} = require('it-buffer');\n\nconst {\n  collect,\n  take\n} = require('streaming-iterables');\n\nconst {\n  equals\n} = require('uint8arrays/equals');\n\nconst {\n  PROTOCOL_NAME,\n  PING_LENGTH,\n  PROTOCOL_VERSION\n} = require('./constants');\n/**\n * @typedef {import('../')} Libp2p\n * @typedef {import('multiaddr').Multiaddr} Multiaddr\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('libp2p-interfaces/src/stream-muxer/types').MuxedStream} MuxedStream\n */\n\n/**\n * Ping a given peer and wait for its response, getting the operation latency.\n *\n * @param {Libp2p} node\n * @param {PeerId|Multiaddr} peer\n * @returns {Promise<number>}\n */\n\n\nfunction ping(_x, _x2) {\n  return _ping.apply(this, arguments);\n}\n/**\n * Subscribe ping protocol handler.\n *\n * @param {Libp2p} node\n */\n\n\nfunction _ping() {\n  _ping = _asyncToGenerator(function* (node, peer) {\n    const protocol = `/${node._config.protocolPrefix}/${PROTOCOL_NAME}/${PROTOCOL_VERSION}`; // @ts-ignore multiaddr might not have toB58String\n\n    log('dialing %s to %s', protocol, peer.toB58String ? peer.toB58String() : peer);\n    const connection = yield node.dial(peer);\n    const {\n      stream\n    } = yield connection.newStream(protocol);\n    const start = Date.now();\n    const data = crypto.randomBytes(PING_LENGTH);\n    const [result] = yield pipe([data], stream, (\n    /** @type {MuxedStream} */\n    stream) => take(1, stream), toBuffer, collect);\n    const end = Date.now();\n\n    if (!equals(data, result)) {\n      throw errCode(new Error('Received wrong ping ack'), 'ERR_WRONG_PING_ACK');\n    }\n\n    return end - start;\n  });\n  return _ping.apply(this, arguments);\n}\n\nfunction mount(node) {\n  node.handle(`/${node._config.protocolPrefix}/${PROTOCOL_NAME}/${PROTOCOL_VERSION}`, ({\n    stream\n  }) => pipe(stream, stream));\n}\n/**\n * Unsubscribe ping protocol handler.\n *\n * @param {Libp2p} node\n */\n\n\nfunction unmount(node) {\n  node.unhandle(`/${node._config.protocolPrefix}/${PROTOCOL_NAME}/${PROTOCOL_VERSION}`);\n}\n\nexports = module.exports = ping;\nexports.mount = mount;\nexports.unmount = unmount;","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Demo/node_modules/libp2p/src/ping/index.js"],"names":["debug","require","log","Object","assign","error","errCode","crypto","pipe","toBuffer","collect","take","equals","PROTOCOL_NAME","PING_LENGTH","PROTOCOL_VERSION","ping","node","peer","protocol","_config","protocolPrefix","toB58String","connection","dial","stream","newStream","start","Date","now","data","randomBytes","result","end","Error","mount","handle","unmount","unhandle","exports","module"],"mappings":"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","sourcesContent":["'use strict'\n\nconst debug = require('debug')\nconst log = Object.assign(debug('libp2p:ping'), {\n  error: debug('libp2p:ping:err')\n})\nconst errCode = require('err-code')\n\nconst crypto = require('libp2p-crypto')\nconst { pipe } = require('it-pipe')\n// @ts-ignore it-buffer has no types exported\nconst { toBuffer } = require('it-buffer')\nconst { collect, take } = require('streaming-iterables')\nconst { equals } = require('uint8arrays/equals')\n\nconst { PROTOCOL_NAME, PING_LENGTH, PROTOCOL_VERSION } = require('./constants')\n\n/**\n * @typedef {import('../')} Libp2p\n * @typedef {import('multiaddr').Multiaddr} Multiaddr\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('libp2p-interfaces/src/stream-muxer/types').MuxedStream} MuxedStream\n */\n\n/**\n * Ping a given peer and wait for its response, getting the operation latency.\n *\n * @param {Libp2p} node\n * @param {PeerId|Multiaddr} peer\n * @returns {Promise<number>}\n */\nasync function ping (node, peer) {\n  const protocol = `/${node._config.protocolPrefix}/${PROTOCOL_NAME}/${PROTOCOL_VERSION}`\n  // @ts-ignore multiaddr might not have toB58String\n  log('dialing %s to %s', protocol, peer.toB58String ? peer.toB58String() : peer)\n\n  const connection = await node.dial(peer)\n  const { stream } = await connection.newStream(protocol)\n\n  const start = Date.now()\n  const data = crypto.randomBytes(PING_LENGTH)\n\n  const [result] = await pipe(\n    [data],\n    stream,\n    (/** @type {MuxedStream} */ stream) => take(1, stream),\n    toBuffer,\n    collect\n  )\n  const end = Date.now()\n\n  if (!equals(data, result)) {\n    throw errCode(new Error('Received wrong ping ack'), 'ERR_WRONG_PING_ACK')\n  }\n\n  return end - start\n}\n\n/**\n * Subscribe ping protocol handler.\n *\n * @param {Libp2p} node\n */\nfunction mount (node) {\n  node.handle(`/${node._config.protocolPrefix}/${PROTOCOL_NAME}/${PROTOCOL_VERSION}`, ({ stream }) => pipe(stream, stream))\n}\n\n/**\n * Unsubscribe ping protocol handler.\n *\n * @param {Libp2p} node\n */\nfunction unmount (node) {\n  node.unhandle(`/${node._config.protocolPrefix}/${PROTOCOL_NAME}/${PROTOCOL_VERSION}`)\n}\n\nexports = module.exports = ping\nexports.mount = mount\nexports.unmount = unmount\n"]},"metadata":{},"sourceType":"script"}