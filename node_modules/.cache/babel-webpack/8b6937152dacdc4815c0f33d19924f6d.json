{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n\nconst first = require('it-first');\n\nconst last = require('it-last');\n\nconst {\n  resolve\n} = require('../../utils');\n\nconst errCode = require('err-code');\n/**\n * @param {Object} config\n * @param {import('ipfs-core-utils/src/multicodecs')} config.codecs\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n */\n\n\nmodule.exports = ({\n  codecs,\n  repo,\n  preload\n}) => {\n  /**\n   * @type {import('ipfs-core-types/src/dag').API[\"get\"]}\n   */\n  const get = /*#__PURE__*/function () {\n    var _get = _asyncToGenerator(function* (cid, options = {}) {\n      if (options.preload !== false) {\n        preload(cid);\n      }\n\n      if (options.path) {\n        const entry = options.localResolve ? yield first(resolve(cid, options.path, codecs, repo, options)) : yield last(resolve(cid, options.path, codecs, repo, options));\n        /** @type {import('ipfs-core-types/src/dag').GetResult} - first and last will return undefined when empty */\n\n        const result = entry;\n\n        if (!result) {\n          throw errCode(new Error('Not found'), 'ERR_NOT_FOUND');\n        }\n\n        return result;\n      }\n\n      const codec = yield codecs.getCodec(cid.code);\n      const block = yield repo.blocks.get(cid, options);\n      const node = codec.decode(block);\n      return {\n        value: node,\n        remainderPath: ''\n      };\n    });\n\n    function get(_x) {\n      return _get.apply(this, arguments);\n    }\n\n    return get;\n  }();\n\n  return withTimeoutOption(get);\n};","map":{"version":3,"sources":["/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/ipfs-core/src/components/dag/get.js"],"names":["withTimeoutOption","require","first","last","resolve","errCode","module","exports","codecs","repo","preload","get","cid","options","path","entry","localResolve","result","Error","codec","getCodec","code","block","blocks","node","decode","value","remainderPath"],"mappings":"AAAA;;;;AAEA,MAAMA,iBAAiB,GAAGC,OAAO,CAAC,yCAAD,CAAjC;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,UAAD,CAArB;;AACA,MAAME,IAAI,GAAGF,OAAO,CAAC,SAAD,CAApB;;AACA,MAAM;AAAEG,EAAAA;AAAF,IAAcH,OAAO,CAAC,aAAD,CAA3B;;AACA,MAAMI,OAAO,GAAGJ,OAAO,CAAC,UAAD,CAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACAK,MAAM,CAACC,OAAP,GAAiB,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA,IAAV;AAAgBC,EAAAA;AAAhB,CAAD,KAA+B;AAC9C;AACF;AACA;AACE,QAAMC,GAAG;AAAA,iCAAG,WAAoBC,GAApB,EAAyBC,OAAO,GAAG,EAAnC,EAAuC;AACjD,UAAIA,OAAO,CAACH,OAAR,KAAoB,KAAxB,EAA+B;AAC7BA,QAAAA,OAAO,CAACE,GAAD,CAAP;AACD;;AAED,UAAIC,OAAO,CAACC,IAAZ,EAAkB;AAChB,cAAMC,KAAK,GAAGF,OAAO,CAACG,YAAR,SACJd,KAAK,CAACE,OAAO,CAACQ,GAAD,EAAMC,OAAO,CAACC,IAAd,EAAoBN,MAApB,EAA4BC,IAA5B,EAAkCI,OAAlC,CAAR,CADD,SAEJV,IAAI,CAACC,OAAO,CAACQ,GAAD,EAAMC,OAAO,CAACC,IAAd,EAAoBN,MAApB,EAA4BC,IAA5B,EAAkCI,OAAlC,CAAR,CAFd;AAGA;;AACA,cAAMI,MAAM,GAAIF,KAAhB;;AAEA,YAAI,CAACE,MAAL,EAAa;AACX,gBAAMZ,OAAO,CAAC,IAAIa,KAAJ,CAAU,WAAV,CAAD,EAAyB,eAAzB,CAAb;AACD;;AAED,eAAOD,MAAP;AACD;;AAED,YAAME,KAAK,SAASX,MAAM,CAACY,QAAP,CAAgBR,GAAG,CAACS,IAApB,CAApB;AACA,YAAMC,KAAK,SAASb,IAAI,CAACc,MAAL,CAAYZ,GAAZ,CAAgBC,GAAhB,EAAqBC,OAArB,CAApB;AACA,YAAMW,IAAI,GAAGL,KAAK,CAACM,MAAN,CAAaH,KAAb,CAAb;AAEA,aAAO;AACLI,QAAAA,KAAK,EAAEF,IADF;AAELG,QAAAA,aAAa,EAAE;AAFV,OAAP;AAID,KA3BQ;;AAAA,aAAkBhB,GAAlB;AAAA;AAAA;;AAAA,WAAkBA,GAAlB;AAAA,KAAT;;AA6BA,SAAOX,iBAAiB,CAACW,GAAD,CAAxB;AACD,CAlCD","sourcesContent":["'use strict'\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\nconst first = require('it-first')\nconst last = require('it-last')\nconst { resolve } = require('../../utils')\nconst errCode = require('err-code')\n\n/**\n * @param {Object} config\n * @param {import('ipfs-core-utils/src/multicodecs')} config.codecs\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n */\nmodule.exports = ({ codecs, repo, preload }) => {\n  /**\n   * @type {import('ipfs-core-types/src/dag').API[\"get\"]}\n   */\n  const get = async function get (cid, options = {}) {\n    if (options.preload !== false) {\n      preload(cid)\n    }\n\n    if (options.path) {\n      const entry = options.localResolve\n        ? await first(resolve(cid, options.path, codecs, repo, options))\n        : await last(resolve(cid, options.path, codecs, repo, options))\n      /** @type {import('ipfs-core-types/src/dag').GetResult} - first and last will return undefined when empty */\n      const result = (entry)\n\n      if (!result) {\n        throw errCode(new Error('Not found'), 'ERR_NOT_FOUND')\n      }\n\n      return result\n    }\n\n    const codec = await codecs.getCodec(cid.code)\n    const block = await repo.blocks.get(cid, options)\n    const node = codec.decode(block)\n\n    return {\n      value: node,\n      remainderPath: ''\n    }\n  }\n\n  return withTimeoutOption(get)\n}\n"]},"metadata":{},"sourceType":"script"}