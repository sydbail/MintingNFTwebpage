{"ast":null,"code":"import _awaitAsyncGenerator from \"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator\";\nimport _wrapAsyncGenerator from \"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator\";\nimport _asyncIterator from \"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/esm/asyncIterator\";\nimport parallelBatch from 'it-parallel-batch';\nimport defaultOptions from './options.js';\nexport function importer(_x, _x2) {\n  return _importer.apply(this, arguments);\n}\n\nfunction _importer() {\n  _importer = _wrapAsyncGenerator(function* (source, blockstore, options = {}) {\n    const opts = defaultOptions(options);\n    let dagBuilder;\n\n    if (typeof options.dagBuilder === 'function') {\n      dagBuilder = options.dagBuilder;\n    } else {\n      dagBuilder = (yield _awaitAsyncGenerator(import('./dag-builder/index.js'))).default;\n    }\n\n    let treeBuilder;\n\n    if (typeof options.treeBuilder === 'function') {\n      treeBuilder = options.treeBuilder;\n    } else {\n      treeBuilder = (yield _awaitAsyncGenerator(import('./tree-builder.js'))).default;\n    }\n\n    let candidates;\n\n    if (Symbol.asyncIterator in source || Symbol.iterator in source) {\n      candidates = source;\n    } else {\n      candidates = [source];\n    }\n\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n\n    var _iteratorError;\n\n    try {\n      for (var _iterator = _asyncIterator(treeBuilder(parallelBatch(dagBuilder(candidates, blockstore, opts), opts.fileImportConcurrency), blockstore, opts)), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n        const entry = _value;\n        yield {\n          cid: entry.cid,\n          path: entry.path,\n          unixfs: entry.unixfs,\n          size: entry.size\n        };\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          yield _awaitAsyncGenerator(_iterator.return());\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  });\n  return _importer.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"module"}