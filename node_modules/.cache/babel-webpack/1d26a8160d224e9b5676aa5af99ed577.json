{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nconst cache = require('hashlru'); // @ts-ignore\n\n\nconst varint = require('varint');\n\nconst PeerId = require('peer-id');\n\nconst {\n  Key\n} = require('interface-datastore');\n\nconst {\n  default: Queue\n} = require('p-queue');\n\nconst c = require('./constants');\n\nconst utils = require('./utils');\n/**\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('interface-datastore').Datastore} Datastore\n */\n\n/**\n * This class manages known providers.\n * A provider is a peer that we know to have the content for a given CID.\n *\n * Every `cleanupInterval` providers are checked if they\n * are still valid, i.e. younger than the `provideValidity`.\n * If they are not, they are deleted.\n *\n * To ensure the list survives restarts of the daemon,\n * providers are stored in the datastore, but to ensure\n * access is fast there is an LRU cache in front of that.\n */\n\n\nclass Providers {\n  /**\n   * @param {Datastore} datastore\n   * @param {PeerId} [self]\n   * @param {number} [cacheSize=256]\n   */\n  constructor(datastore, self, cacheSize) {\n    this.datastore = datastore;\n    this._log = utils.logger(self, 'providers');\n    /**\n     * How often invalid records are cleaned. (in seconds)\n     *\n     * @type {number}\n     */\n\n    this.cleanupInterval = c.PROVIDERS_CLEANUP_INTERVAL;\n    /**\n     * How long is a provider valid for. (in seconds)\n     *\n     * @type {number}\n     */\n\n    this.provideValidity = c.PROVIDERS_VALIDITY;\n    /**\n     * LRU cache size\n     *\n     * @type {number}\n     */\n\n    this.lruCacheSize = cacheSize || c.PROVIDERS_LRU_CACHE_SIZE; // @ts-ignore hashlru types are wrong\n\n    this.providers = cache(this.lruCacheSize);\n    this.syncQueue = new Queue({\n      concurrency: 1\n    });\n  }\n  /**\n   * Start the provider cleanup service\n   */\n\n\n  start() {\n    this._cleaner = setInterval(() => this._cleanup(), this.cleanupInterval);\n  }\n  /**\n   * Release any resources.\n   */\n\n\n  stop() {\n    if (this._cleaner) {\n      clearInterval(this._cleaner);\n      this._cleaner = null;\n    }\n  }\n  /**\n   * Check all providers if they are still valid, and if not delete them.\n   *\n   * @returns {Promise<void>}\n   * @private\n   */\n\n\n  _cleanup() {\n    var _this = this;\n\n    return this.syncQueue.add( /*#__PURE__*/_asyncToGenerator(function* () {\n      _this._log('start cleanup');\n\n      const start = Date.now();\n      let count = 0;\n      let deleteCount = 0;\n      const deleted = new Map();\n\n      const batch = _this.datastore.batch(); // Get all provider entries from the datastore\n\n\n      const query = _this.datastore.query({\n        prefix: c.PROVIDERS_KEY_PREFIX\n      });\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n\n      var _iteratorError;\n\n      try {\n        for (var _iterator = _asyncIterator(query), _step, _value; _step = yield _iterator.next(), _iteratorNormalCompletion = _step.done, _value = yield _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n          const entry = _value;\n\n          try {\n            // Add a delete to the batch for each expired entry\n            const {\n              cid,\n              peerId\n            } = parseProviderKey(entry.key);\n            const time = readTime(entry.value);\n            const now = Date.now();\n            const delta = now - time;\n            const expired = delta > _this.provideValidity;\n\n            _this._log('comparing: %d - %d = %d > %d %s', now, time, delta, _this.provideValidity, expired ? '(expired)' : '');\n\n            if (expired) {\n              deleteCount++;\n              batch.delete(entry.key);\n              const peers = deleted.get(cid) || new Set();\n              peers.add(peerId);\n              deleted.set(cid, peers);\n            }\n\n            count++;\n          } catch (err) {\n            _this._log.error(err.message);\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            yield _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      _this._log('deleting %d / %d entries', deleteCount, count); // Commit the deletes to the datastore\n\n\n      if (deleted.size) {\n        yield batch.commit();\n      } // Clear expired entries from the cache\n\n\n      for (const [cid, peers] of deleted) {\n        const key = makeProviderKey(cid);\n\n        const provs = _this.providers.get(key);\n\n        if (provs) {\n          for (const peerId of peers) {\n            provs.delete(peerId);\n          }\n\n          if (provs.size === 0) {\n            _this.providers.remove(key);\n          } else {\n            _this.providers.set(key, provs);\n          }\n        }\n      }\n\n      _this._log('Cleanup successful (%dms)', Date.now() - start);\n    }));\n  }\n  /**\n   * Get the currently known provider peer ids for a given CID.\n   *\n   * @param {CID} cid\n   * @returns {Promise<Map<string, Date>>}\n   *\n   * @private\n   */\n\n\n  _getProvidersMap(cid) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const cacheKey = makeProviderKey(cid);\n\n      let provs = _this2.providers.get(cacheKey);\n\n      if (!provs) {\n        provs = yield loadProviders(_this2.datastore, cid);\n\n        _this2.providers.set(cacheKey, provs);\n      }\n\n      return provs;\n    })();\n  }\n  /**\n   * Add a new provider for the given CID.\n   *\n   * @param {CID} cid\n   * @param {PeerId} provider\n   * @returns {Promise<void>}\n   */\n\n\n  addProvider(cid, provider) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      // eslint-disable-line require-await\n      return _this3.syncQueue.add( /*#__PURE__*/_asyncToGenerator(function* () {\n        _this3._log('addProvider %s', cid.toString());\n\n        const provs = yield _this3._getProvidersMap(cid);\n\n        _this3._log('loaded %s provs', provs.size);\n\n        const now = new Date();\n        provs.set(utils.encodeBase32(provider.id), now);\n        const dsKey = makeProviderKey(cid);\n\n        _this3.providers.set(dsKey, provs);\n\n        return writeProviderEntry(_this3.datastore, cid, provider, now);\n      }));\n    })();\n  }\n  /**\n   * Get a list of providers for the given CID.\n   *\n   * @param {CID} cid\n   * @returns {Promise<Array<PeerId>>}\n   */\n\n\n  getProviders(cid) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      // eslint-disable-line require-await\n      return _this4.syncQueue.add( /*#__PURE__*/_asyncToGenerator(function* () {\n        _this4._log('getProviders %s', cid.toString());\n\n        const provs = yield _this4._getProvidersMap(cid);\n        return [...provs.keys()].map(base32PeerId => {\n          return new PeerId(utils.decodeBase32(base32PeerId));\n        });\n      }));\n    })();\n  }\n\n}\n/**\n * Encode the given key its matching datastore key.\n *\n * @param {CID|string} cid - cid or base32 encoded string\n * @returns {string}\n *\n * @private\n */\n\n\nfunction makeProviderKey(cid) {\n  cid = typeof cid === 'string' ? cid : utils.encodeBase32(cid.bytes);\n  return c.PROVIDERS_KEY_PREFIX + cid;\n}\n/**\n * Write a provider into the given store.\n *\n * @param {Datastore} store\n * @param {CID} cid\n * @param {PeerId} peer\n * @param {Date} time\n */\n\n\nfunction writeProviderEntry(_x, _x2, _x3, _x4) {\n  return _writeProviderEntry.apply(this, arguments);\n}\n/**\n * Parse the CID and provider peer id from the key\n *\n * @param {import('interface-datastore').Key} key\n */\n\n\nfunction _writeProviderEntry() {\n  _writeProviderEntry = _asyncToGenerator(function* (store, cid, peer, time) {\n    // eslint-disable-line require-await\n    const dsKey = [makeProviderKey(cid), '/', utils.encodeBase32(peer.id)].join('');\n    const key = new Key(dsKey);\n    const buffer = Uint8Array.from(varint.encode(time.getTime()));\n    return store.put(key, buffer);\n  });\n  return _writeProviderEntry.apply(this, arguments);\n}\n\nfunction parseProviderKey(key) {\n  const parts = key.toString().split('/');\n\n  if (parts.length !== 4) {\n    throw new Error('incorrectly formatted provider entry key in datastore: ' + key);\n  }\n\n  return {\n    cid: parts[2],\n    peerId: parts[3]\n  };\n}\n/**\n * Load providers for the given CID from the store.\n *\n * @param {Datastore} store\n * @param {CID} cid\n * @returns {Promise<Map<PeerId, Date>>}\n *\n * @private\n */\n\n\nfunction loadProviders(_x5, _x6) {\n  return _loadProviders.apply(this, arguments);\n}\n/**\n * @param {Uint8Array} buf\n */\n\n\nfunction _loadProviders() {\n  _loadProviders = _asyncToGenerator(function* (store, cid) {\n    const providers = new Map();\n    const query = store.query({\n      prefix: makeProviderKey(cid)\n    });\n    var _iteratorNormalCompletion2 = true;\n    var _didIteratorError2 = false;\n\n    var _iteratorError2;\n\n    try {\n      for (var _iterator2 = _asyncIterator(query), _step2, _value2; _step2 = yield _iterator2.next(), _iteratorNormalCompletion2 = _step2.done, _value2 = yield _step2.value, !_iteratorNormalCompletion2; _iteratorNormalCompletion2 = true) {\n        const entry = _value2;\n        const {\n          peerId\n        } = parseProviderKey(entry.key);\n        providers.set(peerId, readTime(entry.value));\n      }\n    } catch (err) {\n      _didIteratorError2 = true;\n      _iteratorError2 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n          yield _iterator2.return();\n        }\n      } finally {\n        if (_didIteratorError2) {\n          throw _iteratorError2;\n        }\n      }\n    }\n\n    return providers;\n  });\n  return _loadProviders.apply(this, arguments);\n}\n\nfunction readTime(buf) {\n  return varint.decode(buf);\n}\n\nmodule.exports = Providers;","map":null,"metadata":{},"sourceType":"script"}