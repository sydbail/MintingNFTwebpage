{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/Dapp/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nconst multipartRequest = require('../lib/multipart-request');\n\nconst abortSignal = require('../lib/abort-signal');\n\nconst {\n  AbortController\n} = require('native-abort-controller');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pubsub').API<HTTPClientExtraOptions>} PubsubAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {PubsubAPI[\"publish\"]}\n   */\n  function publish(_x, _x2) {\n    return _publish.apply(this, arguments);\n  }\n\n  function _publish() {\n    _publish = _asyncToGenerator(function* (topic, data, options = {}) {\n      const searchParams = toUrlSearchParams({\n        arg: topic,\n        ...options\n      }); // allow aborting requests on body errors\n\n      const controller = new AbortController();\n      const signal = abortSignal(controller.signal, options.signal);\n      const res = yield api.post('pubsub/pub', {\n        timeout: options.timeout,\n        signal,\n        searchParams,\n        ...(yield multipartRequest(data, controller, options.headers))\n      });\n      yield res.text();\n    });\n    return _publish.apply(this, arguments);\n  }\n\n  return publish;\n});","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Dapp/node_modules/ipfs-http-client/src/pubsub/publish.js"],"names":["configure","require","toUrlSearchParams","multipartRequest","abortSignal","AbortController","module","exports","api","publish","topic","data","options","searchParams","arg","controller","signal","res","post","timeout","headers","text"],"mappings":"AAAA;;;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAMC,iBAAiB,GAAGD,OAAO,CAAC,6BAAD,CAAjC;;AACA,MAAME,gBAAgB,GAAGF,OAAO,CAAC,0BAAD,CAAhC;;AACA,MAAMG,WAAW,GAAGH,OAAO,CAAC,qBAAD,CAA3B;;AACA,MAAM;AAAEI,EAAAA;AAAF,IAAsBJ,OAAO,CAAC,yBAAD,CAAnC;AAEA;AACA;AACA;AACA;;;AAEAK,MAAM,CAACC,OAAP,GAAiBP,SAAS,CAACQ,GAAG,IAAI;AAChC;AACF;AACA;AAHkC,WAIjBC,OAJiB;AAAA;AAAA;;AAAA;AAAA,iCAIhC,WAAwBC,KAAxB,EAA+BC,IAA/B,EAAqCC,OAAO,GAAG,EAA/C,EAAmD;AACjD,YAAMC,YAAY,GAAGX,iBAAiB,CAAC;AACrCY,QAAAA,GAAG,EAAEJ,KADgC;AAErC,WAAGE;AAFkC,OAAD,CAAtC,CADiD,CAMjD;;AACA,YAAMG,UAAU,GAAG,IAAIV,eAAJ,EAAnB;AACA,YAAMW,MAAM,GAAGZ,WAAW,CAACW,UAAU,CAACC,MAAZ,EAAoBJ,OAAO,CAACI,MAA5B,CAA1B;AAEA,YAAMC,GAAG,SAAST,GAAG,CAACU,IAAJ,CAAS,YAAT,EAAuB;AACvCC,QAAAA,OAAO,EAAEP,OAAO,CAACO,OADsB;AAEvCH,QAAAA,MAFuC;AAGvCH,QAAAA,YAHuC;AAIvC,kBACQV,gBAAgB,CAACQ,IAAD,EAAOI,UAAP,EAAmBH,OAAO,CAACQ,OAA3B,CADxB;AAJuC,OAAvB,CAAlB;AASA,YAAMH,GAAG,CAACI,IAAJ,EAAN;AACD,KAxB+B;AAAA;AAAA;;AAyBhC,SAAOZ,OAAP;AACD,CA1ByB,CAA1B","sourcesContent":["'use strict'\n\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst multipartRequest = require('../lib/multipart-request')\nconst abortSignal = require('../lib/abort-signal')\nconst { AbortController } = require('native-abort-controller')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pubsub').API<HTTPClientExtraOptions>} PubsubAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {PubsubAPI[\"publish\"]}\n   */\n  async function publish (topic, data, options = {}) {\n    const searchParams = toUrlSearchParams({\n      arg: topic,\n      ...options\n    })\n\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    const res = await api.post('pubsub/pub', {\n      timeout: options.timeout,\n      signal,\n      searchParams,\n      ...(\n        await multipartRequest(data, controller, options.headers)\n      )\n    })\n\n    await res.text()\n  }\n  return publish\n})\n"]},"metadata":{},"sourceType":"script"}