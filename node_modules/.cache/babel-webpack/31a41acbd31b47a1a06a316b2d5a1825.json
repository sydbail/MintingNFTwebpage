{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/Dapp/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/Dapp/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nconst {\n  Multiaddr\n} = require('multiaddr');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nconst {\n  FinalPeer\n} = require('./response-types');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {DHTAPI[\"findPeer\"]}\n   */\n  function findPeer(_x) {\n    return _findPeer.apply(this, arguments);\n  }\n\n  function _findPeer() {\n    _findPeer = _asyncToGenerator(function* (peerId, options = {}) {\n      const res = yield api.post('dht/findpeer', {\n        timeout: options.timeout,\n        signal: options.signal,\n        searchParams: toUrlSearchParams({\n          arg: peerId,\n          ...options\n        }),\n        headers: options.headers\n      });\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n\n      var _iteratorError;\n\n      try {\n        for (var _iterator = _asyncIterator(res.ndjson()), _step, _value; _step = yield _iterator.next(), _iteratorNormalCompletion = _step.done, _value = yield _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n          const data = _value;\n\n          if (data.Type === FinalPeer && data.Responses) {\n            const {\n              ID,\n              Addrs\n            } = data.Responses[0];\n            return {\n              id: ID,\n              addrs: (Addrs || []).map((\n              /** @type {string} **/\n              a) => new Multiaddr(a))\n            };\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            yield _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      throw new Error('not found');\n    });\n    return _findPeer.apply(this, arguments);\n  }\n\n  return findPeer;\n});","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Dapp/node_modules/ipfs-http-client/src/dht/find-peer.js"],"names":["Multiaddr","require","configure","toUrlSearchParams","FinalPeer","module","exports","api","findPeer","peerId","options","res","post","timeout","signal","searchParams","arg","headers","ndjson","data","Type","Responses","ID","Addrs","id","addrs","map","a","Error"],"mappings":"AAAA;;;;;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAgBC,OAAO,CAAC,WAAD,CAA7B;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,6BAAD,CAAjC;;AACA,MAAM;AAAEG,EAAAA;AAAF,IAAgBH,OAAO,CAAC,kBAAD,CAA7B;AAEA;AACA;AACA;AACA;;;AAEAI,MAAM,CAACC,OAAP,GAAiBJ,SAAS,CAACK,GAAG,IAAI;AAChC;AACF;AACA;AAHkC,WAIjBC,QAJiB;AAAA;AAAA;;AAAA;AAAA,kCAIhC,WAAyBC,MAAzB,EAAiCC,OAAO,GAAG,EAA3C,EAA+C;AAC7C,YAAMC,GAAG,SAASJ,GAAG,CAACK,IAAJ,CAAS,cAAT,EAAyB;AACzCC,QAAAA,OAAO,EAAEH,OAAO,CAACG,OADwB;AAEzCC,QAAAA,MAAM,EAAEJ,OAAO,CAACI,MAFyB;AAGzCC,QAAAA,YAAY,EAAEZ,iBAAiB,CAAC;AAC9Ba,UAAAA,GAAG,EAAEP,MADyB;AAE9B,aAAGC;AAF2B,SAAD,CAHU;AAOzCO,QAAAA,OAAO,EAAEP,OAAO,CAACO;AAPwB,OAAzB,CAAlB;AAD6C;AAAA;;AAAA;;AAAA;AAW7C,4CAAyBN,GAAG,CAACO,MAAJ,EAAzB,oLAAuC;AAAA,gBAAtBC,IAAsB;;AACrC,cAAIA,IAAI,CAACC,IAAL,KAAchB,SAAd,IAA2Be,IAAI,CAACE,SAApC,EAA+C;AAC7C,kBAAM;AAAEC,cAAAA,EAAF;AAAMC,cAAAA;AAAN,gBAAgBJ,IAAI,CAACE,SAAL,CAAe,CAAf,CAAtB;AACA,mBAAO;AACLG,cAAAA,EAAE,EAAEF,EADC;AAELG,cAAAA,KAAK,EAAE,CAACF,KAAK,IAAI,EAAV,EAAcG,GAAd,CAAkB;AAAC;AAAuBC,cAAAA,CAAxB,KAA8B,IAAI3B,SAAJ,CAAc2B,CAAd,CAAhD;AAFF,aAAP;AAID;AACF;AAnB4C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAqB7C,YAAM,IAAIC,KAAJ,CAAU,WAAV,CAAN;AACD,KA1B+B;AAAA;AAAA;;AA4BhC,SAAOpB,QAAP;AACD,CA7ByB,CAA1B","sourcesContent":["'use strict'\n\nconst { Multiaddr } = require('multiaddr')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst { FinalPeer } = require('./response-types')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {DHTAPI[\"findPeer\"]}\n   */\n  async function findPeer (peerId, options = {}) {\n    const res = await api.post('dht/findpeer', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: peerId,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (const data of res.ndjson()) {\n      if (data.Type === FinalPeer && data.Responses) {\n        const { ID, Addrs } = data.Responses[0]\n        return {\n          id: ID,\n          addrs: (Addrs || []).map((/** @type {string} **/ a) => new Multiaddr(a))\n        }\n      }\n    }\n\n    throw new Error('not found')\n  }\n\n  return findPeer\n})\n"]},"metadata":{},"sourceType":"script"}