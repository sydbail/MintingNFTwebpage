{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst {\n  EventEmitter\n} = require('events');\n\nconst {\n  Multiaddr\n} = require('multiaddr');\n/**\n * @typedef {import('libp2p-interfaces/src/transport/types').Listener} Listener\n */\n\n/**\n * @param {import('../')} libp2p\n * @returns {Listener} a transport listener\n */\n\n\nmodule.exports = libp2p => {\n  const listeningAddrs = new Map();\n  /**\n   * Add swarm handler and listen for incoming connections\n   *\n   * @param {Multiaddr} addr\n   * @returns {Promise<void>}\n   */\n\n  function listen(_x) {\n    return _listen.apply(this, arguments);\n  }\n  /**\n   * Get fixed up multiaddrs\n   *\n   * NOTE: This method will grab the peers multiaddrs and expand them such that:\n   *\n   * a) If it's an existing /p2p-circuit address for a specific relay i.e.\n   * `/ip4/0.0.0.0/tcp/0/ipfs/QmRelay/p2p-circuit` this method will expand the\n   * address to `/ip4/0.0.0.0/tcp/0/ipfs/QmRelay/p2p-circuit/ipfs/QmPeer` where\n   * `QmPeer` is this peers id\n   * b) If it's not a /p2p-circuit address, it will encapsulate the address as a /p2p-circuit\n   * addr, such when dialing over a relay with this address, it will create the circuit using\n   * the encapsulated transport address. This is useful when for example, a peer should only\n   * be dialed over TCP rather than any other transport\n   *\n   * @returns {Multiaddr[]}\n   */\n\n\n  function _listen() {\n    _listen = _asyncToGenerator(function* (addr) {\n      const addrString = String(addr).split('/p2p-circuit').find(a => a !== '');\n      const relayConn = yield libp2p.dial(new Multiaddr(addrString));\n      const relayedAddr = relayConn.remoteAddr.encapsulate('/p2p-circuit');\n      listeningAddrs.set(relayConn.remotePeer.toB58String(), relayedAddr);\n      listener.emit('listening');\n    });\n    return _listen.apply(this, arguments);\n  }\n\n  function getAddrs() {\n    const addrs = [];\n\n    for (const addr of listeningAddrs.values()) {\n      addrs.push(addr);\n    }\n\n    return addrs;\n  }\n  /** @type Listener */\n\n\n  const listener = Object.assign(new EventEmitter(), {\n    close: () => Promise.resolve(),\n    listen,\n    getAddrs\n  }); // Remove listeningAddrs when a peer disconnects\n\n  libp2p.connectionManager.on('peer:disconnect', connection => {\n    const deleted = listeningAddrs.delete(connection.remotePeer.toB58String());\n\n    if (deleted) {\n      // Announce listen addresses change\n      listener.emit('close');\n    }\n  });\n  return listener;\n};","map":{"version":3,"sources":["/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/libp2p/src/circuit/listener.js"],"names":["EventEmitter","require","Multiaddr","module","exports","libp2p","listeningAddrs","Map","listen","addr","addrString","String","split","find","a","relayConn","dial","relayedAddr","remoteAddr","encapsulate","set","remotePeer","toB58String","listener","emit","getAddrs","addrs","values","push","Object","assign","close","Promise","resolve","connectionManager","on","connection","deleted","delete"],"mappings":"AAAA;;;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAmBC,OAAO,CAAC,QAAD,CAAhC;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAgBD,OAAO,CAAC,WAAD,CAA7B;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AACAE,MAAM,CAACC,OAAP,GAAkBC,MAAD,IAAY;AAC3B,QAAMC,cAAc,GAAG,IAAIC,GAAJ,EAAvB;AAEA;AACF;AACA;AACA;AACA;AACA;;AAR6B,WASZC,MATY;AAAA;AAAA;AAmB3B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAlC6B;AAAA,gCAS3B,WAAuBC,IAAvB,EAA6B;AAC3B,YAAMC,UAAU,GAAGC,MAAM,CAACF,IAAD,CAAN,CAAaG,KAAb,CAAmB,cAAnB,EAAmCC,IAAnC,CAAwCC,CAAC,IAAIA,CAAC,KAAK,EAAnD,CAAnB;AAEA,YAAMC,SAAS,SAASV,MAAM,CAACW,IAAP,CAAY,IAAId,SAAJ,CAAcQ,UAAd,CAAZ,CAAxB;AACA,YAAMO,WAAW,GAAGF,SAAS,CAACG,UAAV,CAAqBC,WAArB,CAAiC,cAAjC,CAApB;AAEAb,MAAAA,cAAc,CAACc,GAAf,CAAmBL,SAAS,CAACM,UAAV,CAAqBC,WAArB,EAAnB,EAAuDL,WAAvD;AACAM,MAAAA,QAAQ,CAACC,IAAT,CAAc,WAAd;AACD,KAjB0B;AAAA;AAAA;;AAmC3B,WAASC,QAAT,GAAqB;AACnB,UAAMC,KAAK,GAAG,EAAd;;AACA,SAAK,MAAMjB,IAAX,IAAmBH,cAAc,CAACqB,MAAf,EAAnB,EAA4C;AAC1CD,MAAAA,KAAK,CAACE,IAAN,CAAWnB,IAAX;AACD;;AACD,WAAOiB,KAAP;AACD;AAED;;;AACA,QAAMH,QAAQ,GAAGM,MAAM,CAACC,MAAP,CAAc,IAAI9B,YAAJ,EAAd,EAAkC;AACjD+B,IAAAA,KAAK,EAAE,MAAMC,OAAO,CAACC,OAAR,EADoC;AAEjDzB,IAAAA,MAFiD;AAGjDiB,IAAAA;AAHiD,GAAlC,CAAjB,CA5C2B,CAkD3B;;AACApB,EAAAA,MAAM,CAAC6B,iBAAP,CAAyBC,EAAzB,CAA4B,iBAA5B,EAAgDC,UAAD,IAAgB;AAC7D,UAAMC,OAAO,GAAG/B,cAAc,CAACgC,MAAf,CAAsBF,UAAU,CAACf,UAAX,CAAsBC,WAAtB,EAAtB,CAAhB;;AAEA,QAAIe,OAAJ,EAAa;AACX;AACAd,MAAAA,QAAQ,CAACC,IAAT,CAAc,OAAd;AACD;AACF,GAPD;AASA,SAAOD,QAAP;AACD,CA7DD","sourcesContent":["'use strict'\n\nconst { EventEmitter } = require('events')\nconst { Multiaddr } = require('multiaddr')\n\n/**\n * @typedef {import('libp2p-interfaces/src/transport/types').Listener} Listener\n */\n\n/**\n * @param {import('../')} libp2p\n * @returns {Listener} a transport listener\n */\nmodule.exports = (libp2p) => {\n  const listeningAddrs = new Map()\n\n  /**\n   * Add swarm handler and listen for incoming connections\n   *\n   * @param {Multiaddr} addr\n   * @returns {Promise<void>}\n   */\n  async function listen (addr) {\n    const addrString = String(addr).split('/p2p-circuit').find(a => a !== '')\n\n    const relayConn = await libp2p.dial(new Multiaddr(addrString))\n    const relayedAddr = relayConn.remoteAddr.encapsulate('/p2p-circuit')\n\n    listeningAddrs.set(relayConn.remotePeer.toB58String(), relayedAddr)\n    listener.emit('listening')\n  }\n\n  /**\n   * Get fixed up multiaddrs\n   *\n   * NOTE: This method will grab the peers multiaddrs and expand them such that:\n   *\n   * a) If it's an existing /p2p-circuit address for a specific relay i.e.\n   * `/ip4/0.0.0.0/tcp/0/ipfs/QmRelay/p2p-circuit` this method will expand the\n   * address to `/ip4/0.0.0.0/tcp/0/ipfs/QmRelay/p2p-circuit/ipfs/QmPeer` where\n   * `QmPeer` is this peers id\n   * b) If it's not a /p2p-circuit address, it will encapsulate the address as a /p2p-circuit\n   * addr, such when dialing over a relay with this address, it will create the circuit using\n   * the encapsulated transport address. This is useful when for example, a peer should only\n   * be dialed over TCP rather than any other transport\n   *\n   * @returns {Multiaddr[]}\n   */\n  function getAddrs () {\n    const addrs = []\n    for (const addr of listeningAddrs.values()) {\n      addrs.push(addr)\n    }\n    return addrs\n  }\n\n  /** @type Listener */\n  const listener = Object.assign(new EventEmitter(), {\n    close: () => Promise.resolve(),\n    listen,\n    getAddrs\n  })\n\n  // Remove listeningAddrs when a peer disconnects\n  libp2p.connectionManager.on('peer:disconnect', (connection) => {\n    const deleted = listeningAddrs.delete(connection.remotePeer.toB58String())\n\n    if (deleted) {\n      // Announce listen addresses change\n      listener.emit('close')\n    }\n  })\n\n  return listener\n}\n"]},"metadata":{},"sourceType":"script"}