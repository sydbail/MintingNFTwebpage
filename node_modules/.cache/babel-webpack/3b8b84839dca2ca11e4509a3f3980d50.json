{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst debug = require('debug');\n\nconst log = Object.assign(debug('libp2p:identify'), {\n  error: debug('libp2p:identify:err')\n});\n\nconst errCode = require('err-code');\n\nconst lp = require('it-length-prefixed');\n\nconst {\n  pipe\n} = require('it-pipe');\n\nconst {\n  collect,\n  take,\n  consume\n} = require('streaming-iterables');\n\nconst {\n  fromString: uint8ArrayFromString\n} = require('uint8arrays/from-string');\n\nconst PeerId = require('peer-id');\n\nconst {\n  Multiaddr\n} = require('multiaddr'); // @ts-ignore it-buffer does not have types\n\n\nconst {\n  toBuffer\n} = require('it-buffer');\n\nconst Message = require('./message');\n\nconst Envelope = require('../record/envelope');\n\nconst PeerRecord = require('../record/peer-record');\n\nconst {\n  MULTICODEC_IDENTIFY,\n  MULTICODEC_IDENTIFY_PUSH,\n  IDENTIFY_PROTOCOL_VERSION,\n  MULTICODEC_IDENTIFY_PROTOCOL_NAME,\n  MULTICODEC_IDENTIFY_PUSH_PROTOCOL_NAME,\n  MULTICODEC_IDENTIFY_PROTOCOL_VERSION,\n  MULTICODEC_IDENTIFY_PUSH_PROTOCOL_VERSION\n} = require('./consts');\n\nconst {\n  codes\n} = require('../errors');\n/**\n * @typedef {import('libp2p-interfaces/src/connection').Connection} Connection\n * @typedef {import('libp2p-interfaces/src/stream-muxer/types').MuxedStream} MuxedStream\n */\n\n/**\n * @typedef {Object} HostProperties\n * @property {string} agentVersion\n */\n\n\nclass IdentifyService {\n  /**\n   * @param {import('../')} libp2p\n   */\n  static getProtocolStr(libp2p) {\n    return {\n      identifyProtocolStr: `/${libp2p._config.protocolPrefix}/${MULTICODEC_IDENTIFY_PROTOCOL_NAME}/${MULTICODEC_IDENTIFY_PROTOCOL_VERSION}`,\n      identifyPushProtocolStr: `/${libp2p._config.protocolPrefix}/${MULTICODEC_IDENTIFY_PUSH_PROTOCOL_NAME}/${MULTICODEC_IDENTIFY_PUSH_PROTOCOL_VERSION}`\n    };\n  }\n  /**\n   * @class\n   * @param {Object} options\n   * @param {import('../')} options.libp2p\n   */\n\n\n  constructor({\n    libp2p\n  }) {\n    this._libp2p = libp2p;\n    this.peerStore = libp2p.peerStore;\n    this.addressManager = libp2p.addressManager;\n    this.connectionManager = libp2p.connectionManager;\n    this.peerId = libp2p.peerId;\n    this.handleMessage = this.handleMessage.bind(this);\n    const protocolStr = IdentifyService.getProtocolStr(libp2p);\n    this.identifyProtocolStr = protocolStr.identifyProtocolStr;\n    this.identifyPushProtocolStr = protocolStr.identifyPushProtocolStr; // Store self host metadata\n\n    this._host = {\n      protocolVersion: `${libp2p._config.protocolPrefix}/${IDENTIFY_PROTOCOL_VERSION}`,\n      ...libp2p._options.host\n    };\n    this.peerStore.metadataBook.set(this.peerId, 'AgentVersion', uint8ArrayFromString(this._host.agentVersion));\n    this.peerStore.metadataBook.set(this.peerId, 'ProtocolVersion', uint8ArrayFromString(this._host.protocolVersion)); // When a new connection happens, trigger identify\n\n    this.connectionManager.on('peer:connect', connection => {\n      this.identify(connection).catch(log.error);\n    }); // When self multiaddrs change, trigger identify-push\n\n    this.peerStore.on('change:multiaddrs', ({\n      peerId\n    }) => {\n      if (peerId.toString() === this.peerId.toString()) {\n        this.pushToPeerStore();\n      }\n    }); // When self protocols change, trigger identify-push\n\n    this.peerStore.on('change:protocols', ({\n      peerId\n    }) => {\n      if (peerId.toString() === this.peerId.toString()) {\n        this.pushToPeerStore();\n      }\n    });\n  }\n  /**\n   * Send an Identify Push update to the list of connections\n   *\n   * @param {Connection[]} connections\n   * @returns {Promise<void[]>}\n   */\n\n\n  push(connections) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const signedPeerRecord = yield _this.peerStore.addressBook.getRawEnvelope(_this.peerId);\n\n      const listenAddrs = _this._libp2p.multiaddrs.map(ma => ma.bytes);\n\n      const protocols = _this.peerStore.protoBook.get(_this.peerId) || [];\n      const pushes = connections.map( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (connection) {\n          try {\n            const {\n              stream\n            } = yield connection.newStream(_this.identifyPushProtocolStr);\n            yield pipe([Message.Identify.encode({\n              listenAddrs,\n              signedPeerRecord,\n              protocols\n            }).finish()], lp.encode(), stream, consume);\n          } catch (err) {\n            // Just log errors\n            log.error('could not push identify update to peer', err);\n          }\n        });\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n      return Promise.all(pushes);\n    })();\n  }\n  /**\n   * Calls `push` for all peers in the `peerStore` that are connected\n   *\n   * @returns {void}\n   */\n\n\n  pushToPeerStore() {\n    // Do not try to push if libp2p node is not running\n    if (!this._libp2p.isStarted()) {\n      return;\n    }\n\n    const connections = [];\n    let connection;\n\n    for (const peer of this.peerStore.peers.values()) {\n      if (peer.protocols.includes(this.identifyPushProtocolStr) && (connection = this.connectionManager.get(peer.id))) {\n        connections.push(connection);\n      }\n    }\n\n    this.push(connections);\n  }\n  /**\n   * Requests the `Identify` message from peer associated with the given `connection`.\n   * If the identified peer does not match the `PeerId` associated with the connection,\n   * an error will be thrown.\n   *\n   * @async\n   * @param {Connection} connection\n   * @returns {Promise<void>}\n   */\n\n\n  identify(connection) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        stream\n      } = yield connection.newStream(_this2.identifyProtocolStr);\n      const [data] = yield pipe([], stream, lp.decode(), take(1), toBuffer, collect);\n\n      if (!data) {\n        throw errCode(new Error('No data could be retrieved'), codes.ERR_CONNECTION_ENDED);\n      }\n\n      let message;\n\n      try {\n        message = Message.Identify.decode(data);\n      } catch (err) {\n        throw errCode(err, codes.ERR_INVALID_MESSAGE);\n      }\n\n      const {\n        publicKey,\n        listenAddrs,\n        protocols,\n        observedAddr,\n        signedPeerRecord\n      } = message;\n      const id = yield PeerId.createFromPubKey(publicKey);\n\n      if (connection.remotePeer.toB58String() !== id.toB58String()) {\n        throw errCode(new Error('identified peer does not match the expected peer'), codes.ERR_INVALID_PEER);\n      } // Get the observedAddr if there is one\n\n\n      const cleanObservedAddr = IdentifyService.getCleanMultiaddr(observedAddr);\n\n      try {\n        const envelope = yield Envelope.openAndCertify(signedPeerRecord, PeerRecord.DOMAIN);\n\n        if (_this2.peerStore.addressBook.consumePeerRecord(envelope)) {\n          _this2.peerStore.protoBook.set(id, protocols);\n\n          _this2.peerStore.metadataBook.set(id, 'AgentVersion', uint8ArrayFromString(message.agentVersion));\n\n          _this2.peerStore.metadataBook.set(id, 'ProtocolVersion', uint8ArrayFromString(message.protocolVersion));\n\n          return;\n        }\n      } catch (err) {\n        log('received invalid envelope, discard it and fallback to listenAddrs is available', err);\n      } // LEGACY: Update peers data in PeerStore\n\n\n      try {\n        _this2.peerStore.addressBook.set(id, listenAddrs.map(addr => new Multiaddr(addr)));\n      } catch (err) {\n        log.error('received invalid addrs', err);\n      }\n\n      _this2.peerStore.protoBook.set(id, protocols);\n\n      _this2.peerStore.metadataBook.set(id, 'AgentVersion', uint8ArrayFromString(message.agentVersion));\n\n      _this2.peerStore.metadataBook.set(id, 'ProtocolVersion', uint8ArrayFromString(message.protocolVersion)); // TODO: Add and score our observed addr\n\n\n      log('received observed address of %s', cleanObservedAddr); // this.addressManager.addObservedAddr(observedAddr)\n    })();\n  }\n  /**\n   * A handler to register with Libp2p to process identify messages.\n   *\n   * @param {Object} options\n   * @param {Connection} options.connection\n   * @param {MuxedStream} options.stream\n   * @param {string} options.protocol\n   * @returns {Promise<void>|undefined}\n   */\n\n\n  handleMessage({\n    connection,\n    stream,\n    protocol\n  }) {\n    switch (protocol) {\n      case this.identifyProtocolStr:\n        return this._handleIdentify({\n          connection,\n          stream\n        });\n\n      case this.identifyPushProtocolStr:\n        return this._handlePush({\n          connection,\n          stream\n        });\n\n      default:\n        log.error('cannot handle unknown protocol %s', protocol);\n    }\n  }\n  /**\n   * Sends the `Identify` response with the Signed Peer Record\n   * to the requesting peer over the given `connection`\n   *\n   * @private\n   * @param {Object} options\n   * @param {MuxedStream} options.stream\n   * @param {Connection} options.connection\n   * @returns {Promise<void>}\n   */\n\n\n  _handleIdentify({\n    connection,\n    stream\n  }) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      let publicKey = new Uint8Array(0);\n\n      if (_this3.peerId.pubKey) {\n        publicKey = _this3.peerId.pubKey.bytes;\n      }\n\n      const signedPeerRecord = yield _this3.peerStore.addressBook.getRawEnvelope(_this3.peerId);\n      const protocols = _this3.peerStore.protoBook.get(_this3.peerId) || [];\n      const message = Message.Identify.encode({\n        protocolVersion: _this3._host.protocolVersion,\n        agentVersion: _this3._host.agentVersion,\n        publicKey,\n        listenAddrs: _this3._libp2p.multiaddrs.map(ma => ma.bytes),\n        signedPeerRecord,\n        observedAddr: connection.remoteAddr.bytes,\n        protocols\n      }).finish();\n\n      try {\n        yield pipe([message], lp.encode(), stream, consume);\n      } catch (err) {\n        log.error('could not respond to identify request', err);\n      }\n    })();\n  }\n  /**\n   * Reads the Identify Push message from the given `connection`\n   *\n   * @private\n   * @param {object} options\n   * @param {MuxedStream} options.stream\n   * @param {Connection} options.connection\n   * @returns {Promise<void>}\n   */\n\n\n  _handlePush({\n    connection,\n    stream\n  }) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      let message;\n\n      try {\n        const [data] = yield pipe([], stream, lp.decode(), take(1), toBuffer, collect);\n        message = Message.Identify.decode(data);\n      } catch (err) {\n        return log.error('received invalid message', err);\n      }\n\n      const id = connection.remotePeer;\n\n      try {\n        const envelope = yield Envelope.openAndCertify(message.signedPeerRecord, PeerRecord.DOMAIN);\n\n        if (_this4.peerStore.addressBook.consumePeerRecord(envelope)) {\n          _this4.peerStore.protoBook.set(id, message.protocols);\n\n          return;\n        }\n      } catch (err) {\n        log('received invalid envelope, discard it and fallback to listenAddrs is available', err);\n      } // LEGACY: Update peers data in PeerStore\n\n\n      try {\n        _this4.peerStore.addressBook.set(id, message.listenAddrs.map(addr => new Multiaddr(addr)));\n      } catch (err) {\n        log.error('received invalid addrs', err);\n      } // Update the protocols\n\n\n      _this4.peerStore.protoBook.set(id, message.protocols);\n    })();\n  }\n  /**\n   * Takes the `addr` and converts it to a Multiaddr if possible\n   *\n   * @param {Uint8Array | string} addr\n   * @returns {Multiaddr|null}\n   */\n\n\n  static getCleanMultiaddr(addr) {\n    if (addr && addr.length > 0) {\n      try {\n        return new Multiaddr(addr);\n      } catch (_) {\n        return null;\n      }\n    }\n\n    return null;\n  }\n\n}\n/**\n * The protocols the IdentifyService supports\n *\n * @property multicodecs\n */\n\n\nconst multicodecs = {\n  IDENTIFY: MULTICODEC_IDENTIFY,\n  IDENTIFY_PUSH: MULTICODEC_IDENTIFY_PUSH\n};\nIdentifyService.multicodecs = multicodecs;\nIdentifyService.Messsage = Message;\nmodule.exports = IdentifyService;","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Demo/node_modules/libp2p/src/identify/index.js"],"names":["debug","require","log","Object","assign","error","errCode","lp","pipe","collect","take","consume","fromString","uint8ArrayFromString","PeerId","Multiaddr","toBuffer","Message","Envelope","PeerRecord","MULTICODEC_IDENTIFY","MULTICODEC_IDENTIFY_PUSH","IDENTIFY_PROTOCOL_VERSION","MULTICODEC_IDENTIFY_PROTOCOL_NAME","MULTICODEC_IDENTIFY_PUSH_PROTOCOL_NAME","MULTICODEC_IDENTIFY_PROTOCOL_VERSION","MULTICODEC_IDENTIFY_PUSH_PROTOCOL_VERSION","codes","IdentifyService","getProtocolStr","libp2p","identifyProtocolStr","_config","protocolPrefix","identifyPushProtocolStr","constructor","_libp2p","peerStore","addressManager","connectionManager","peerId","handleMessage","bind","protocolStr","_host","protocolVersion","_options","host","metadataBook","set","agentVersion","on","connection","identify","catch","toString","pushToPeerStore","push","connections","signedPeerRecord","addressBook","getRawEnvelope","listenAddrs","multiaddrs","map","ma","bytes","protocols","protoBook","get","pushes","stream","newStream","Identify","encode","finish","err","Promise","all","isStarted","peer","peers","values","includes","id","data","decode","Error","ERR_CONNECTION_ENDED","message","ERR_INVALID_MESSAGE","publicKey","observedAddr","createFromPubKey","remotePeer","toB58String","ERR_INVALID_PEER","cleanObservedAddr","getCleanMultiaddr","envelope","openAndCertify","DOMAIN","consumePeerRecord","addr","protocol","_handleIdentify","_handlePush","Uint8Array","pubKey","remoteAddr","length","_","multicodecs","IDENTIFY","IDENTIFY_PUSH","Messsage","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst debug = require('debug')\nconst log = Object.assign(debug('libp2p:identify'), {\n  error: debug('libp2p:identify:err')\n})\nconst errCode = require('err-code')\nconst lp = require('it-length-prefixed')\nconst { pipe } = require('it-pipe')\nconst { collect, take, consume } = require('streaming-iterables')\nconst { fromString: uint8ArrayFromString } = require('uint8arrays/from-string')\n\nconst PeerId = require('peer-id')\nconst { Multiaddr } = require('multiaddr')\n// @ts-ignore it-buffer does not have types\nconst { toBuffer } = require('it-buffer')\n\nconst Message = require('./message')\n\nconst Envelope = require('../record/envelope')\nconst PeerRecord = require('../record/peer-record')\n\nconst {\n  MULTICODEC_IDENTIFY,\n  MULTICODEC_IDENTIFY_PUSH,\n  IDENTIFY_PROTOCOL_VERSION,\n  MULTICODEC_IDENTIFY_PROTOCOL_NAME,\n  MULTICODEC_IDENTIFY_PUSH_PROTOCOL_NAME,\n  MULTICODEC_IDENTIFY_PROTOCOL_VERSION,\n  MULTICODEC_IDENTIFY_PUSH_PROTOCOL_VERSION\n} = require('./consts')\n\nconst { codes } = require('../errors')\n\n/**\n * @typedef {import('libp2p-interfaces/src/connection').Connection} Connection\n * @typedef {import('libp2p-interfaces/src/stream-muxer/types').MuxedStream} MuxedStream\n */\n\n/**\n * @typedef {Object} HostProperties\n * @property {string} agentVersion\n */\n\nclass IdentifyService {\n  /**\n   * @param {import('../')} libp2p\n   */\n  static getProtocolStr (libp2p) {\n    return {\n      identifyProtocolStr: `/${libp2p._config.protocolPrefix}/${MULTICODEC_IDENTIFY_PROTOCOL_NAME}/${MULTICODEC_IDENTIFY_PROTOCOL_VERSION}`,\n      identifyPushProtocolStr: `/${libp2p._config.protocolPrefix}/${MULTICODEC_IDENTIFY_PUSH_PROTOCOL_NAME}/${MULTICODEC_IDENTIFY_PUSH_PROTOCOL_VERSION}`\n    }\n  }\n\n  /**\n   * @class\n   * @param {Object} options\n   * @param {import('../')} options.libp2p\n   */\n  constructor ({ libp2p }) {\n    this._libp2p = libp2p\n    this.peerStore = libp2p.peerStore\n    this.addressManager = libp2p.addressManager\n    this.connectionManager = libp2p.connectionManager\n    this.peerId = libp2p.peerId\n\n    this.handleMessage = this.handleMessage.bind(this)\n\n    const protocolStr = IdentifyService.getProtocolStr(libp2p)\n    this.identifyProtocolStr = protocolStr.identifyProtocolStr\n    this.identifyPushProtocolStr = protocolStr.identifyPushProtocolStr\n\n    // Store self host metadata\n    this._host = {\n      protocolVersion: `${libp2p._config.protocolPrefix}/${IDENTIFY_PROTOCOL_VERSION}`,\n      ...libp2p._options.host\n    }\n\n    this.peerStore.metadataBook.set(this.peerId, 'AgentVersion', uint8ArrayFromString(this._host.agentVersion))\n    this.peerStore.metadataBook.set(this.peerId, 'ProtocolVersion', uint8ArrayFromString(this._host.protocolVersion))\n    // When a new connection happens, trigger identify\n    this.connectionManager.on('peer:connect', (connection) => {\n      this.identify(connection).catch(log.error)\n    })\n\n    // When self multiaddrs change, trigger identify-push\n    this.peerStore.on('change:multiaddrs', ({ peerId }) => {\n      if (peerId.toString() === this.peerId.toString()) {\n        this.pushToPeerStore()\n      }\n    })\n\n    // When self protocols change, trigger identify-push\n    this.peerStore.on('change:protocols', ({ peerId }) => {\n      if (peerId.toString() === this.peerId.toString()) {\n        this.pushToPeerStore()\n      }\n    })\n  }\n\n  /**\n   * Send an Identify Push update to the list of connections\n   *\n   * @param {Connection[]} connections\n   * @returns {Promise<void[]>}\n   */\n  async push (connections) {\n    const signedPeerRecord = await this.peerStore.addressBook.getRawEnvelope(this.peerId)\n    const listenAddrs = this._libp2p.multiaddrs.map((ma) => ma.bytes)\n    const protocols = this.peerStore.protoBook.get(this.peerId) || []\n\n    const pushes = connections.map(async connection => {\n      try {\n        const { stream } = await connection.newStream(this.identifyPushProtocolStr)\n\n        await pipe(\n          [Message.Identify.encode({\n            listenAddrs,\n            signedPeerRecord,\n            protocols\n          }).finish()],\n          lp.encode(),\n          stream,\n          consume\n        )\n      } catch (err) {\n        // Just log errors\n        log.error('could not push identify update to peer', err)\n      }\n    })\n\n    return Promise.all(pushes)\n  }\n\n  /**\n   * Calls `push` for all peers in the `peerStore` that are connected\n   *\n   * @returns {void}\n   */\n  pushToPeerStore () {\n    // Do not try to push if libp2p node is not running\n    if (!this._libp2p.isStarted()) {\n      return\n    }\n\n    const connections = []\n    let connection\n    for (const peer of this.peerStore.peers.values()) {\n      if (peer.protocols.includes(this.identifyPushProtocolStr) && (connection = this.connectionManager.get(peer.id))) {\n        connections.push(connection)\n      }\n    }\n\n    this.push(connections)\n  }\n\n  /**\n   * Requests the `Identify` message from peer associated with the given `connection`.\n   * If the identified peer does not match the `PeerId` associated with the connection,\n   * an error will be thrown.\n   *\n   * @async\n   * @param {Connection} connection\n   * @returns {Promise<void>}\n   */\n  async identify (connection) {\n    const { stream } = await connection.newStream(this.identifyProtocolStr)\n    const [data] = await pipe(\n      [],\n      stream,\n      lp.decode(),\n      take(1),\n      toBuffer,\n      collect\n    )\n\n    if (!data) {\n      throw errCode(new Error('No data could be retrieved'), codes.ERR_CONNECTION_ENDED)\n    }\n\n    let message\n    try {\n      message = Message.Identify.decode(data)\n    } catch (err) {\n      throw errCode(err, codes.ERR_INVALID_MESSAGE)\n    }\n\n    const {\n      publicKey,\n      listenAddrs,\n      protocols,\n      observedAddr,\n      signedPeerRecord\n    } = message\n\n    const id = await PeerId.createFromPubKey(publicKey)\n\n    if (connection.remotePeer.toB58String() !== id.toB58String()) {\n      throw errCode(new Error('identified peer does not match the expected peer'), codes.ERR_INVALID_PEER)\n    }\n\n    // Get the observedAddr if there is one\n    const cleanObservedAddr = IdentifyService.getCleanMultiaddr(observedAddr)\n\n    try {\n      const envelope = await Envelope.openAndCertify(signedPeerRecord, PeerRecord.DOMAIN)\n      if (this.peerStore.addressBook.consumePeerRecord(envelope)) {\n        this.peerStore.protoBook.set(id, protocols)\n        this.peerStore.metadataBook.set(id, 'AgentVersion', uint8ArrayFromString(message.agentVersion))\n        this.peerStore.metadataBook.set(id, 'ProtocolVersion', uint8ArrayFromString(message.protocolVersion))\n        return\n      }\n    } catch (err) {\n      log('received invalid envelope, discard it and fallback to listenAddrs is available', err)\n    }\n\n    // LEGACY: Update peers data in PeerStore\n    try {\n      this.peerStore.addressBook.set(id, listenAddrs.map((addr) => new Multiaddr(addr)))\n    } catch (err) {\n      log.error('received invalid addrs', err)\n    }\n\n    this.peerStore.protoBook.set(id, protocols)\n    this.peerStore.metadataBook.set(id, 'AgentVersion', uint8ArrayFromString(message.agentVersion))\n    this.peerStore.metadataBook.set(id, 'ProtocolVersion', uint8ArrayFromString(message.protocolVersion))\n\n    // TODO: Add and score our observed addr\n    log('received observed address of %s', cleanObservedAddr)\n    // this.addressManager.addObservedAddr(observedAddr)\n  }\n\n  /**\n   * A handler to register with Libp2p to process identify messages.\n   *\n   * @param {Object} options\n   * @param {Connection} options.connection\n   * @param {MuxedStream} options.stream\n   * @param {string} options.protocol\n   * @returns {Promise<void>|undefined}\n   */\n  handleMessage ({ connection, stream, protocol }) {\n    switch (protocol) {\n      case this.identifyProtocolStr:\n        return this._handleIdentify({ connection, stream })\n      case this.identifyPushProtocolStr:\n        return this._handlePush({ connection, stream })\n      default:\n        log.error('cannot handle unknown protocol %s', protocol)\n    }\n  }\n\n  /**\n   * Sends the `Identify` response with the Signed Peer Record\n   * to the requesting peer over the given `connection`\n   *\n   * @private\n   * @param {Object} options\n   * @param {MuxedStream} options.stream\n   * @param {Connection} options.connection\n   * @returns {Promise<void>}\n   */\n  async _handleIdentify ({ connection, stream }) {\n    let publicKey = new Uint8Array(0)\n    if (this.peerId.pubKey) {\n      publicKey = this.peerId.pubKey.bytes\n    }\n\n    const signedPeerRecord = await this.peerStore.addressBook.getRawEnvelope(this.peerId)\n    const protocols = this.peerStore.protoBook.get(this.peerId) || []\n\n    const message = Message.Identify.encode({\n      protocolVersion: this._host.protocolVersion,\n      agentVersion: this._host.agentVersion,\n      publicKey,\n      listenAddrs: this._libp2p.multiaddrs.map((ma) => ma.bytes),\n      signedPeerRecord,\n      observedAddr: connection.remoteAddr.bytes,\n      protocols\n    }).finish()\n\n    try {\n      await pipe(\n        [message],\n        lp.encode(),\n        stream,\n        consume\n      )\n    } catch (err) {\n      log.error('could not respond to identify request', err)\n    }\n  }\n\n  /**\n   * Reads the Identify Push message from the given `connection`\n   *\n   * @private\n   * @param {object} options\n   * @param {MuxedStream} options.stream\n   * @param {Connection} options.connection\n   * @returns {Promise<void>}\n   */\n  async _handlePush ({ connection, stream }) {\n    let message\n    try {\n      const [data] = await pipe(\n        [],\n        stream,\n        lp.decode(),\n        take(1),\n        toBuffer,\n        collect\n      )\n      message = Message.Identify.decode(data)\n    } catch (err) {\n      return log.error('received invalid message', err)\n    }\n\n    const id = connection.remotePeer\n\n    try {\n      const envelope = await Envelope.openAndCertify(message.signedPeerRecord, PeerRecord.DOMAIN)\n      if (this.peerStore.addressBook.consumePeerRecord(envelope)) {\n        this.peerStore.protoBook.set(id, message.protocols)\n        return\n      }\n    } catch (err) {\n      log('received invalid envelope, discard it and fallback to listenAddrs is available', err)\n    }\n\n    // LEGACY: Update peers data in PeerStore\n    try {\n      this.peerStore.addressBook.set(id,\n        message.listenAddrs.map((addr) => new Multiaddr(addr)))\n    } catch (err) {\n      log.error('received invalid addrs', err)\n    }\n\n    // Update the protocols\n    this.peerStore.protoBook.set(id, message.protocols)\n  }\n\n  /**\n   * Takes the `addr` and converts it to a Multiaddr if possible\n   *\n   * @param {Uint8Array | string} addr\n   * @returns {Multiaddr|null}\n   */\n  static getCleanMultiaddr (addr) {\n    if (addr && addr.length > 0) {\n      try {\n        return new Multiaddr(addr)\n      } catch (_) {\n        return null\n      }\n    }\n    return null\n  }\n}\n\n/**\n * The protocols the IdentifyService supports\n *\n * @property multicodecs\n */\nconst multicodecs = {\n  IDENTIFY: MULTICODEC_IDENTIFY,\n  IDENTIFY_PUSH: MULTICODEC_IDENTIFY_PUSH\n}\n\nIdentifyService.multicodecs = multicodecs\nIdentifyService.Messsage = Message\n\nmodule.exports = IdentifyService\n"]},"metadata":{},"sourceType":"script"}