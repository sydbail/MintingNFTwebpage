{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst {\n  sha256\n} = require('multiformats/hashes/sha2');\n\nconst errcode = require('err-code');\n\nconst {\n  toString: uint8ArrayToString\n} = require('uint8arrays/to-string');\n\nconst {\n  equals: uint8ArrayEquals\n} = require('uint8arrays/equals');\n/**\n * Validator for public key records.\n * Verifies that the passed in record value is the PublicKey\n * that matches the passed in key.\n * If validation fails the returned Promise will reject with the error.\n *\n * @param {Uint8Array} key - A valid key is of the form `'/pk/<keymultihash>'`\n * @param {Uint8Array} publicKey - The public key to validate against (protobuf encoded).\n */\n\n\nconst validatePublicKeyRecord = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (key, publicKey) {\n    if (!(key instanceof Uint8Array)) {\n      throw errcode(new Error('\"key\" must be a Uint8Array'), 'ERR_INVALID_RECORD_KEY_NOT_BUFFER');\n    }\n\n    if (key.byteLength < 5) {\n      throw errcode(new Error('invalid public key record'), 'ERR_INVALID_RECORD_KEY_TOO_SHORT');\n    }\n\n    const prefix = uint8ArrayToString(key.subarray(0, 4));\n\n    if (prefix !== '/pk/') {\n      throw errcode(new Error('key was not prefixed with /pk/'), 'ERR_INVALID_RECORD_KEY_BAD_PREFIX');\n    }\n\n    const keyhash = key.slice(4);\n    const publicKeyHash = yield sha256.digest(publicKey);\n\n    if (!uint8ArrayEquals(keyhash, publicKeyHash.bytes)) {\n      throw errcode(new Error('public key does not match passed in key'), 'ERR_INVALID_RECORD_HASH_MISMATCH');\n    }\n  });\n\n  return function validatePublicKeyRecord(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nmodule.exports = {\n  func: validatePublicKeyRecord,\n  sign: false\n};","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Demo/node_modules/libp2p-record/src/validators/public-key.js"],"names":["sha256","require","errcode","toString","uint8ArrayToString","equals","uint8ArrayEquals","validatePublicKeyRecord","key","publicKey","Uint8Array","Error","byteLength","prefix","subarray","keyhash","slice","publicKeyHash","digest","bytes","module","exports","func","sign"],"mappings":"AAAA;;;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAaC,OAAO,CAAC,0BAAD,CAA1B;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAM;AAAEE,EAAAA,QAAQ,EAAEC;AAAZ,IAAmCH,OAAO,CAAC,uBAAD,CAAhD;;AACA,MAAM;AAAEI,EAAAA,MAAM,EAAEC;AAAV,IAA+BL,OAAO,CAAC,oBAAD,CAA5C;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMM,uBAAuB;AAAA,+BAAG,WAAOC,GAAP,EAAYC,SAAZ,EAA0B;AACxD,QAAI,EAAED,GAAG,YAAYE,UAAjB,CAAJ,EAAkC;AAChC,YAAMR,OAAO,CAAC,IAAIS,KAAJ,CAAU,4BAAV,CAAD,EAA0C,mCAA1C,CAAb;AACD;;AAED,QAAIH,GAAG,CAACI,UAAJ,GAAiB,CAArB,EAAwB;AACtB,YAAMV,OAAO,CAAC,IAAIS,KAAJ,CAAU,2BAAV,CAAD,EAAyC,kCAAzC,CAAb;AACD;;AAED,UAAME,MAAM,GAAGT,kBAAkB,CAACI,GAAG,CAACM,QAAJ,CAAa,CAAb,EAAgB,CAAhB,CAAD,CAAjC;;AAEA,QAAID,MAAM,KAAK,MAAf,EAAuB;AACrB,YAAMX,OAAO,CAAC,IAAIS,KAAJ,CAAU,gCAAV,CAAD,EAA8C,mCAA9C,CAAb;AACD;;AAED,UAAMI,OAAO,GAAGP,GAAG,CAACQ,KAAJ,CAAU,CAAV,CAAhB;AAEA,UAAMC,aAAa,SAASjB,MAAM,CAACkB,MAAP,CAAcT,SAAd,CAA5B;;AAEA,QAAI,CAACH,gBAAgB,CAACS,OAAD,EAAUE,aAAa,CAACE,KAAxB,CAArB,EAAqD;AACnD,YAAMjB,OAAO,CAAC,IAAIS,KAAJ,CAAU,yCAAV,CAAD,EAAuD,kCAAvD,CAAb;AACD;AACF,GAtB4B;;AAAA,kBAAvBJ,uBAAuB;AAAA;AAAA;AAAA,GAA7B;;AAwBAa,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,IAAI,EAAEf,uBADS;AAEfgB,EAAAA,IAAI,EAAE;AAFS,CAAjB","sourcesContent":["'use strict'\n\nconst { sha256 } = require('multiformats/hashes/sha2')\nconst errcode = require('err-code')\nconst { toString: uint8ArrayToString } = require('uint8arrays/to-string')\nconst { equals: uint8ArrayEquals } = require('uint8arrays/equals')\n\n/**\n * Validator for public key records.\n * Verifies that the passed in record value is the PublicKey\n * that matches the passed in key.\n * If validation fails the returned Promise will reject with the error.\n *\n * @param {Uint8Array} key - A valid key is of the form `'/pk/<keymultihash>'`\n * @param {Uint8Array} publicKey - The public key to validate against (protobuf encoded).\n */\nconst validatePublicKeyRecord = async (key, publicKey) => {\n  if (!(key instanceof Uint8Array)) {\n    throw errcode(new Error('\"key\" must be a Uint8Array'), 'ERR_INVALID_RECORD_KEY_NOT_BUFFER')\n  }\n\n  if (key.byteLength < 5) {\n    throw errcode(new Error('invalid public key record'), 'ERR_INVALID_RECORD_KEY_TOO_SHORT')\n  }\n\n  const prefix = uint8ArrayToString(key.subarray(0, 4))\n\n  if (prefix !== '/pk/') {\n    throw errcode(new Error('key was not prefixed with /pk/'), 'ERR_INVALID_RECORD_KEY_BAD_PREFIX')\n  }\n\n  const keyhash = key.slice(4)\n\n  const publicKeyHash = await sha256.digest(publicKey)\n\n  if (!uint8ArrayEquals(keyhash, publicKeyHash.bytes)) {\n    throw errcode(new Error('public key does not match passed in key'), 'ERR_INVALID_RECORD_HASH_MISMATCH')\n  }\n}\n\nmodule.exports = {\n  func: validatePublicKeyRecord,\n  sign: false\n}\n"]},"metadata":{},"sourceType":"script"}