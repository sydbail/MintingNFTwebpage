{"ast":null,"code":"/* eslint-env browser */\n'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst {\n  default: PQueue\n} = require('p-queue');\n\nconst HTTP = require('ipfs-utils/src/http');\n\nconst debug = require('debug');\n\nconst log = Object.assign(debug('ipfs:preload'), {\n  error: debug('ipfs:preload:error')\n}); // browsers limit concurrent connections per host,\n// we don't want preload calls to exhaust the limit (~6)\n\nconst httpQueue = new PQueue({\n  concurrency: 4\n});\n/**\n * @param {string} url\n * @param {import('ipfs-core-types/src/utils').AbortOptions} options\n */\n\nmodule.exports = function preload(url, options = {}) {\n  log(url);\n  return httpQueue.add( /*#__PURE__*/_asyncToGenerator(function* () {\n    const res = yield HTTP.post(url, {\n      signal: options.signal\n    }); // @ts-ignore\n\n    const reader = res.body.getReader();\n\n    try {\n      while (true) {\n        const {\n          done\n        } = yield reader.read();\n        if (done) return; // Read to completion but do not cache\n      }\n    } finally {\n      reader.releaseLock();\n    }\n  }));\n};","map":null,"metadata":{},"sourceType":"script"}