{"ast":null,"code":"'use strict';\n\nvar _awaitAsyncGenerator = require(\"/Users/sydneybailey/Internship/Dapp/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\").default;\n\nvar _wrapAsyncGenerator = require(\"/Users/sydneybailey/Internship/Dapp/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/Dapp/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/block').API<HTTPClientExtraOptions>} BlockAPI\n * @typedef {import('ipfs-core-types/src/block').RmResult} RmResult\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {BlockAPI[\"rm\"]}\n   */\n  function rm(_x) {\n    return _rm.apply(this, arguments);\n  }\n\n  function _rm() {\n    _rm = _wrapAsyncGenerator(function* (cid, options = {}) {\n      if (!Array.isArray(cid)) {\n        cid = [cid];\n      }\n\n      const res = yield _awaitAsyncGenerator(api.post('block/rm', {\n        timeout: options.timeout,\n        signal: options.signal,\n        searchParams: toUrlSearchParams({\n          arg: cid.map(cid => cid.toString()),\n          'stream-channels': true,\n          ...options\n        }),\n        headers: options.headers\n      }));\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n\n      var _iteratorError;\n\n      try {\n        for (var _iterator = _asyncIterator(res.ndjson()), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n          const removed = _value;\n          yield toCoreInterface(removed);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            yield _awaitAsyncGenerator(_iterator.return());\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    });\n    return _rm.apply(this, arguments);\n  }\n\n  return rm;\n});\n/**\n * @param {*} removed\n */\n\nfunction toCoreInterface(removed) {\n  /** @type {RmResult} */\n  const out = {\n    cid: CID.parse(removed.Hash)\n  };\n\n  if (removed.Error) {\n    out.error = new Error(removed.Error);\n  }\n\n  return out;\n}","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Dapp/node_modules/ipfs-http-client/src/block/rm.js"],"names":["CID","require","configure","toUrlSearchParams","module","exports","api","rm","cid","options","Array","isArray","res","post","timeout","signal","searchParams","arg","map","toString","headers","ndjson","removed","toCoreInterface","out","parse","Hash","Error","error"],"mappings":"AAAA;;;;;;;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAUC,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,6BAAD,CAAjC;AAEA;AACA;AACA;AACA;AACA;;;AAEAG,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAACI,GAAG,IAAI;AAChC;AACF;AACA;AAHkC,WAIfC,EAJe;AAAA;AAAA;;AAAA;AAAA,8BAIhC,WAAqBC,GAArB,EAA0BC,OAAO,GAAG,EAApC,EAAwC;AACtC,UAAI,CAACC,KAAK,CAACC,OAAN,CAAcH,GAAd,CAAL,EAAyB;AACvBA,QAAAA,GAAG,GAAG,CAACA,GAAD,CAAN;AACD;;AAED,YAAMI,GAAG,8BAASN,GAAG,CAACO,IAAJ,CAAS,UAAT,EAAqB;AACrCC,QAAAA,OAAO,EAAEL,OAAO,CAACK,OADoB;AAErCC,QAAAA,MAAM,EAAEN,OAAO,CAACM,MAFqB;AAGrCC,QAAAA,YAAY,EAAEb,iBAAiB,CAAC;AAC9Bc,UAAAA,GAAG,EAAET,GAAG,CAACU,GAAJ,CAAQV,GAAG,IAAIA,GAAG,CAACW,QAAJ,EAAf,CADyB;AAE9B,6BAAmB,IAFW;AAG9B,aAAGV;AAH2B,SAAD,CAHM;AAQrCW,QAAAA,OAAO,EAAEX,OAAO,CAACW;AARoB,OAArB,CAAT,CAAT;AALsC;AAAA;;AAAA;;AAAA;AAgBtC,4CAA4BR,GAAG,CAACS,MAAJ,EAA5B,gOAA0C;AAAA,gBAAzBC,OAAyB;AACxC,gBAAMC,eAAe,CAACD,OAAD,CAArB;AACD;AAlBqC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmBvC,KAvB+B;AAAA;AAAA;;AAyBhC,SAAOf,EAAP;AACD,CA1ByB,CAA1B;AA4BA;AACA;AACA;;AACA,SAASgB,eAAT,CAA0BD,OAA1B,EAAmC;AACjC;AACA,QAAME,GAAG,GAAG;AACVhB,IAAAA,GAAG,EAAER,GAAG,CAACyB,KAAJ,CAAUH,OAAO,CAACI,IAAlB;AADK,GAAZ;;AAIA,MAAIJ,OAAO,CAACK,KAAZ,EAAmB;AACjBH,IAAAA,GAAG,CAACI,KAAJ,GAAY,IAAID,KAAJ,CAAUL,OAAO,CAACK,KAAlB,CAAZ;AACD;;AAED,SAAOH,GAAP;AACD","sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/block').API<HTTPClientExtraOptions>} BlockAPI\n * @typedef {import('ipfs-core-types/src/block').RmResult} RmResult\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {BlockAPI[\"rm\"]}\n   */\n  async function * rm (cid, options = {}) {\n    if (!Array.isArray(cid)) {\n      cid = [cid]\n    }\n\n    const res = await api.post('block/rm', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cid.map(cid => cid.toString()),\n        'stream-channels': true,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (const removed of res.ndjson()) {\n      yield toCoreInterface(removed)\n    }\n  }\n\n  return rm\n})\n\n/**\n * @param {*} removed\n */\nfunction toCoreInterface (removed) {\n  /** @type {RmResult} */\n  const out = {\n    cid: CID.parse(removed.Hash)\n  }\n\n  if (removed.Error) {\n    out.error = new Error(removed.Error)\n  }\n\n  return out\n}\n"]},"metadata":{},"sourceType":"script"}