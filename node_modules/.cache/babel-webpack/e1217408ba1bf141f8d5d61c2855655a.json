{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nvar _awaitAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\").default;\n\nvar _wrapAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nconst {\n  pipe\n} = require('it-pipe');\n\nconst lp = require('it-length-prefixed');\n\nconst Message = require('../message');\n\nconst handlers = require('./handlers');\n\nconst utils = require('../utils');\n/**\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('libp2p-interfaces/src/stream-muxer/types').MuxedStream} MuxedStream\n */\n\n/**\n * @param {import('../index')} dht\n */\n\n\nmodule.exports = dht => {\n  const log = utils.logger(dht.peerId, 'rpc');\n  const getMessageHandler = handlers(dht);\n  /**\n   * Process incoming DHT messages.\n   *\n   * @param {PeerId} peerId\n   * @param {Message} msg\n   */\n\n  function handleMessage(_x, _x2) {\n    return _handleMessage.apply(this, arguments);\n  }\n  /**\n   * Handle incoming streams on the dht protocol\n   *\n   * @param {object} props\n   * @param {MuxedStream} props.stream\n   * @param {import('libp2p-interfaces/src/connection').Connection} props.connection\n   */\n\n\n  function _handleMessage() {\n    _handleMessage = _asyncToGenerator(function* (peerId, msg) {\n      // get handler & execute it\n      const handler = getMessageHandler(msg.type);\n\n      try {\n        yield dht._add(peerId);\n      } catch (err) {\n        log.error('Failed to update the kbucket store', err);\n      }\n\n      if (!handler) {\n        log.error(`no handler found for message type: ${msg.type}`);\n        return;\n      }\n\n      return handler(peerId, msg);\n    });\n    return _handleMessage.apply(this, arguments);\n  }\n\n  function onIncomingStream(_x3) {\n    return _onIncomingStream.apply(this, arguments);\n  }\n\n  function _onIncomingStream() {\n    _onIncomingStream = _asyncToGenerator(function* ({\n      stream,\n      connection\n    }) {\n      const peerId = connection.remotePeer;\n\n      try {\n        yield dht._add(peerId);\n      } catch (err) {\n        log.error(err);\n      }\n\n      const idB58Str = peerId.toB58String();\n      log('from: %s', idB58Str);\n      yield pipe(stream.source, lp.decode(),\n      /**\n       * @param {AsyncIterable<Uint8Array>} source\n       */\n      source => _wrapAsyncGenerator(function* () {\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n\n        var _iteratorError;\n\n        try {\n          for (var _iterator = _asyncIterator(source), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n            const msg = _value;\n            // handle the message\n            const desMessage = Message.deserialize(msg.slice());\n            const res = yield _awaitAsyncGenerator(handleMessage(peerId, desMessage)); // Not all handlers will return a response\n\n            if (res) {\n              yield res.serialize();\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              yield _awaitAsyncGenerator(_iterator.return());\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      })(), lp.encode(), stream.sink);\n    });\n    return _onIncomingStream.apply(this, arguments);\n  }\n\n  return onIncomingStream;\n};","map":null,"metadata":{},"sourceType":"script"}