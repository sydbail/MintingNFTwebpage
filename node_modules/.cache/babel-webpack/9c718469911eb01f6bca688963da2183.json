{"ast":null,"code":"'use strict'; // @ts-ignore\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/Dapp/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst debounce = require('just-debounce-it');\n\nconst Message = require('../types/message');\n\nconst logger = require('../utils').logger;\n\nconst {\n  wantlistSendDebounceMs\n} = require('../constants');\n/**\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('multiformats').CID} CID\n * @typedef {import('../network')} Network\n */\n\n\nmodule.exports = class MsgQueue {\n  /**\n   * @param {PeerId} selfPeerId\n   * @param {PeerId} otherPeerId\n   * @param {Network} network\n   */\n  constructor(selfPeerId, otherPeerId, network) {\n    this.peerId = otherPeerId;\n    this.network = network;\n    this.refcnt = 1;\n    /**\n     * @private\n     * @type {{cid:CID, priority:number, cancel?:boolean}[]}\n     */\n\n    this._entries = [];\n    /** @private */\n\n    this._log = logger(selfPeerId, 'msgqueue');\n    this.sendEntries = debounce(this._sendEntries.bind(this), wantlistSendDebounceMs);\n  }\n  /**\n   * @param {Message} msg\n   */\n\n\n  addMessage(msg) {\n    if (msg.empty) {\n      return;\n    }\n\n    this.send(msg);\n  }\n  /**\n   * @param {{cid:CID, priority:number}[]} entries\n   */\n\n\n  addEntries(entries) {\n    this._entries = this._entries.concat(entries);\n    this.sendEntries();\n  }\n  /**\n   * @private\n   */\n\n\n  _sendEntries() {\n    if (!this._entries.length) {\n      return;\n    }\n\n    const msg = new Message(false);\n\n    this._entries.forEach(entry => {\n      if (entry.cancel) {\n        msg.cancel(entry.cid);\n      } else {\n        msg.addEntry(entry.cid, entry.priority);\n      }\n    });\n\n    this._entries = [];\n    this.addMessage(msg);\n  }\n  /**\n   * @param {Message} msg\n   */\n\n\n  send(msg) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        yield _this.network.connectTo(_this.peerId);\n      } catch (err) {\n        _this._log.error('cant connect to peer %s: %s', _this.peerId.toB58String(), err.message);\n\n        return;\n      }\n\n      _this._log('sending message to peer %s', _this.peerId.toB58String()); // Note: Don't wait for sendMessage() to complete\n\n\n      _this.network.sendMessage(_this.peerId, msg).catch(err => {\n        _this._log.error('send error: %s', err.message);\n      });\n    })();\n  }\n\n};","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Dapp/node_modules/ipfs-bitswap/src/want-manager/msg-queue.js"],"names":["debounce","require","Message","logger","wantlistSendDebounceMs","module","exports","MsgQueue","constructor","selfPeerId","otherPeerId","network","peerId","refcnt","_entries","_log","sendEntries","_sendEntries","bind","addMessage","msg","empty","send","addEntries","entries","concat","length","forEach","entry","cancel","cid","addEntry","priority","connectTo","err","error","toB58String","message","sendMessage","catch"],"mappings":"AAAA,a,CAEA;;;;AACA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,kBAAD,CAAxB;;AAEA,MAAMC,OAAO,GAAGD,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAME,MAAM,GAAGF,OAAO,CAAC,UAAD,CAAP,CAAoBE,MAAnC;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAA6BH,OAAO,CAAC,cAAD,CAA1C;AAEA;AACA;AACA;AACA;AACA;;;AAEAI,MAAM,CAACC,OAAP,GAAiB,MAAMC,QAAN,CAAe;AAC9B;AACF;AACA;AACA;AACA;AACEC,EAAAA,WAAW,CAAEC,UAAF,EAAcC,WAAd,EAA2BC,OAA3B,EAAoC;AAC7C,SAAKC,MAAL,GAAcF,WAAd;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKE,MAAL,GAAc,CAAd;AAEA;AACJ;AACA;AACA;;AACI,SAAKC,QAAL,GAAgB,EAAhB;AACA;;AACA,SAAKC,IAAL,GAAYZ,MAAM,CAACM,UAAD,EAAa,UAAb,CAAlB;AACA,SAAKO,WAAL,GAAmBhB,QAAQ,CAAC,KAAKiB,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAAD,EAA+Bd,sBAA/B,CAA3B;AACD;AAED;AACF;AACA;;;AACEe,EAAAA,UAAU,CAAEC,GAAF,EAAO;AACf,QAAIA,GAAG,CAACC,KAAR,EAAe;AACb;AACD;;AAED,SAAKC,IAAL,CAAUF,GAAV;AACD;AAED;AACF;AACA;;;AACEG,EAAAA,UAAU,CAAEC,OAAF,EAAW;AACnB,SAAKV,QAAL,GAAgB,KAAKA,QAAL,CAAcW,MAAd,CAAqBD,OAArB,CAAhB;AACA,SAAKR,WAAL;AACD;AAED;AACF;AACA;;;AACEC,EAAAA,YAAY,GAAI;AACd,QAAI,CAAC,KAAKH,QAAL,CAAcY,MAAnB,EAA2B;AACzB;AACD;;AAED,UAAMN,GAAG,GAAG,IAAIlB,OAAJ,CAAY,KAAZ,CAAZ;;AACA,SAAKY,QAAL,CAAca,OAAd,CAAuBC,KAAD,IAAW;AAC/B,UAAIA,KAAK,CAACC,MAAV,EAAkB;AAChBT,QAAAA,GAAG,CAACS,MAAJ,CAAWD,KAAK,CAACE,GAAjB;AACD,OAFD,MAEO;AACLV,QAAAA,GAAG,CAACW,QAAJ,CAAaH,KAAK,CAACE,GAAnB,EAAwBF,KAAK,CAACI,QAA9B;AACD;AACF,KAND;;AAOA,SAAKlB,QAAL,GAAgB,EAAhB;AACA,SAAKK,UAAL,CAAgBC,GAAhB;AACD;AAED;AACF;AACA;;;AACQE,EAAAA,IAAI,CAAEF,GAAF,EAAO;AAAA;;AAAA;AACf,UAAI;AACF,cAAM,KAAI,CAACT,OAAL,CAAasB,SAAb,CAAuB,KAAI,CAACrB,MAA5B,CAAN;AACD,OAFD,CAEE,OAAOsB,GAAP,EAAY;AACZ,QAAA,KAAI,CAACnB,IAAL,CAAUoB,KAAV,CAAgB,6BAAhB,EAA+C,KAAI,CAACvB,MAAL,CAAYwB,WAAZ,EAA/C,EAA0EF,GAAG,CAACG,OAA9E;;AACA;AACD;;AAED,MAAA,KAAI,CAACtB,IAAL,CAAU,4BAAV,EAAwC,KAAI,CAACH,MAAL,CAAYwB,WAAZ,EAAxC,EARe,CAUf;;;AACA,MAAA,KAAI,CAACzB,OAAL,CAAa2B,WAAb,CAAyB,KAAI,CAAC1B,MAA9B,EAAsCQ,GAAtC,EAA2CmB,KAA3C,CAAkDL,GAAD,IAAS;AACxD,QAAA,KAAI,CAACnB,IAAL,CAAUoB,KAAV,CAAgB,gBAAhB,EAAkCD,GAAG,CAACG,OAAtC;AACD,OAFD;AAXe;AAchB;;AA7E6B,CAAhC","sourcesContent":["'use strict'\n\n// @ts-ignore\nconst debounce = require('just-debounce-it')\n\nconst Message = require('../types/message')\nconst logger = require('../utils').logger\nconst { wantlistSendDebounceMs } = require('../constants')\n\n/**\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('multiformats').CID} CID\n * @typedef {import('../network')} Network\n */\n\nmodule.exports = class MsgQueue {\n  /**\n   * @param {PeerId} selfPeerId\n   * @param {PeerId} otherPeerId\n   * @param {Network} network\n   */\n  constructor (selfPeerId, otherPeerId, network) {\n    this.peerId = otherPeerId\n    this.network = network\n    this.refcnt = 1\n\n    /**\n     * @private\n     * @type {{cid:CID, priority:number, cancel?:boolean}[]}\n     */\n    this._entries = []\n    /** @private */\n    this._log = logger(selfPeerId, 'msgqueue')\n    this.sendEntries = debounce(this._sendEntries.bind(this), wantlistSendDebounceMs)\n  }\n\n  /**\n   * @param {Message} msg\n   */\n  addMessage (msg) {\n    if (msg.empty) {\n      return\n    }\n\n    this.send(msg)\n  }\n\n  /**\n   * @param {{cid:CID, priority:number}[]} entries\n   */\n  addEntries (entries) {\n    this._entries = this._entries.concat(entries)\n    this.sendEntries()\n  }\n\n  /**\n   * @private\n   */\n  _sendEntries () {\n    if (!this._entries.length) {\n      return\n    }\n\n    const msg = new Message(false)\n    this._entries.forEach((entry) => {\n      if (entry.cancel) {\n        msg.cancel(entry.cid)\n      } else {\n        msg.addEntry(entry.cid, entry.priority)\n      }\n    })\n    this._entries = []\n    this.addMessage(msg)\n  }\n\n  /**\n   * @param {Message} msg\n   */\n  async send (msg) {\n    try {\n      await this.network.connectTo(this.peerId)\n    } catch (err) {\n      this._log.error('cant connect to peer %s: %s', this.peerId.toB58String(), err.message)\n      return\n    }\n\n    this._log('sending message to peer %s', this.peerId.toB58String())\n\n    // Note: Don't wait for sendMessage() to complete\n    this.network.sendMessage(this.peerId, msg).catch((err) => {\n      this._log.error('send error: %s', err.message)\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"script"}