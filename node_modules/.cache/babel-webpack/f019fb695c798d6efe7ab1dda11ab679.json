{"ast":null,"code":"'use strict';\n\nvar _wrapAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\").default;\n\nvar _awaitAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nvar _asyncGeneratorDelegate = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncGeneratorDelegate\").default;\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst toCamel = require('../lib/object-to-camel');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/refs').API<HTTPClientExtraOptions>} RefsAPI\n */\n\n\nmodule.exports = configure((api, opts) => {\n  /**\n   * @type {RefsAPI[\"refs\"]}\n   */\n  const refs = /*#__PURE__*/function () {\n    var _ref = _wrapAsyncGenerator(function* (args, options = {}) {\n      /** @type {import('ipfs-core-types/src/utils').IPFSPath[]} */\n      const argsArr = Array.isArray(args) ? args : [args];\n      const res = yield _awaitAsyncGenerator(api.post('refs', {\n        timeout: options.timeout,\n        signal: options.signal,\n        searchParams: toUrlSearchParams({\n          arg: argsArr.map(arg => `${arg instanceof Uint8Array ? CID.decode(arg) : arg}`),\n          ...options\n        }),\n        headers: options.headers,\n        transform: toCamel\n      }));\n      yield* _asyncGeneratorDelegate(_asyncIterator(res.ndjson()), _awaitAsyncGenerator);\n    });\n\n    return function refs(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return Object.assign(refs, {\n    local: require('./local')(opts)\n  });\n});","map":{"version":3,"sources":["/Users/sydneybailey/Internship/contract-testing/node_modules/ipfs-http-client/src/refs/index.js"],"names":["CID","require","toCamel","configure","toUrlSearchParams","module","exports","api","opts","refs","args","options","argsArr","Array","isArray","res","post","timeout","signal","searchParams","arg","map","Uint8Array","decode","headers","transform","ndjson","Object","assign","local"],"mappings":"AAAA;;;;;;;;;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAUC,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,wBAAD,CAAvB;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,6BAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AAEAI,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAAC,CAACI,GAAD,EAAMC,IAAN,KAAe;AACxC;AACF;AACA;AACE,QAAMC,IAAI;AAAA,mCAAG,WAAkBC,IAAlB,EAAwBC,OAAO,GAAG,EAAlC,EAAsC;AACjD;AACA,YAAMC,OAAO,GAAGC,KAAK,CAACC,OAAN,CAAcJ,IAAd,IAAsBA,IAAtB,GAA6B,CAACA,IAAD,CAA7C;AAEA,YAAMK,GAAG,8BAASR,GAAG,CAACS,IAAJ,CAAS,MAAT,EAAiB;AACjCC,QAAAA,OAAO,EAAEN,OAAO,CAACM,OADgB;AAEjCC,QAAAA,MAAM,EAAEP,OAAO,CAACO,MAFiB;AAGjCC,QAAAA,YAAY,EAAEf,iBAAiB,CAAC;AAC9BgB,UAAAA,GAAG,EAAER,OAAO,CAACS,GAAR,CAAYD,GAAG,IAAK,GAAEA,GAAG,YAAYE,UAAf,GAA4BtB,GAAG,CAACuB,MAAJ,CAAWH,GAAX,CAA5B,GAA8CA,GAAI,EAAxE,CADyB;AAE9B,aAAGT;AAF2B,SAAD,CAHE;AAOjCa,QAAAA,OAAO,EAAEb,OAAO,CAACa,OAPgB;AAQjCC,QAAAA,SAAS,EAAEvB;AARsB,OAAjB,CAAT,CAAT;AAWA,oDAAQa,GAAG,CAACW,MAAJ,EAAR;AACD,KAhBS;;AAAA,oBAAJjB,IAAI;AAAA;AAAA;AAAA,KAAV;;AAkBA,SAAOkB,MAAM,CAACC,MAAP,CAAcnB,IAAd,EAAoB;AACzBoB,IAAAA,KAAK,EAAE5B,OAAO,CAAC,SAAD,CAAP,CAAmBO,IAAnB;AADkB,GAApB,CAAP;AAGD,CAzByB,CAA1B","sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst toCamel = require('../lib/object-to-camel')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/refs').API<HTTPClientExtraOptions>} RefsAPI\n */\n\nmodule.exports = configure((api, opts) => {\n  /**\n   * @type {RefsAPI[\"refs\"]}\n   */\n  const refs = async function * (args, options = {}) {\n    /** @type {import('ipfs-core-types/src/utils').IPFSPath[]} */\n    const argsArr = Array.isArray(args) ? args : [args]\n\n    const res = await api.post('refs', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: argsArr.map(arg => `${arg instanceof Uint8Array ? CID.decode(arg) : arg}`),\n        ...options\n      }),\n      headers: options.headers,\n      transform: toCamel\n    })\n\n    yield * res.ndjson()\n  }\n\n  return Object.assign(refs, {\n    local: require('./local')(opts)\n  })\n})\n"]},"metadata":{},"sourceType":"script"}