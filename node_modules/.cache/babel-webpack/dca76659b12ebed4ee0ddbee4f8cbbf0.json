{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/Dapp/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst {\n  Multiaddr\n} = require('multiaddr');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/swarm').API<HTTPClientExtraOptions>} SwarmAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {SwarmAPI[\"addrs\"]}\n   */\n  function addrs() {\n    return _addrs.apply(this, arguments);\n  }\n\n  function _addrs() {\n    _addrs = _asyncToGenerator(function* (options = {}) {\n      const res = yield api.post('swarm/addrs', {\n        timeout: options.timeout,\n        signal: options.signal,\n        searchParams: toUrlSearchParams(options),\n        headers: options.headers\n      });\n      /** @type {{ Addrs: Record<string, string[]> }} */\n\n      const {\n        Addrs\n      } = yield res.json();\n      return Object.keys(Addrs).map(id => ({\n        id,\n        addrs: (Addrs[id] || []).map(a => new Multiaddr(a))\n      }));\n    });\n    return _addrs.apply(this, arguments);\n  }\n\n  return addrs;\n});","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Dapp/node_modules/ipfs-http-client/src/swarm/addrs.js"],"names":["Multiaddr","require","configure","toUrlSearchParams","module","exports","api","addrs","options","res","post","timeout","signal","searchParams","headers","Addrs","json","Object","keys","map","id","a"],"mappings":"AAAA;;;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAgBC,OAAO,CAAC,WAAD,CAA7B;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,6BAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AAEAG,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAACI,GAAG,IAAI;AAChC;AACF;AACA;AAHkC,WAIjBC,KAJiB;AAAA;AAAA;;AAAA;AAAA,+BAIhC,WAAsBC,OAAO,GAAG,EAAhC,EAAoC;AAClC,YAAMC,GAAG,SAASH,GAAG,CAACI,IAAJ,CAAS,aAAT,EAAwB;AACxCC,QAAAA,OAAO,EAAEH,OAAO,CAACG,OADuB;AAExCC,QAAAA,MAAM,EAAEJ,OAAO,CAACI,MAFwB;AAGxCC,QAAAA,YAAY,EAAEV,iBAAiB,CAACK,OAAD,CAHS;AAIxCM,QAAAA,OAAO,EAAEN,OAAO,CAACM;AAJuB,OAAxB,CAAlB;AAOA;;AACA,YAAM;AAAEC,QAAAA;AAAF,gBAAkBN,GAAG,CAACO,IAAJ,EAAxB;AAEA,aAAOC,MAAM,CAACC,IAAP,CAAYH,KAAZ,EAAmBI,GAAnB,CAAuBC,EAAE,KAAK;AACnCA,QAAAA,EADmC;AAEnCb,QAAAA,KAAK,EAAE,CAACQ,KAAK,CAACK,EAAD,CAAL,IAAa,EAAd,EAAkBD,GAAlB,CAAsBE,CAAC,IAAI,IAAIrB,SAAJ,CAAcqB,CAAd,CAA3B;AAF4B,OAAL,CAAzB,CAAP;AAID,KAnB+B;AAAA;AAAA;;AAoBhC,SAAOd,KAAP;AACD,CArByB,CAA1B","sourcesContent":["'use strict'\n\nconst { Multiaddr } = require('multiaddr')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/swarm').API<HTTPClientExtraOptions>} SwarmAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {SwarmAPI[\"addrs\"]}\n   */\n  async function addrs (options = {}) {\n    const res = await api.post('swarm/addrs', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    /** @type {{ Addrs: Record<string, string[]> }} */\n    const { Addrs } = await res.json()\n\n    return Object.keys(Addrs).map(id => ({\n      id,\n      addrs: (Addrs[id] || []).map(a => new Multiaddr(a))\n    }))\n  }\n  return addrs\n})\n"]},"metadata":{},"sourceType":"script"}