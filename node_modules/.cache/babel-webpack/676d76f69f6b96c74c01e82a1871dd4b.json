{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/Dapp/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nvar _awaitAsyncGenerator = require(\"/Users/sydneybailey/Internship/Dapp/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\").default;\n\nvar _wrapAsyncGenerator = require(\"/Users/sydneybailey/Internship/Dapp/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\").default;\n\nconst mergeOptions = require('merge-options').bind({\n  ignoreUndefined: true\n});\n\nconst {\n  isTest\n} = require('ipfs-utils/src/env');\n\nconst log = require('debug')('ipfs');\n\nconst errCode = require('err-code');\n\nconst {\n  UnixFS\n} = require('ipfs-unixfs');\n\nconst dagPb = require('@ipld/dag-pb');\n\nconst dagCbor = require('@ipld/dag-cbor');\n\nconst {\n  identity\n} = require('multiformats/hashes/identity');\n\nconst {\n  bases,\n  hashes,\n  codecs\n} = require('multiformats/basics');\n\nconst initAssets = require('../runtime/init-assets-nodejs');\n\nconst {\n  AlreadyInitializedError\n} = require('../errors');\n\nconst {\n  fromString: uint8ArrayFromString\n} = require('uint8arrays/from-string');\n\nconst createStartAPI = require('./start');\n\nconst createStopAPI = require('./stop');\n\nconst createDNSAPI = require('./dns');\n\nconst createIsOnlineAPI = require('./is-online');\n\nconst createResolveAPI = require('./resolve');\n\nconst PinAPI = require('./pin');\n\nconst IPNSAPI = require('./ipns');\n\nconst NameAPI = require('./name');\n\nconst createRefsAPI = require('./refs');\n\nconst createRefsLocalAPI = require('./refs/local');\n\nconst BitswapAPI = require('./bitswap');\n\nconst BootstrapAPI = require('./bootstrap');\n\nconst BlockAPI = require('./block');\n\nconst RootAPI = require('./root');\n\nconst createVersionAPI = require('./version');\n\nconst createIDAPI = require('./id');\n\nconst createConfigAPI = require('./config');\n\nconst DagAPI = require('./dag');\n\nconst createPreloadAPI = require('../preload');\n\nconst createMfsPreloadAPI = require('../mfs-preload');\n\nconst createFilesAPI = require('./files');\n\nconst KeyAPI = require('./key');\n\nconst ObjectAPI = require('./object');\n\nconst RepoAPI = require('./repo');\n\nconst StatsAPI = require('./stats');\n\nconst Storage = require('./storage');\n\nconst Network = require('./network');\n\nconst Service = require('../utils/service');\n\nconst SwarmAPI = require('./swarm');\n\nconst createPingAPI = require('./ping');\n\nconst createDHTAPI = require('./dht');\n\nconst createPubSubAPI = require('./pubsub');\n\nconst Multicodecs = require('ipfs-core-utils/src/multicodecs');\n\nconst Multihashes = require('ipfs-core-utils/src/multihashes');\n\nconst Multibases = require('ipfs-core-utils/src/multibases');\n/**\n * @typedef {import('../types').Options} Options\n * @typedef {import('../types').Print} Print\n * @typedef {import('./storage')} StorageAPI\n * @typedef {import('multiformats/codecs/interface').BlockCodec<any, any>} BlockCodec\n * @typedef {import('multiformats/hashes/interface').MultihashHasher} MultihashHasher\n * @typedef {import('multiformats/bases/interface').MultibaseCodec<any>} MultibaseCodec\n */\n\n\nclass IPFS {\n  /**\n   * @param {Object} config\n   * @param {Print} config.print\n   * @param {StorageAPI} config.storage\n   * @param {import('ipfs-core-utils/src/multicodecs')} config.codecs\n   * @param {Options} config.options\n   */\n  constructor({\n    print,\n    storage,\n    codecs,\n    options\n  }) {\n    const {\n      peerId,\n      repo,\n      keychain\n    } = storage;\n    const network = Service.create(Network);\n    const preload = createPreloadAPI(options.preload);\n    const dns = createDNSAPI();\n    const isOnline = createIsOnlineAPI({\n      network\n    }); // @ts-ignore This type check fails as options.\n    // libp2p can be a function, while IPNS router config expects libp2p config\n\n    const ipns = new IPNSAPI(options);\n    /** @type {MultihashHasher[]} */\n\n    const multihashHashers = Object.values(hashes);\n    (options.ipld && options.ipld.hashers ? options.ipld.hashers : []).forEach(hasher => multihashHashers.push(hasher));\n    this.hashers = new Multihashes({\n      hashers: multihashHashers,\n      loadHasher: options.ipld && options.ipld.loadHasher\n    });\n    /** @type {MultibaseCodec[]} */\n\n    const multibaseCodecs = Object.values(bases);\n    (options.ipld && options.ipld.bases ? options.ipld.bases : []).forEach(base => multibaseCodecs.push(base));\n    this.bases = new Multibases({\n      bases: multibaseCodecs,\n      loadBase: options.ipld && options.ipld.loadBase\n    });\n    const pin = new PinAPI({\n      repo,\n      codecs\n    });\n    const block = new BlockAPI({\n      codecs,\n      hashers: this.hashers,\n      preload,\n      repo\n    });\n    const name = new NameAPI({\n      dns,\n      ipns,\n      repo,\n      codecs,\n      peerId,\n      isOnline,\n      keychain,\n      options\n    });\n    const resolve = createResolveAPI({\n      repo,\n      codecs,\n      bases: this.bases,\n      name\n    });\n    const dag = new DagAPI({\n      repo,\n      codecs,\n      hashers: this.hashers,\n      preload\n    });\n    const refs = Object.assign(createRefsAPI({\n      repo,\n      codecs,\n      resolve,\n      preload\n    }), {\n      local: createRefsLocalAPI({\n        repo: storage.repo\n      })\n    });\n    const {\n      add,\n      addAll,\n      cat,\n      get,\n      ls\n    } = new RootAPI({\n      preload,\n      repo,\n      options: options.EXPERIMENTAL\n    });\n    const files = createFilesAPI({\n      repo,\n      preload,\n      hashers: this.hashers,\n      options\n    });\n    const mfsPreload = createMfsPreloadAPI({\n      files,\n      preload,\n      options: options.preload\n    });\n    this.preload = preload;\n    this.name = name;\n    this.ipns = ipns;\n    this.pin = pin;\n    this.resolve = resolve;\n    this.block = block;\n    this.refs = refs;\n    this.start = createStartAPI({\n      network,\n      peerId,\n      repo,\n      preload,\n      ipns,\n      mfsPreload,\n      print,\n      keychain,\n      options\n    });\n    this.stop = createStopAPI({\n      network,\n      preload,\n      mfsPreload,\n      ipns,\n      repo\n    });\n    this.dht = createDHTAPI({\n      network,\n      repo\n    });\n    this.pubsub = createPubSubAPI({\n      network,\n      config: options.config\n    });\n    this.dns = dns;\n    this.isOnline = isOnline;\n    this.id = createIDAPI({\n      network,\n      peerId\n    });\n    this.version = createVersionAPI({\n      repo\n    });\n    this.bitswap = new BitswapAPI({\n      network\n    });\n    this.bootstrap = new BootstrapAPI({\n      repo\n    });\n    this.config = createConfigAPI({\n      repo\n    });\n    this.ping = createPingAPI({\n      network\n    });\n    this.add = add;\n    this.addAll = addAll;\n    this.cat = cat;\n    this.get = get;\n    this.ls = ls;\n    this.dag = dag;\n    this.files = files;\n    this.key = new KeyAPI({\n      keychain\n    });\n    this.object = new ObjectAPI({\n      preload,\n      codecs,\n      repo\n    });\n    this.repo = new RepoAPI({\n      repo,\n      hashers: this.hashers\n    });\n    this.stats = new StatsAPI({\n      repo,\n      network\n    });\n    this.swarm = new SwarmAPI({\n      network\n    }); // For the backwards compatibility\n\n    Object.defineProperty(this, 'libp2p', {\n      get() {\n        const net = network.try();\n        return net ? net.libp2p : undefined;\n      }\n\n    }); // unimplemented methods\n\n    const notImplemented = () => Promise.reject(errCode(new Error('Not implemented'), 'ERR_NOT_IMPLEMENTED'));\n\n    const notImplementedIter = /*#__PURE__*/function () {\n      var _ref = _wrapAsyncGenerator(function* () {\n        throw errCode(new Error('Not implemented'), 'ERR_NOT_IMPLEMENTED');\n      });\n\n      return function notImplementedIter() {\n        return _ref.apply(this, arguments);\n      };\n    }(); // eslint-disable-line require-yield\n\n\n    this.commands = notImplemented;\n    this.diag = {\n      cmds: notImplemented,\n      net: notImplemented,\n      sys: notImplemented\n    };\n    this.log = {\n      level: notImplemented,\n      ls: notImplemented,\n      tail: notImplementedIter\n    };\n    this.mount = notImplemented;\n    this.codecs = codecs;\n  }\n  /**\n   * `IPFS.create` will do the initialization. Keep this around for backwards\n   * compatibility.\n   *\n   * @deprecated\n   */\n\n\n  init() {\n    return _asyncToGenerator(function* () {\n      // eslint-disable-line require-await\n      throw new AlreadyInitializedError();\n    })();\n  }\n  /**\n   * @param {Options} options\n   */\n\n\n  static create(options = {}) {\n    return _asyncToGenerator(function* () {\n      options = mergeOptions(getDefaultOptions(), options);\n      const initOptions = options.init || {};\n      /**\n       * @type {BlockCodec}\n       */\n\n      const id = {\n        name: identity.name,\n        code: identity.code,\n        encode: id => id,\n        decode: id => id\n      };\n      /** @type {BlockCodec[]} */\n\n      const blockCodecs = Object.values(codecs);\n      [dagPb, dagCbor, id].concat(options.ipld && options.ipld.codecs || []).forEach(codec => blockCodecs.push(codec));\n      const multicodecs = new Multicodecs({\n        codecs: blockCodecs,\n        loadCodec: options.ipld && options.ipld.loadCodec\n      }); // eslint-disable-next-line no-console\n\n      const print = options.silent ? log : console.log;\n      const storage = yield Storage.start(print, multicodecs, options);\n      const config = yield storage.repo.config.getAll();\n      const ipfs = new IPFS({\n        storage,\n        print,\n        codecs: multicodecs,\n        options: { ...options,\n          config\n        }\n      });\n      yield ipfs.preload.start();\n      ipfs.ipns.startOffline(storage);\n\n      if (storage.isNew && !initOptions.emptyRepo) {\n        // add empty unixfs dir object (go-ipfs assumes this exists)\n        const cid = yield addEmptyDir(ipfs);\n        log('adding default assets');\n        yield initAssets({\n          addAll: ipfs.addAll,\n          print\n        });\n        log('initializing IPNS keyspace');\n        yield ipfs.ipns.initializeKeyspace(storage.peerId.privKey, uint8ArrayFromString(`/ipfs/${cid}`));\n      }\n\n      if (options.start !== false) {\n        yield ipfs.start();\n      }\n\n      return ipfs;\n    })();\n  }\n\n}\n\nmodule.exports = IPFS;\n/**\n * @param {IPFS} ipfs\n */\n\nconst addEmptyDir = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator(function* (ipfs) {\n    const buf = dagPb.encode({\n      Data: new UnixFS({\n        type: 'directory'\n      }).marshal(),\n      Links: []\n    });\n    const cid = yield ipfs.block.put(buf, {\n      mhtype: 'sha2-256',\n      format: 'dag-pb'\n    });\n    yield ipfs.pin.add(cid);\n    return cid;\n  });\n\n  return function addEmptyDir(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n/**\n * @returns {Options}\n */\n\n\nconst getDefaultOptions = () => ({\n  start: true,\n  EXPERIMENTAL: {},\n  preload: {\n    enabled: !isTest,\n    // preload by default, unless in test env\n    addresses: ['/dns4/node0.preload.ipfs.io/https', '/dns4/node1.preload.ipfs.io/https', '/dns4/node2.preload.ipfs.io/https', '/dns4/node3.preload.ipfs.io/https']\n  }\n});","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Dapp/node_modules/ipfs-core/src/components/index.js"],"names":["mergeOptions","require","bind","ignoreUndefined","isTest","log","errCode","UnixFS","dagPb","dagCbor","identity","bases","hashes","codecs","initAssets","AlreadyInitializedError","fromString","uint8ArrayFromString","createStartAPI","createStopAPI","createDNSAPI","createIsOnlineAPI","createResolveAPI","PinAPI","IPNSAPI","NameAPI","createRefsAPI","createRefsLocalAPI","BitswapAPI","BootstrapAPI","BlockAPI","RootAPI","createVersionAPI","createIDAPI","createConfigAPI","DagAPI","createPreloadAPI","createMfsPreloadAPI","createFilesAPI","KeyAPI","ObjectAPI","RepoAPI","StatsAPI","Storage","Network","Service","SwarmAPI","createPingAPI","createDHTAPI","createPubSubAPI","Multicodecs","Multihashes","Multibases","IPFS","constructor","print","storage","options","peerId","repo","keychain","network","create","preload","dns","isOnline","ipns","multihashHashers","Object","values","ipld","hashers","forEach","hasher","push","loadHasher","multibaseCodecs","base","loadBase","pin","block","name","resolve","dag","refs","assign","local","add","addAll","cat","get","ls","EXPERIMENTAL","files","mfsPreload","start","stop","dht","pubsub","config","id","version","bitswap","bootstrap","ping","key","object","stats","swarm","defineProperty","net","try","libp2p","undefined","notImplemented","Promise","reject","Error","notImplementedIter","commands","diag","cmds","sys","level","tail","mount","init","getDefaultOptions","initOptions","code","encode","decode","blockCodecs","concat","codec","multicodecs","loadCodec","silent","console","getAll","ipfs","startOffline","isNew","emptyRepo","cid","addEmptyDir","initializeKeyspace","privKey","module","exports","buf","Data","type","marshal","Links","put","mhtype","format","enabled","addresses"],"mappings":"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","sourcesContent":["'use strict'\n\nconst mergeOptions = require('merge-options').bind({ ignoreUndefined: true })\nconst { isTest } = require('ipfs-utils/src/env')\nconst log = require('debug')('ipfs')\nconst errCode = require('err-code')\nconst { UnixFS } = require('ipfs-unixfs')\nconst dagPb = require('@ipld/dag-pb')\nconst dagCbor = require('@ipld/dag-cbor')\nconst { identity } = require('multiformats/hashes/identity')\nconst { bases, hashes, codecs } = require('multiformats/basics')\n\nconst initAssets = require('../runtime/init-assets-nodejs')\nconst { AlreadyInitializedError } = require('../errors')\nconst { fromString: uint8ArrayFromString } = require('uint8arrays/from-string')\n\nconst createStartAPI = require('./start')\nconst createStopAPI = require('./stop')\nconst createDNSAPI = require('./dns')\nconst createIsOnlineAPI = require('./is-online')\nconst createResolveAPI = require('./resolve')\nconst PinAPI = require('./pin')\nconst IPNSAPI = require('./ipns')\nconst NameAPI = require('./name')\nconst createRefsAPI = require('./refs')\nconst createRefsLocalAPI = require('./refs/local')\nconst BitswapAPI = require('./bitswap')\nconst BootstrapAPI = require('./bootstrap')\nconst BlockAPI = require('./block')\nconst RootAPI = require('./root')\nconst createVersionAPI = require('./version')\nconst createIDAPI = require('./id')\nconst createConfigAPI = require('./config')\nconst DagAPI = require('./dag')\nconst createPreloadAPI = require('../preload')\nconst createMfsPreloadAPI = require('../mfs-preload')\nconst createFilesAPI = require('./files')\nconst KeyAPI = require('./key')\nconst ObjectAPI = require('./object')\nconst RepoAPI = require('./repo')\nconst StatsAPI = require('./stats')\nconst Storage = require('./storage')\nconst Network = require('./network')\nconst Service = require('../utils/service')\nconst SwarmAPI = require('./swarm')\nconst createPingAPI = require('./ping')\nconst createDHTAPI = require('./dht')\nconst createPubSubAPI = require('./pubsub')\nconst Multicodecs = require('ipfs-core-utils/src/multicodecs')\nconst Multihashes = require('ipfs-core-utils/src/multihashes')\nconst Multibases = require('ipfs-core-utils/src/multibases')\n\n/**\n * @typedef {import('../types').Options} Options\n * @typedef {import('../types').Print} Print\n * @typedef {import('./storage')} StorageAPI\n * @typedef {import('multiformats/codecs/interface').BlockCodec<any, any>} BlockCodec\n * @typedef {import('multiformats/hashes/interface').MultihashHasher} MultihashHasher\n * @typedef {import('multiformats/bases/interface').MultibaseCodec<any>} MultibaseCodec\n */\n\nclass IPFS {\n  /**\n   * @param {Object} config\n   * @param {Print} config.print\n   * @param {StorageAPI} config.storage\n   * @param {import('ipfs-core-utils/src/multicodecs')} config.codecs\n   * @param {Options} config.options\n   */\n  constructor ({ print, storage, codecs, options }) {\n    const { peerId, repo, keychain } = storage\n    const network = Service.create(Network)\n\n    const preload = createPreloadAPI(options.preload)\n\n    const dns = createDNSAPI()\n    const isOnline = createIsOnlineAPI({ network })\n    // @ts-ignore This type check fails as options.\n    // libp2p can be a function, while IPNS router config expects libp2p config\n    const ipns = new IPNSAPI(options)\n\n    /** @type {MultihashHasher[]} */\n    const multihashHashers = Object.values(hashes);\n\n    (options.ipld && options.ipld.hashers ? options.ipld.hashers : []).forEach(hasher => multihashHashers.push(hasher))\n\n    this.hashers = new Multihashes({\n      hashers: multihashHashers,\n      loadHasher: options.ipld && options.ipld.loadHasher\n    })\n\n    /** @type {MultibaseCodec[]} */\n    const multibaseCodecs = Object.values(bases);\n\n    (options.ipld && options.ipld.bases ? options.ipld.bases : []).forEach(base => multibaseCodecs.push(base))\n\n    this.bases = new Multibases({\n      bases: multibaseCodecs,\n      loadBase: options.ipld && options.ipld.loadBase\n    })\n\n    const pin = new PinAPI({ repo, codecs })\n    const block = new BlockAPI({ codecs, hashers: this.hashers, preload, repo })\n\n    const name = new NameAPI({\n      dns,\n      ipns,\n      repo,\n      codecs,\n      peerId,\n      isOnline,\n      keychain,\n      options\n    })\n\n    const resolve = createResolveAPI({ repo, codecs, bases: this.bases, name })\n\n    const dag = new DagAPI({ repo, codecs, hashers: this.hashers, preload })\n    const refs = Object.assign(createRefsAPI({ repo, codecs, resolve, preload }), {\n      local: createRefsLocalAPI({ repo: storage.repo })\n    })\n    const { add, addAll, cat, get, ls } = new RootAPI({\n      preload,\n      repo,\n      options: options.EXPERIMENTAL\n    })\n\n    const files = createFilesAPI({\n      repo,\n      preload,\n      hashers: this.hashers,\n      options\n    })\n\n    const mfsPreload = createMfsPreloadAPI({\n      files,\n      preload,\n      options: options.preload\n    })\n\n    this.preload = preload\n    this.name = name\n    this.ipns = ipns\n    this.pin = pin\n    this.resolve = resolve\n    this.block = block\n    this.refs = refs\n\n    this.start = createStartAPI({\n      network,\n      peerId,\n      repo,\n      preload,\n      ipns,\n      mfsPreload,\n      print,\n      keychain,\n      options\n    })\n\n    this.stop = createStopAPI({\n      network,\n      preload,\n      mfsPreload,\n      ipns,\n      repo\n    })\n\n    this.dht = createDHTAPI({ network, repo })\n    this.pubsub = createPubSubAPI({ network, config: options.config })\n    this.dns = dns\n    this.isOnline = isOnline\n    this.id = createIDAPI({ network, peerId })\n    this.version = createVersionAPI({ repo })\n    this.bitswap = new BitswapAPI({ network })\n    this.bootstrap = new BootstrapAPI({ repo })\n    this.config = createConfigAPI({ repo })\n    this.ping = createPingAPI({ network })\n\n    this.add = add\n    this.addAll = addAll\n    this.cat = cat\n    this.get = get\n    this.ls = ls\n\n    this.dag = dag\n    this.files = files\n    this.key = new KeyAPI({ keychain })\n    this.object = new ObjectAPI({ preload, codecs, repo })\n    this.repo = new RepoAPI({ repo, hashers: this.hashers })\n    this.stats = new StatsAPI({ repo, network })\n    this.swarm = new SwarmAPI({ network })\n\n    // For the backwards compatibility\n    Object.defineProperty(this, 'libp2p', {\n      get () {\n        const net = network.try()\n        return net ? net.libp2p : undefined\n      }\n    })\n\n    // unimplemented methods\n    const notImplemented = () => Promise.reject(errCode(new Error('Not implemented'), 'ERR_NOT_IMPLEMENTED'))\n    const notImplementedIter = async function * () { throw errCode(new Error('Not implemented'), 'ERR_NOT_IMPLEMENTED') } // eslint-disable-line require-yield\n    this.commands = notImplemented\n    this.diag = {\n      cmds: notImplemented,\n      net: notImplemented,\n      sys: notImplemented\n    }\n    this.log = {\n      level: notImplemented,\n      ls: notImplemented,\n      tail: notImplementedIter\n    }\n    this.mount = notImplemented\n\n    this.codecs = codecs\n  }\n\n  /**\n   * `IPFS.create` will do the initialization. Keep this around for backwards\n   * compatibility.\n   *\n   * @deprecated\n   */\n  async init () { // eslint-disable-line require-await\n    throw new AlreadyInitializedError()\n  }\n\n  /**\n   * @param {Options} options\n   */\n  static async create (options = {}) {\n    options = mergeOptions(getDefaultOptions(), options)\n    const initOptions = options.init || {}\n\n    /**\n     * @type {BlockCodec}\n     */\n    const id = {\n      name: identity.name,\n      code: identity.code,\n      encode: (id) => id,\n      decode: (id) => id\n    }\n\n    /** @type {BlockCodec[]} */\n    const blockCodecs = Object.values(codecs);\n\n    [dagPb, dagCbor, id].concat((options.ipld && options.ipld.codecs) || []).forEach(codec => blockCodecs.push(codec))\n\n    const multicodecs = new Multicodecs({\n      codecs: blockCodecs,\n      loadCodec: options.ipld && options.ipld.loadCodec\n    })\n\n    // eslint-disable-next-line no-console\n    const print = options.silent ? log : console.log\n    const storage = await Storage.start(print, multicodecs, options)\n    const config = await storage.repo.config.getAll()\n\n    const ipfs = new IPFS({\n      storage,\n      print,\n      codecs: multicodecs,\n      options: { ...options, config }\n    })\n\n    await ipfs.preload.start()\n\n    ipfs.ipns.startOffline(storage)\n\n    if (storage.isNew && !initOptions.emptyRepo) {\n      // add empty unixfs dir object (go-ipfs assumes this exists)\n      const cid = await addEmptyDir(ipfs)\n\n      log('adding default assets')\n      await initAssets({ addAll: ipfs.addAll, print })\n\n      log('initializing IPNS keyspace')\n      await ipfs.ipns.initializeKeyspace(storage.peerId.privKey, uint8ArrayFromString(`/ipfs/${cid}`))\n    }\n\n    if (options.start !== false) {\n      await ipfs.start()\n    }\n\n    return ipfs\n  }\n}\n\nmodule.exports = IPFS\n\n/**\n * @param {IPFS} ipfs\n */\nconst addEmptyDir = async (ipfs) => {\n  const buf = dagPb.encode({\n    Data: new UnixFS({ type: 'directory' }).marshal(),\n    Links: []\n  })\n\n  const cid = await ipfs.block.put(buf, {\n    mhtype: 'sha2-256',\n    format: 'dag-pb'\n  })\n\n  await ipfs.pin.add(cid)\n\n  return cid\n}\n\n/**\n * @returns {Options}\n */\nconst getDefaultOptions = () => ({\n  start: true,\n  EXPERIMENTAL: {},\n  preload: {\n    enabled: !isTest, // preload by default, unless in test env\n    addresses: [\n      '/dns4/node0.preload.ipfs.io/https',\n      '/dns4/node1.preload.ipfs.io/https',\n      '/dns4/node2.preload.ipfs.io/https',\n      '/dns4/node3.preload.ipfs.io/https'\n    ]\n  }\n})\n"]},"metadata":{},"sourceType":"script"}