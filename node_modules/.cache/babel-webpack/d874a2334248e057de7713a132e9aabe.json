{"ast":null,"code":"'use strict';\n\nvar _wrapAsyncGenerator = require(\"/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\").default;\n\nvar _awaitAsyncGenerator = require(\"/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nvar _asyncGeneratorDelegate = require(\"/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/@babel/runtime/helpers/asyncGeneratorDelegate\").default;\n\nconst log = require('debug')('ipfs:repo:utils:walk-dag');\n\nconst Block = require('multiformats/block');\n/**\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('../types').loadCodec} loadCodec\n * @typedef {import('../types').AbortOptions} AbortOptions\n */\n\n/**\n * @param {CID} cid\n * @param {Blockstore} blockstore\n * @param {loadCodec} loadCodec\n * @param {AbortOptions} [options]\n * @returns {AsyncGenerator<CID, void, undefined>}\n */\n\n\nfunction walkDag(_x, _x2, _x3, _x4) {\n  return _walkDag.apply(this, arguments);\n}\n\nfunction _walkDag() {\n  _walkDag = _wrapAsyncGenerator(function* (cid, blockstore, loadCodec, options) {\n    try {\n      const bytes = yield _awaitAsyncGenerator(blockstore.get(cid, options));\n      const codec = yield _awaitAsyncGenerator(loadCodec(cid.code));\n      const block = Block.createUnsafe({\n        bytes,\n        cid,\n        codec\n      });\n\n      for (const [, childCid] of block.links()) {\n        yield childCid;\n        yield* _asyncGeneratorDelegate(_asyncIterator(walkDag(childCid, blockstore, loadCodec, options)), _awaitAsyncGenerator);\n      }\n    } catch (err) {\n      log('Could not walk DAG for CID', cid.toString(), err);\n      throw err;\n    }\n  });\n  return _walkDag.apply(this, arguments);\n}\n\nmodule.exports = walkDag;","map":{"version":3,"sources":["/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/ipfs-repo/src/utils/walk-dag.js"],"names":["log","require","Block","walkDag","cid","blockstore","loadCodec","options","bytes","get","codec","code","block","createUnsafe","childCid","links","err","toString","module","exports"],"mappings":"AAAA;;;;;;;;;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,OAAD,CAAP,CAAiB,0BAAjB,CAAZ;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,oBAAD,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;SACiBE,O;;;;;iCAAjB,WAA0BC,GAA1B,EAA+BC,UAA/B,EAA2CC,SAA3C,EAAsDC,OAAtD,EAA+D;AAC7D,QAAI;AACF,YAAMC,KAAK,8BAASH,UAAU,CAACI,GAAX,CAAeL,GAAf,EAAoBG,OAApB,CAAT,CAAX;AACA,YAAMG,KAAK,8BAASJ,SAAS,CAACF,GAAG,CAACO,IAAL,CAAlB,CAAX;AACA,YAAMC,KAAK,GAAGV,KAAK,CAACW,YAAN,CAAmB;AAAEL,QAAAA,KAAF;AAASJ,QAAAA,GAAT;AAAcM,QAAAA;AAAd,OAAnB,CAAd;;AAEA,WAAK,MAAM,GAAGI,QAAH,CAAX,IAA2BF,KAAK,CAACG,KAAN,EAA3B,EAA0C;AACxC,cAAMD,QAAN;AACA,sDAAQX,OAAO,CAACW,QAAD,EAAWT,UAAX,EAAuBC,SAAvB,EAAkCC,OAAlC,CAAf;AACD;AACF,KATD,CASE,OAAOS,GAAP,EAAY;AACZhB,MAAAA,GAAG,CAAC,4BAAD,EAA+BI,GAAG,CAACa,QAAJ,EAA/B,EAA+CD,GAA/C,CAAH;AAEA,YAAMA,GAAN;AACD;AACF,G;;;;AAEDE,MAAM,CAACC,OAAP,GAAiBhB,OAAjB","sourcesContent":["'use strict'\n\nconst log = require('debug')('ipfs:repo:utils:walk-dag')\nconst Block = require('multiformats/block')\n\n/**\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('../types').loadCodec} loadCodec\n * @typedef {import('../types').AbortOptions} AbortOptions\n */\n\n/**\n * @param {CID} cid\n * @param {Blockstore} blockstore\n * @param {loadCodec} loadCodec\n * @param {AbortOptions} [options]\n * @returns {AsyncGenerator<CID, void, undefined>}\n */\nasync function * walkDag (cid, blockstore, loadCodec, options) {\n  try {\n    const bytes = await blockstore.get(cid, options)\n    const codec = await loadCodec(cid.code)\n    const block = Block.createUnsafe({ bytes, cid, codec })\n\n    for (const [, childCid] of block.links()) {\n      yield childCid\n      yield * walkDag(childCid, blockstore, loadCodec, options)\n    }\n  } catch (err) {\n    log('Could not walk DAG for CID', cid.toString(), err)\n\n    throw err\n  }\n}\n\nmodule.exports = walkDag\n"]},"metadata":{},"sourceType":"script"}