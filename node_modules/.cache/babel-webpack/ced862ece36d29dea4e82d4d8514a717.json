{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/Dapp/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/Dapp/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nconst cache = require('hashlru'); // @ts-ignore\n\n\nconst varint = require('varint');\n\nconst PeerId = require('peer-id');\n\nconst {\n  Key\n} = require('interface-datastore');\n\nconst {\n  default: Queue\n} = require('p-queue');\n\nconst c = require('./constants');\n\nconst utils = require('./utils');\n/**\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('interface-datastore').Datastore} Datastore\n */\n\n/**\n * This class manages known providers.\n * A provider is a peer that we know to have the content for a given CID.\n *\n * Every `cleanupInterval` providers are checked if they\n * are still valid, i.e. younger than the `provideValidity`.\n * If they are not, they are deleted.\n *\n * To ensure the list survives restarts of the daemon,\n * providers are stored in the datastore, but to ensure\n * access is fast there is an LRU cache in front of that.\n */\n\n\nclass Providers {\n  /**\n   * @param {Datastore} datastore\n   * @param {PeerId} [self]\n   * @param {number} [cacheSize=256]\n   */\n  constructor(datastore, self, cacheSize) {\n    this.datastore = datastore;\n    this._log = utils.logger(self, 'providers');\n    /**\n     * How often invalid records are cleaned. (in seconds)\n     *\n     * @type {number}\n     */\n\n    this.cleanupInterval = c.PROVIDERS_CLEANUP_INTERVAL;\n    /**\n     * How long is a provider valid for. (in seconds)\n     *\n     * @type {number}\n     */\n\n    this.provideValidity = c.PROVIDERS_VALIDITY;\n    /**\n     * LRU cache size\n     *\n     * @type {number}\n     */\n\n    this.lruCacheSize = cacheSize || c.PROVIDERS_LRU_CACHE_SIZE; // @ts-ignore hashlru types are wrong\n\n    this.providers = cache(this.lruCacheSize);\n    this.syncQueue = new Queue({\n      concurrency: 1\n    });\n  }\n  /**\n   * Start the provider cleanup service\n   */\n\n\n  start() {\n    this._cleaner = setInterval(() => this._cleanup(), this.cleanupInterval);\n  }\n  /**\n   * Release any resources.\n   */\n\n\n  stop() {\n    if (this._cleaner) {\n      clearInterval(this._cleaner);\n      this._cleaner = null;\n    }\n  }\n  /**\n   * Check all providers if they are still valid, and if not delete them.\n   *\n   * @returns {Promise<void>}\n   * @private\n   */\n\n\n  _cleanup() {\n    var _this = this;\n\n    return this.syncQueue.add( /*#__PURE__*/_asyncToGenerator(function* () {\n      _this._log('start cleanup');\n\n      const start = Date.now();\n      let count = 0;\n      let deleteCount = 0;\n      const deleted = new Map();\n\n      const batch = _this.datastore.batch(); // Get all provider entries from the datastore\n\n\n      const query = _this.datastore.query({\n        prefix: c.PROVIDERS_KEY_PREFIX\n      });\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n\n      var _iteratorError;\n\n      try {\n        for (var _iterator = _asyncIterator(query), _step, _value; _step = yield _iterator.next(), _iteratorNormalCompletion = _step.done, _value = yield _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n          const entry = _value;\n\n          try {\n            // Add a delete to the batch for each expired entry\n            const {\n              cid,\n              peerId\n            } = parseProviderKey(entry.key);\n            const time = readTime(entry.value);\n            const now = Date.now();\n            const delta = now - time;\n            const expired = delta > _this.provideValidity;\n\n            _this._log('comparing: %d - %d = %d > %d %s', now, time, delta, _this.provideValidity, expired ? '(expired)' : '');\n\n            if (expired) {\n              deleteCount++;\n              batch.delete(entry.key);\n              const peers = deleted.get(cid) || new Set();\n              peers.add(peerId);\n              deleted.set(cid, peers);\n            }\n\n            count++;\n          } catch (err) {\n            _this._log.error(err.message);\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            yield _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      _this._log('deleting %d / %d entries', deleteCount, count); // Commit the deletes to the datastore\n\n\n      if (deleted.size) {\n        yield batch.commit();\n      } // Clear expired entries from the cache\n\n\n      for (const [cid, peers] of deleted) {\n        const key = makeProviderKey(cid);\n\n        const provs = _this.providers.get(key);\n\n        if (provs) {\n          for (const peerId of peers) {\n            provs.delete(peerId);\n          }\n\n          if (provs.size === 0) {\n            _this.providers.remove(key);\n          } else {\n            _this.providers.set(key, provs);\n          }\n        }\n      }\n\n      _this._log('Cleanup successful (%dms)', Date.now() - start);\n    }));\n  }\n  /**\n   * Get the currently known provider peer ids for a given CID.\n   *\n   * @param {CID} cid\n   * @returns {Promise<Map<string, Date>>}\n   *\n   * @private\n   */\n\n\n  _getProvidersMap(cid) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const cacheKey = makeProviderKey(cid);\n\n      let provs = _this2.providers.get(cacheKey);\n\n      if (!provs) {\n        provs = yield loadProviders(_this2.datastore, cid);\n\n        _this2.providers.set(cacheKey, provs);\n      }\n\n      return provs;\n    })();\n  }\n  /**\n   * Add a new provider for the given CID.\n   *\n   * @param {CID} cid\n   * @param {PeerId} provider\n   * @returns {Promise<void>}\n   */\n\n\n  addProvider(cid, provider) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      // eslint-disable-line require-await\n      return _this3.syncQueue.add( /*#__PURE__*/_asyncToGenerator(function* () {\n        _this3._log('addProvider %s', cid.toString());\n\n        const provs = yield _this3._getProvidersMap(cid);\n\n        _this3._log('loaded %s provs', provs.size);\n\n        const now = new Date();\n        provs.set(utils.encodeBase32(provider.id), now);\n        const dsKey = makeProviderKey(cid);\n\n        _this3.providers.set(dsKey, provs);\n\n        return writeProviderEntry(_this3.datastore, cid, provider, now);\n      }));\n    })();\n  }\n  /**\n   * Get a list of providers for the given CID.\n   *\n   * @param {CID} cid\n   * @returns {Promise<Array<PeerId>>}\n   */\n\n\n  getProviders(cid) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      // eslint-disable-line require-await\n      return _this4.syncQueue.add( /*#__PURE__*/_asyncToGenerator(function* () {\n        _this4._log('getProviders %s', cid.toString());\n\n        const provs = yield _this4._getProvidersMap(cid);\n        return [...provs.keys()].map(base32PeerId => {\n          return new PeerId(utils.decodeBase32(base32PeerId));\n        });\n      }));\n    })();\n  }\n\n}\n/**\n * Encode the given key its matching datastore key.\n *\n * @param {CID|string} cid - cid or base32 encoded string\n * @returns {string}\n *\n * @private\n */\n\n\nfunction makeProviderKey(cid) {\n  cid = typeof cid === 'string' ? cid : utils.encodeBase32(cid.bytes);\n  return c.PROVIDERS_KEY_PREFIX + cid;\n}\n/**\n * Write a provider into the given store.\n *\n * @param {Datastore} store\n * @param {CID} cid\n * @param {PeerId} peer\n * @param {Date} time\n */\n\n\nfunction writeProviderEntry(_x, _x2, _x3, _x4) {\n  return _writeProviderEntry.apply(this, arguments);\n}\n/**\n * Parse the CID and provider peer id from the key\n *\n * @param {import('interface-datastore').Key} key\n */\n\n\nfunction _writeProviderEntry() {\n  _writeProviderEntry = _asyncToGenerator(function* (store, cid, peer, time) {\n    // eslint-disable-line require-await\n    const dsKey = [makeProviderKey(cid), '/', utils.encodeBase32(peer.id)].join('');\n    const key = new Key(dsKey);\n    const buffer = Uint8Array.from(varint.encode(time.getTime()));\n    return store.put(key, buffer);\n  });\n  return _writeProviderEntry.apply(this, arguments);\n}\n\nfunction parseProviderKey(key) {\n  const parts = key.toString().split('/');\n\n  if (parts.length !== 4) {\n    throw new Error('incorrectly formatted provider entry key in datastore: ' + key);\n  }\n\n  return {\n    cid: parts[2],\n    peerId: parts[3]\n  };\n}\n/**\n * Load providers for the given CID from the store.\n *\n * @param {Datastore} store\n * @param {CID} cid\n * @returns {Promise<Map<PeerId, Date>>}\n *\n * @private\n */\n\n\nfunction loadProviders(_x5, _x6) {\n  return _loadProviders.apply(this, arguments);\n}\n/**\n * @param {Uint8Array} buf\n */\n\n\nfunction _loadProviders() {\n  _loadProviders = _asyncToGenerator(function* (store, cid) {\n    const providers = new Map();\n    const query = store.query({\n      prefix: makeProviderKey(cid)\n    });\n    var _iteratorNormalCompletion2 = true;\n    var _didIteratorError2 = false;\n\n    var _iteratorError2;\n\n    try {\n      for (var _iterator2 = _asyncIterator(query), _step2, _value2; _step2 = yield _iterator2.next(), _iteratorNormalCompletion2 = _step2.done, _value2 = yield _step2.value, !_iteratorNormalCompletion2; _iteratorNormalCompletion2 = true) {\n        const entry = _value2;\n        const {\n          peerId\n        } = parseProviderKey(entry.key);\n        providers.set(peerId, readTime(entry.value));\n      }\n    } catch (err) {\n      _didIteratorError2 = true;\n      _iteratorError2 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n          yield _iterator2.return();\n        }\n      } finally {\n        if (_didIteratorError2) {\n          throw _iteratorError2;\n        }\n      }\n    }\n\n    return providers;\n  });\n  return _loadProviders.apply(this, arguments);\n}\n\nfunction readTime(buf) {\n  return varint.decode(buf);\n}\n\nmodule.exports = Providers;","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Dapp/node_modules/libp2p-kad-dht/src/providers.js"],"names":["cache","require","varint","PeerId","Key","default","Queue","c","utils","Providers","constructor","datastore","self","cacheSize","_log","logger","cleanupInterval","PROVIDERS_CLEANUP_INTERVAL","provideValidity","PROVIDERS_VALIDITY","lruCacheSize","PROVIDERS_LRU_CACHE_SIZE","providers","syncQueue","concurrency","start","_cleaner","setInterval","_cleanup","stop","clearInterval","add","Date","now","count","deleteCount","deleted","Map","batch","query","prefix","PROVIDERS_KEY_PREFIX","entry","cid","peerId","parseProviderKey","key","time","readTime","value","delta","expired","delete","peers","get","Set","set","err","error","message","size","commit","makeProviderKey","provs","remove","_getProvidersMap","cacheKey","loadProviders","addProvider","provider","toString","encodeBase32","id","dsKey","writeProviderEntry","getProviders","keys","map","base32PeerId","decodeBase32","bytes","store","peer","join","buffer","Uint8Array","from","encode","getTime","put","parts","split","length","Error","buf","decode","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst cache = require('hashlru')\n// @ts-ignore\nconst varint = require('varint')\nconst PeerId = require('peer-id')\nconst { Key } = require('interface-datastore')\nconst { default: Queue } = require('p-queue')\nconst c = require('./constants')\nconst utils = require('./utils')\n\n/**\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('interface-datastore').Datastore} Datastore\n */\n\n/**\n * This class manages known providers.\n * A provider is a peer that we know to have the content for a given CID.\n *\n * Every `cleanupInterval` providers are checked if they\n * are still valid, i.e. younger than the `provideValidity`.\n * If they are not, they are deleted.\n *\n * To ensure the list survives restarts of the daemon,\n * providers are stored in the datastore, but to ensure\n * access is fast there is an LRU cache in front of that.\n */\nclass Providers {\n  /**\n   * @param {Datastore} datastore\n   * @param {PeerId} [self]\n   * @param {number} [cacheSize=256]\n   */\n  constructor (datastore, self, cacheSize) {\n    this.datastore = datastore\n\n    this._log = utils.logger(self, 'providers')\n\n    /**\n     * How often invalid records are cleaned. (in seconds)\n     *\n     * @type {number}\n     */\n    this.cleanupInterval = c.PROVIDERS_CLEANUP_INTERVAL\n\n    /**\n     * How long is a provider valid for. (in seconds)\n     *\n     * @type {number}\n     */\n    this.provideValidity = c.PROVIDERS_VALIDITY\n\n    /**\n     * LRU cache size\n     *\n     * @type {number}\n     */\n    this.lruCacheSize = cacheSize || c.PROVIDERS_LRU_CACHE_SIZE\n\n    // @ts-ignore hashlru types are wrong\n    this.providers = cache(this.lruCacheSize)\n\n    this.syncQueue = new Queue({ concurrency: 1 })\n  }\n\n  /**\n   * Start the provider cleanup service\n   */\n  start () {\n    this._cleaner = setInterval(\n      () => this._cleanup(),\n      this.cleanupInterval\n    )\n  }\n\n  /**\n   * Release any resources.\n   */\n  stop () {\n    if (this._cleaner) {\n      clearInterval(this._cleaner)\n      this._cleaner = null\n    }\n  }\n\n  /**\n   * Check all providers if they are still valid, and if not delete them.\n   *\n   * @returns {Promise<void>}\n   * @private\n   */\n  _cleanup () {\n    return this.syncQueue.add(async () => {\n      this._log('start cleanup')\n      const start = Date.now()\n\n      let count = 0\n      let deleteCount = 0\n      const deleted = new Map()\n      const batch = this.datastore.batch()\n\n      // Get all provider entries from the datastore\n      const query = this.datastore.query({ prefix: c.PROVIDERS_KEY_PREFIX })\n      for await (const entry of query) {\n        try {\n          // Add a delete to the batch for each expired entry\n          const { cid, peerId } = parseProviderKey(entry.key)\n          const time = readTime(entry.value)\n          const now = Date.now()\n          const delta = now - time\n          const expired = delta > this.provideValidity\n          this._log('comparing: %d - %d = %d > %d %s',\n            now, time, delta, this.provideValidity, expired ? '(expired)' : '')\n          if (expired) {\n            deleteCount++\n            batch.delete(entry.key)\n            const peers = deleted.get(cid) || new Set()\n            peers.add(peerId)\n            deleted.set(cid, peers)\n          }\n          count++\n        } catch (err) {\n          this._log.error(err.message)\n        }\n      }\n      this._log('deleting %d / %d entries', deleteCount, count)\n\n      // Commit the deletes to the datastore\n      if (deleted.size) {\n        await batch.commit()\n      }\n\n      // Clear expired entries from the cache\n      for (const [cid, peers] of deleted) {\n        const key = makeProviderKey(cid)\n        const provs = this.providers.get(key)\n        if (provs) {\n          for (const peerId of peers) {\n            provs.delete(peerId)\n          }\n          if (provs.size === 0) {\n            this.providers.remove(key)\n          } else {\n            this.providers.set(key, provs)\n          }\n        }\n      }\n\n      this._log('Cleanup successful (%dms)', Date.now() - start)\n    })\n  }\n\n  /**\n   * Get the currently known provider peer ids for a given CID.\n   *\n   * @param {CID} cid\n   * @returns {Promise<Map<string, Date>>}\n   *\n   * @private\n   */\n  async _getProvidersMap (cid) {\n    const cacheKey = makeProviderKey(cid)\n    let provs = this.providers.get(cacheKey)\n    if (!provs) {\n      provs = await loadProviders(this.datastore, cid)\n      this.providers.set(cacheKey, provs)\n    }\n    return provs\n  }\n\n  /**\n   * Add a new provider for the given CID.\n   *\n   * @param {CID} cid\n   * @param {PeerId} provider\n   * @returns {Promise<void>}\n   */\n  async addProvider (cid, provider) { // eslint-disable-line require-await\n    return this.syncQueue.add(async () => {\n      this._log('addProvider %s', cid.toString())\n      const provs = await this._getProvidersMap(cid)\n\n      this._log('loaded %s provs', provs.size)\n      const now = new Date()\n      provs.set(utils.encodeBase32(provider.id), now)\n\n      const dsKey = makeProviderKey(cid)\n      this.providers.set(dsKey, provs)\n      return writeProviderEntry(this.datastore, cid, provider, now)\n    })\n  }\n\n  /**\n   * Get a list of providers for the given CID.\n   *\n   * @param {CID} cid\n   * @returns {Promise<Array<PeerId>>}\n   */\n  async getProviders (cid) { // eslint-disable-line require-await\n    return this.syncQueue.add(async () => {\n      this._log('getProviders %s', cid.toString())\n      const provs = await this._getProvidersMap(cid)\n      return [...provs.keys()].map((base32PeerId) => {\n        return new PeerId(utils.decodeBase32(base32PeerId))\n      })\n    })\n  }\n}\n\n/**\n * Encode the given key its matching datastore key.\n *\n * @param {CID|string} cid - cid or base32 encoded string\n * @returns {string}\n *\n * @private\n */\nfunction makeProviderKey (cid) {\n  cid = typeof cid === 'string' ? cid : utils.encodeBase32(cid.bytes)\n  return c.PROVIDERS_KEY_PREFIX + cid\n}\n\n/**\n * Write a provider into the given store.\n *\n * @param {Datastore} store\n * @param {CID} cid\n * @param {PeerId} peer\n * @param {Date} time\n */\nasync function writeProviderEntry (store, cid, peer, time) { // eslint-disable-line require-await\n  const dsKey = [\n    makeProviderKey(cid),\n    '/',\n    utils.encodeBase32(peer.id)\n  ].join('')\n\n  const key = new Key(dsKey)\n  const buffer = Uint8Array.from(varint.encode(time.getTime()))\n  return store.put(key, buffer)\n}\n\n/**\n * Parse the CID and provider peer id from the key\n *\n * @param {import('interface-datastore').Key} key\n */\nfunction parseProviderKey (key) {\n  const parts = key.toString().split('/')\n  if (parts.length !== 4) {\n    throw new Error('incorrectly formatted provider entry key in datastore: ' + key)\n  }\n\n  return {\n    cid: parts[2],\n    peerId: parts[3]\n  }\n}\n\n/**\n * Load providers for the given CID from the store.\n *\n * @param {Datastore} store\n * @param {CID} cid\n * @returns {Promise<Map<PeerId, Date>>}\n *\n * @private\n */\nasync function loadProviders (store, cid) {\n  const providers = new Map()\n  const query = store.query({ prefix: makeProviderKey(cid) })\n  for await (const entry of query) {\n    const { peerId } = parseProviderKey(entry.key)\n    providers.set(peerId, readTime(entry.value))\n  }\n  return providers\n}\n\n/**\n * @param {Uint8Array} buf\n */\nfunction readTime (buf) {\n  return varint.decode(buf)\n}\n\nmodule.exports = Providers\n"]},"metadata":{},"sourceType":"script"}