{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n\nconst toCidAndPath = require('ipfs-core-utils/src/to-cid-and-path');\n\nconst {\n  resolvePath\n} = require('../../utils');\n/**\n * @param {Object} config\n * @param {import('ipfs-core-utils/src/multicodecs')} config.codecs\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n */\n\n\nmodule.exports = ({\n  repo,\n  codecs,\n  preload\n}) => {\n  /**\n   * @type {import('ipfs-core-types/src/dag').API[\"resolve\"]}\n   */\n  function dagResolve(_x) {\n    return _dagResolve.apply(this, arguments);\n  }\n\n  function _dagResolve() {\n    _dagResolve = _asyncToGenerator(function* (ipfsPath, options = {}) {\n      const {\n        cid\n      } = toCidAndPath(ipfsPath);\n\n      if (options.preload !== false) {\n        preload(cid);\n      }\n\n      return resolvePath(repo, codecs, ipfsPath, options);\n    });\n    return _dagResolve.apply(this, arguments);\n  }\n\n  return withTimeoutOption(dagResolve);\n};","map":null,"metadata":{},"sourceType":"script"}