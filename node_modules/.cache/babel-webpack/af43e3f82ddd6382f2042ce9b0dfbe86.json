{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nconst Reader = require('it-reader');\n\nconst log = require('debug')('it-multistream-select:ls');\n\nconst multistream = require('./multistream');\n\nconst handshake = require('it-handshake');\n\nconst lp = require('it-length-prefixed');\n\nconst pipe = require('it-pipe');\n\nmodule.exports = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (stream) {\n    const {\n      reader,\n      writer,\n      rest,\n      stream: shakeStream\n    } = handshake(stream);\n    log('write \"ls\"');\n    multistream.write(writer, 'ls');\n    rest(); // Next message from remote will be (e.g. for 2 protocols):\n    // <varint-msg-len><varint-proto-name-len><proto-name>\\n<varint-proto-name-len><proto-name>\\n\n\n    const res = yield multistream.read(reader); // After reading response we have:\n    // <varint-proto-name-len><proto-name>\\n<varint-proto-name-len><proto-name>\\n\n\n    const protocolsReader = Reader([res]);\n    const protocols = []; // Decode each of the protocols from the reader\n\n    yield pipe(protocolsReader, lp.decode(), /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(function* (source) {\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n\n        var _iteratorError;\n\n        try {\n          for (var _iterator = _asyncIterator(source), _step, _value; _step = yield _iterator.next(), _iteratorNormalCompletion = _step.done, _value = yield _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n            const protocol = _value;\n            // Remove the newline\n            protocols.push(protocol.shallowSlice(0, -1).toString());\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              yield _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      });\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    return {\n      stream: shakeStream,\n      protocols\n    };\n  });\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Demo/node_modules/multistream-select/src/ls.js"],"names":["Reader","require","log","multistream","handshake","lp","pipe","module","exports","stream","reader","writer","rest","shakeStream","write","res","read","protocolsReader","protocols","decode","source","protocol","push","shallowSlice","toString"],"mappings":"AAAA;;;;;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,WAAD,CAAtB;;AACA,MAAMC,GAAG,GAAGD,OAAO,CAAC,OAAD,CAAP,CAAiB,0BAAjB,CAAZ;;AACA,MAAME,WAAW,GAAGF,OAAO,CAAC,eAAD,CAA3B;;AACA,MAAMG,SAAS,GAAGH,OAAO,CAAC,cAAD,CAAzB;;AACA,MAAMI,EAAE,GAAGJ,OAAO,CAAC,oBAAD,CAAlB;;AACA,MAAMK,IAAI,GAAGL,OAAO,CAAC,SAAD,CAApB;;AAEAM,MAAM,CAACC,OAAP;AAAA,+BAAiB,WAAMC,MAAN,EAAgB;AAC/B,UAAM;AAAEC,MAAAA,MAAF;AAAUC,MAAAA,MAAV;AAAkBC,MAAAA,IAAlB;AAAwBH,MAAAA,MAAM,EAAEI;AAAhC,QAAgDT,SAAS,CAACK,MAAD,CAA/D;AAEAP,IAAAA,GAAG,CAAC,YAAD,CAAH;AACAC,IAAAA,WAAW,CAACW,KAAZ,CAAkBH,MAAlB,EAA0B,IAA1B;AACAC,IAAAA,IAAI,GAL2B,CAO/B;AACA;;AACA,UAAMG,GAAG,SAASZ,WAAW,CAACa,IAAZ,CAAiBN,MAAjB,CAAlB,CAT+B,CAW/B;AACA;;AACA,UAAMO,eAAe,GAAGjB,MAAM,CAAC,CAACe,GAAD,CAAD,CAA9B;AACA,UAAMG,SAAS,GAAG,EAAlB,CAd+B,CAgB/B;;AACA,UAAMZ,IAAI,CACRW,eADQ,EAERZ,EAAE,CAACc,MAAH,EAFQ;AAAA,oCAGR,WAAMC,MAAN,EAAgB;AAAA;AAAA;;AAAA;;AAAA;AACd,8CAA6BA,MAA7B,oLAAqC;AAAA,kBAApBC,QAAoB;AACnC;AACAH,YAAAA,SAAS,CAACI,IAAV,CAAeD,QAAQ,CAACE,YAAT,CAAsB,CAAtB,EAAyB,CAAC,CAA1B,EAA6BC,QAA7B,EAAf;AACD;AAJa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKf,OARO;;AAAA;AAAA;AAAA;AAAA,QAAV;AAWA,WAAO;AAAEf,MAAAA,MAAM,EAAEI,WAAV;AAAuBK,MAAAA;AAAvB,KAAP;AACD,GA7BD;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["'use strict'\n\nconst Reader = require('it-reader')\nconst log = require('debug')('it-multistream-select:ls')\nconst multistream = require('./multistream')\nconst handshake = require('it-handshake')\nconst lp = require('it-length-prefixed')\nconst pipe = require('it-pipe')\n\nmodule.exports = async stream => {\n  const { reader, writer, rest, stream: shakeStream } = handshake(stream)\n\n  log('write \"ls\"')\n  multistream.write(writer, 'ls')\n  rest()\n\n  // Next message from remote will be (e.g. for 2 protocols):\n  // <varint-msg-len><varint-proto-name-len><proto-name>\\n<varint-proto-name-len><proto-name>\\n\n  const res = await multistream.read(reader)\n\n  // After reading response we have:\n  // <varint-proto-name-len><proto-name>\\n<varint-proto-name-len><proto-name>\\n\n  const protocolsReader = Reader([res])\n  const protocols = []\n\n  // Decode each of the protocols from the reader\n  await pipe(\n    protocolsReader,\n    lp.decode(),\n    async source => {\n      for await (const protocol of source) {\n        // Remove the newline\n        protocols.push(protocol.shallowSlice(0, -1).toString())\n      }\n    }\n  )\n\n  return { stream: shakeStream, protocols }\n}\n"]},"metadata":{},"sourceType":"script"}