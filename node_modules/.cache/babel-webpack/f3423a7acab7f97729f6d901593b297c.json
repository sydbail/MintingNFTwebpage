{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/Dapp/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nrequire('node-forge/lib/ed25519');\n\nconst forge = require('node-forge/lib/forge');\n\nexports.publicKeyLength = forge.pki.ed25519.constants.PUBLIC_KEY_BYTE_LENGTH;\nexports.privateKeyLength = forge.pki.ed25519.constants.PRIVATE_KEY_BYTE_LENGTH;\nexports.generateKey = /*#__PURE__*/_asyncToGenerator(function* () {\n  // eslint-disable-line require-await\n  return forge.pki.ed25519.generateKeyPair();\n}); // seed should be a 32 byte uint8array\n\nexports.generateKeyFromSeed = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator(function* (seed) {\n    // eslint-disable-line require-await\n    return forge.pki.ed25519.generateKeyPair({\n      seed\n    });\n  });\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexports.hashAndSign = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator(function* (key, msg) {\n    // eslint-disable-line require-await\n    return forge.pki.ed25519.sign({\n      message: msg,\n      privateKey: key\n    }); // return Uint8Array.from(nacl.sign.detached(msg, key))\n  });\n\n  return function (_x2, _x3) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nexports.hashAndVerify = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator(function* (key, sig, msg) {\n    // eslint-disable-line require-await\n    return forge.pki.ed25519.verify({\n      signature: sig,\n      message: msg,\n      publicKey: key\n    });\n  });\n\n  return function (_x4, _x5, _x6) {\n    return _ref4.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Dapp/node_modules/libp2p-crypto/src/keys/ed25519.js"],"names":["require","forge","exports","publicKeyLength","pki","ed25519","constants","PUBLIC_KEY_BYTE_LENGTH","privateKeyLength","PRIVATE_KEY_BYTE_LENGTH","generateKey","generateKeyPair","generateKeyFromSeed","seed","hashAndSign","key","msg","sign","message","privateKey","hashAndVerify","sig","verify","signature","publicKey"],"mappings":"AAAA;;;;AAEAA,OAAO,CAAC,wBAAD,CAAP;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,sBAAD,CAArB;;AACAE,OAAO,CAACC,eAAR,GAA0BF,KAAK,CAACG,GAAN,CAAUC,OAAV,CAAkBC,SAAlB,CAA4BC,sBAAtD;AACAL,OAAO,CAACM,gBAAR,GAA2BP,KAAK,CAACG,GAAN,CAAUC,OAAV,CAAkBC,SAAlB,CAA4BG,uBAAvD;AAEAP,OAAO,CAACQ,WAAR,kCAAsB,aAAkB;AAAE;AACxC,SAAOT,KAAK,CAACG,GAAN,CAAUC,OAAV,CAAkBM,eAAlB,EAAP;AACD,CAFD,E,CAIA;;AACAT,OAAO,CAACU,mBAAR;AAAA,gCAA8B,WAAgBC,IAAhB,EAAsB;AAAE;AACpD,WAAOZ,KAAK,CAACG,GAAN,CAAUC,OAAV,CAAkBM,eAAlB,CAAkC;AAAEE,MAAAA;AAAF,KAAlC,CAAP;AACD,GAFD;;AAAA;AAAA;AAAA;AAAA;;AAIAX,OAAO,CAACY,WAAR;AAAA,gCAAsB,WAAgBC,GAAhB,EAAqBC,GAArB,EAA0B;AAAE;AAChD,WAAOf,KAAK,CAACG,GAAN,CAAUC,OAAV,CAAkBY,IAAlB,CAAuB;AAAEC,MAAAA,OAAO,EAAEF,GAAX;AAAgBG,MAAAA,UAAU,EAAEJ;AAA5B,KAAvB,CAAP,CAD8C,CAE9C;AACD,GAHD;;AAAA;AAAA;AAAA;AAAA;;AAKAb,OAAO,CAACkB,aAAR;AAAA,gCAAwB,WAAgBL,GAAhB,EAAqBM,GAArB,EAA0BL,GAA1B,EAA+B;AAAE;AACvD,WAAOf,KAAK,CAACG,GAAN,CAAUC,OAAV,CAAkBiB,MAAlB,CAAyB;AAAEC,MAAAA,SAAS,EAAEF,GAAb;AAAkBH,MAAAA,OAAO,EAAEF,GAA3B;AAAgCQ,MAAAA,SAAS,EAAET;AAA3C,KAAzB,CAAP;AACD,GAFD;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["'use strict'\n\nrequire('node-forge/lib/ed25519')\nconst forge = require('node-forge/lib/forge')\nexports.publicKeyLength = forge.pki.ed25519.constants.PUBLIC_KEY_BYTE_LENGTH\nexports.privateKeyLength = forge.pki.ed25519.constants.PRIVATE_KEY_BYTE_LENGTH\n\nexports.generateKey = async function () { // eslint-disable-line require-await\n  return forge.pki.ed25519.generateKeyPair()\n}\n\n// seed should be a 32 byte uint8array\nexports.generateKeyFromSeed = async function (seed) { // eslint-disable-line require-await\n  return forge.pki.ed25519.generateKeyPair({ seed })\n}\n\nexports.hashAndSign = async function (key, msg) { // eslint-disable-line require-await\n  return forge.pki.ed25519.sign({ message: msg, privateKey: key })\n  // return Uint8Array.from(nacl.sign.detached(msg, key))\n}\n\nexports.hashAndVerify = async function (key, sig, msg) { // eslint-disable-line require-await\n  return forge.pki.ed25519.verify({ signature: sig, message: msg, publicKey: key })\n}\n"]},"metadata":{},"sourceType":"script"}