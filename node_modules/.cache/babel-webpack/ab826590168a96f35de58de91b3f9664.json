{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/Dapp/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @param {Object} config\n * @param {import('../../types').NetworkService} config.network\n */\n\n\nmodule.exports = ({\n  network\n}) => {\n  /**\n   * @type {import('ipfs-core-types/src/bitswap').API[\"stat\"]}\n   */\n  function stat() {\n    return _stat.apply(this, arguments);\n  }\n\n  function _stat() {\n    _stat = _asyncToGenerator(function* (options = {}) {\n      /** @type {import('ipfs-bitswap').IPFSBitswap} */\n      const bitswap = (yield network.use(options)).bitswap;\n      const snapshot = bitswap.stat().snapshot;\n      return {\n        provideBufLen: parseInt(snapshot.providesBufferLength.toString()),\n        blocksReceived: BigInt(snapshot.blocksReceived.toString()),\n        wantlist: Array.from(bitswap.getWantlist()).map(e => e[1].cid),\n        peers: bitswap.peers().map(id => id.toB58String()),\n        dupBlksReceived: BigInt(snapshot.dupBlksReceived.toString()),\n        dupDataReceived: BigInt(snapshot.dupDataReceived.toString()),\n        dataReceived: BigInt(snapshot.dataReceived.toString()),\n        blocksSent: BigInt(snapshot.blocksSent.toString()),\n        dataSent: BigInt(snapshot.dataSent.toString())\n      };\n    });\n    return _stat.apply(this, arguments);\n  }\n\n  return withTimeoutOption(stat);\n};","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Dapp/node_modules/ipfs-core/src/components/bitswap/stat.js"],"names":["withTimeoutOption","require","module","exports","network","stat","options","bitswap","use","snapshot","provideBufLen","parseInt","providesBufferLength","toString","blocksReceived","BigInt","wantlist","Array","from","getWantlist","map","e","cid","peers","id","toB58String","dupBlksReceived","dupDataReceived","dataReceived","blocksSent","dataSent"],"mappings":"AAAA;;;;AAEA,MAAMA,iBAAiB,GAAGC,OAAO,CAAC,yCAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAiB;AAChC;AACF;AACA;AAHkC,WAIjBC,IAJiB;AAAA;AAAA;;AAAA;AAAA,8BAIhC,WAAqBC,OAAO,GAAG,EAA/B,EAAmC;AACjC;AACA,YAAMC,OAAO,GAAG,OAAOH,OAAO,CAACI,GAAR,CAAYF,OAAZ,CAAP,EAA6BC,OAA7C;AACA,YAAME,QAAQ,GAAGF,OAAO,CAACF,IAAR,GAAeI,QAAhC;AAEA,aAAO;AACLC,QAAAA,aAAa,EAAEC,QAAQ,CAACF,QAAQ,CAACG,oBAAT,CAA8BC,QAA9B,EAAD,CADlB;AAELC,QAAAA,cAAc,EAAEC,MAAM,CAACN,QAAQ,CAACK,cAAT,CAAwBD,QAAxB,EAAD,CAFjB;AAGLG,QAAAA,QAAQ,EAAEC,KAAK,CAACC,IAAN,CAAWX,OAAO,CAACY,WAAR,EAAX,EAAkCC,GAAlC,CAAsCC,CAAC,IAAIA,CAAC,CAAC,CAAD,CAAD,CAAKC,GAAhD,CAHL;AAILC,QAAAA,KAAK,EAAEhB,OAAO,CAACgB,KAAR,GAAgBH,GAAhB,CAAoBI,EAAE,IAAIA,EAAE,CAACC,WAAH,EAA1B,CAJF;AAKLC,QAAAA,eAAe,EAAEX,MAAM,CAACN,QAAQ,CAACiB,eAAT,CAAyBb,QAAzB,EAAD,CALlB;AAMLc,QAAAA,eAAe,EAAEZ,MAAM,CAACN,QAAQ,CAACkB,eAAT,CAAyBd,QAAzB,EAAD,CANlB;AAOLe,QAAAA,YAAY,EAAEb,MAAM,CAACN,QAAQ,CAACmB,YAAT,CAAsBf,QAAtB,EAAD,CAPf;AAQLgB,QAAAA,UAAU,EAAEd,MAAM,CAACN,QAAQ,CAACoB,UAAT,CAAoBhB,QAApB,EAAD,CARb;AASLiB,QAAAA,QAAQ,EAAEf,MAAM,CAACN,QAAQ,CAACqB,QAAT,CAAkBjB,QAAlB,EAAD;AATX,OAAP;AAWD,KApB+B;AAAA;AAAA;;AAsBhC,SAAOb,iBAAiB,CAACK,IAAD,CAAxB;AACD,CAvBD","sourcesContent":["'use strict'\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\n\n/**\n * @param {Object} config\n * @param {import('../../types').NetworkService} config.network\n */\nmodule.exports = ({ network }) => {\n  /**\n   * @type {import('ipfs-core-types/src/bitswap').API[\"stat\"]}\n   */\n  async function stat (options = {}) {\n    /** @type {import('ipfs-bitswap').IPFSBitswap} */\n    const bitswap = (await network.use(options)).bitswap\n    const snapshot = bitswap.stat().snapshot\n\n    return {\n      provideBufLen: parseInt(snapshot.providesBufferLength.toString()),\n      blocksReceived: BigInt(snapshot.blocksReceived.toString()),\n      wantlist: Array.from(bitswap.getWantlist()).map(e => e[1].cid),\n      peers: bitswap.peers().map(id => id.toB58String()),\n      dupBlksReceived: BigInt(snapshot.dupBlksReceived.toString()),\n      dupDataReceived: BigInt(snapshot.dupDataReceived.toString()),\n      dataReceived: BigInt(snapshot.dataReceived.toString()),\n      blocksSent: BigInt(snapshot.blocksSent.toString()),\n      dataSent: BigInt(snapshot.dataSent.toString())\n    }\n  }\n\n  return withTimeoutOption(stat)\n}\n"]},"metadata":{},"sourceType":"script"}