{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst protocols = require('../protocols-table');\n\nconst {\n  code: dnsaddrCode\n} = protocols('dnsaddr');\n/**\n * @typedef {import('..').Multiaddr} Multiaddr\n */\n\n/**\n * Resolver for dnsaddr addresses.\n *\n * @param {Multiaddr} addr\n * @returns {Promise<string[]>}\n */\n\nfunction dnsaddrResolver(_x) {\n  return _dnsaddrResolver.apply(this, arguments);\n}\n\nfunction _dnsaddrResolver() {\n  _dnsaddrResolver = _asyncToGenerator(function* (addr) {\n    const Resolver = require('./dns');\n\n    const resolver = new Resolver();\n    const peerId = addr.getPeerId();\n    const [, hostname] = addr.stringTuples().find(([proto]) => proto === dnsaddrCode) || [];\n    const records = yield resolver.resolveTxt(`_dnsaddr.${hostname}`);\n    let addresses = records.flat().map(a => a.split('=')[1]);\n\n    if (peerId) {\n      addresses = addresses.filter(entry => entry.includes(peerId));\n    }\n\n    return addresses;\n  });\n  return _dnsaddrResolver.apply(this, arguments);\n}\n\nmodule.exports = {\n  dnsaddrResolver\n};","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Demo/node_modules/multiaddr/src/resolvers/index.js"],"names":["protocols","require","code","dnsaddrCode","dnsaddrResolver","addr","Resolver","resolver","peerId","getPeerId","hostname","stringTuples","find","proto","records","resolveTxt","addresses","flat","map","a","split","filter","entry","includes","module","exports"],"mappings":"AAAA;;;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,oBAAD,CAAzB;;AAEA,MAAM;AAAEC,EAAAA,IAAI,EAAEC;AAAR,IAAwBH,SAAS,CAAC,SAAD,CAAvC;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;SACeI,e;;;;;uCAAf,WAAgCC,IAAhC,EAAsC;AACpC,UAAMC,QAAQ,GAAGL,OAAO,CAAC,OAAD,CAAxB;;AACA,UAAMM,QAAQ,GAAG,IAAID,QAAJ,EAAjB;AAEA,UAAME,MAAM,GAAGH,IAAI,CAACI,SAAL,EAAf;AACA,UAAM,GAAGC,QAAH,IAAeL,IAAI,CAACM,YAAL,GAAoBC,IAApB,CAAyB,CAAC,CAACC,KAAD,CAAD,KAAaA,KAAK,KAAKV,WAAhD,KAAgE,EAArF;AAEA,UAAMW,OAAO,SAASP,QAAQ,CAACQ,UAAT,CAAqB,YAAWL,QAAS,EAAzC,CAAtB;AACA,QAAIM,SAAS,GAAGF,OAAO,CAACG,IAAR,GAAeC,GAAf,CAAoBC,CAAD,IAAOA,CAAC,CAACC,KAAF,CAAQ,GAAR,EAAa,CAAb,CAA1B,CAAhB;;AAEA,QAAIZ,MAAJ,EAAY;AACVQ,MAAAA,SAAS,GAAGA,SAAS,CAACK,MAAV,CAAkBC,KAAD,IAAWA,KAAK,CAACC,QAAN,CAAef,MAAf,CAA5B,CAAZ;AACD;;AAED,WAAOQ,SAAP;AACD,G;;;;AAEDQ,MAAM,CAACC,OAAP,GAAiB;AACfrB,EAAAA;AADe,CAAjB","sourcesContent":["'use strict'\n\nconst protocols = require('../protocols-table')\n\nconst { code: dnsaddrCode } = protocols('dnsaddr')\n\n/**\n * @typedef {import('..').Multiaddr} Multiaddr\n */\n\n/**\n * Resolver for dnsaddr addresses.\n *\n * @param {Multiaddr} addr\n * @returns {Promise<string[]>}\n */\nasync function dnsaddrResolver (addr) {\n  const Resolver = require('./dns')\n  const resolver = new Resolver()\n\n  const peerId = addr.getPeerId()\n  const [, hostname] = addr.stringTuples().find(([proto]) => proto === dnsaddrCode) || []\n\n  const records = await resolver.resolveTxt(`_dnsaddr.${hostname}`)\n  let addresses = records.flat().map((a) => a.split('=')[1])\n\n  if (peerId) {\n    addresses = addresses.filter((entry) => entry.includes(peerId))\n  }\n\n  return addresses\n}\n\nmodule.exports = {\n  dnsaddrResolver\n}\n"]},"metadata":{},"sourceType":"script"}