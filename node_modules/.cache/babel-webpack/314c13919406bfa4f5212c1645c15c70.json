{"ast":null,"code":"import _asyncToGenerator from \"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as i0 from \"@angular/core\";\n\nconst Web3 = require('web3');\n\nexport class Web3Service {\n  web3;\n\n  constructor() {\n    this.checkAndInstantiateWeb3();\n  }\n\n  checkAndInstantiateWeb3() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (window.ethereum) {\n        _this.web3 = new Web3(window.ethereum); //TODO: check alternative for enable\n\n        yield window.ethereum.enable();\n      } else if (window.web3) {\n        _this.web3 = new Web3(window.web3.currentProvider);\n        yield window.ethereum.enable();\n      } else {\n        window.alert('Non-Ethereum browser detected. Please install MetaMask plugin');\n      }\n    })();\n  }\n  /* Original using depreciated window.web3 methods\n    checkAndInstantiateWeb3 = () => {\n    // Checking if Web3 has been injected by the browser (Mist/MetaMask)\n    if (typeof window.web3 !== 'undefined') {\n      console.warn(\n        'Using web3 detected from external source. If you find that your accounts don\\'t appear or you have 0 MetaCoin, ensure you\\'ve configured that source properly. If using MetaMask, see the following link. Feel free to delete this warning. :) http://truffleframework.com/tutorials/truffle-and-metamask'\n      );\n      // Use Mist/MetaMask's provider\n      this.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      console.warn(\n        'No web3 detected. Falling back to ${environment.HttpProvider}. You should remove this fallback when you deploy live, as it\\'s inherently insecure. Consider switching to Metamask for development. More info here: http://truffleframework.com/tutorials/truffle-and-metamask'\n      );\n      // fallback - use your fallback strategy (local node / hosted node + in-dapp id mgmt / fail)\n      this.web3 = new Web3(\n        new Web3.providers.HttpProvider(environment.HttpProvider)\n      );\n    }\n  }; */\n\n\n  getAccounts() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      let accounts = yield _this2.web3.eth.getAccounts();\n      _this2.web3.eth.defaultAccount = accounts[0];\n      console.log(accounts);\n    })();\n  }\n\n  static ɵfac = function Web3Service_Factory(t) {\n    return new (t || Web3Service)();\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: Web3Service,\n    factory: Web3Service.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"sources":["/Users/sydneybailey/Internship/contract-testing/src/app/services/web3.service.ts"],"names":[],"mappings":";;;AAMA,MAAM,IAAI,GAAG,OAAO,CAAC,MAAD,CAApB;;AAMA,OAAM,MAAO,WAAP,CAAkB;AAEf,EAAA,IAAI;;AAEX,EAAA,WAAA,GAAA;AACC,SAAK,uBAAL;AACA;;AAEK,EAAA,uBAAuB,GAAA;AAAA;;AAAA;AAC3B,UAAI,MAAM,CAAC,QAAX,EAAqB;AAClB,QAAA,KAAI,CAAC,IAAL,GAAY,IAAI,IAAJ,CAAS,MAAM,CAAC,QAAhB,CAAZ,CADkB,CAElB;;AACA,cAAM,MAAM,CAAC,QAAP,CAAgB,MAAhB,EAAN;AACH,OAJA,MAIM,IAAI,MAAM,CAAC,IAAX,EAAiB;AACpB,QAAA,KAAI,CAAC,IAAL,GAAY,IAAI,IAAJ,CAAS,MAAM,CAAC,IAAP,CAAY,eAArB,CAAZ;AACA,cAAM,MAAM,CAAC,QAAP,CAAgB,MAAhB,EAAN;AACH,OAHM,MAGA;AACH,QAAA,MAAM,CAAC,KAAP,CAAa,+DAAb;AACH;AAV2B;AAW5B;AAED;;;;;;;;;;;;;;;;;;AAkBK;;;AAEC,EAAA,WAAW,GAAA;AAAA;;AAAA;AACf,UAAI,QAAQ,SAAS,MAAI,CAAC,IAAL,CAAU,GAAV,CAAc,WAAd,EAArB;AACA,MAAA,MAAI,CAAC,IAAL,CAAU,GAAV,CAAc,cAAd,GAA+B,QAAQ,CAAC,CAAD,CAAvC;AACA,MAAA,OAAO,CAAC,GAAR,CAAY,QAAZ;AAHe;AAIhB;;;qBA7CU,W;AAAW,G;;WAAX,W;AAAW,IAAA,OAAA,EAAX,WAAW,CAAA,I;AAAA,IAAA,UAAA,EAFV;;AAEU","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { from } from 'rxjs';\n//enviroment variables, provides localhost:8545 as provider for HTTP\nimport { environment } from '../../environments/environment';\n\nconst Web3 = require('web3');\ndeclare var window: any;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class Web3Service {\n\n  public web3: any;\n\n  constructor() {\n  \tthis.checkAndInstantiateWeb3();\n  }\n\n  async checkAndInstantiateWeb3() {\n    if (window.ethereum) {\n       this.web3 = new Web3(window.ethereum);\n       //TODO: check alternative for enable\n       await window.ethereum.enable();\n   } else if (window.web3) {\n       this.web3 = new Web3(window.web3.currentProvider);\n       await window.ethereum.enable();\n   } else {\n       window.alert('Non-Ethereum browser detected. Please install MetaMask plugin');\n   }\n  }\n\n  /* Original using depreciated window.web3 methods\n    checkAndInstantiateWeb3 = () => {\n    // Checking if Web3 has been injected by the browser (Mist/MetaMask)\n    if (typeof window.web3 !== 'undefined') {\n      console.warn(\n        'Using web3 detected from external source. If you find that your accounts don\\'t appear or you have 0 MetaCoin, ensure you\\'ve configured that source properly. If using MetaMask, see the following link. Feel free to delete this warning. :) http://truffleframework.com/tutorials/truffle-and-metamask'\n      );\n      // Use Mist/MetaMask's provider\n      this.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      console.warn(\n        'No web3 detected. Falling back to ${environment.HttpProvider}. You should remove this fallback when you deploy live, as it\\'s inherently insecure. Consider switching to Metamask for development. More info here: http://truffleframework.com/tutorials/truffle-and-metamask'\n      );\n      // fallback - use your fallback strategy (local node / hosted node + in-dapp id mgmt / fail)\n      this.web3 = new Web3(\n        new Web3.providers.HttpProvider(environment.HttpProvider)\n      );\n    }\n  }; */\n\n  async getAccounts(): Promise<any>{\n    let accounts = await this.web3.eth.getAccounts();\n    this.web3.eth.defaultAccount = accounts[0];\n    console.log(accounts);\n  }\n  /*\treturn Observable.create((observer: any) => {\n  \t  this.web3.eth.getAccounts((err: any, accs: any) => {\n  \t    if (err != null) {\n  \t      observer.error('There was an error fetching your accounts.')\n  \t    }\n\n  \t    if (accs.length === 0) {\n  \t      observer.error('Couldn\\'t get any accounts! Make sure your Ethereum client is configured correctly.')\n  \t    }\n        /* need to set an account as default account\n          this is the account used to send/sign transactions\n          first account returned, if they have multiple metamask accounts it\n          will be thir first one */\n\t\t/*\t\tthis.web3.eth.defaultAccount = accs[0]\n\t\t\t\t//console.log(this.web3.eth.defaultAccount);\n  \t    observer.next(accs)\n  \t    observer.complete()\n  \t  });\n  \t})\n  } */\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}