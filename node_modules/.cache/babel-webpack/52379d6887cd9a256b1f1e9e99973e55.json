{"ast":null,"code":"'use strict'; // Import browser version otherwise electron-renderer will end up with node\n// version and fail.\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nconst {\n  normaliseInput\n} = require('ipfs-core-utils/src/files/normalise-input/index.browser');\n\nconst modeToString = require('./mode-to-string');\n/**\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidateStream} ImportCandidateStream\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidate} ImportCandidate\n */\n\n/**\n * @param {ImportCandidateStream|ImportCandidate} source\n * @param {AbortController} abortController\n * @param {Headers|Record<string, string>} [headers]\n */\n\n\nfunction multipartRequest(_x, _x2) {\n  return _multipartRequest.apply(this, arguments);\n}\n\nfunction _multipartRequest() {\n  _multipartRequest = _asyncToGenerator(function* (source, abortController, headers = {}) {\n    const parts = [];\n    const formData = new FormData();\n    let index = 0;\n    let total = 0; // @ts-ignore wrong input type for normaliseInput\n\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n\n    var _iteratorError;\n\n    try {\n      for (var _iterator = _asyncIterator(normaliseInput(source)), _step, _value; _step = yield _iterator.next(), _iteratorNormalCompletion = _step.done, _value = yield _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n        const {\n          content,\n          path,\n          mode,\n          mtime\n        } = _value;\n        let fileSuffix = '';\n        const type = content ? 'file' : 'dir';\n\n        if (index > 0) {\n          fileSuffix = `-${index}`;\n        }\n\n        let fieldName = type + fileSuffix;\n        const qs = [];\n\n        if (mode !== null && mode !== undefined) {\n          qs.push(`mode=${modeToString(mode)}`);\n        }\n\n        if (mtime != null) {\n          const {\n            secs,\n            nsecs\n          } = mtime;\n          qs.push(`mtime=${secs}`);\n\n          if (nsecs != null) {\n            qs.push(`mtime-nsecs=${nsecs}`);\n          }\n        }\n\n        if (qs.length) {\n          fieldName = `${fieldName}?${qs.join('&')}`;\n        }\n\n        if (content) {\n          formData.set(fieldName, content, path != null ? encodeURIComponent(path) : undefined);\n          const end = total + content.size;\n          parts.push({\n            name: path,\n            start: total,\n            end\n          });\n          total = end;\n        } else if (path != null) {\n          formData.set(fieldName, new File([''], encodeURIComponent(path), {\n            type: 'application/x-directory'\n          }));\n        } else {\n          throw new Error('path or content or both must be set');\n        }\n\n        index++;\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          yield _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return {\n      total,\n      parts,\n      headers,\n      body: formData\n    };\n  });\n  return _multipartRequest.apply(this, arguments);\n}\n\nmodule.exports = multipartRequest;","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Demo/node_modules/ipfs-http-client/src/lib/multipart-request.browser.js"],"names":["normaliseInput","require","modeToString","multipartRequest","source","abortController","headers","parts","formData","FormData","index","total","content","path","mode","mtime","fileSuffix","type","fieldName","qs","undefined","push","secs","nsecs","length","join","set","encodeURIComponent","end","size","name","start","File","Error","body","module","exports"],"mappings":"AAAA,a,CAEA;AACA;;;;;;AACA,MAAM;AAAEA,EAAAA;AAAF,IAAqBC,OAAO,CAAC,yDAAD,CAAlC;;AACA,MAAMC,YAAY,GAAGD,OAAO,CAAC,kBAAD,CAA5B;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;SACeE,gB;;;;;wCAAf,WAAiCC,MAAjC,EAAyCC,eAAzC,EAA0DC,OAAO,GAAG,EAApE,EAAwE;AACtE,UAAMC,KAAK,GAAG,EAAd;AACA,UAAMC,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;AACA,QAAIC,KAAK,GAAG,CAAZ;AACA,QAAIC,KAAK,GAAG,CAAZ,CAJsE,CAMtE;;AANsE;AAAA;;AAAA;;AAAA;AAOtE,0CAAmDX,cAAc,CAACI,MAAD,CAAjE,oLAA2E;AAAA,cAA1D;AAAEQ,UAAAA,OAAF;AAAWC,UAAAA,IAAX;AAAiBC,UAAAA,IAAjB;AAAuBC,UAAAA;AAAvB,SAA0D;AACzE,YAAIC,UAAU,GAAG,EAAjB;AACA,cAAMC,IAAI,GAAGL,OAAO,GAAG,MAAH,GAAY,KAAhC;;AAEA,YAAIF,KAAK,GAAG,CAAZ,EAAe;AACbM,UAAAA,UAAU,GAAI,IAAGN,KAAM,EAAvB;AACD;;AAED,YAAIQ,SAAS,GAAGD,IAAI,GAAGD,UAAvB;AACA,cAAMG,EAAE,GAAG,EAAX;;AAEA,YAAIL,IAAI,KAAK,IAAT,IAAiBA,IAAI,KAAKM,SAA9B,EAAyC;AACvCD,UAAAA,EAAE,CAACE,IAAH,CAAS,QAAOnB,YAAY,CAACY,IAAD,CAAO,EAAnC;AACD;;AAED,YAAKC,KAAD,IAAW,IAAf,EAAqB;AACnB,gBAAM;AAAEO,YAAAA,IAAF;AAAQC,YAAAA;AAAR,cAAmBR,KAAzB;AAEAI,UAAAA,EAAE,CAACE,IAAH,CAAS,SAAQC,IAAK,EAAtB;;AAEA,cAAIC,KAAK,IAAI,IAAb,EAAmB;AACjBJ,YAAAA,EAAE,CAACE,IAAH,CAAS,eAAcE,KAAM,EAA7B;AACD;AACF;;AAED,YAAIJ,EAAE,CAACK,MAAP,EAAe;AACbN,UAAAA,SAAS,GAAI,GAAEA,SAAU,IAAGC,EAAE,CAACM,IAAH,CAAQ,GAAR,CAAa,EAAzC;AACD;;AAED,YAAIb,OAAJ,EAAa;AACXJ,UAAAA,QAAQ,CAACkB,GAAT,CAAaR,SAAb,EAAwBN,OAAxB,EAAiCC,IAAI,IAAI,IAAR,GAAec,kBAAkB,CAACd,IAAD,CAAjC,GAA0CO,SAA3E;AACA,gBAAMQ,GAAG,GAAGjB,KAAK,GAAGC,OAAO,CAACiB,IAA5B;AACAtB,UAAAA,KAAK,CAACc,IAAN,CAAW;AAAES,YAAAA,IAAI,EAAEjB,IAAR;AAAckB,YAAAA,KAAK,EAAEpB,KAArB;AAA4BiB,YAAAA;AAA5B,WAAX;AACAjB,UAAAA,KAAK,GAAGiB,GAAR;AACD,SALD,MAKO,IAAIf,IAAI,IAAI,IAAZ,EAAkB;AACvBL,UAAAA,QAAQ,CAACkB,GAAT,CAAaR,SAAb,EAAwB,IAAIc,IAAJ,CAAS,CAAC,EAAD,CAAT,EAAeL,kBAAkB,CAACd,IAAD,CAAjC,EAAyC;AAAEI,YAAAA,IAAI,EAAE;AAAR,WAAzC,CAAxB;AACD,SAFM,MAEA;AACL,gBAAM,IAAIgB,KAAJ,CAAU,qCAAV,CAAN;AACD;;AAEDvB,QAAAA,KAAK;AACN;AAhDqE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAkDtE,WAAO;AACLC,MAAAA,KADK;AAELJ,MAAAA,KAFK;AAGLD,MAAAA,OAHK;AAIL4B,MAAAA,IAAI,EAAE1B;AAJD,KAAP;AAMD,G;;;;AAED2B,MAAM,CAACC,OAAP,GAAiBjC,gBAAjB","sourcesContent":["'use strict'\n\n// Import browser version otherwise electron-renderer will end up with node\n// version and fail.\nconst { normaliseInput } = require('ipfs-core-utils/src/files/normalise-input/index.browser')\nconst modeToString = require('./mode-to-string')\n\n/**\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidateStream} ImportCandidateStream\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidate} ImportCandidate\n */\n\n/**\n * @param {ImportCandidateStream|ImportCandidate} source\n * @param {AbortController} abortController\n * @param {Headers|Record<string, string>} [headers]\n */\nasync function multipartRequest (source, abortController, headers = {}) {\n  const parts = []\n  const formData = new FormData()\n  let index = 0\n  let total = 0\n\n  // @ts-ignore wrong input type for normaliseInput\n  for await (const { content, path, mode, mtime } of normaliseInput(source)) {\n    let fileSuffix = ''\n    const type = content ? 'file' : 'dir'\n\n    if (index > 0) {\n      fileSuffix = `-${index}`\n    }\n\n    let fieldName = type + fileSuffix\n    const qs = []\n\n    if (mode !== null && mode !== undefined) {\n      qs.push(`mode=${modeToString(mode)}`)\n    }\n\n    if ((mtime) != null) {\n      const { secs, nsecs } = (mtime)\n\n      qs.push(`mtime=${secs}`)\n\n      if (nsecs != null) {\n        qs.push(`mtime-nsecs=${nsecs}`)\n      }\n    }\n\n    if (qs.length) {\n      fieldName = `${fieldName}?${qs.join('&')}`\n    }\n\n    if (content) {\n      formData.set(fieldName, content, path != null ? encodeURIComponent(path) : undefined)\n      const end = total + content.size\n      parts.push({ name: path, start: total, end })\n      total = end\n    } else if (path != null) {\n      formData.set(fieldName, new File([''], encodeURIComponent(path), { type: 'application/x-directory' }))\n    } else {\n      throw new Error('path or content or both must be set')\n    }\n\n    index++\n  }\n\n  return {\n    total,\n    parts,\n    headers,\n    body: formData\n  }\n}\n\nmodule.exports = multipartRequest\n"]},"metadata":{},"sourceType":"script"}