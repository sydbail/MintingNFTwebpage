{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.unsafeUniformIntDistribution = void 0;\n\nvar UnsafeUniformIntDistributionInternal_1 = require(\"./internals/UnsafeUniformIntDistributionInternal\");\n\nvar ArrayInt_1 = require(\"./internals/ArrayInt\");\n\nvar UnsafeUniformArrayIntDistributionInternal_1 = require(\"./internals/UnsafeUniformArrayIntDistributionInternal\");\n\nvar sharedA = {\n  sign: 1,\n  data: [0, 0]\n};\nvar sharedB = {\n  sign: 1,\n  data: [0, 0]\n};\nvar sharedC = {\n  sign: 1,\n  data: [0, 0]\n};\nvar sharedData = [0, 0];\n\nfunction uniformLargeIntInternal(from, to, rangeSize, rng) {\n  var rangeSizeArrayIntValue = rangeSize <= Number.MAX_SAFE_INTEGER ? ArrayInt_1.fromNumberToArrayInt64(sharedC, rangeSize) : ArrayInt_1.substractArrayInt64(sharedC, ArrayInt_1.fromNumberToArrayInt64(sharedA, to), ArrayInt_1.fromNumberToArrayInt64(sharedB, from));\n\n  if (rangeSizeArrayIntValue.data[1] === 0xffffffff) {\n    rangeSizeArrayIntValue.data[0] += 1;\n    rangeSizeArrayIntValue.data[1] = 0;\n  } else {\n    rangeSizeArrayIntValue.data[1] += 1;\n  }\n\n  UnsafeUniformArrayIntDistributionInternal_1.unsafeUniformArrayIntDistributionInternal(sharedData, rangeSizeArrayIntValue.data, rng);\n  return sharedData[0] * 0x100000000 + sharedData[1] + from;\n}\n\nfunction unsafeUniformIntDistribution(from, to, rng) {\n  var rangeSize = to - from;\n\n  if (rangeSize <= 0xffffffff) {\n    var g = UnsafeUniformIntDistributionInternal_1.unsafeUniformIntDistributionInternal(rangeSize + 1, rng);\n    return g + from;\n  }\n\n  return uniformLargeIntInternal(from, to, rangeSize, rng);\n}\n\nexports.unsafeUniformIntDistribution = unsafeUniformIntDistribution;","map":null,"metadata":{},"sourceType":"script"}