{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst defaultConfig = require('../../runtime/config-nodejs.js');\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n\nconst {\n  Multiaddr\n} = require('multiaddr');\n/**\n * @param {Object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\n\n\nmodule.exports = ({\n  repo\n}) => {\n  /**\n   * @type {import('ipfs-core-types/src/bootstrap').API[\"reset\"]}\n   */\n  function reset() {\n    return _reset.apply(this, arguments);\n  }\n\n  function _reset() {\n    _reset = _asyncToGenerator(function* (options = {}) {\n      /** @type {import('ipfs-core-types/src/config').Config} */\n      // @ts-ignore repo returns type unknown\n      const config = yield repo.config.getAll(options);\n      config.Bootstrap = defaultConfig().Bootstrap;\n      yield repo.config.replace(config);\n      return {\n        Peers: defaultConfig().Bootstrap.map(ma => new Multiaddr(ma))\n      };\n    });\n    return _reset.apply(this, arguments);\n  }\n\n  return withTimeoutOption(reset);\n};","map":{"version":3,"sources":["/Users/sydneybailey/Internship/contract-testing/node_modules/ipfs-core/src/components/bootstrap/reset.js"],"names":["defaultConfig","require","withTimeoutOption","Multiaddr","module","exports","repo","reset","options","config","getAll","Bootstrap","replace","Peers","map","ma"],"mappings":"AAAA;;;;AAEA,MAAMA,aAAa,GAAGC,OAAO,CAAC,gCAAD,CAA7B;;AACA,MAAMC,iBAAiB,GAAGD,OAAO,CAAC,yCAAD,CAAjC;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAgBF,OAAO,CAAC,WAAD,CAA7B;AAEA;AACA;AACA;AACA;;;AACAG,MAAM,CAACC,OAAP,GAAiB,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAC7B;AACF;AACA;AAH+B,WAIdC,KAJc;AAAA;AAAA;;AAAA;AAAA,+BAI7B,WAAsBC,OAAO,GAAG,EAAhC,EAAoC;AAClC;AACA;AACA,YAAMC,MAAM,SAASH,IAAI,CAACG,MAAL,CAAYC,MAAZ,CAAmBF,OAAnB,CAArB;AACAC,MAAAA,MAAM,CAACE,SAAP,GAAmBX,aAAa,GAAGW,SAAnC;AAEA,YAAML,IAAI,CAACG,MAAL,CAAYG,OAAZ,CAAoBH,MAApB,CAAN;AAEA,aAAO;AACLI,QAAAA,KAAK,EAAEb,aAAa,GAAGW,SAAhB,CAA0BG,GAA1B,CAA8BC,EAAE,IAAI,IAAIZ,SAAJ,CAAcY,EAAd,CAApC;AADF,OAAP;AAGD,KAf4B;AAAA;AAAA;;AAiB7B,SAAOb,iBAAiB,CAACK,KAAD,CAAxB;AACD,CAlBD","sourcesContent":["'use strict'\n\nconst defaultConfig = require('../../runtime/config-nodejs.js')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\nconst { Multiaddr } = require('multiaddr')\n\n/**\n * @param {Object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\nmodule.exports = ({ repo }) => {\n  /**\n   * @type {import('ipfs-core-types/src/bootstrap').API[\"reset\"]}\n   */\n  async function reset (options = {}) {\n    /** @type {import('ipfs-core-types/src/config').Config} */\n    // @ts-ignore repo returns type unknown\n    const config = await repo.config.getAll(options)\n    config.Bootstrap = defaultConfig().Bootstrap\n\n    await repo.config.replace(config)\n\n    return {\n      Peers: defaultConfig().Bootstrap.map(ma => new Multiaddr(ma))\n    }\n  }\n\n  return withTimeoutOption(reset)\n}\n"]},"metadata":{},"sourceType":"script"}