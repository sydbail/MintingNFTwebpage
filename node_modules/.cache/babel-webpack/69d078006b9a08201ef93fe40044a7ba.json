{"ast":null,"code":"'use strict'; // @ts-ignore node-forge types not exported\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nrequire('node-forge/lib/pkcs7'); // @ts-ignore node-forge types not exported\n\n\nrequire('node-forge/lib/pbe'); // @ts-ignore node-forge types not exported\n\n\nconst forge = require('node-forge/lib/forge');\n\nconst {\n  certificateForKey,\n  findAsync\n} = require('./util');\n\nconst errcode = require('err-code');\n\nconst {\n  fromString: uint8ArrayFromString\n} = require('uint8arrays/from-string');\n\nconst {\n  toString: uint8ArrayToString\n} = require('uint8arrays/to-string');\n\nconst privates = new WeakMap();\n/**\n * Cryptographic Message Syntax (aka PKCS #7)\n *\n * CMS describes an encapsulation syntax for data protection. It\n * is used to digitally sign, digest, authenticate, or encrypt\n * arbitrary message content.\n *\n * See RFC 5652 for all the details.\n */\n\nclass CMS {\n  /**\n   * Creates a new instance with a keychain\n   *\n   * @param {import('./index')} keychain - the available keys\n   * @param {string} dek\n   */\n  constructor(keychain, dek) {\n    if (!keychain) {\n      throw errcode(new Error('keychain is required'), 'ERR_KEYCHAIN_REQUIRED');\n    }\n\n    this.keychain = keychain;\n    privates.set(this, {\n      dek\n    });\n  }\n  /**\n   * Creates some protected data.\n   *\n   * The output Uint8Array contains the PKCS #7 message in DER.\n   *\n   * @param {string} name - The local key name.\n   * @param {Uint8Array} plain - The data to encrypt.\n   * @returns {Promise<Uint8Array>}\n   */\n\n\n  encrypt(name, plain) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (!(plain instanceof Uint8Array)) {\n        throw errcode(new Error('Plain data must be a Uint8Array'), 'ERR_INVALID_PARAMS');\n      }\n\n      const key = yield _this.keychain.findKeyByName(name);\n      const pem = yield _this.keychain._getPrivateKey(name);\n      /** @type {string} */\n\n      const dek = privates.get(_this).dek;\n      const privateKey = forge.pki.decryptRsaPrivateKey(pem, dek);\n      const certificate = yield certificateForKey(key, privateKey); // create a p7 enveloped message\n\n      const p7 = forge.pkcs7.createEnvelopedData();\n      p7.addRecipient(certificate);\n      p7.content = forge.util.createBuffer(plain);\n      p7.encrypt(); // convert message to DER\n\n      const der = forge.asn1.toDer(p7.toAsn1()).getBytes();\n      return uint8ArrayFromString(der, 'ascii');\n    })();\n  }\n  /**\n   * Reads some protected data.\n   *\n   * The keychain must contain one of the keys used to encrypt the data.  If none of the keys\n   * exists, an Error is returned with the property 'missingKeys'.  It is array of key ids.\n   *\n   * @param {Uint8Array} cmsData - The CMS encrypted data to decrypt.\n   * @returns {Promise<Uint8Array>}\n   */\n\n\n  decrypt(cmsData) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      if (!(cmsData instanceof Uint8Array)) {\n        throw errcode(new Error('CMS data is required'), 'ERR_INVALID_PARAMS');\n      }\n\n      let cms;\n\n      try {\n        const buf = forge.util.createBuffer(uint8ArrayToString(cmsData, 'ascii'));\n        const obj = forge.asn1.fromDer(buf); // @ts-ignore not defined\n\n        cms = forge.pkcs7.messageFromAsn1(obj);\n      } catch (err) {\n        throw errcode(new Error('Invalid CMS: ' + err.message), 'ERR_INVALID_CMS');\n      } // Find a recipient whose key we hold. We only deal with recipient certs\n      // issued by ipfs (O=ipfs).\n\n\n      const recipients = cms.recipients // @ts-ignore cms types not defined\n      .filter(r => r.issuer.find(a => a.shortName === 'O' && a.value === 'ipfs')) // @ts-ignore cms types not defined\n      .filter(r => r.issuer.find(a => a.shortName === 'CN')) // @ts-ignore cms types not defined\n      .map(r => {\n        return {\n          recipient: r,\n          // @ts-ignore cms types not defined\n          keyId: r.issuer.find(a => a.shortName === 'CN').value\n        };\n      });\n      const r = yield findAsync(recipients, /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (recipient) {\n          try {\n            const key = yield _this2.keychain.findKeyById(recipient.keyId);\n            if (key) return true;\n          } catch (err) {\n            return false;\n          }\n\n          return false;\n        });\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n\n      if (!r) {\n        // @ts-ignore cms types not defined\n        const missingKeys = recipients.map(r => r.keyId);\n        throw errcode(new Error('Decryption needs one of the key(s): ' + missingKeys.join(', ')), 'ERR_MISSING_KEYS', {\n          missingKeys\n        });\n      }\n\n      const key = yield _this2.keychain.findKeyById(r.keyId);\n\n      if (!key) {\n        throw errcode(new Error('No key available to decrypto'), 'ERR_NO_KEY');\n      }\n\n      const pem = yield _this2.keychain._getPrivateKey(key.name);\n      const dek = privates.get(_this2).dek;\n      const privateKey = forge.pki.decryptRsaPrivateKey(pem, dek);\n      cms.decrypt(r.recipient, privateKey);\n      return uint8ArrayFromString(cms.content.getBytes(), 'ascii');\n    })();\n  }\n\n}\n\nmodule.exports = CMS;","map":{"version":3,"sources":["/Users/sydneybailey/Internship/contract-testing/node_modules/libp2p/src/keychain/cms.js"],"names":["require","forge","certificateForKey","findAsync","errcode","fromString","uint8ArrayFromString","toString","uint8ArrayToString","privates","WeakMap","CMS","constructor","keychain","dek","Error","set","encrypt","name","plain","Uint8Array","key","findKeyByName","pem","_getPrivateKey","get","privateKey","pki","decryptRsaPrivateKey","certificate","p7","pkcs7","createEnvelopedData","addRecipient","content","util","createBuffer","der","asn1","toDer","toAsn1","getBytes","decrypt","cmsData","cms","buf","obj","fromDer","messageFromAsn1","err","message","recipients","filter","r","issuer","find","a","shortName","value","map","recipient","keyId","findKeyById","missingKeys","join","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\n// @ts-ignore node-forge types not exported\nrequire('node-forge/lib/pkcs7')\n// @ts-ignore node-forge types not exported\nrequire('node-forge/lib/pbe')\n// @ts-ignore node-forge types not exported\nconst forge = require('node-forge/lib/forge')\nconst { certificateForKey, findAsync } = require('./util')\nconst errcode = require('err-code')\nconst { fromString: uint8ArrayFromString } = require('uint8arrays/from-string')\nconst { toString: uint8ArrayToString } = require('uint8arrays/to-string')\n\nconst privates = new WeakMap()\n\n/**\n * Cryptographic Message Syntax (aka PKCS #7)\n *\n * CMS describes an encapsulation syntax for data protection. It\n * is used to digitally sign, digest, authenticate, or encrypt\n * arbitrary message content.\n *\n * See RFC 5652 for all the details.\n */\nclass CMS {\n  /**\n   * Creates a new instance with a keychain\n   *\n   * @param {import('./index')} keychain - the available keys\n   * @param {string} dek\n   */\n  constructor (keychain, dek) {\n    if (!keychain) {\n      throw errcode(new Error('keychain is required'), 'ERR_KEYCHAIN_REQUIRED')\n    }\n\n    this.keychain = keychain\n    privates.set(this, { dek })\n  }\n\n  /**\n   * Creates some protected data.\n   *\n   * The output Uint8Array contains the PKCS #7 message in DER.\n   *\n   * @param {string} name - The local key name.\n   * @param {Uint8Array} plain - The data to encrypt.\n   * @returns {Promise<Uint8Array>}\n   */\n  async encrypt (name, plain) {\n    if (!(plain instanceof Uint8Array)) {\n      throw errcode(new Error('Plain data must be a Uint8Array'), 'ERR_INVALID_PARAMS')\n    }\n\n    const key = await this.keychain.findKeyByName(name)\n    const pem = await this.keychain._getPrivateKey(name)\n    /** @type {string} */\n    const dek = privates.get(this).dek\n    const privateKey = forge.pki.decryptRsaPrivateKey(pem, dek)\n    const certificate = await certificateForKey(key, privateKey)\n\n    // create a p7 enveloped message\n    const p7 = forge.pkcs7.createEnvelopedData()\n    p7.addRecipient(certificate)\n    p7.content = forge.util.createBuffer(plain)\n    p7.encrypt()\n\n    // convert message to DER\n    const der = forge.asn1.toDer(p7.toAsn1()).getBytes()\n    return uint8ArrayFromString(der, 'ascii')\n  }\n\n  /**\n   * Reads some protected data.\n   *\n   * The keychain must contain one of the keys used to encrypt the data.  If none of the keys\n   * exists, an Error is returned with the property 'missingKeys'.  It is array of key ids.\n   *\n   * @param {Uint8Array} cmsData - The CMS encrypted data to decrypt.\n   * @returns {Promise<Uint8Array>}\n   */\n  async decrypt (cmsData) {\n    if (!(cmsData instanceof Uint8Array)) {\n      throw errcode(new Error('CMS data is required'), 'ERR_INVALID_PARAMS')\n    }\n\n    let cms\n    try {\n      const buf = forge.util.createBuffer(uint8ArrayToString(cmsData, 'ascii'))\n      const obj = forge.asn1.fromDer(buf)\n      // @ts-ignore not defined\n      cms = forge.pkcs7.messageFromAsn1(obj)\n    } catch (err) {\n      throw errcode(new Error('Invalid CMS: ' + err.message), 'ERR_INVALID_CMS')\n    }\n\n    // Find a recipient whose key we hold. We only deal with recipient certs\n    // issued by ipfs (O=ipfs).\n    const recipients = cms.recipients\n      // @ts-ignore cms types not defined\n      .filter(r => r.issuer.find(a => a.shortName === 'O' && a.value === 'ipfs'))\n      // @ts-ignore cms types not defined\n      .filter(r => r.issuer.find(a => a.shortName === 'CN'))\n      // @ts-ignore cms types not defined\n      .map(r => {\n        return {\n          recipient: r,\n          // @ts-ignore cms types not defined\n          keyId: r.issuer.find(a => a.shortName === 'CN').value\n        }\n      })\n\n    const r = await findAsync(recipients, async (recipient) => {\n      try {\n        const key = await this.keychain.findKeyById(recipient.keyId)\n        if (key) return true\n      } catch (err) {\n        return false\n      }\n      return false\n    })\n\n    if (!r) {\n      // @ts-ignore cms types not defined\n      const missingKeys = recipients.map(r => r.keyId)\n      throw errcode(new Error('Decryption needs one of the key(s): ' + missingKeys.join(', ')), 'ERR_MISSING_KEYS', {\n        missingKeys\n      })\n    }\n\n    const key = await this.keychain.findKeyById(r.keyId)\n\n    if (!key) {\n      throw errcode(new Error('No key available to decrypto'), 'ERR_NO_KEY')\n    }\n\n    const pem = await this.keychain._getPrivateKey(key.name)\n    const dek = privates.get(this).dek\n    const privateKey = forge.pki.decryptRsaPrivateKey(pem, dek)\n    cms.decrypt(r.recipient, privateKey)\n    return uint8ArrayFromString(cms.content.getBytes(), 'ascii')\n  }\n}\n\nmodule.exports = CMS\n"]},"metadata":{},"sourceType":"script"}