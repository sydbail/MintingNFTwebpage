{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.assert = exports.check = void 0;\n\nconst Stream_1 = require(\"../../stream/Stream\");\n\nconst Shrinkable_1 = require(\"../arbitrary/definition/Shrinkable\");\n\nconst GlobalParameters_1 = require(\"./configuration/GlobalParameters\");\n\nconst QualifiedParameters_1 = require(\"./configuration/QualifiedParameters\");\n\nconst DecorateProperty_1 = require(\"./DecorateProperty\");\n\nconst RunnerIterator_1 = require(\"./RunnerIterator\");\n\nconst SourceValuesIterator_1 = require(\"./SourceValuesIterator\");\n\nconst Tosser_1 = require(\"./Tosser\");\n\nconst PathWalker_1 = require(\"./utils/PathWalker\");\n\nconst RunDetailsFormatter_1 = require(\"./utils/RunDetailsFormatter\");\n\nfunction runIt(property, sourceValues, verbose, interruptedAsFailure) {\n  const runner = new RunnerIterator_1.RunnerIterator(sourceValues, verbose, interruptedAsFailure);\n\n  for (const v of runner) {\n    const out = property.run(v);\n    runner.handleResult(out);\n  }\n\n  return runner.runExecution;\n}\n\nfunction asyncRunIt(_x, _x2, _x3, _x4) {\n  return _asyncRunIt.apply(this, arguments);\n}\n\nfunction _asyncRunIt() {\n  _asyncRunIt = _asyncToGenerator(function* (property, sourceValues, verbose, interruptedAsFailure) {\n    const runner = new RunnerIterator_1.RunnerIterator(sourceValues, verbose, interruptedAsFailure);\n\n    for (const v of runner) {\n      const out = yield property.run(v);\n      runner.handleResult(out);\n    }\n\n    return runner.runExecution;\n  });\n  return _asyncRunIt.apply(this, arguments);\n}\n\nfunction runnerPathWalker(valueProducers, path) {\n  const pathPoints = path.split(':');\n  const pathStream = Stream_1.stream(valueProducers).drop(pathPoints.length > 0 ? +pathPoints[0] : 0).map(producer => producer());\n  const adaptedPath = ['0', ...pathPoints.slice(1)].join(':');\n  return Stream_1.stream(PathWalker_1.pathWalk(adaptedPath, pathStream)).map(v => () => v);\n}\n\nfunction buildInitialValues(valueProducers, qParams) {\n  const rawValues = qParams.path.length === 0 ? Stream_1.stream(valueProducers) : runnerPathWalker(valueProducers, qParams.path);\n  if (!qParams.endOnFailure) return rawValues;\n  return rawValues.map(shrinkableGen => {\n    return () => {\n      const s = shrinkableGen();\n      return new Shrinkable_1.Shrinkable(s.value_);\n    };\n  });\n}\n\nfunction check(rawProperty, params) {\n  if (rawProperty == null || rawProperty.generate == null) throw new Error('Invalid property encountered, please use a valid property');\n  if (rawProperty.run == null) throw new Error('Invalid property encountered, please use a valid property not an arbitrary');\n  const qParams = QualifiedParameters_1.QualifiedParameters.read(Object.assign(Object.assign({}, GlobalParameters_1.readConfigureGlobal()), params));\n  if (qParams.reporter !== null && qParams.asyncReporter !== null) throw new Error('Invalid parameters encountered, reporter and asyncReporter cannot be specified together');\n  if (qParams.asyncReporter !== null && !rawProperty.isAsync()) throw new Error('Invalid parameters encountered, only asyncProperty can be used when asyncReporter specified');\n  const property = DecorateProperty_1.decorateProperty(rawProperty, qParams);\n  const generator = Tosser_1.toss(property, qParams.seed, qParams.randomType, qParams.examples);\n  const maxInitialIterations = qParams.path.indexOf(':') === -1 ? qParams.numRuns : -1;\n  const maxSkips = qParams.numRuns * qParams.maxSkipsPerRun;\n  const initialValues = buildInitialValues(generator, qParams);\n  const sourceValues = new SourceValuesIterator_1.SourceValuesIterator(initialValues, maxInitialIterations, maxSkips);\n  return property.isAsync() ? asyncRunIt(property, sourceValues, qParams.verbose, qParams.markInterruptAsFailure).then(e => e.toRunDetails(qParams.seed, qParams.path, maxSkips, qParams)) : runIt(property, sourceValues, qParams.verbose, qParams.markInterruptAsFailure).toRunDetails(qParams.seed, qParams.path, maxSkips, qParams);\n}\n\nexports.check = check;\n\nfunction assert(property, params) {\n  const out = check(property, params);\n  if (property.isAsync()) return out.then(RunDetailsFormatter_1.asyncReportRunDetails);else RunDetailsFormatter_1.reportRunDetails(out);\n}\n\nexports.assert = assert;","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Demo/node_modules/fast-check/lib/check/runner/Runner.js"],"names":["Object","defineProperty","exports","value","assert","check","Stream_1","require","Shrinkable_1","GlobalParameters_1","QualifiedParameters_1","DecorateProperty_1","RunnerIterator_1","SourceValuesIterator_1","Tosser_1","PathWalker_1","RunDetailsFormatter_1","runIt","property","sourceValues","verbose","interruptedAsFailure","runner","RunnerIterator","v","out","run","handleResult","runExecution","asyncRunIt","runnerPathWalker","valueProducers","path","pathPoints","split","pathStream","stream","drop","length","map","producer","adaptedPath","slice","join","pathWalk","buildInitialValues","qParams","rawValues","endOnFailure","shrinkableGen","s","Shrinkable","value_","rawProperty","params","generate","Error","QualifiedParameters","read","assign","readConfigureGlobal","reporter","asyncReporter","isAsync","decorateProperty","generator","toss","seed","randomType","examples","maxInitialIterations","indexOf","numRuns","maxSkips","maxSkipsPerRun","initialValues","SourceValuesIterator","markInterruptAsFailure","then","e","toRunDetails","asyncReportRunDetails","reportRunDetails"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.assert = exports.check = void 0;\nconst Stream_1 = require(\"../../stream/Stream\");\nconst Shrinkable_1 = require(\"../arbitrary/definition/Shrinkable\");\nconst GlobalParameters_1 = require(\"./configuration/GlobalParameters\");\nconst QualifiedParameters_1 = require(\"./configuration/QualifiedParameters\");\nconst DecorateProperty_1 = require(\"./DecorateProperty\");\nconst RunnerIterator_1 = require(\"./RunnerIterator\");\nconst SourceValuesIterator_1 = require(\"./SourceValuesIterator\");\nconst Tosser_1 = require(\"./Tosser\");\nconst PathWalker_1 = require(\"./utils/PathWalker\");\nconst RunDetailsFormatter_1 = require(\"./utils/RunDetailsFormatter\");\nfunction runIt(property, sourceValues, verbose, interruptedAsFailure) {\n    const runner = new RunnerIterator_1.RunnerIterator(sourceValues, verbose, interruptedAsFailure);\n    for (const v of runner) {\n        const out = property.run(v);\n        runner.handleResult(out);\n    }\n    return runner.runExecution;\n}\nasync function asyncRunIt(property, sourceValues, verbose, interruptedAsFailure) {\n    const runner = new RunnerIterator_1.RunnerIterator(sourceValues, verbose, interruptedAsFailure);\n    for (const v of runner) {\n        const out = await property.run(v);\n        runner.handleResult(out);\n    }\n    return runner.runExecution;\n}\nfunction runnerPathWalker(valueProducers, path) {\n    const pathPoints = path.split(':');\n    const pathStream = Stream_1.stream(valueProducers)\n        .drop(pathPoints.length > 0 ? +pathPoints[0] : 0)\n        .map((producer) => producer());\n    const adaptedPath = ['0', ...pathPoints.slice(1)].join(':');\n    return Stream_1.stream(PathWalker_1.pathWalk(adaptedPath, pathStream)).map((v) => () => v);\n}\nfunction buildInitialValues(valueProducers, qParams) {\n    const rawValues = qParams.path.length === 0 ? Stream_1.stream(valueProducers) : runnerPathWalker(valueProducers, qParams.path);\n    if (!qParams.endOnFailure)\n        return rawValues;\n    return rawValues.map((shrinkableGen) => {\n        return () => {\n            const s = shrinkableGen();\n            return new Shrinkable_1.Shrinkable(s.value_);\n        };\n    });\n}\nfunction check(rawProperty, params) {\n    if (rawProperty == null || rawProperty.generate == null)\n        throw new Error('Invalid property encountered, please use a valid property');\n    if (rawProperty.run == null)\n        throw new Error('Invalid property encountered, please use a valid property not an arbitrary');\n    const qParams = QualifiedParameters_1.QualifiedParameters.read(Object.assign(Object.assign({}, GlobalParameters_1.readConfigureGlobal()), params));\n    if (qParams.reporter !== null && qParams.asyncReporter !== null)\n        throw new Error('Invalid parameters encountered, reporter and asyncReporter cannot be specified together');\n    if (qParams.asyncReporter !== null && !rawProperty.isAsync())\n        throw new Error('Invalid parameters encountered, only asyncProperty can be used when asyncReporter specified');\n    const property = DecorateProperty_1.decorateProperty(rawProperty, qParams);\n    const generator = Tosser_1.toss(property, qParams.seed, qParams.randomType, qParams.examples);\n    const maxInitialIterations = qParams.path.indexOf(':') === -1 ? qParams.numRuns : -1;\n    const maxSkips = qParams.numRuns * qParams.maxSkipsPerRun;\n    const initialValues = buildInitialValues(generator, qParams);\n    const sourceValues = new SourceValuesIterator_1.SourceValuesIterator(initialValues, maxInitialIterations, maxSkips);\n    return property.isAsync()\n        ? asyncRunIt(property, sourceValues, qParams.verbose, qParams.markInterruptAsFailure).then((e) => e.toRunDetails(qParams.seed, qParams.path, maxSkips, qParams))\n        : runIt(property, sourceValues, qParams.verbose, qParams.markInterruptAsFailure).toRunDetails(qParams.seed, qParams.path, maxSkips, qParams);\n}\nexports.check = check;\nfunction assert(property, params) {\n    const out = check(property, params);\n    if (property.isAsync())\n        return out.then(RunDetailsFormatter_1.asyncReportRunDetails);\n    else\n        RunDetailsFormatter_1.reportRunDetails(out);\n}\nexports.assert = assert;\n"]},"metadata":{},"sourceType":"script"}