{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/Dapp/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst Service = require('../utils/service');\n/**\n * @param {Object} config\n * @param {import('../types').NetworkService} config.network\n * @param {import('../types').Preload} config.preload\n * @param {import('./ipns')} config.ipns\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../types').MfsPreload} config.mfsPreload\n */\n\n\nmodule.exports = ({\n  network,\n  preload,\n  ipns,\n  repo,\n  mfsPreload\n}) => {\n  /**\n   * @type {import('ipfs-core-types/src/root').API[\"stop\"]}\n   */\n  const stop = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(function* () {\n      yield Promise.all([preload.stop(), ipns.stop(), mfsPreload.stop(), Service.stop(network), repo.close()]);\n    });\n\n    return function stop() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return stop;\n};","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Dapp/node_modules/ipfs-core/src/components/stop.js"],"names":["Service","require","module","exports","network","preload","ipns","repo","mfsPreload","stop","Promise","all","close"],"mappings":"AAAA;;;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,kBAAD,CAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,OAAX;AAAoBC,EAAAA,IAApB;AAA0BC,EAAAA,IAA1B;AAAgCC,EAAAA;AAAhC,CAAD,KAAkD;AACjE;AACF;AACA;AACE,QAAMC,IAAI;AAAA,iCAAG,aAAY;AACvB,YAAMC,OAAO,CAACC,GAAR,CAAY,CAChBN,OAAO,CAACI,IAAR,EADgB,EAEhBH,IAAI,CAACG,IAAL,EAFgB,EAGhBD,UAAU,CAACC,IAAX,EAHgB,EAIhBT,OAAO,CAACS,IAAR,CAAaL,OAAb,CAJgB,EAKhBG,IAAI,CAACK,KAAL,EALgB,CAAZ,CAAN;AAOD,KARS;;AAAA,oBAAJH,IAAI;AAAA;AAAA;AAAA,KAAV;;AAUA,SAAOA,IAAP;AACD,CAfD","sourcesContent":["'use strict'\n\nconst Service = require('../utils/service')\n\n/**\n * @param {Object} config\n * @param {import('../types').NetworkService} config.network\n * @param {import('../types').Preload} config.preload\n * @param {import('./ipns')} config.ipns\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../types').MfsPreload} config.mfsPreload\n */\nmodule.exports = ({ network, preload, ipns, repo, mfsPreload }) => {\n  /**\n   * @type {import('ipfs-core-types/src/root').API[\"stop\"]}\n   */\n  const stop = async () => {\n    await Promise.all([\n      preload.stop(),\n      ipns.stop(),\n      mfsPreload.stop(),\n      Service.stop(network),\n      repo.close()\n    ])\n  }\n\n  return stop\n}\n"]},"metadata":{},"sourceType":"script"}