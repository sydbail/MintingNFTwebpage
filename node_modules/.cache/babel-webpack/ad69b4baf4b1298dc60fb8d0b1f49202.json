{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nconst log = require('debug')('ipfs:mfs:utils:update-tree');\n\nconst addLink = require('./add-link');\n\nconst {\n  decode\n} = require('@ipld/dag-pb');\n\nconst defaultOptions = {\n  shardSplitThreshold: 1000\n};\n/**\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('multiformats/cid').CIDVersion} CIDVersion\n * @typedef {import('../').MfsContext} MfsContext\n * @typedef {import('./to-trail').MfsTrail} MfsTrail\n */\n\n/**\n * Loop backwards through the trail, replacing links of all components to update CIDs\n *\n * @param {MfsContext} context\n * @param {MfsTrail[]} trail\n * @param {object} options\n * @param {number} options.shardSplitThreshold\n * @param {string} options.hashAlg\n * @param {CIDVersion} options.cidVersion\n * @param {boolean} options.flush\n */\n\nconst updateTree = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (context, trail, options) {\n    options = Object.assign({}, defaultOptions, options);\n    log('Trail', trail);\n    trail = trail.slice().reverse();\n    let index = 0;\n    let child;\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n\n    var _iteratorError;\n\n    try {\n      for (var _iterator = _asyncIterator(context.repo.blocks.getMany(trail.map(node => node.cid))), _step, _value; _step = yield _iterator.next(), _iteratorNormalCompletion = _step.done, _value = yield _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n        const block = _value;\n        const node = decode(block);\n        const cid = trail[index].cid;\n        const name = trail[index].name;\n        index++;\n\n        if (!child) {\n          child = {\n            cid,\n            name,\n            size: block.length\n          };\n          continue;\n        }\n        /** @type {{ cid: CID, size: number }} */\n\n\n        const result = yield addLink(context, {\n          parent: node,\n          name: child.name,\n          cid: child.cid,\n          // TODO vmx 2021-04-05: check what to do with the size\n          size: child.size,\n          flush: options.flush,\n          shardSplitThreshold: options.shardSplitThreshold,\n          hashAlg: options.hashAlg,\n          cidVersion: options.cidVersion\n        }); // new child for next loop\n\n        child = {\n          cid: result.cid,\n          name,\n          // TODO vmx 2021-04-05: check what to do with the size\n          size: result.size\n        };\n      } // @ts-ignore - child is possibly undefined\n\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          yield _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    const {\n      cid\n    } = child;\n    log(`Final CID ${cid}`);\n    return cid;\n  });\n\n  return function updateTree(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nmodule.exports = updateTree;","map":null,"metadata":{},"sourceType":"script"}