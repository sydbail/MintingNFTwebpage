{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CommandWrapper = void 0;\n\nconst stringify_1 = require(\"../../../utils/stringify\");\n\nconst symbols_1 = require(\"../../symbols\");\n\nclass CommandWrapper {\n  constructor(cmd) {\n    this.cmd = cmd;\n    this.hasRan = false;\n\n    if (stringify_1.hasToStringMethod(cmd)) {\n      const method = cmd[stringify_1.toStringMethod];\n\n      this[stringify_1.toStringMethod] = function toStringMethod() {\n        return method.call(cmd);\n      };\n    }\n\n    if (stringify_1.hasAsyncToStringMethod(cmd)) {\n      const method = cmd[stringify_1.asyncToStringMethod];\n\n      this[stringify_1.asyncToStringMethod] = function asyncToStringMethod() {\n        return method.call(cmd);\n      };\n    }\n  }\n\n  check(m) {\n    return this.cmd.check(m);\n  }\n\n  run(m, r) {\n    this.hasRan = true;\n    return this.cmd.run(m, r);\n  }\n\n  clone() {\n    if (symbols_1.hasCloneMethod(this.cmd)) return new CommandWrapper(this.cmd[symbols_1.cloneMethod]());\n    return new CommandWrapper(this.cmd);\n  }\n\n  toString() {\n    return this.cmd.toString();\n  }\n\n}\n\nexports.CommandWrapper = CommandWrapper;","map":null,"metadata":{},"sourceType":"script"}