{"ast":null,"code":"'use strict';\n\nvar _wrapAsyncGenerator = require(\"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\").default;\n\nvar _awaitAsyncGenerator = require(\"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nvar _asyncGeneratorDelegate = require(\"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/asyncGeneratorDelegate\").default;\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst configure = require('./lib/configure');\n\nconst toUrlSearchParams = require('./lib/to-url-search-params');\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {RootAPI[\"get\"]}\n   */\n  function get(_x) {\n    return _get.apply(this, arguments);\n  }\n\n  function _get() {\n    _get = _wrapAsyncGenerator(function* (path, options = {}) {\n      /** @type {Record<string, any>} */\n      const opts = {\n        arg: `${path instanceof Uint8Array ? CID.decode(path) : path}`,\n        ...options\n      };\n\n      if (opts.compressionLevel) {\n        opts['compression-level'] = opts.compressionLevel;\n        delete opts.compressionLevel;\n      }\n\n      const res = yield _awaitAsyncGenerator(api.post('get', {\n        timeout: options.timeout,\n        signal: options.signal,\n        searchParams: toUrlSearchParams(opts),\n        headers: options.headers\n      }));\n      yield* _asyncGeneratorDelegate(_asyncIterator(res.iterator()), _awaitAsyncGenerator);\n    });\n    return _get.apply(this, arguments);\n  }\n\n  return get;\n});","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Demo/node_modules/ipfs-http-client/src/get.js"],"names":["CID","require","configure","toUrlSearchParams","module","exports","api","get","path","options","opts","arg","Uint8Array","decode","compressionLevel","res","post","timeout","signal","searchParams","headers","iterator"],"mappings":"AAAA;;;;;;;;;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAUC,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,iBAAD,CAAzB;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,4BAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AAEAG,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAACI,GAAG,IAAI;AAChC;AACF;AACA;AAHkC,WAIfC,GAJe;AAAA;AAAA;;AAAA;AAAA,+BAIhC,WAAsBC,IAAtB,EAA4BC,OAAO,GAAG,EAAtC,EAA0C;AACxC;AACA,YAAMC,IAAI,GAAG;AACXC,QAAAA,GAAG,EAAG,GAAEH,IAAI,YAAYI,UAAhB,GAA6BZ,GAAG,CAACa,MAAJ,CAAWL,IAAX,CAA7B,GAAgDA,IAAK,EADlD;AAEX,WAAGC;AAFQ,OAAb;;AAKA,UAAIC,IAAI,CAACI,gBAAT,EAA2B;AACzBJ,QAAAA,IAAI,CAAC,mBAAD,CAAJ,GAA4BA,IAAI,CAACI,gBAAjC;AACA,eAAOJ,IAAI,CAACI,gBAAZ;AACD;;AAED,YAAMC,GAAG,8BAAST,GAAG,CAACU,IAAJ,CAAS,KAAT,EAAgB;AAChCC,QAAAA,OAAO,EAAER,OAAO,CAACQ,OADe;AAEhCC,QAAAA,MAAM,EAAET,OAAO,CAACS,MAFgB;AAGhCC,QAAAA,YAAY,EAAEhB,iBAAiB,CAACO,IAAD,CAHC;AAIhCU,QAAAA,OAAO,EAAEX,OAAO,CAACW;AAJe,OAAhB,CAAT,CAAT;AAOA,oDAAQL,GAAG,CAACM,QAAJ,EAAR;AACD,KAxB+B;AAAA;AAAA;;AA0BhC,SAAOd,GAAP;AACD,CA3ByB,CAA1B","sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst configure = require('./lib/configure')\nconst toUrlSearchParams = require('./lib/to-url-search-params')\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {RootAPI[\"get\"]}\n   */\n  async function * get (path, options = {}) {\n    /** @type {Record<string, any>} */\n    const opts = {\n      arg: `${path instanceof Uint8Array ? CID.decode(path) : path}`,\n      ...options\n    }\n\n    if (opts.compressionLevel) {\n      opts['compression-level'] = opts.compressionLevel\n      delete opts.compressionLevel\n    }\n\n    const res = await api.post('get', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams(opts),\n      headers: options.headers\n    })\n\n    yield * res.iterator()\n  }\n\n  return get\n})\n"]},"metadata":{},"sourceType":"script"}