{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst log = require('debug')('ipfs:repo:migrator:repo:init');\n\nconst {\n  CONFIG_KEY,\n  VERSION_KEY\n} = require('../utils');\n\nconst {\n  MissingRepoOptionsError\n} = require('../errors');\n/**\n * @param {import('../types').Backends} backends\n */\n\n\nfunction isRepoInitialized(_x) {\n  return _isRepoInitialized.apply(this, arguments);\n}\n\nfunction _isRepoInitialized() {\n  _isRepoInitialized = _asyncToGenerator(function* (backends) {\n    if (!backends) {\n      throw new MissingRepoOptionsError('Please pass repo options when trying to open a repo');\n    }\n\n    const root = backends.root;\n\n    try {\n      yield root.open();\n      const versionCheck = yield root.has(VERSION_KEY);\n      const configCheck = yield root.has(CONFIG_KEY);\n\n      if (!versionCheck || !configCheck) {\n        log(`Version entry present: ${versionCheck}`);\n        log(`Config entry present: ${configCheck}`);\n        return false;\n      }\n\n      return true;\n    } catch (e) {\n      log('While checking if repo is initialized error was thrown: ' + e.message);\n      return false;\n    } finally {\n      if (root !== undefined) {\n        try {\n          yield root.close();\n        } catch {}\n      }\n    }\n  });\n  return _isRepoInitialized.apply(this, arguments);\n}\n\nmodule.exports = {\n  isRepoInitialized\n};","map":{"version":3,"sources":["/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/ipfs-repo-migrations/src/repo/init.js"],"names":["log","require","CONFIG_KEY","VERSION_KEY","MissingRepoOptionsError","isRepoInitialized","backends","root","open","versionCheck","has","configCheck","e","message","undefined","close","module","exports"],"mappings":"AAAA;;;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,OAAD,CAAP,CAAiB,8BAAjB,CAAZ;;AACA,MAAM;AAAEC,EAAAA,UAAF;AAAcC,EAAAA;AAAd,IAA8BF,OAAO,CAAC,UAAD,CAA3C;;AACA,MAAM;AAAEG,EAAAA;AAAF,IAA8BH,OAAO,CAAC,WAAD,CAA3C;AAEA;AACA;AACA;;;SACeI,iB;;;;;yCAAf,WAAkCC,QAAlC,EAA4C;AAC1C,QAAI,CAACA,QAAL,EAAe;AACb,YAAM,IAAIF,uBAAJ,CAA4B,qDAA5B,CAAN;AACD;;AAED,UAAMG,IAAI,GAAGD,QAAQ,CAACC,IAAtB;;AAEA,QAAI;AACF,YAAMA,IAAI,CAACC,IAAL,EAAN;AACA,YAAMC,YAAY,SAASF,IAAI,CAACG,GAAL,CAASP,WAAT,CAA3B;AACA,YAAMQ,WAAW,SAASJ,IAAI,CAACG,GAAL,CAASR,UAAT,CAA1B;;AACA,UAAI,CAACO,YAAD,IAAiB,CAACE,WAAtB,EAAmC;AACjCX,QAAAA,GAAG,CAAE,0BAAyBS,YAAa,EAAxC,CAAH;AACAT,QAAAA,GAAG,CAAE,yBAAwBW,WAAY,EAAtC,CAAH;AACA,eAAO,KAAP;AACD;;AAED,aAAO,IAAP;AACD,KAXD,CAWE,OAAOC,CAAP,EAAU;AACVZ,MAAAA,GAAG,CAAC,6DAA6DY,CAAC,CAACC,OAAhE,CAAH;AACA,aAAO,KAAP;AACD,KAdD,SAcU;AACR,UAAIN,IAAI,KAAKO,SAAb,EAAwB;AACtB,YAAI;AACF,gBAAMP,IAAI,CAACQ,KAAL,EAAN;AACD,SAFD,CAEE,MAAM,CAAE;AACX;AACF;AACF,G;;;;AAEDC,MAAM,CAACC,OAAP,GAAiB;AACfZ,EAAAA;AADe,CAAjB","sourcesContent":["'use strict'\n\nconst log = require('debug')('ipfs:repo:migrator:repo:init')\nconst { CONFIG_KEY, VERSION_KEY } = require('../utils')\nconst { MissingRepoOptionsError } = require('../errors')\n\n/**\n * @param {import('../types').Backends} backends\n */\nasync function isRepoInitialized (backends) {\n  if (!backends) {\n    throw new MissingRepoOptionsError('Please pass repo options when trying to open a repo')\n  }\n\n  const root = backends.root\n\n  try {\n    await root.open()\n    const versionCheck = await root.has(VERSION_KEY)\n    const configCheck = await root.has(CONFIG_KEY)\n    if (!versionCheck || !configCheck) {\n      log(`Version entry present: ${versionCheck}`)\n      log(`Config entry present: ${configCheck}`)\n      return false\n    }\n\n    return true\n  } catch (e) {\n    log('While checking if repo is initialized error was thrown: ' + e.message)\n    return false\n  } finally {\n    if (root !== undefined) {\n      try {\n        await root.close()\n      } catch {}\n    }\n  }\n}\n\nmodule.exports = {\n  isRepoInitialized\n}\n"]},"metadata":{},"sourceType":"script"}