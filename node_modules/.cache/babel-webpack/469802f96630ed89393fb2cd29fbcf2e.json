{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst debug = require('debug');\n\nconst log = Object.assign(debug('libp2p:relay'), {\n  error: debug('libp2p:relay:err')\n});\n\nconst {\n  setDelayedInterval,\n  clearDelayedInterval // @ts-ignore set-delayed-interval does not export types\n\n} = require('set-delayed-interval');\n\nconst AutoRelay = require('./auto-relay');\n\nconst {\n  namespaceToCid\n} = require('./utils');\n\nconst {\n  RELAY_RENDEZVOUS_NS\n} = require('./constants');\n/**\n * @typedef {import('../')} Libp2p\n *\n * @typedef {Object} RelayAdvertiseOptions\n * @property {number} [bootDelay = ADVERTISE_BOOT_DELAY]\n * @property {boolean} [enabled = true]\n * @property {number} [ttl = ADVERTISE_TTL]\n *\n * @typedef {Object} HopOptions\n * @property {boolean} [enabled = false]\n * @property {boolean} [active = false]\n *\n * @typedef {Object} AutoRelayOptions\n * @property {number} [maxListeners = 2] - maximum number of relays to listen.\n * @property {boolean} [enabled = false]\n */\n\n\nclass Relay {\n  /**\n   * Creates an instance of Relay.\n   *\n   * @class\n   * @param {Libp2p} libp2p\n   */\n  constructor(libp2p) {\n    this._libp2p = libp2p;\n    this._options = { ...libp2p._config.relay\n    }; // Create autoRelay if enabled\n\n    this._autoRelay = this._options.autoRelay.enabled && new AutoRelay({\n      libp2p,\n      ...this._options.autoRelay\n    });\n    this._advertiseService = this._advertiseService.bind(this);\n  }\n  /**\n   * Start Relay service.\n   *\n   * @returns {void}\n   */\n\n\n  start() {\n    // Advertise service if HOP enabled\n    const canHop = this._options.hop.enabled;\n\n    if (canHop && this._options.advertise.enabled) {\n      this._timeout = setDelayedInterval(this._advertiseService, this._options.advertise.ttl, this._options.advertise.bootDelay);\n    }\n  }\n  /**\n   * Stop Relay service.\n   *\n   * @returns {void}\n   */\n\n\n  stop() {\n    clearDelayedInterval(this._timeout);\n  }\n  /**\n   * Advertise hop relay service in the network.\n   *\n   * @returns {Promise<void>}\n   */\n\n\n  _advertiseService() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const cid = yield namespaceToCid(RELAY_RENDEZVOUS_NS);\n        yield _this._libp2p.contentRouting.provide(cid);\n      } catch (err) {\n        if (err.code === 'NO_ROUTERS_AVAILABLE') {\n          log.error('a content router, such as a DHT, must be provided in order to advertise the relay service', err); // Stop the advertise\n\n          _this.stop();\n        } else {\n          log.error(err);\n        }\n      }\n    })();\n  }\n\n}\n\nmodule.exports = Relay;","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Demo/node_modules/libp2p/src/circuit/index.js"],"names":["debug","require","log","Object","assign","error","setDelayedInterval","clearDelayedInterval","AutoRelay","namespaceToCid","RELAY_RENDEZVOUS_NS","Relay","constructor","libp2p","_libp2p","_options","_config","relay","_autoRelay","autoRelay","enabled","_advertiseService","bind","start","canHop","hop","advertise","_timeout","ttl","bootDelay","stop","cid","contentRouting","provide","err","code","module","exports"],"mappings":"AAAA;;;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMC,GAAG,GAAGC,MAAM,CAACC,MAAP,CAAcJ,KAAK,CAAC,cAAD,CAAnB,EAAqC;AAC/CK,EAAAA,KAAK,EAAEL,KAAK,CAAC,kBAAD;AADmC,CAArC,CAAZ;;AAIA,MAAM;AACJM,EAAAA,kBADI;AAEJC,EAAAA,oBAFI,CAGN;;AAHM,IAIFN,OAAO,CAAC,sBAAD,CAJX;;AAMA,MAAMO,SAAS,GAAGP,OAAO,CAAC,cAAD,CAAzB;;AACA,MAAM;AAAEQ,EAAAA;AAAF,IAAqBR,OAAO,CAAC,SAAD,CAAlC;;AACA,MAAM;AACJS,EAAAA;AADI,IAEFT,OAAO,CAAC,aAAD,CAFX;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAMU,KAAN,CAAY;AACV;AACF;AACA;AACA;AACA;AACA;AACEC,EAAAA,WAAW,CAAEC,MAAF,EAAU;AACnB,SAAKC,OAAL,GAAeD,MAAf;AACA,SAAKE,QAAL,GAAgB,EACd,GAAGF,MAAM,CAACG,OAAP,CAAeC;AADJ,KAAhB,CAFmB,CAMnB;;AACA,SAAKC,UAAL,GAAkB,KAAKH,QAAL,CAAcI,SAAd,CAAwBC,OAAxB,IAAmC,IAAIZ,SAAJ,CAAc;AAAEK,MAAAA,MAAF;AAAU,SAAG,KAAKE,QAAL,CAAcI;AAA3B,KAAd,CAArD;AAEA,SAAKE,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBC,IAAvB,CAA4B,IAA5B,CAAzB;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEC,EAAAA,KAAK,GAAI;AACP;AACA,UAAMC,MAAM,GAAG,KAAKT,QAAL,CAAcU,GAAd,CAAkBL,OAAjC;;AAEA,QAAII,MAAM,IAAI,KAAKT,QAAL,CAAcW,SAAd,CAAwBN,OAAtC,EAA+C;AAC7C,WAAKO,QAAL,GAAgBrB,kBAAkB,CAChC,KAAKe,iBAD2B,EACR,KAAKN,QAAL,CAAcW,SAAd,CAAwBE,GADhB,EACqB,KAAKb,QAAL,CAAcW,SAAd,CAAwBG,SAD7C,CAAlC;AAGD;AACF;AAED;AACF;AACA;AACA;AACA;;;AACEC,EAAAA,IAAI,GAAI;AACNvB,IAAAA,oBAAoB,CAAC,KAAKoB,QAAN,CAApB;AACD;AAED;AACF;AACA;AACA;AACA;;;AACQN,EAAAA,iBAAiB,GAAI;AAAA;;AAAA;AACzB,UAAI;AACF,cAAMU,GAAG,SAAStB,cAAc,CAACC,mBAAD,CAAhC;AACA,cAAM,KAAI,CAACI,OAAL,CAAakB,cAAb,CAA4BC,OAA5B,CAAoCF,GAApC,CAAN;AACD,OAHD,CAGE,OAAOG,GAAP,EAAY;AACZ,YAAIA,GAAG,CAACC,IAAJ,KAAa,sBAAjB,EAAyC;AACvCjC,UAAAA,GAAG,CAACG,KAAJ,CAAU,2FAAV,EAAuG6B,GAAvG,EADuC,CAEvC;;AACA,UAAA,KAAI,CAACJ,IAAL;AACD,SAJD,MAIO;AACL5B,UAAAA,GAAG,CAACG,KAAJ,CAAU6B,GAAV;AACD;AACF;AAZwB;AAa1B;;AA9DS;;AAiEZE,MAAM,CAACC,OAAP,GAAiB1B,KAAjB","sourcesContent":["'use strict'\n\nconst debug = require('debug')\nconst log = Object.assign(debug('libp2p:relay'), {\n  error: debug('libp2p:relay:err')\n})\n\nconst {\n  setDelayedInterval,\n  clearDelayedInterval\n// @ts-ignore set-delayed-interval does not export types\n} = require('set-delayed-interval')\n\nconst AutoRelay = require('./auto-relay')\nconst { namespaceToCid } = require('./utils')\nconst {\n  RELAY_RENDEZVOUS_NS\n} = require('./constants')\n\n/**\n * @typedef {import('../')} Libp2p\n *\n * @typedef {Object} RelayAdvertiseOptions\n * @property {number} [bootDelay = ADVERTISE_BOOT_DELAY]\n * @property {boolean} [enabled = true]\n * @property {number} [ttl = ADVERTISE_TTL]\n *\n * @typedef {Object} HopOptions\n * @property {boolean} [enabled = false]\n * @property {boolean} [active = false]\n *\n * @typedef {Object} AutoRelayOptions\n * @property {number} [maxListeners = 2] - maximum number of relays to listen.\n * @property {boolean} [enabled = false]\n */\n\nclass Relay {\n  /**\n   * Creates an instance of Relay.\n   *\n   * @class\n   * @param {Libp2p} libp2p\n   */\n  constructor (libp2p) {\n    this._libp2p = libp2p\n    this._options = {\n      ...libp2p._config.relay\n    }\n\n    // Create autoRelay if enabled\n    this._autoRelay = this._options.autoRelay.enabled && new AutoRelay({ libp2p, ...this._options.autoRelay })\n\n    this._advertiseService = this._advertiseService.bind(this)\n  }\n\n  /**\n   * Start Relay service.\n   *\n   * @returns {void}\n   */\n  start () {\n    // Advertise service if HOP enabled\n    const canHop = this._options.hop.enabled\n\n    if (canHop && this._options.advertise.enabled) {\n      this._timeout = setDelayedInterval(\n        this._advertiseService, this._options.advertise.ttl, this._options.advertise.bootDelay\n      )\n    }\n  }\n\n  /**\n   * Stop Relay service.\n   *\n   * @returns {void}\n   */\n  stop () {\n    clearDelayedInterval(this._timeout)\n  }\n\n  /**\n   * Advertise hop relay service in the network.\n   *\n   * @returns {Promise<void>}\n   */\n  async _advertiseService () {\n    try {\n      const cid = await namespaceToCid(RELAY_RENDEZVOUS_NS)\n      await this._libp2p.contentRouting.provide(cid)\n    } catch (err) {\n      if (err.code === 'NO_ROUTERS_AVAILABLE') {\n        log.error('a content router, such as a DHT, must be provided in order to advertise the relay service', err)\n        // Stop the advertise\n        this.stop()\n      } else {\n        log.error(err)\n      }\n    }\n  }\n}\n\nmodule.exports = Relay\n"]},"metadata":{},"sourceType":"script"}