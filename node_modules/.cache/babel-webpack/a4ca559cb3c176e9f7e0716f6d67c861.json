{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @param {Object} config\n * @param {import('../../types').NetworkService} config.network\n */\n\n\nmodule.exports = ({\n  network\n}) => {\n  /**\n   * @type {import('ipfs-core-types/src/bitswap').API[\"stat\"]}\n   */\n  function stat() {\n    return _stat.apply(this, arguments);\n  }\n\n  function _stat() {\n    _stat = _asyncToGenerator(function* (options = {}) {\n      /** @type {import('ipfs-bitswap').IPFSBitswap} */\n      const bitswap = (yield network.use(options)).bitswap;\n      const snapshot = bitswap.stat().snapshot;\n      return {\n        provideBufLen: parseInt(snapshot.providesBufferLength.toString()),\n        blocksReceived: BigInt(snapshot.blocksReceived.toString()),\n        wantlist: Array.from(bitswap.getWantlist()).map(e => e[1].cid),\n        peers: bitswap.peers().map(id => id.toB58String()),\n        dupBlksReceived: BigInt(snapshot.dupBlksReceived.toString()),\n        dupDataReceived: BigInt(snapshot.dupDataReceived.toString()),\n        dataReceived: BigInt(snapshot.dataReceived.toString()),\n        blocksSent: BigInt(snapshot.blocksSent.toString()),\n        dataSent: BigInt(snapshot.dataSent.toString())\n      };\n    });\n    return _stat.apply(this, arguments);\n  }\n\n  return withTimeoutOption(stat);\n};","map":null,"metadata":{},"sourceType":"script"}