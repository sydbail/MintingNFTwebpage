{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nvar _asyncGeneratorDelegate = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncGeneratorDelegate\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nvar _awaitAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\").default;\n\nvar _wrapAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\").default;\n\nconst log = require('debug')('ipfs:mfs:write');\n\nconst {\n  importer\n} = require('ipfs-unixfs-importer');\n\nconst {\n  decode // @ts-ignore - TODO vmx 2021-03-31\n\n} = require('@ipld/dag-pb');\n\nconst {\n  sha256,\n  sha512\n} = require('multiformats/hashes/sha2');\n\nconst stat = require('./stat');\n\nconst mkdir = require('./mkdir');\n\nconst addLink = require('./utils/add-link');\n\nconst mergeOptions = require('merge-options').bind({\n  ignoreUndefined: true\n});\n\nconst createLock = require('./utils/create-lock');\n\nconst toAsyncIterator = require('./utils/to-async-iterator');\n\nconst toMfsPath = require('./utils/to-mfs-path');\n\nconst toPathComponents = require('./utils/to-path-components');\n\nconst toTrail = require('./utils/to-trail');\n\nconst updateTree = require('./utils/update-tree');\n\nconst updateMfsRoot = require('./utils/update-mfs-root');\n\nconst errCode = require('err-code');\n\nconst {\n  MFS_MAX_CHUNK_SIZE\n} = require('../../utils');\n\nconst last = require('it-last');\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n\nconst {\n  parseMode,\n  parseMtime\n} = require('ipfs-unixfs');\n/**\n * @typedef {import('multiformats/cid').CIDVersion} CIDVersion\n * @typedef {import('ipfs-unixfs').MtimeLike} MtimeLike\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {import('./utils/to-mfs-path').FilePath} FilePath\n * @typedef {import('./utils/to-mfs-path').MfsPath} MfsPath\n * @typedef {import('multiformats/hashes/interface').MultihashHasher} MultihashHasher\n *\n * @typedef {object} DefaultOptions\n * @property {number} offset\n * @property {number} length\n * @property {boolean} create\n * @property {boolean} truncate\n * @property {boolean} rawLeaves\n * @property {boolean} reduceSingleLeafToSelf\n * @property {CIDVersion} cidVersion\n * @property {string} hashAlg\n * @property {boolean} parents\n * @property {import('ipfs-core-types/src/root').AddProgressFn} progress\n * @property {'trickle' | 'balanced'} strategy\n * @property {boolean} flush\n * @property {'raw' | 'file'} leafType\n * @property {number} shardSplitThreshold\n * @property {MtimeLike} [mtime]\n * @property {number} [mode]\n * @property {AbortSignal} [signal]\n * @property {number} [timeout]\n */\n\n/**\n * @type {DefaultOptions}\n */\n\n\nconst defaultOptions = {\n  offset: 0,\n  // the offset in the file to begin writing\n  length: Infinity,\n  // how many bytes from the incoming buffer to write\n  create: false,\n  // whether to create the file if it does not exist\n  truncate: false,\n  // whether to truncate the file first\n  rawLeaves: false,\n  reduceSingleLeafToSelf: false,\n  cidVersion: 0,\n  hashAlg: 'sha2-256',\n  parents: false,\n  // whether to create intermediate directories if they do not exist\n  progress: (bytes, path) => {},\n  strategy: 'trickle',\n  flush: true,\n  leafType: 'raw',\n  shardSplitThreshold: 1000\n};\n/**\n * @param {MfsContext} context\n */\n\nmodule.exports = context => {\n  /**\n   * @type {import('ipfs-core-types/src/files').API[\"write\"]}\n   */\n  function mfsWrite(_x4, _x5) {\n    return _mfsWrite.apply(this, arguments);\n  }\n\n  function _mfsWrite() {\n    _mfsWrite = _asyncToGenerator(function* (path, content, opts = {}) {\n      /** @type {DefaultOptions} */\n      const options = mergeOptions(defaultOptions, opts);\n      /** @type {AsyncIterable<Uint8Array>} */\n\n      let source;\n      /** @type {MfsPath} */\n\n      let destination;\n      /** @type {MfsPath} */\n\n      let parent;\n      log('Reading source, destination and parent');\n      yield createLock().readLock( /*#__PURE__*/_asyncToGenerator(function* () {\n        source = yield toAsyncIterator(content);\n        destination = yield toMfsPath(context, path, options);\n        parent = yield toMfsPath(context, destination.mfsDirectory, options);\n      }))();\n      log('Read source, destination and parent'); // @ts-ignore - parent may be undefined\n\n      if (!options.parents && !parent.exists) {\n        throw errCode(new Error('directory does not exist'), 'ERR_NO_EXIST');\n      } // @ts-ignore\n\n\n      if (source == null) {\n        throw errCode(new Error('could not create source'), 'ERR_NO_SOURCE');\n      } // @ts-ignore\n\n\n      if (destination == null) {\n        throw errCode(new Error('could not create destination'), 'ERR_NO_DESTINATION');\n      }\n\n      if (!options.create && !destination.exists) {\n        throw errCode(new Error('file does not exist'), 'ERR_NO_EXIST');\n      }\n\n      if (destination.entryType !== 'file') {\n        throw errCode(new Error('not a file'), 'ERR_NOT_A_FILE');\n      }\n\n      return updateOrImport(context, path, source, destination, options);\n    });\n    return _mfsWrite.apply(this, arguments);\n  }\n\n  return withTimeoutOption(mfsWrite);\n};\n/**\n * @param {MfsContext} context\n * @param {string} path\n * @param {AsyncIterable<Uint8Array>} source\n * @param {FilePath} destination\n * @param {DefaultOptions} options\n */\n\n\nconst updateOrImport = /*#__PURE__*/function () {\n  var _ref5 = _asyncToGenerator(function* (context, path, source, destination, options) {\n    const child = yield write(context, source, destination, options); // The slow bit is done, now add or replace the DAGLink in the containing directory\n    // re-reading the path to the containing folder in case it has changed in the interim\n\n    yield createLock().writeLock( /*#__PURE__*/_asyncToGenerator(function* () {\n      const pathComponents = toPathComponents(path);\n      const fileName = pathComponents.pop();\n\n      if (fileName == null) {\n        throw errCode(new Error('source does not exist'), 'ERR_NO_EXIST');\n      }\n\n      let parentExists = false;\n\n      try {\n        yield stat(context)(`/${pathComponents.join('/')}`, options);\n        parentExists = true;\n      } catch (err) {\n        if (err.code !== 'ERR_NOT_FOUND') {\n          throw err;\n        }\n      }\n\n      if (!parentExists) {\n        yield mkdir(context)(`/${pathComponents.join('/')}`, options);\n      } // get an updated mfs path in case the root changed while we were writing\n\n\n      const updatedPath = yield toMfsPath(context, path, options);\n      const trail = yield toTrail(context, updatedPath.mfsDirectory);\n      const parent = trail[trail.length - 1];\n\n      if (!parent) {\n        throw errCode(new Error('directory does not exist'), 'ERR_NO_EXIST');\n      }\n\n      if (!parent.type || !parent.type.includes('directory')) {\n        throw errCode(new Error(`cannot write to ${parent.name}: Not a directory`), 'ERR_NOT_A_DIRECTORY');\n      }\n\n      const parentBlock = yield context.repo.blocks.get(parent.cid);\n      const parentNode = decode(parentBlock);\n      const result = yield addLink(context, {\n        parent: parentNode,\n        name: fileName,\n        cid: child.cid,\n        size: child.size,\n        flush: options.flush,\n        shardSplitThreshold: options.shardSplitThreshold,\n        hashAlg: options.hashAlg,\n        cidVersion: options.cidVersion\n      });\n      parent.cid = result.cid; // update the tree with the new child\n\n      const newRootCid = yield updateTree(context, trail, options); // Update the MFS record with the new CID for the root of the tree\n\n      yield updateMfsRoot(context, newRootCid, options);\n    }))();\n  });\n\n  return function updateOrImport(_x6, _x7, _x8, _x9, _x10) {\n    return _ref5.apply(this, arguments);\n  };\n}();\n/**\n * @param {MfsContext} context\n * @param {AsyncIterable<Uint8Array>} source\n * @param {FilePath} destination\n * @param {DefaultOptions} options\n */\n\n\nconst write = /*#__PURE__*/function () {\n  var _ref7 = _asyncToGenerator(function* (context, source, destination, options) {\n    if (destination.exists) {\n      log(`Overwriting file ${destination.cid} offset ${options.offset} length ${options.length}`);\n    } else {\n      log(`Writing file offset ${options.offset} length ${options.length}`);\n    }\n    /** @type {Array<() => AsyncIterable<Uint8Array>>} */\n\n\n    const sources = []; // pad start of file if necessary\n\n    if (options.offset > 0) {\n      if (destination.unixfs) {\n        log(`Writing first ${options.offset} bytes of original file`);\n        sources.push(() => {\n          return destination.content({\n            offset: 0,\n            length: options.offset\n          });\n        });\n\n        if (destination.unixfs.fileSize() < options.offset) {\n          const extra = options.offset - destination.unixfs.fileSize();\n          log(`Writing zeros for extra ${extra} bytes`);\n          sources.push(asyncZeroes(extra));\n        }\n      } else {\n        log(`Writing zeros for first ${options.offset} bytes`);\n        sources.push(asyncZeroes(options.offset));\n      }\n    }\n\n    sources.push(limitAsyncStreamBytes(source, options.length));\n    const content = countBytesStreamed(catAsyncIterators(sources), bytesWritten => {\n      if (destination.unixfs && !options.truncate) {\n        // if we've done reading from the new source and we are not going\n        // to truncate the file, add the end of the existing file to the output\n        const fileSize = destination.unixfs.fileSize();\n\n        if (fileSize > bytesWritten) {\n          log(`Writing last ${fileSize - bytesWritten} of ${fileSize} bytes from original file starting at offset ${bytesWritten}`);\n          return destination.content({\n            offset: bytesWritten\n          });\n        } else {\n          log('Not writing last bytes from original file');\n        }\n      }\n\n      return {\n        [Symbol.asyncIterator]: _wrapAsyncGenerator(function* () {})\n      };\n    });\n    /** @type {number | undefined} */\n\n    let mode;\n\n    if (options.mode !== undefined && options.mode !== null) {\n      mode = parseMode(options.mode);\n    } else if (destination && destination.unixfs) {\n      mode = destination.unixfs.mode;\n    }\n    /** @type {import('ipfs-unixfs').Mtime | undefined} */\n\n\n    let mtime;\n\n    if (options.mtime != null) {\n      mtime = parseMtime(options.mtime);\n    } else if (destination && destination.unixfs) {\n      mtime = destination.unixfs.mtime;\n    }\n\n    let hasher;\n\n    switch (options.hashAlg) {\n      case 'sha2-256':\n        hasher = sha256;\n        break;\n\n      case 'sha2-512':\n        hasher = sha512;\n        break;\n\n      default:\n        throw new Error(`TODO vmx 2021-03-31: Proper error message for unsupported hash algorithms like ${options.hashAlg}`);\n    }\n\n    const result = yield last(importer([{\n      content: content,\n      // persist mode & mtime if set previously\n      mode,\n      mtime\n    }], context.repo.blocks, {\n      progress: options.progress,\n      hasher,\n      cidVersion: options.cidVersion,\n      strategy: options.strategy,\n      rawLeaves: options.rawLeaves,\n      reduceSingleLeafToSelf: options.reduceSingleLeafToSelf,\n      leafType: options.leafType\n    }));\n\n    if (!result) {\n      throw errCode(new Error(`cannot write to ${parent.name}`), 'ERR_COULD_NOT_WRITE');\n    }\n\n    log(`Wrote ${result.cid}`);\n    return {\n      cid: result.cid,\n      size: result.size\n    };\n  });\n\n  return function write(_x11, _x12, _x13, _x14) {\n    return _ref7.apply(this, arguments);\n  };\n}();\n/**\n * @param {AsyncIterable<Uint8Array>} stream\n * @param {number} limit\n */\n\n\nconst limitAsyncStreamBytes = (stream, limit) => {\n  return /*#__PURE__*/function () {\n    var _limitAsyncStreamBytes2 = _wrapAsyncGenerator(function* () {\n      let emitted = 0;\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n\n      var _iteratorError;\n\n      try {\n        for (var _iterator = _asyncIterator(stream), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n          const buf = _value;\n          emitted += buf.length;\n\n          if (emitted > limit) {\n            yield buf.slice(0, limit - emitted);\n            return;\n          }\n\n          yield buf;\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            yield _awaitAsyncGenerator(_iterator.return());\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    });\n\n    function _limitAsyncStreamBytes() {\n      return _limitAsyncStreamBytes2.apply(this, arguments);\n    }\n\n    return _limitAsyncStreamBytes;\n  }();\n};\n/**\n * @param {number} count\n * @param {number} chunkSize\n */\n\n\nconst asyncZeroes = (count, chunkSize = MFS_MAX_CHUNK_SIZE) => {\n  const buf = new Uint8Array(chunkSize);\n\n  function _asyncZeroes() {\n    return _asyncZeroes2.apply(this, arguments);\n  }\n\n  function _asyncZeroes2() {\n    _asyncZeroes2 = _wrapAsyncGenerator(function* () {\n      while (true) {\n        yield buf.slice();\n      }\n    });\n    return _asyncZeroes2.apply(this, arguments);\n  }\n\n  return limitAsyncStreamBytes(_asyncZeroes(), count);\n};\n/**\n * @param {Array<() => AsyncIterable<Uint8Array>>} sources\n */\n\n\nconst catAsyncIterators = /*#__PURE__*/function () {\n  var _ref2 = _wrapAsyncGenerator(function* (sources) {\n    // eslint-disable-line require-await\n    for (let i = 0; i < sources.length; i++) {\n      yield* _asyncGeneratorDelegate(_asyncIterator(sources[i]()), _awaitAsyncGenerator);\n    }\n  });\n\n  return function catAsyncIterators(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n/**\n * @param {AsyncIterable<Uint8Array>} source\n * @param {(count: number) => AsyncIterable<Uint8Array>} notify\n */\n\n\nconst countBytesStreamed = /*#__PURE__*/function () {\n  var _ref3 = _wrapAsyncGenerator(function* (source, notify) {\n    let wrote = 0;\n    var _iteratorNormalCompletion2 = true;\n    var _didIteratorError2 = false;\n\n    var _iteratorError2;\n\n    try {\n      for (var _iterator2 = _asyncIterator(source), _step2, _value2; _step2 = yield _awaitAsyncGenerator(_iterator2.next()), _iteratorNormalCompletion2 = _step2.done, _value2 = yield _awaitAsyncGenerator(_step2.value), !_iteratorNormalCompletion2; _iteratorNormalCompletion2 = true) {\n        const buf = _value2;\n        wrote += buf.length;\n        yield buf;\n      }\n    } catch (err) {\n      _didIteratorError2 = true;\n      _iteratorError2 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n          yield _awaitAsyncGenerator(_iterator2.return());\n        }\n      } finally {\n        if (_didIteratorError2) {\n          throw _iteratorError2;\n        }\n      }\n    }\n\n    var _iteratorNormalCompletion3 = true;\n    var _didIteratorError3 = false;\n\n    var _iteratorError3;\n\n    try {\n      for (var _iterator3 = _asyncIterator(notify(wrote)), _step3, _value3; _step3 = yield _awaitAsyncGenerator(_iterator3.next()), _iteratorNormalCompletion3 = _step3.done, _value3 = yield _awaitAsyncGenerator(_step3.value), !_iteratorNormalCompletion3; _iteratorNormalCompletion3 = true) {\n        const buf = _value3;\n        wrote += buf.length;\n        yield buf;\n      }\n    } catch (err) {\n      _didIteratorError3 = true;\n      _iteratorError3 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n          yield _awaitAsyncGenerator(_iterator3.return());\n        }\n      } finally {\n        if (_didIteratorError3) {\n          throw _iteratorError3;\n        }\n      }\n    }\n  });\n\n  return function countBytesStreamed(_x2, _x3) {\n    return _ref3.apply(this, arguments);\n  };\n}();","map":null,"metadata":{},"sourceType":"script"}