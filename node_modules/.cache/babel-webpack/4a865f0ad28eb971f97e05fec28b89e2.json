{"ast":null,"code":"'use strict';\n\nvar _awaitAsyncGenerator = require(\"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\").default;\n\nvar _wrapAsyncGenerator = require(\"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nconst {\n  Multiaddr\n} = require('multiaddr');\n\nconst toCamel = require('../lib/object-to-camel');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {DHTAPI[\"query\"]}\n   */\n  function query(_x) {\n    return _query.apply(this, arguments);\n  }\n\n  function _query() {\n    _query = _wrapAsyncGenerator(function* (peerId, options = {}) {\n      const res = yield _awaitAsyncGenerator(api.post('dht/query', {\n        timeout: options.timeout,\n        signal: options.signal,\n        searchParams: toUrlSearchParams({\n          arg: peerId.toString(),\n          ...options\n        }),\n        headers: options.headers\n      }));\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n\n      var _iteratorError;\n\n      try {\n        for (var _iterator = _asyncIterator(res.ndjson()), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n          let message = _value;\n          message = toCamel(message);\n          message.responses = (message.responses || []).map((\n          /** @type {{ ID: string, Addrs: string[] }} */\n          {\n            ID,\n            Addrs\n          }) => ({\n            id: ID,\n            addrs: (Addrs || []).map((\n            /** @type {string} **/\n            a) => new Multiaddr(a))\n          }));\n          yield message;\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            yield _awaitAsyncGenerator(_iterator.return());\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    });\n    return _query.apply(this, arguments);\n  }\n\n  return query;\n});","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Demo/node_modules/ipfs-http-client/src/dht/query.js"],"names":["Multiaddr","require","toCamel","configure","toUrlSearchParams","module","exports","api","query","peerId","options","res","post","timeout","signal","searchParams","arg","toString","headers","ndjson","message","responses","map","ID","Addrs","id","addrs","a"],"mappings":"AAAA;;;;;;;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAgBC,OAAO,CAAC,WAAD,CAA7B;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,wBAAD,CAAvB;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,6BAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AAEAI,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAACI,GAAG,IAAI;AAChC;AACF;AACA;AAHkC,WAIfC,KAJe;AAAA;AAAA;;AAAA;AAAA,iCAIhC,WAAwBC,MAAxB,EAAgCC,OAAO,GAAG,EAA1C,EAA8C;AAC5C,YAAMC,GAAG,8BAASJ,GAAG,CAACK,IAAJ,CAAS,WAAT,EAAsB;AACtCC,QAAAA,OAAO,EAAEH,OAAO,CAACG,OADqB;AAEtCC,QAAAA,MAAM,EAAEJ,OAAO,CAACI,MAFsB;AAGtCC,QAAAA,YAAY,EAAEX,iBAAiB,CAAC;AAC9BY,UAAAA,GAAG,EAAEP,MAAM,CAACQ,QAAP,EADyB;AAE9B,aAAGP;AAF2B,SAAD,CAHO;AAOtCQ,QAAAA,OAAO,EAAER,OAAO,CAACQ;AAPqB,OAAtB,CAAT,CAAT;AAD4C;AAAA;;AAAA;;AAAA;AAW5C,4CAA0BP,GAAG,CAACQ,MAAJ,EAA1B,gOAAwC;AAAA,cAAzBC,OAAyB;AACtCA,UAAAA,OAAO,GAAGlB,OAAO,CAACkB,OAAD,CAAjB;AACAA,UAAAA,OAAO,CAACC,SAAR,GAAoB,CAACD,OAAO,CAACC,SAAR,IAAqB,EAAtB,EAA0BC,GAA1B,CAA8B;AAAC;AAA+C;AAAEC,YAAAA,EAAF;AAAMC,YAAAA;AAAN,WAAhD,MAAmE;AACnHC,YAAAA,EAAE,EAAEF,EAD+G;AAEnHG,YAAAA,KAAK,EAAE,CAACF,KAAK,IAAI,EAAV,EAAcF,GAAd,CAAkB;AAAC;AAAuBK,YAAAA,CAAxB,KAA8B,IAAI3B,SAAJ,CAAc2B,CAAd,CAAhD;AAF4G,WAAnE,CAA9B,CAApB;AAIA,gBAAMP,OAAN;AACD;AAlB2C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmB7C,KAvB+B;AAAA;AAAA;;AAyBhC,SAAOZ,KAAP;AACD,CA1ByB,CAA1B","sourcesContent":["'use strict'\n\nconst { Multiaddr } = require('multiaddr')\nconst toCamel = require('../lib/object-to-camel')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {DHTAPI[\"query\"]}\n   */\n  async function * query (peerId, options = {}) {\n    const res = await api.post('dht/query', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: peerId.toString(),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (let message of res.ndjson()) {\n      message = toCamel(message)\n      message.responses = (message.responses || []).map((/** @type {{ ID: string, Addrs: string[] }} */ { ID, Addrs }) => ({\n        id: ID,\n        addrs: (Addrs || []).map((/** @type {string} **/ a) => new Multiaddr(a))\n      }))\n      yield message\n    }\n  }\n\n  return query\n})\n"]},"metadata":{},"sourceType":"script"}