{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst utils = require('../../utils');\n\nconst errcode = require('err-code');\n/**\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('../../message')} Message\n */\n\n/**\n * @param {import('../../index')} dht\n */\n\n\nmodule.exports = dht => {\n  const log = utils.logger(dht.peerId, 'rpc:put-value');\n  /**\n   * Process `PutValue` DHT messages.\n   *\n   * @param {PeerId} peerId\n   * @param {Message} msg\n   */\n\n  function putValue(_x, _x2) {\n    return _putValue.apply(this, arguments);\n  }\n\n  function _putValue() {\n    _putValue = _asyncToGenerator(function* (peerId, msg) {\n      const key = msg.key;\n      log('key: %b', key);\n      const record = msg.record;\n\n      if (!record) {\n        const errMsg = `Empty record from: ${peerId.toB58String()}`;\n        log.error(errMsg);\n        throw errcode(new Error(errMsg), 'ERR_EMPTY_RECORD');\n      }\n\n      yield dht._verifyRecordLocally(record);\n      record.timeReceived = new Date();\n      const recordKey = utils.bufferToKey(record.key);\n      yield dht.datastore.put(recordKey, record.serialize());\n      dht.onPut(record, peerId);\n      return msg;\n    });\n    return _putValue.apply(this, arguments);\n  }\n\n  return putValue;\n};","map":null,"metadata":{},"sourceType":"script"}