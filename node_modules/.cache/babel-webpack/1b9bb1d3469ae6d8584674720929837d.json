{"ast":null,"code":"var _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst debug = require(\"debug\")(\"contract:promievent\");\n\nconst DebugUtils = require(\"@truffle/debug-utils\");\n\nconst Web3PromiEvent = require(\"web3-core-promievent\");\n\nfunction PromiEvent(justPromise, bugger = undefined, isDeploy = false) {\n  const {\n    resolve,\n    reject,\n    eventEmitter\n  } = new Web3PromiEvent(justPromise);\n  const originalStackTrace = new Error().stack;\n\n  function rejectHijacker(e) {\n    var _this = this;\n\n    debug(\"hijacking!\");\n    debug(\"hash: %s\", this.txHash);\n    let getSolidityStackTrace;\n\n    if (bugger && this.txHash) {\n      debug(\"debugging time!\");\n\n      getSolidityStackTrace = /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* () {\n          try {\n            yield bugger.load(_this.txHash);\n            yield bugger.continueUntilBreakpoint();\n            const report = bugger.stacktrace();\n            yield bugger.unload();\n            return DebugUtils.formatStacktrace(report, 4); //indent 4 to match node's stacktraces\n          } catch (_) {\n            //ignore errors\n            return undefined;\n          }\n        });\n\n        return function getSolidityStackTrace() {\n          return _ref.apply(this, arguments);\n        };\n      }();\n    } else {\n      getSolidityStackTrace = /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator(function* () {\n          return undefined;\n        });\n\n        return function getSolidityStackTrace() {\n          return _ref2.apply(this, arguments);\n        };\n      }();\n    }\n\n    getSolidityStackTrace().then(solidityStackTrace => {\n      debug(\"e.stack: %s\", e.stack);\n      debug(\"originalStackTrace: %s\", originalStackTrace);\n      debug(\"solidityStackTrace: %s\", solidityStackTrace);\n      const initialLinesRegexp = isDeploy ? /^.*\\n.*\\n.*\\n.*/ //first 4 lines (note . does not include \\n)\n      : /^.*\\n.*\\n.*/; //first 3 lines\n      //we replace not just the first line but also the next 2 as they contain\n      //useless stuff users shouldn't see; in case of deployments there's one\n      //additional to remove\n\n      try {\n        let stackTrace = originalStackTrace.replace(initialLinesRegexp, e.stack.split(\"\\n\")[0]);\n\n        if (solidityStackTrace) {\n          //let's split the solidity stack trace into first line & rest\n          let [_, solidityFirstLine, solidityRemaining] = solidityStackTrace.match(/^(.*?)\\r?\\n((.|\\r|\\n)*)$/);\n          stackTrace = stackTrace.replace(/^.*/, //note that . does not include \\n\n          solidityRemaining //note: this does not end in \\n, so no modification needed\n          );\n          e.hijackedMessage = e.message;\n          e.message = solidityFirstLine;\n        }\n\n        e.hijackedStack = e.stack;\n        e.stack = stackTrace;\n      } catch (_) {//again, ignore errors\n        //(not sure how this can happen here but I'll leave this block here)\n      }\n\n      reject(e);\n    });\n  }\n\n  this.resolve = resolve;\n  this.reject = rejectHijacker.bind(this);\n  this.eventEmitter = eventEmitter;\n\n  if (bugger) {\n    this.debug = true;\n  }\n}\n\nPromiEvent.resolve = Web3PromiEvent.resolve;\n\nPromiEvent.prototype.setTransactionHash = function (txHash) {\n  debug(\"setting!\");\n  debug(\"hash: %s\", txHash);\n  this.txHash = txHash;\n};\n\nmodule.exports = PromiEvent;","map":{"version":3,"sources":["/Users/sydneybailey/Internship/contract-testing/node_modules/@truffle/contract/lib/promievent.js"],"names":["debug","require","DebugUtils","Web3PromiEvent","PromiEvent","justPromise","bugger","undefined","isDeploy","resolve","reject","eventEmitter","originalStackTrace","Error","stack","rejectHijacker","e","txHash","getSolidityStackTrace","load","continueUntilBreakpoint","report","stacktrace","unload","formatStacktrace","_","then","solidityStackTrace","initialLinesRegexp","stackTrace","replace","split","solidityFirstLine","solidityRemaining","match","hijackedMessage","message","hijackedStack","bind","prototype","setTransactionHash","module","exports"],"mappings":";;AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAP,CAAiB,qBAAjB,CAAd;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,sBAAD,CAA1B;;AACA,MAAME,cAAc,GAAGF,OAAO,CAAC,sBAAD,CAA9B;;AAEA,SAASG,UAAT,CAAoBC,WAApB,EAAiCC,MAAM,GAAGC,SAA1C,EAAqDC,QAAQ,GAAG,KAAhE,EAAuE;AACrE,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,MAAX;AAAmBC,IAAAA;AAAnB,MAAoC,IAAIR,cAAJ,CAAmBE,WAAnB,CAA1C;AAEA,QAAMO,kBAAkB,GAAG,IAAIC,KAAJ,GAAYC,KAAvC;;AAEA,WAASC,cAAT,CAAwBC,CAAxB,EAA2B;AAAA;;AACzBhB,IAAAA,KAAK,CAAC,YAAD,CAAL;AACAA,IAAAA,KAAK,CAAC,UAAD,EAAa,KAAKiB,MAAlB,CAAL;AACA,QAAIC,qBAAJ;;AACA,QAAIZ,MAAM,IAAI,KAAKW,MAAnB,EAA2B;AACzBjB,MAAAA,KAAK,CAAC,iBAAD,CAAL;;AACAkB,MAAAA,qBAAqB;AAAA,qCAAG,aAAY;AAClC,cAAI;AACF,kBAAMZ,MAAM,CAACa,IAAP,CAAY,KAAI,CAACF,MAAjB,CAAN;AACA,kBAAMX,MAAM,CAACc,uBAAP,EAAN;AACA,kBAAMC,MAAM,GAAGf,MAAM,CAACgB,UAAP,EAAf;AACA,kBAAMhB,MAAM,CAACiB,MAAP,EAAN;AACA,mBAAOrB,UAAU,CAACsB,gBAAX,CAA4BH,MAA5B,EAAoC,CAApC,CAAP,CALE,CAK6C;AAChD,WAND,CAME,OAAOI,CAAP,EAAU;AACV;AACA,mBAAOlB,SAAP;AACD;AACF,SAXoB;;AAAA;AAAA;AAAA;AAAA,SAArB;AAYD,KAdD,MAcO;AACLW,MAAAA,qBAAqB;AAAA,sCAAG;AAAA,iBAAYX,SAAZ;AAAA,SAAH;;AAAA;AAAA;AAAA;AAAA,SAArB;AACD;;AAEDW,IAAAA,qBAAqB,GAAGQ,IAAxB,CAA8BC,kBAAD,IAAwB;AACnD3B,MAAAA,KAAK,CAAC,aAAD,EAAgBgB,CAAC,CAACF,KAAlB,CAAL;AACAd,MAAAA,KAAK,CAAC,wBAAD,EAA2BY,kBAA3B,CAAL;AACAZ,MAAAA,KAAK,CAAC,wBAAD,EAA2B2B,kBAA3B,CAAL;AACA,YAAMC,kBAAkB,GAAGpB,QAAQ,GAC/B,iBAD+B,CACb;AADa,QAE/B,aAFJ,CAJmD,CAMhC;AACnB;AACA;AACA;;AACA,UAAI;AACF,YAAIqB,UAAU,GAAGjB,kBAAkB,CAACkB,OAAnB,CACfF,kBADe,EAEfZ,CAAC,CAACF,KAAF,CAAQiB,KAAR,CAAc,IAAd,EAAoB,CAApB,CAFe,CAAjB;;AAIA,YAAIJ,kBAAJ,EAAwB;AACtB;AACA,cAAI,CACFF,CADE,EAEFO,iBAFE,EAGFC,iBAHE,IAIAN,kBAAkB,CAACO,KAAnB,CAAyB,0BAAzB,CAJJ;AAMAL,UAAAA,UAAU,GAAGA,UAAU,CAACC,OAAX,CACX,KADW,EACJ;AACPG,UAAAA,iBAFW,CAEO;AAFP,WAAb;AAIAjB,UAAAA,CAAC,CAACmB,eAAF,GAAoBnB,CAAC,CAACoB,OAAtB;AACApB,UAAAA,CAAC,CAACoB,OAAF,GAAYJ,iBAAZ;AACD;;AAEDhB,QAAAA,CAAC,CAACqB,aAAF,GAAkBrB,CAAC,CAACF,KAApB;AACAE,QAAAA,CAAC,CAACF,KAAF,GAAUe,UAAV;AACD,OAvBD,CAuBE,OAAOJ,CAAP,EAAU,CACV;AACA;AACD;;AACDf,MAAAA,MAAM,CAACM,CAAD,CAAN;AACD,KAtCD;AAuCD;;AAED,OAAKP,OAAL,GAAeA,OAAf;AACA,OAAKC,MAAL,GAAcK,cAAc,CAACuB,IAAf,CAAoB,IAApB,CAAd;AACA,OAAK3B,YAAL,GAAoBA,YAApB;;AACA,MAAIL,MAAJ,EAAY;AACV,SAAKN,KAAL,GAAa,IAAb;AACD;AACF;;AAEDI,UAAU,CAACK,OAAX,GAAqBN,cAAc,CAACM,OAApC;;AAEAL,UAAU,CAACmC,SAAX,CAAqBC,kBAArB,GAA0C,UAAUvB,MAAV,EAAkB;AAC1DjB,EAAAA,KAAK,CAAC,UAAD,CAAL;AACAA,EAAAA,KAAK,CAAC,UAAD,EAAaiB,MAAb,CAAL;AACA,OAAKA,MAAL,GAAcA,MAAd;AACD,CAJD;;AAMAwB,MAAM,CAACC,OAAP,GAAiBtC,UAAjB","sourcesContent":["const debug = require(\"debug\")(\"contract:promievent\");\nconst DebugUtils = require(\"@truffle/debug-utils\");\nconst Web3PromiEvent = require(\"web3-core-promievent\");\n\nfunction PromiEvent(justPromise, bugger = undefined, isDeploy = false) {\n  const { resolve, reject, eventEmitter } = new Web3PromiEvent(justPromise);\n\n  const originalStackTrace = new Error().stack;\n\n  function rejectHijacker(e) {\n    debug(\"hijacking!\");\n    debug(\"hash: %s\", this.txHash);\n    let getSolidityStackTrace;\n    if (bugger && this.txHash) {\n      debug(\"debugging time!\");\n      getSolidityStackTrace = async () => {\n        try {\n          await bugger.load(this.txHash);\n          await bugger.continueUntilBreakpoint();\n          const report = bugger.stacktrace();\n          await bugger.unload();\n          return DebugUtils.formatStacktrace(report, 4); //indent 4 to match node's stacktraces\n        } catch (_) {\n          //ignore errors\n          return undefined;\n        }\n      };\n    } else {\n      getSolidityStackTrace = async () => undefined;\n    }\n\n    getSolidityStackTrace().then((solidityStackTrace) => {\n      debug(\"e.stack: %s\", e.stack);\n      debug(\"originalStackTrace: %s\", originalStackTrace);\n      debug(\"solidityStackTrace: %s\", solidityStackTrace);\n      const initialLinesRegexp = isDeploy\n        ? /^.*\\n.*\\n.*\\n.*/ //first 4 lines (note . does not include \\n)\n        : /^.*\\n.*\\n.*/; //first 3 lines\n      //we replace not just the first line but also the next 2 as they contain\n      //useless stuff users shouldn't see; in case of deployments there's one\n      //additional to remove\n      try {\n        let stackTrace = originalStackTrace.replace(\n          initialLinesRegexp,\n          e.stack.split(\"\\n\")[0]\n        );\n        if (solidityStackTrace) {\n          //let's split the solidity stack trace into first line & rest\n          let [\n            _,\n            solidityFirstLine,\n            solidityRemaining,\n          ] = solidityStackTrace.match(/^(.*?)\\r?\\n((.|\\r|\\n)*)$/);\n\n          stackTrace = stackTrace.replace(\n            /^.*/, //note that . does not include \\n\n            solidityRemaining //note: this does not end in \\n, so no modification needed\n          );\n          e.hijackedMessage = e.message;\n          e.message = solidityFirstLine;\n        }\n\n        e.hijackedStack = e.stack;\n        e.stack = stackTrace;\n      } catch (_) {\n        //again, ignore errors\n        //(not sure how this can happen here but I'll leave this block here)\n      }\n      reject(e);\n    });\n  }\n\n  this.resolve = resolve;\n  this.reject = rejectHijacker.bind(this);\n  this.eventEmitter = eventEmitter;\n  if (bugger) {\n    this.debug = true;\n  }\n}\n\nPromiEvent.resolve = Web3PromiEvent.resolve;\n\nPromiEvent.prototype.setTransactionHash = function (txHash) {\n  debug(\"setting!\");\n  debug(\"hash: %s\", txHash);\n  this.txHash = txHash;\n};\n\nmodule.exports = PromiEvent;\n"]},"metadata":{},"sourceType":"script"}