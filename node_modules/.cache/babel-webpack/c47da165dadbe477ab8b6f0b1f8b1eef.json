{"ast":null,"code":"'use strict';\n/**\n * @typedef {import('multiformats/hashes/interface').MultihashHasher} MultihashHasher\n * @typedef {import('./types').LoadHasherFn} LoadHasherFn\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n/**\n * @type {LoadHasherFn}\n */\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst LOAD_HASHER = codeOrName => Promise.reject(new Error(`No hasher found for \"${codeOrName}\"`));\n\nclass Multihashes {\n  /**\n   * @param {object} options\n   * @param {LoadHasherFn} [options.loadHasher]\n   * @param {MultihashHasher[]} options.hashers\n   */\n  constructor(options) {\n    // Object with current list of active hashers\n\n    /** @type {Record<string, MultihashHasher>}} */\n    this._hashersByName = {}; // Object with current list of active hashers\n\n    /** @type {Record<number, MultihashHasher>}} */\n\n    this._hashersByCode = {};\n    this._loadHasher = options.loadHasher || LOAD_HASHER; // Enable all supplied hashers\n\n    for (const hasher of options.hashers) {\n      this.addHasher(hasher);\n    }\n  }\n  /**\n   * Add support for a multibase hasher\n   *\n   * @param {MultihashHasher} hasher\n   */\n\n\n  addHasher(hasher) {\n    if (this._hashersByName[hasher.name] || this._hashersByCode[hasher.code]) {\n      throw new Error(`Resolver already exists for codec \"${hasher.name}\"`);\n    }\n\n    this._hashersByName[hasher.name] = hasher;\n    this._hashersByCode[hasher.code] = hasher;\n  }\n  /**\n   * Remove support for a multibase hasher\n   *\n   * @param {MultihashHasher} hasher\n   */\n\n\n  removeHasher(hasher) {\n    delete this._hashersByName[hasher.name];\n    delete this._hashersByCode[hasher.code];\n  }\n  /**\n   * @param {number | string} code\n   */\n\n\n  getHasher(code) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const table = typeof code === 'string' ? _this._hashersByName : _this._hashersByCode;\n\n      if (table[code]) {\n        return table[code];\n      } // If not supported, attempt to dynamically load this hasher\n\n\n      const hasher = yield _this._loadHasher(code);\n\n      if (table[code] == null) {\n        _this.addHasher(hasher);\n      }\n\n      return hasher;\n    })();\n  }\n\n  listHashers() {\n    return Object.values(this._hashersByName);\n  }\n\n}\n\nmodule.exports = Multihashes;","map":null,"metadata":{},"sourceType":"script"}