{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nconst {\n  Value\n} = require('./response-types');\n\nconst {\n  fromString: uint8ArrayFromString\n} = require('uint8arrays/from-string');\n\nconst {\n  toString: uint8ArrayToString\n} = require('uint8arrays/to-string');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {DHTAPI[\"get\"]}\n   */\n  function get(_x) {\n    return _get.apply(this, arguments);\n  }\n\n  function _get() {\n    _get = _asyncToGenerator(function* (key, options = {}) {\n      const res = yield api.post('dht/get', {\n        timeout: options.timeout,\n        signal: options.signal,\n        searchParams: toUrlSearchParams({\n          arg: key instanceof Uint8Array ? uint8ArrayToString(key) : key,\n          ...options\n        }),\n        headers: options.headers\n      });\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n\n      var _iteratorError;\n\n      try {\n        for (var _iterator = _asyncIterator(res.ndjson()), _step, _value; _step = yield _iterator.next(), _iteratorNormalCompletion = _step.done, _value = yield _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n          const message = _value;\n\n          if (message.Type === Value) {\n            return uint8ArrayFromString(message.Extra, 'base64pad');\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            yield _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      throw new Error('not found');\n    });\n    return _get.apply(this, arguments);\n  }\n\n  return get;\n});","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Demo/node_modules/ipfs-http-client/src/dht/get.js"],"names":["configure","require","toUrlSearchParams","Value","fromString","uint8ArrayFromString","toString","uint8ArrayToString","module","exports","api","get","key","options","res","post","timeout","signal","searchParams","arg","Uint8Array","headers","ndjson","message","Type","Extra","Error"],"mappings":"AAAA;;;;;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAMC,iBAAiB,GAAGD,OAAO,CAAC,6BAAD,CAAjC;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAYF,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAM;AAAEG,EAAAA,UAAU,EAAEC;AAAd,IAAuCJ,OAAO,CAAC,yBAAD,CAApD;;AACA,MAAM;AAAEK,EAAAA,QAAQ,EAAEC;AAAZ,IAAmCN,OAAO,CAAC,uBAAD,CAAhD;AAEA;AACA;AACA;AACA;;;AAEAO,MAAM,CAACC,OAAP,GAAiBT,SAAS,CAACU,GAAG,IAAI;AAChC;AACF;AACA;AAHkC,WAIjBC,GAJiB;AAAA;AAAA;;AAAA;AAAA,6BAIhC,WAAoBC,GAApB,EAAyBC,OAAO,GAAG,EAAnC,EAAuC;AACrC,YAAMC,GAAG,SAASJ,GAAG,CAACK,IAAJ,CAAS,SAAT,EAAoB;AACpCC,QAAAA,OAAO,EAAEH,OAAO,CAACG,OADmB;AAEpCC,QAAAA,MAAM,EAAEJ,OAAO,CAACI,MAFoB;AAGpCC,QAAAA,YAAY,EAAEhB,iBAAiB,CAAC;AAC9BiB,UAAAA,GAAG,EAAEP,GAAG,YAAYQ,UAAf,GAA4Bb,kBAAkB,CAACK,GAAD,CAA9C,GAAsDA,GAD7B;AAE9B,aAAGC;AAF2B,SAAD,CAHK;AAOpCQ,QAAAA,OAAO,EAAER,OAAO,CAACQ;AAPmB,OAApB,CAAlB;AADqC;AAAA;;AAAA;;AAAA;AAWrC,4CAA4BP,GAAG,CAACQ,MAAJ,EAA5B,oLAA0C;AAAA,gBAAzBC,OAAyB;;AACxC,cAAIA,OAAO,CAACC,IAAR,KAAiBrB,KAArB,EAA4B;AAC1B,mBAAOE,oBAAoB,CAACkB,OAAO,CAACE,KAAT,EAAgB,WAAhB,CAA3B;AACD;AACF;AAfoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBrC,YAAM,IAAIC,KAAJ,CAAU,WAAV,CAAN;AACD,KAtB+B;AAAA;AAAA;;AAwBhC,SAAOf,GAAP;AACD,CAzByB,CAA1B","sourcesContent":["'use strict'\n\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst { Value } = require('./response-types')\nconst { fromString: uint8ArrayFromString } = require('uint8arrays/from-string')\nconst { toString: uint8ArrayToString } = require('uint8arrays/to-string')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {DHTAPI[\"get\"]}\n   */\n  async function get (key, options = {}) {\n    const res = await api.post('dht/get', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: key instanceof Uint8Array ? uint8ArrayToString(key) : key,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (const message of res.ndjson()) {\n      if (message.Type === Value) {\n        return uint8ArrayFromString(message.Extra, 'base64pad')\n      }\n    }\n\n    throw new Error('not found')\n  }\n\n  return get\n})\n"]},"metadata":{},"sourceType":"script"}