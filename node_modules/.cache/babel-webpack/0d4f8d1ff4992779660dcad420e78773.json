{"ast":null,"code":"'use strict';\n\nvar _awaitAsyncGenerator = require(\"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\").default;\n\nvar _wrapAsyncGenerator = require(\"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nconst varint = require('varint');\n\nconst BufferList = require('bl/BufferList');\n\nconst POOL_SIZE = 10 * 1024;\n\nclass Encoder {\n  constructor() {\n    this._pool = new Uint8Array(POOL_SIZE);\n    this._poolOffset = 0;\n  }\n  /**\n   * Encodes the given message and returns it and its header\n   *\n   * @param {*} msg - The message object to encode\n   * @returns {Uint8Array|Uint8Array[]}\n   */\n\n\n  write(msg) {\n    const pool = this._pool;\n    let offset = this._poolOffset;\n    varint.encode(msg.id << 3 | msg.type, pool, offset);\n    offset += varint.encode.bytes;\n    varint.encode(msg.data ? msg.data.length : 0, pool, offset);\n    offset += varint.encode.bytes;\n    const header = pool.subarray(this._poolOffset, offset);\n\n    if (POOL_SIZE - offset < 100) {\n      this._pool = new Uint8Array(POOL_SIZE);\n      this._poolOffset = 0;\n    } else {\n      this._poolOffset = offset;\n    }\n\n    if (!msg.data) return header;\n    return [header, msg.data];\n  }\n\n}\n\nconst encoder = new Encoder(); // Encode one or more messages and yield a BufferList of encoded messages\n\nmodule.exports = source => function () {\n  var _encode = _wrapAsyncGenerator(function* () {\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n\n    var _iteratorError;\n\n    try {\n      for (var _iterator = _asyncIterator(source), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n        const msg = _value;\n\n        if (Array.isArray(msg)) {\n          yield new BufferList(msg.map(m => encoder.write(m)));\n        } else {\n          yield new BufferList(encoder.write(msg));\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          yield _awaitAsyncGenerator(_iterator.return());\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  });\n\n  function encode() {\n    return _encode.apply(this, arguments);\n  }\n\n  return encode;\n}()();","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Demo/node_modules/libp2p-mplex/src/coder/encode.browser.js"],"names":["varint","require","BufferList","POOL_SIZE","Encoder","constructor","_pool","Uint8Array","_poolOffset","write","msg","pool","offset","encode","id","type","bytes","data","length","header","subarray","encoder","module","exports","source","Array","isArray","map","m"],"mappings":"AAAA;;;;;;;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,eAAD,CAA1B;;AAEA,MAAME,SAAS,GAAG,KAAK,IAAvB;;AAEA,MAAMC,OAAN,CAAc;AACZC,EAAAA,WAAW,GAAI;AACb,SAAKC,KAAL,GAAa,IAAIC,UAAJ,CAAeJ,SAAf,CAAb;AACA,SAAKK,WAAL,GAAmB,CAAnB;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEC,EAAAA,KAAK,CAAEC,GAAF,EAAO;AACV,UAAMC,IAAI,GAAG,KAAKL,KAAlB;AACA,QAAIM,MAAM,GAAG,KAAKJ,WAAlB;AAEAR,IAAAA,MAAM,CAACa,MAAP,CAAcH,GAAG,CAACI,EAAJ,IAAU,CAAV,GAAcJ,GAAG,CAACK,IAAhC,EAAsCJ,IAAtC,EAA4CC,MAA5C;AACAA,IAAAA,MAAM,IAAIZ,MAAM,CAACa,MAAP,CAAcG,KAAxB;AACAhB,IAAAA,MAAM,CAACa,MAAP,CAAcH,GAAG,CAACO,IAAJ,GAAWP,GAAG,CAACO,IAAJ,CAASC,MAApB,GAA6B,CAA3C,EAA8CP,IAA9C,EAAoDC,MAApD;AACAA,IAAAA,MAAM,IAAIZ,MAAM,CAACa,MAAP,CAAcG,KAAxB;AAEA,UAAMG,MAAM,GAAGR,IAAI,CAACS,QAAL,CAAc,KAAKZ,WAAnB,EAAgCI,MAAhC,CAAf;;AAEA,QAAIT,SAAS,GAAGS,MAAZ,GAAqB,GAAzB,EAA8B;AAC5B,WAAKN,KAAL,GAAa,IAAIC,UAAJ,CAAeJ,SAAf,CAAb;AACA,WAAKK,WAAL,GAAmB,CAAnB;AACD,KAHD,MAGO;AACL,WAAKA,WAAL,GAAmBI,MAAnB;AACD;;AAED,QAAI,CAACF,GAAG,CAACO,IAAT,EAAe,OAAOE,MAAP;AAEf,WAAO,CAACA,MAAD,EAAST,GAAG,CAACO,IAAb,CAAP;AACD;;AAjCW;;AAoCd,MAAMI,OAAO,GAAG,IAAIjB,OAAJ,EAAhB,C,CAEA;;AACAkB,MAAM,CAACC,OAAP,GAAiBC,MAAM,IAAI;AAAA,oCAAC,aAA2B;AAAA;AAAA;;AAAA;;AAAA;AACrD,0CAAwBA,MAAxB,gOAAgC;AAAA,cAAfd,GAAe;;AAC9B,YAAIe,KAAK,CAACC,OAAN,CAAchB,GAAd,CAAJ,EAAwB;AACtB,gBAAM,IAAIR,UAAJ,CAAeQ,GAAG,CAACiB,GAAJ,CAAQC,CAAC,IAAIP,OAAO,CAACZ,KAAR,CAAcmB,CAAd,CAAb,CAAf,CAAN;AACD,SAFD,MAEO;AACL,gBAAM,IAAI1B,UAAJ,CAAemB,OAAO,CAACZ,KAAR,CAAcC,GAAd,CAAf,CAAN;AACD;AACF;AAPoD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQtD,GAR0B;;AAAA,WAAkBG,MAAlB;AAAA;AAAA;;AAAA,SAAkBA,MAAlB;AAAA,KAA3B","sourcesContent":["'use strict'\n\nconst varint = require('varint')\nconst BufferList = require('bl/BufferList')\n\nconst POOL_SIZE = 10 * 1024\n\nclass Encoder {\n  constructor () {\n    this._pool = new Uint8Array(POOL_SIZE)\n    this._poolOffset = 0\n  }\n\n  /**\n   * Encodes the given message and returns it and its header\n   *\n   * @param {*} msg - The message object to encode\n   * @returns {Uint8Array|Uint8Array[]}\n   */\n  write (msg) {\n    const pool = this._pool\n    let offset = this._poolOffset\n\n    varint.encode(msg.id << 3 | msg.type, pool, offset)\n    offset += varint.encode.bytes\n    varint.encode(msg.data ? msg.data.length : 0, pool, offset)\n    offset += varint.encode.bytes\n\n    const header = pool.subarray(this._poolOffset, offset)\n\n    if (POOL_SIZE - offset < 100) {\n      this._pool = new Uint8Array(POOL_SIZE)\n      this._poolOffset = 0\n    } else {\n      this._poolOffset = offset\n    }\n\n    if (!msg.data) return header\n\n    return [header, msg.data]\n  }\n}\n\nconst encoder = new Encoder()\n\n// Encode one or more messages and yield a BufferList of encoded messages\nmodule.exports = source => (async function * encode () {\n  for await (const msg of source) {\n    if (Array.isArray(msg)) {\n      yield new BufferList(msg.map(m => encoder.write(m)))\n    } else {\n      yield new BufferList(encoder.write(msg))\n    }\n  }\n})()\n"]},"metadata":{},"sourceType":"script"}