{"ast":null,"code":"'use strict';\n/**\n * @typedef {import('multiformats/codecs/interface').BlockCodec<any, any>} BlockCodec\n * @typedef {import('./types').LoadCodecFn} LoadCodecFn\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n/**\n * @type {LoadCodecFn}\n */\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst LOAD_CODEC = codeOrName => Promise.reject(new Error(`No codec found for \"${codeOrName}\"`));\n\nclass Multicodecs {\n  /**\n   * @param {object} options\n   * @param {LoadCodecFn} [options.loadCodec]\n   * @param {BlockCodec[]} options.codecs\n   */\n  constructor(options) {\n    // Object with current list of active resolvers\n\n    /** @type {Record<string, BlockCodec>}} */\n    this._codecsByName = {}; // Object with current list of active resolvers\n\n    /** @type {Record<number, BlockCodec>}} */\n\n    this._codecsByCode = {};\n    this._loadCodec = options.loadCodec || LOAD_CODEC; // Enable all supplied codecs\n\n    for (const codec of options.codecs) {\n      this.addCodec(codec);\n    }\n  }\n  /**\n   * Add support for a block codec\n   *\n   * @param {BlockCodec} codec\n   */\n\n\n  addCodec(codec) {\n    if (this._codecsByName[codec.name] || this._codecsByCode[codec.code]) {\n      throw new Error(`Resolver already exists for codec \"${codec.name}\"`);\n    }\n\n    this._codecsByName[codec.name] = codec;\n    this._codecsByCode[codec.code] = codec;\n  }\n  /**\n   * Remove support for a block codec\n   *\n   * @param {BlockCodec} codec\n   */\n\n\n  removeCodec(codec) {\n    delete this._codecsByName[codec.name];\n    delete this._codecsByCode[codec.code];\n  }\n  /**\n   * @param {number | string} code\n   */\n\n\n  getCodec(code) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const table = typeof code === 'string' ? _this._codecsByName : _this._codecsByCode;\n\n      if (table[code]) {\n        return table[code];\n      } // If not supported, attempt to dynamically load this codec\n\n\n      const codec = yield _this._loadCodec(code);\n\n      if (table[code] == null) {\n        _this.addCodec(codec);\n      }\n\n      return codec;\n    })();\n  }\n\n  listCodecs() {\n    return Object.values(this._codecsByName);\n  }\n\n}\n\nmodule.exports = Multicodecs;","map":null,"metadata":{},"sourceType":"script"}