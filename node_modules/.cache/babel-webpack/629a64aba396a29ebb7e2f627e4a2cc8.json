{"ast":null,"code":"'use strict';\n\nconst WriteError = require('level-errors').WriteError;\n\nconst catering = require('catering');\n\nconst getCallback = require('./common').getCallback;\n\nconst getOptions = require('./common').getOptions;\n\nfunction Batch(levelup) {\n  this.db = levelup;\n  this.batch = levelup.db.batch();\n  this.ops = [];\n  this.length = 0;\n}\n\nBatch.prototype.put = function (key, value, options) {\n  try {\n    this.batch.put(key, value, options);\n  } catch (e) {\n    throw new WriteError(e);\n  }\n\n  this.ops.push({ ...options,\n    type: 'put',\n    key,\n    value\n  });\n  this.length++;\n  return this;\n};\n\nBatch.prototype.del = function (key, options) {\n  try {\n    this.batch.del(key, options);\n  } catch (err) {\n    throw new WriteError(err);\n  }\n\n  this.ops.push({ ...options,\n    type: 'del',\n    key\n  });\n  this.length++;\n  return this;\n};\n\nBatch.prototype.clear = function () {\n  try {\n    this.batch.clear();\n  } catch (err) {\n    throw new WriteError(err);\n  }\n\n  this.ops = [];\n  this.length = 0;\n  return this;\n};\n\nBatch.prototype.write = function (options, callback) {\n  const levelup = this.db;\n  const ops = this.ops;\n  callback = getCallback(options, callback);\n  callback = catering.fromCallback(callback);\n  options = getOptions(options);\n\n  try {\n    this.batch.write(options, function (err) {\n      if (err) {\n        return callback(new WriteError(err));\n      }\n\n      levelup.emit('batch', ops);\n      callback();\n    });\n  } catch (err) {\n    throw new WriteError(err);\n  }\n\n  return callback.promise;\n};\n\nmodule.exports = Batch;","map":null,"metadata":{},"sourceType":"script"}