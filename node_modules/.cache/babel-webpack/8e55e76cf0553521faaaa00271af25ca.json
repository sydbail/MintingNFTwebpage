{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst {\n  repoVersion\n} = require('ipfs-repo');\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @param {Object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\n\n\nmodule.exports = ({\n  repo\n}) => {\n  /**\n   * @type {import('ipfs-core-types/src/repo').API[\"version\"]}\n   */\n  function version() {\n    return _version.apply(this, arguments);\n  }\n\n  function _version() {\n    _version = _asyncToGenerator(function* (options = {}) {\n      try {\n        // @ts-ignore - not a public API\n        yield repo._checkInitialized(options);\n      } catch (err) {\n        // TODO: (dryajov) This is really hacky, there must be a better way\n        const match = [/Key not found in database \\[\\/version\\]/, /ENOENT/, /repo is not initialized yet/].some(m => {\n          return m.test(err.message);\n        });\n\n        if (match) {\n          // this repo has not been initialized\n          return repoVersion;\n        }\n\n        throw err;\n      }\n\n      return repo.version.get();\n    });\n    return _version.apply(this, arguments);\n  }\n\n  return withTimeoutOption(version);\n};","map":{"version":3,"sources":["/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/ipfs-core/src/components/repo/version.js"],"names":["repoVersion","require","withTimeoutOption","module","exports","repo","version","options","_checkInitialized","err","match","some","m","test","message","get"],"mappings":"AAAA;;;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAkBC,OAAO,CAAC,WAAD,CAA/B;;AACA,MAAMC,iBAAiB,GAAGD,OAAO,CAAC,yCAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AACAE,MAAM,CAACC,OAAP,GAAiB,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAC7B;AACF;AACA;AAH+B,WAIdC,OAJc;AAAA;AAAA;;AAAA;AAAA,iCAI7B,WAAwBC,OAAO,GAAG,EAAlC,EAAsC;AACpC,UAAI;AACF;AACA,cAAMF,IAAI,CAACG,iBAAL,CAAuBD,OAAvB,CAAN;AACD,OAHD,CAGE,OAAOE,GAAP,EAAY;AACZ;AACA,cAAMC,KAAK,GAAG,CACZ,yCADY,EAEZ,QAFY,EAGZ,6BAHY,EAIZC,IAJY,CAINC,CAAD,IAAO;AACZ,iBAAOA,CAAC,CAACC,IAAF,CAAOJ,GAAG,CAACK,OAAX,CAAP;AACD,SANa,CAAd;;AAOA,YAAIJ,KAAJ,EAAW;AACT;AACA,iBAAOV,WAAP;AACD;;AACD,cAAMS,GAAN;AACD;;AAED,aAAOJ,IAAI,CAACC,OAAL,CAAaS,GAAb,EAAP;AACD,KAzB4B;AAAA;AAAA;;AA2B7B,SAAOb,iBAAiB,CAACI,OAAD,CAAxB;AACD,CA5BD","sourcesContent":["'use strict'\n\nconst { repoVersion } = require('ipfs-repo')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\n\n/**\n * @param {Object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\nmodule.exports = ({ repo }) => {\n  /**\n   * @type {import('ipfs-core-types/src/repo').API[\"version\"]}\n   */\n  async function version (options = {}) {\n    try {\n      // @ts-ignore - not a public API\n      await repo._checkInitialized(options)\n    } catch (err) {\n      // TODO: (dryajov) This is really hacky, there must be a better way\n      const match = [\n        /Key not found in database \\[\\/version\\]/,\n        /ENOENT/,\n        /repo is not initialized yet/\n      ].some((m) => {\n        return m.test(err.message)\n      })\n      if (match) {\n        // this repo has not been initialized\n        return repoVersion\n      }\n      throw err\n    }\n\n    return repo.version.get()\n  }\n\n  return withTimeoutOption(version)\n}\n"]},"metadata":{},"sourceType":"script"}