{"ast":null,"code":"import _awaitAsyncGenerator from \"/Users/sydneybailey/Internship/Dapp/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator\";\nimport _wrapAsyncGenerator from \"/Users/sydneybailey/Internship/Dapp/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator\";\nimport _asyncIterator from \"/Users/sydneybailey/Internship/Dapp/node_modules/@babel/runtime/helpers/esm/asyncIterator\";\nimport { decode } from '@ipld/dag-pb';\n\nconst hamtShardedDirectoryContent = (cid, node, unixfs, path, resolve, depth, blockstore) => {\n  function yieldHamtDirectoryContent(options = {}) {\n    return listDirectory(node, path, resolve, depth, blockstore, options);\n  }\n\n  return yieldHamtDirectoryContent;\n};\n\nfunction listDirectory(_x, _x2, _x3, _x4, _x5, _x6) {\n  return _listDirectory.apply(this, arguments);\n}\n\nfunction _listDirectory() {\n  _listDirectory = _wrapAsyncGenerator(function* (node, path, resolve, depth, blockstore, options) {\n    const links = node.Links;\n\n    for (const link of links) {\n      const name = link.Name != null ? link.Name.substring(2) : null;\n\n      if (name) {\n        const result = yield _awaitAsyncGenerator(resolve(link.Hash, name, `${path}/${name}`, [], depth + 1, blockstore, options));\n        yield result.entry;\n      } else {\n        const block = yield _awaitAsyncGenerator(blockstore.get(link.Hash));\n        node = decode(block);\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n\n        var _iteratorError;\n\n        try {\n          for (var _iterator = _asyncIterator(listDirectory(node, path, resolve, depth, blockstore, options)), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n            const file = _value;\n            yield file;\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              yield _awaitAsyncGenerator(_iterator.return());\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      }\n    }\n  });\n  return _listDirectory.apply(this, arguments);\n}\n\nexport default hamtShardedDirectoryContent;","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Dapp/node_modules/ipfs-unixfs-exporter/esm/src/resolvers/unixfs-v1/content/hamt-sharded-directory.js"],"names":["decode","hamtShardedDirectoryContent","cid","node","unixfs","path","resolve","depth","blockstore","yieldHamtDirectoryContent","options","listDirectory","links","Links","link","name","Name","substring","result","Hash","entry","block","get","file"],"mappings":";;;AAAA,SAASA,MAAT,QAAuB,cAAvB;;AACA,MAAMC,2BAA2B,GAAG,CAACC,GAAD,EAAMC,IAAN,EAAYC,MAAZ,EAAoBC,IAApB,EAA0BC,OAA1B,EAAmCC,KAAnC,EAA0CC,UAA1C,KAAyD;AAC3F,WAASC,yBAAT,CAAmCC,OAAO,GAAG,EAA7C,EAAiD;AAC/C,WAAOC,aAAa,CAACR,IAAD,EAAOE,IAAP,EAAaC,OAAb,EAAsBC,KAAtB,EAA6BC,UAA7B,EAAyCE,OAAzC,CAApB;AACD;;AACD,SAAOD,yBAAP;AACD,CALD;;SAMgBE,a;;;;;uCAAhB,WAA8BR,IAA9B,EAAoCE,IAApC,EAA0CC,OAA1C,EAAmDC,KAAnD,EAA0DC,UAA1D,EAAsEE,OAAtE,EAA+E;AAC7E,UAAME,KAAK,GAAGT,IAAI,CAACU,KAAnB;;AACA,SAAK,MAAMC,IAAX,IAAmBF,KAAnB,EAA0B;AACxB,YAAMG,IAAI,GAAGD,IAAI,CAACE,IAAL,IAAa,IAAb,GAAoBF,IAAI,CAACE,IAAL,CAAUC,SAAV,CAAoB,CAApB,CAApB,GAA6C,IAA1D;;AACA,UAAIF,IAAJ,EAAU;AACR,cAAMG,MAAM,8BAASZ,OAAO,CAACQ,IAAI,CAACK,IAAN,EAAYJ,IAAZ,EAAmB,GAAGV,IAAM,IAAIU,IAAM,EAAtC,EAAyC,EAAzC,EAA6CR,KAAK,GAAG,CAArD,EAAwDC,UAAxD,EAAoEE,OAApE,CAAhB,CAAZ;AACA,cAAMQ,MAAM,CAACE,KAAb;AACD,OAHD,MAGO;AACL,cAAMC,KAAK,8BAASb,UAAU,CAACc,GAAX,CAAeR,IAAI,CAACK,IAApB,CAAT,CAAX;AACAhB,QAAAA,IAAI,GAAGH,MAAM,CAACqB,KAAD,CAAb;AAFK;AAAA;;AAAA;;AAAA;AAGL,8CAAyBV,aAAa,CAACR,IAAD,EAAOE,IAAP,EAAaC,OAAb,EAAsBC,KAAtB,EAA6BC,UAA7B,EAAyCE,OAAzC,CAAtC,gOAAyF;AAAA,kBAAxEa,IAAwE;AACvF,kBAAMA,IAAN;AACD;AALI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMN;AACF;AACF,G;;;;AACD,eAAetB,2BAAf","sourcesContent":["import { decode } from '@ipld/dag-pb';\nconst hamtShardedDirectoryContent = (cid, node, unixfs, path, resolve, depth, blockstore) => {\n  function yieldHamtDirectoryContent(options = {}) {\n    return listDirectory(node, path, resolve, depth, blockstore, options);\n  }\n  return yieldHamtDirectoryContent;\n};\nasync function* listDirectory(node, path, resolve, depth, blockstore, options) {\n  const links = node.Links;\n  for (const link of links) {\n    const name = link.Name != null ? link.Name.substring(2) : null;\n    if (name) {\n      const result = await resolve(link.Hash, name, `${ path }/${ name }`, [], depth + 1, blockstore, options);\n      yield result.entry;\n    } else {\n      const block = await blockstore.get(link.Hash);\n      node = decode(block);\n      for await (const file of listDirectory(node, path, resolve, depth, blockstore, options)) {\n        yield file;\n      }\n    }\n  }\n}\nexport default hamtShardedDirectoryContent;"]},"metadata":{},"sourceType":"module"}