{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/Dapp/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst Service = require('../utils/service');\n/**\n * @param {Object} config\n * @param {import('../types').NetworkService} config.network\n * @param {import('peer-id')} config.peerId\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../types').Print} config.print\n * @param {import('../types').Preload} config.preload\n * @param {import('../types').MfsPreload} config.mfsPreload\n * @param {import('./ipns')} config.ipns\n * @param {import('libp2p/src/keychain')} config.keychain\n * @param {import('../types').Options} config.options\n */\n\n\nmodule.exports = ({\n  network,\n  preload,\n  peerId,\n  keychain,\n  repo,\n  ipns,\n  mfsPreload,\n  print,\n  options\n}) => {\n  /**\n   * @type {import('ipfs-core-types/src/root').API[\"start\"]}\n   */\n  const start = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(function* () {\n      const {\n        libp2p\n      } = yield Service.start(network, {\n        peerId,\n        repo,\n        print,\n        options\n      });\n      yield Promise.all([ipns.startOnline({\n        keychain,\n        libp2p,\n        peerId,\n        repo\n      }), preload.start(), mfsPreload.start()]);\n    });\n\n    return function start() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return start;\n};","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Dapp/node_modules/ipfs-core/src/components/start.js"],"names":["Service","require","module","exports","network","preload","peerId","keychain","repo","ipns","mfsPreload","print","options","start","libp2p","Promise","all","startOnline"],"mappings":"AAAA;;;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,kBAAD,CAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,OAAX;AAAoBC,EAAAA,MAApB;AAA4BC,EAAAA,QAA5B;AAAsCC,EAAAA,IAAtC;AAA4CC,EAAAA,IAA5C;AAAkDC,EAAAA,UAAlD;AAA8DC,EAAAA,KAA9D;AAAqEC,EAAAA;AAArE,CAAD,KAAoF;AACnG;AACF;AACA;AACE,QAAMC,KAAK;AAAA,iCAAG,aAAY;AACxB,YAAM;AAAEC,QAAAA;AAAF,gBAAmBd,OAAO,CAACa,KAAR,CAAcT,OAAd,EAAuB;AAC9CE,QAAAA,MAD8C;AAE9CE,QAAAA,IAF8C;AAG9CG,QAAAA,KAH8C;AAI9CC,QAAAA;AAJ8C,OAAvB,CAAzB;AAOA,YAAMG,OAAO,CAACC,GAAR,CAAY,CAChBP,IAAI,CAACQ,WAAL,CAAiB;AAAEV,QAAAA,QAAF;AAAYO,QAAAA,MAAZ;AAAoBR,QAAAA,MAApB;AAA4BE,QAAAA;AAA5B,OAAjB,CADgB,EAEhBH,OAAO,CAACQ,KAAR,EAFgB,EAGhBH,UAAU,CAACG,KAAX,EAHgB,CAAZ,CAAN;AAKD,KAbU;;AAAA,oBAALA,KAAK;AAAA;AAAA;AAAA,KAAX;;AAeA,SAAOA,KAAP;AACD,CApBD","sourcesContent":["'use strict'\n\nconst Service = require('../utils/service')\n\n/**\n * @param {Object} config\n * @param {import('../types').NetworkService} config.network\n * @param {import('peer-id')} config.peerId\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../types').Print} config.print\n * @param {import('../types').Preload} config.preload\n * @param {import('../types').MfsPreload} config.mfsPreload\n * @param {import('./ipns')} config.ipns\n * @param {import('libp2p/src/keychain')} config.keychain\n * @param {import('../types').Options} config.options\n */\nmodule.exports = ({ network, preload, peerId, keychain, repo, ipns, mfsPreload, print, options }) => {\n  /**\n   * @type {import('ipfs-core-types/src/root').API[\"start\"]}\n   */\n  const start = async () => {\n    const { libp2p } = await Service.start(network, {\n      peerId,\n      repo,\n      print,\n      options\n    })\n\n    await Promise.all([\n      ipns.startOnline({ keychain, libp2p, peerId, repo }),\n      preload.start(),\n      mfsPreload.start()\n    ])\n  }\n\n  return start\n}\n"]},"metadata":{},"sourceType":"script"}