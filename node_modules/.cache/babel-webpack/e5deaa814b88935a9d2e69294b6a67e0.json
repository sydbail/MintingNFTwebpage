{"ast":null,"code":"'use strict'; // @ts-ignore - no types\n\nconst WS = require('libp2p-websockets'); // @ts-ignore - no types\n\n\nconst WebRTCStar = require('libp2p-webrtc-star'); // @ts-ignore - no types\n\n\nconst Multiplex = require('libp2p-mplex');\n\nconst {\n  NOISE\n} = require('@chainsafe/libp2p-noise');\n\nconst KadDHT = require('libp2p-kad-dht');\n\nconst GossipSub = require('libp2p-gossipsub');\n\nconst ipnsUtils = require('../ipns/routing/utils');\n\nmodule.exports = () => {\n  /** @type {import('libp2p').Libp2pOptions} */\n  const options = {\n    dialer: {\n      maxParallelDials: 150,\n      // 150 total parallel multiaddr dials\n      maxDialsPerPeer: 4,\n      // Allow 4 multiaddrs to be dialed per peer in parallel\n      dialTimeout: 10e3 // 10 second dial timeout per peer dial\n\n    },\n    modules: {\n      transport: [WS, WebRTCStar],\n      streamMuxer: [Multiplex],\n      connEncryption: [NOISE],\n      peerDiscovery: [],\n      dht: KadDHT,\n      pubsub: GossipSub\n    },\n    config: {\n      peerDiscovery: {\n        autoDial: true,\n        // [Bootstrap.tag] = 'bootstrap'\n        bootstrap: {\n          enabled: true\n        },\n        // [WebRTCStar.discovery.tag]\n        webRTCStar: {\n          enabled: true\n        }\n      },\n      dht: {\n        kBucketSize: 20,\n        enabled: false,\n        clientMode: true,\n        randomWalk: {\n          enabled: false\n        },\n        validators: {\n          ipns: ipnsUtils.validator\n        },\n        selectors: {\n          ipns: ipnsUtils.selector\n        }\n      },\n      pubsub: {\n        enabled: true,\n        emitSelf: true\n      },\n      nat: {\n        enabled: false\n      }\n    },\n    metrics: {\n      enabled: true\n    },\n    peerStore: {\n      persistence: true,\n      threshold: 1\n    }\n  };\n  return options;\n};","map":null,"metadata":{},"sourceType":"script"}