{"ast":null,"code":"import _asyncToGenerator from \"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./web3.service\";\n\nconst basicNFTArtifacts = require('../../../build/contracts/basicNFT.json');\n\nconst contract = require('@truffle/contract');\n\nexport class BasicContractService {\n  web3Ser;\n  basicNFT = contract(basicNFTArtifacts);\n\n  constructor(web3Ser) {\n    this.web3Ser = web3Ser; // Use our web3 service as the provider for contract\n\n    this.basicNFT.setProvider(web3Ser.web3.currentProvider);\n  } //get the balance of an account\n\n\n  getBalance(account) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      let basic = yield _this.basicNFT.deployed();\n      const value = basic.balanceOf.call(account, {\n        from: _this.web3Ser.web3.eth.defaultAccount\n      });\n      return value;\n    })();\n  } //get the owner's address of an NFT by token ID\n\n\n  getOwner(id) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      let basic = yield _this2.basicNFT.deployed();\n      const value = yield basic.ownerOf.call(id, {\n        from: _this2.web3Ser.web3.eth.defaultAccount\n      });\n      return value;\n    })();\n  } //mint a coin to an address\n\n\n  mintCoin(to) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      let basic = yield _this3.basicNFT.deployed();\n      const value = yield basic.mint(to, {\n        from: _this3.web3Ser.web3.eth.defaultAccount\n      });\n      return value;\n    })();\n  }\n\n  static ɵfac = function BasicContractService_Factory(t) {\n    return new (t || BasicContractService)(i0.ɵɵinject(i1.Web3Service));\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BasicContractService,\n    factory: BasicContractService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"sources":["/Users/sydneybailey/Internship/contract-testing/src/app/services/basiccontract.service.ts"],"names":[],"mappings":";;;;AAKA,MAAM,iBAAiB,GAAG,OAAO,CAAC,wCAAD,CAAjC;;AACA,MAAM,QAAQ,GAAG,OAAO,CAAC,mBAAD,CAAxB;;AAKA,OAAM,MAAO,oBAAP,CAA2B;AAKtB,EAAA,OAAA;AAHT,EAAA,QAAQ,GAAG,QAAQ,CAAC,iBAAD,CAAX;;AAER,EAAA,WAAA,CACS,OADT,EAC6B;AAApB,SAAA,OAAA,GAAA,OAAA,CAAoB,CAE5B;;AACA,SAAK,QAAL,CAAc,WAAd,CAA0B,OAAO,CAAC,IAAR,CAAa,eAAvC;AACA,GAT8B,CAW/B;;;AACM,EAAA,UAAU,CAAC,OAAD,EAAa;AAAA;;AAAA;AAC3B,UAAI,KAAK,SAAS,KAAI,CAAC,QAAL,CAAc,QAAd,EAAlB;AACA,YAAM,KAAK,GAAG,KAAK,CAAC,SAAN,CAAgB,IAAhB,CAAqB,OAArB,EAA8B;AAC1C,QAAA,IAAI,EAAE,KAAI,CAAC,OAAL,CAAa,IAAb,CAAkB,GAAlB,CAAsB;AADc,OAA9B,CAAd;AAEA,aAAO,KAAP;AAJ2B;AAM5B,GAlB8B,CAoB/B;;;AACM,EAAA,QAAQ,CAAC,EAAD,EAAQ;AAAA;;AAAA;AACtB,UAAI,KAAK,SAAS,MAAI,CAAC,QAAL,CAAc,QAAd,EAAlB;AACE,YAAM,KAAK,SAAS,KAAK,CAAC,OAAN,CAAc,IAAd,CAAmB,EAAnB,EAAuB;AACzC,QAAA,IAAI,EAAE,MAAI,CAAC,OAAL,CAAa,IAAb,CAAkB,GAAlB,CAAsB;AADa,OAAvB,CAApB;AAEA,aAAO,KAAP;AAJoB;AAKtB,GA1B+B,CA4B/B;;;AACK,EAAA,QAAQ,CAAC,EAAD,EAAQ;AAAA;;AAAA;AACnB,UAAI,KAAK,SAAS,MAAI,CAAC,QAAL,CAAc,QAAd,EAAlB;AACA,YAAM,KAAK,SAAS,KAAK,CAAC,IAAN,CAAW,EAAX,EAAe;AACjC,QAAA,IAAI,EAAE,MAAI,CAAC,OAAL,CAAa,IAAb,CAAkB,GAAlB,CAAsB;AADK,OAAf,CAApB;AAEA,aAAO,KAAP;AAJmB;AAKrB;;;qBAlCW,oB,EAAoB,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,WAAA,C;AAAA,G;;WAApB,oB;AAAoB,IAAA,OAAA,EAApB,oBAAoB,CAAA,I;AAAA,IAAA,UAAA,EAFnB;;AAEmB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { from } from 'rxjs';\nimport { Web3Service } from './web3.service'\n\nconst basicNFTArtifacts = require('../../../build/contracts/basicNFT.json');\nconst contract = require('@truffle/contract');\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BasicContractService {\n\n  basicNFT = contract(basicNFTArtifacts);\n\n  constructor(\n  \tprivate web3Ser: Web3Service,\n  \t) {\n  \t// Use our web3 service as the provider for contract\n  \tthis.basicNFT.setProvider(web3Ser.web3.currentProvider);\n  }\n\n  //get the balance of an account\n  async getBalance(account: any): Promise<any> {\n    let basic = await this.basicNFT.deployed();\n    const value = basic.balanceOf.call(account, {\n      from: this.web3Ser.web3.eth.defaultAccount});\n    return value;\n\n  }\n\n  //get the owner's address of an NFT by token ID\n  async getOwner(id: any): Promise<any> {\n\t\tlet basic = await this.basicNFT.deployed();\n    const value = await basic.ownerOf.call(id, {\n      from: this.web3Ser.web3.eth.defaultAccount});\n    return value;\n\t}\n\n  //mint a coin to an address\n\tasync mintCoin(to: any): Promise<any>{\n    let basic = await this.basicNFT.deployed();\n    const value = await basic.mint(to, {\n      from: this.web3Ser.web3.eth.defaultAccount});\n    return value;\n\t}\n\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}