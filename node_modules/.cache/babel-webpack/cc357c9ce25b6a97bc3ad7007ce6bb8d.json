{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n\nconst errCode = require('err-code');\n\nconst {\n  NotEnabledError\n} = require('../errors');\n\nconst get = require('dlv');\n/**\n * @param {Object} config\n * @param {import('../types').NetworkService} config.network\n * @param {import('ipfs-core-types/src/config').Config} [config.config]\n */\n\n\nmodule.exports = ({\n  network,\n  config\n}) => {\n  const isEnabled = get(config || {}, 'Pubsub.Enabled', true);\n  return {\n    subscribe: isEnabled ? withTimeoutOption(subscribe) : notEnabled,\n    unsubscribe: isEnabled ? withTimeoutOption(unsubscribe) : notEnabled,\n    publish: isEnabled ? withTimeoutOption(publish) : notEnabled,\n    ls: isEnabled ? withTimeoutOption(ls) : notEnabled,\n    peers: isEnabled ? withTimeoutOption(peers) : notEnabled\n  };\n  /**\n   * @type {import('ipfs-core-types/src/pubsub').API[\"subscribe\"]}\n   */\n\n  function subscribe(_x, _x2) {\n    return _subscribe.apply(this, arguments);\n  }\n  /**\n   * @type {import('ipfs-core-types/src/pubsub').API[\"unsubscribe\"]}\n   */\n\n\n  function _subscribe() {\n    _subscribe = _asyncToGenerator(function* (topic, handler, options = {}) {\n      const {\n        libp2p\n      } = yield network.use(options); // @ts-ignore Libp2p Pubsub is deprecating the handler, using the EventEmitter\n\n      return libp2p.pubsub.subscribe(topic, handler, options);\n    });\n    return _subscribe.apply(this, arguments);\n  }\n\n  function unsubscribe(_x3, _x4) {\n    return _unsubscribe.apply(this, arguments);\n  }\n  /**\n   * @type {import('ipfs-core-types/src/pubsub').API[\"publish\"]}\n   */\n\n\n  function _unsubscribe() {\n    _unsubscribe = _asyncToGenerator(function* (topic, handler, options = {}) {\n      const {\n        libp2p\n      } = yield network.use(options); // @ts-ignore Libp2p Pubsub is deprecating the handler, using the EventEmitter\n\n      libp2p.pubsub.unsubscribe(topic, handler, options);\n    });\n    return _unsubscribe.apply(this, arguments);\n  }\n\n  function publish(_x5, _x6) {\n    return _publish.apply(this, arguments);\n  }\n  /**\n   * @type {import('ipfs-core-types/src/pubsub').API[\"ls\"]}\n   */\n\n\n  function _publish() {\n    _publish = _asyncToGenerator(function* (topic, data, options = {}) {\n      const {\n        libp2p\n      } = yield network.use(options);\n\n      if (!data) {\n        throw errCode(new Error('argument \"data\" is required'), 'ERR_ARG_REQUIRED');\n      }\n\n      yield libp2p.pubsub.publish(topic, data);\n    });\n    return _publish.apply(this, arguments);\n  }\n\n  function ls() {\n    return _ls.apply(this, arguments);\n  }\n  /**\n   * @type {import('ipfs-core-types/src/pubsub').API[\"peers\"]}\n   */\n\n\n  function _ls() {\n    _ls = _asyncToGenerator(function* (options = {}) {\n      const {\n        libp2p\n      } = yield network.use(options);\n      return libp2p.pubsub.getTopics();\n    });\n    return _ls.apply(this, arguments);\n  }\n\n  function peers(_x7) {\n    return _peers.apply(this, arguments);\n  }\n\n  function _peers() {\n    _peers = _asyncToGenerator(function* (topic, options = {}) {\n      const {\n        libp2p\n      } = yield network.use(options);\n      return libp2p.pubsub.getSubscribers(topic);\n    });\n    return _peers.apply(this, arguments);\n  }\n};\n\nconst notEnabled = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* () {\n    // eslint-disable-line require-await\n    throw new NotEnabledError('pubsub not enabled');\n  });\n\n  return function notEnabled() {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Demo/node_modules/ipfs-core/src/components/pubsub.js"],"names":["withTimeoutOption","require","errCode","NotEnabledError","get","module","exports","network","config","isEnabled","subscribe","notEnabled","unsubscribe","publish","ls","peers","topic","handler","options","libp2p","use","pubsub","data","Error","getTopics","getSubscribers"],"mappings":"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","sourcesContent":["'use strict'\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\nconst errCode = require('err-code')\nconst { NotEnabledError } = require('../errors')\nconst get = require('dlv')\n\n/**\n * @param {Object} config\n * @param {import('../types').NetworkService} config.network\n * @param {import('ipfs-core-types/src/config').Config} [config.config]\n */\nmodule.exports = ({ network, config }) => {\n  const isEnabled = get(config || {}, 'Pubsub.Enabled', true)\n\n  return {\n    subscribe: isEnabled ? withTimeoutOption(subscribe) : notEnabled,\n    unsubscribe: isEnabled ? withTimeoutOption(unsubscribe) : notEnabled,\n    publish: isEnabled ? withTimeoutOption(publish) : notEnabled,\n    ls: isEnabled ? withTimeoutOption(ls) : notEnabled,\n    peers: isEnabled ? withTimeoutOption(peers) : notEnabled\n  }\n\n  /**\n   * @type {import('ipfs-core-types/src/pubsub').API[\"subscribe\"]}\n   */\n  async function subscribe (topic, handler, options = {}) {\n    const { libp2p } = await network.use(options)\n    // @ts-ignore Libp2p Pubsub is deprecating the handler, using the EventEmitter\n    return libp2p.pubsub.subscribe(topic, handler, options)\n  }\n\n  /**\n   * @type {import('ipfs-core-types/src/pubsub').API[\"unsubscribe\"]}\n   */\n  async function unsubscribe (topic, handler, options = {}) {\n    const { libp2p } = await network.use(options)\n    // @ts-ignore Libp2p Pubsub is deprecating the handler, using the EventEmitter\n    libp2p.pubsub.unsubscribe(topic, handler, options)\n  }\n\n  /**\n   * @type {import('ipfs-core-types/src/pubsub').API[\"publish\"]}\n   */\n  async function publish (topic, data, options = {}) {\n    const { libp2p } = await network.use(options)\n    if (!data) {\n      throw errCode(new Error('argument \"data\" is required'), 'ERR_ARG_REQUIRED')\n    }\n    await libp2p.pubsub.publish(topic, data)\n  }\n\n  /**\n   * @type {import('ipfs-core-types/src/pubsub').API[\"ls\"]}\n   */\n  async function ls (options = {}) {\n    const { libp2p } = await network.use(options)\n    return libp2p.pubsub.getTopics()\n  }\n\n  /**\n   * @type {import('ipfs-core-types/src/pubsub').API[\"peers\"]}\n   */\n  async function peers (topic, options = {}) {\n    const { libp2p } = await network.use(options)\n    return libp2p.pubsub.getSubscribers(topic)\n  }\n}\n\nconst notEnabled = async () => { // eslint-disable-line require-await\n  throw new NotEnabledError('pubsub not enabled')\n}\n"]},"metadata":{},"sourceType":"script"}