{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst log = require('debug')('mss:handle');\n\nconst BufferList = require('bl/BufferList');\n\nconst multistream = require('./multistream');\n\nconst handshake = require('it-handshake');\n\nconst {\n  PROTOCOL_ID\n} = require('./constants');\n\nmodule.exports = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (stream, protocols) {\n    protocols = Array.isArray(protocols) ? protocols : [protocols];\n    const {\n      writer,\n      reader,\n      rest,\n      stream: shakeStream\n    } = handshake(stream);\n\n    while (true) {\n      const protocol = (yield multistream.read(reader)).toString();\n      log('read \"%s\"', protocol);\n\n      if (protocol === PROTOCOL_ID) {\n        log('respond with \"%s\" for \"%s\"', PROTOCOL_ID, protocol);\n        multistream.write(writer, PROTOCOL_ID);\n        continue;\n      }\n\n      if (protocols.includes(protocol)) {\n        multistream.write(writer, protocol);\n        log('respond with \"%s\" for \"%s\"', protocol, protocol);\n        rest();\n        return {\n          stream: shakeStream,\n          protocol\n        };\n      }\n\n      if (protocol === 'ls') {\n        // <varint-msg-len><varint-proto-name-len><proto-name>\\n<varint-proto-name-len><proto-name>\\n\\n\n        multistream.write(writer, new BufferList(protocols.map(p => multistream.encode(p))));\n        log('respond with \"%s\" for %s', protocols, protocol);\n        continue;\n      }\n\n      multistream.write(writer, 'na');\n      log('respond with \"na\" for \"%s\"', protocol);\n    }\n  });\n\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":null,"metadata":{},"sourceType":"script"}