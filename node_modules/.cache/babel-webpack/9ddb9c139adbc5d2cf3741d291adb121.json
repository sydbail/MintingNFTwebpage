{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n\nconst toCidAndPath = require('ipfs-core-utils/src/to-cid-and-path');\n\nconst {\n  resolvePath\n} = require('../../utils');\n/**\n * @param {Object} config\n * @param {import('ipfs-core-utils/src/multicodecs')} config.codecs\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n */\n\n\nmodule.exports = ({\n  repo,\n  codecs,\n  preload\n}) => {\n  /**\n   * @type {import('ipfs-core-types/src/dag').API[\"resolve\"]}\n   */\n  function dagResolve(_x) {\n    return _dagResolve.apply(this, arguments);\n  }\n\n  function _dagResolve() {\n    _dagResolve = _asyncToGenerator(function* (ipfsPath, options = {}) {\n      const {\n        cid\n      } = toCidAndPath(ipfsPath);\n\n      if (options.preload !== false) {\n        preload(cid);\n      }\n\n      return resolvePath(repo, codecs, ipfsPath, options);\n    });\n    return _dagResolve.apply(this, arguments);\n  }\n\n  return withTimeoutOption(dagResolve);\n};","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Demo/node_modules/ipfs-core/src/components/dag/resolve.js"],"names":["withTimeoutOption","require","toCidAndPath","resolvePath","module","exports","repo","codecs","preload","dagResolve","ipfsPath","options","cid"],"mappings":"AAAA;;;;AAEA,MAAMA,iBAAiB,GAAGC,OAAO,CAAC,yCAAD,CAAjC;;AACA,MAAMC,YAAY,GAAGD,OAAO,CAAC,qCAAD,CAA5B;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAkBF,OAAO,CAAC,aAAD,CAA/B;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACAG,MAAM,CAACC,OAAP,GAAiB,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,MAAR;AAAgBC,EAAAA;AAAhB,CAAD,KAA+B;AAC9C;AACF;AACA;AAHgD,WAI/BC,UAJ+B;AAAA;AAAA;;AAAA;AAAA,oCAI9C,WAA2BC,QAA3B,EAAqCC,OAAO,GAAG,EAA/C,EAAmD;AACjD,YAAM;AACJC,QAAAA;AADI,UAEFV,YAAY,CAACQ,QAAD,CAFhB;;AAIA,UAAIC,OAAO,CAACH,OAAR,KAAoB,KAAxB,EAA+B;AAC7BA,QAAAA,OAAO,CAACI,GAAD,CAAP;AACD;;AAED,aAAOT,WAAW,CAACG,IAAD,EAAOC,MAAP,EAAeG,QAAf,EAAyBC,OAAzB,CAAlB;AACD,KAd6C;AAAA;AAAA;;AAgB9C,SAAOX,iBAAiB,CAACS,UAAD,CAAxB;AACD,CAjBD","sourcesContent":["'use strict'\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\nconst toCidAndPath = require('ipfs-core-utils/src/to-cid-and-path')\nconst { resolvePath } = require('../../utils')\n\n/**\n * @param {Object} config\n * @param {import('ipfs-core-utils/src/multicodecs')} config.codecs\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n */\nmodule.exports = ({ repo, codecs, preload }) => {\n  /**\n   * @type {import('ipfs-core-types/src/dag').API[\"resolve\"]}\n   */\n  async function dagResolve (ipfsPath, options = {}) {\n    const {\n      cid\n    } = toCidAndPath(ipfsPath)\n\n    if (options.preload !== false) {\n      preload(cid)\n    }\n\n    return resolvePath(repo, codecs, ipfsPath, options)\n  }\n\n  return withTimeoutOption(dagResolve)\n}\n"]},"metadata":{},"sourceType":"script"}