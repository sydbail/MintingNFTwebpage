{"ast":null,"code":"import _awaitAsyncGenerator from \"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator\";\nimport _wrapAsyncGenerator from \"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator\";\nimport _asyncIterator from \"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/esm/asyncIterator\";\nimport BufferList from 'bl/BufferList.js';\n\nfunction fixedSizeChunker(_x, _x2) {\n  return _fixedSizeChunker.apply(this, arguments);\n}\n\nfunction _fixedSizeChunker() {\n  _fixedSizeChunker = _wrapAsyncGenerator(function* (source, options) {\n    let bl = new BufferList();\n    let currentLength = 0;\n    let emitted = false;\n    const maxChunkSize = options.maxChunkSize;\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n\n    var _iteratorError;\n\n    try {\n      for (var _iterator = _asyncIterator(source), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n        const buffer = _value;\n        bl.append(buffer);\n        currentLength += buffer.length;\n\n        while (currentLength >= maxChunkSize) {\n          yield bl.slice(0, maxChunkSize);\n          emitted = true;\n\n          if (maxChunkSize === bl.length) {\n            bl = new BufferList();\n            currentLength = 0;\n          } else {\n            const newBl = new BufferList();\n            newBl.append(bl.shallowSlice(maxChunkSize));\n            bl = newBl;\n            currentLength -= maxChunkSize;\n          }\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          yield _awaitAsyncGenerator(_iterator.return());\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    if (!emitted || currentLength) {\n      yield bl.slice(0, currentLength);\n    }\n  });\n  return _fixedSizeChunker.apply(this, arguments);\n}\n\nexport default fixedSizeChunker;","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Demo/node_modules/ipfs-unixfs-importer/esm/src/chunker/fixed-size.js"],"names":["BufferList","fixedSizeChunker","source","options","bl","currentLength","emitted","maxChunkSize","buffer","append","length","slice","newBl","shallowSlice"],"mappings":";;;AAAA,OAAOA,UAAP,MAAuB,kBAAvB;;SACgBC,gB;;;;;0CAAhB,WAAiCC,MAAjC,EAAyCC,OAAzC,EAAkD;AAChD,QAAIC,EAAE,GAAG,IAAIJ,UAAJ,EAAT;AACA,QAAIK,aAAa,GAAG,CAApB;AACA,QAAIC,OAAO,GAAG,KAAd;AACA,UAAMC,YAAY,GAAGJ,OAAO,CAACI,YAA7B;AAJgD;AAAA;;AAAA;;AAAA;AAKhD,0CAA2BL,MAA3B,gOAAmC;AAAA,cAAlBM,MAAkB;AACjCJ,QAAAA,EAAE,CAACK,MAAH,CAAUD,MAAV;AACAH,QAAAA,aAAa,IAAIG,MAAM,CAACE,MAAxB;;AACA,eAAOL,aAAa,IAAIE,YAAxB,EAAsC;AACpC,gBAAMH,EAAE,CAACO,KAAH,CAAS,CAAT,EAAYJ,YAAZ,CAAN;AACAD,UAAAA,OAAO,GAAG,IAAV;;AACA,cAAIC,YAAY,KAAKH,EAAE,CAACM,MAAxB,EAAgC;AAC9BN,YAAAA,EAAE,GAAG,IAAIJ,UAAJ,EAAL;AACAK,YAAAA,aAAa,GAAG,CAAhB;AACD,WAHD,MAGO;AACL,kBAAMO,KAAK,GAAG,IAAIZ,UAAJ,EAAd;AACAY,YAAAA,KAAK,CAACH,MAAN,CAAaL,EAAE,CAACS,YAAH,CAAgBN,YAAhB,CAAb;AACAH,YAAAA,EAAE,GAAGQ,KAAL;AACAP,YAAAA,aAAa,IAAIE,YAAjB;AACD;AACF;AACF;AArB+C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAsBhD,QAAI,CAACD,OAAD,IAAYD,aAAhB,EAA+B;AAC7B,YAAMD,EAAE,CAACO,KAAH,CAAS,CAAT,EAAYN,aAAZ,CAAN;AACD;AACF,G;;;;AACD,eAAeJ,gBAAf","sourcesContent":["import BufferList from 'bl/BufferList.js';\nasync function* fixedSizeChunker(source, options) {\n  let bl = new BufferList();\n  let currentLength = 0;\n  let emitted = false;\n  const maxChunkSize = options.maxChunkSize;\n  for await (const buffer of source) {\n    bl.append(buffer);\n    currentLength += buffer.length;\n    while (currentLength >= maxChunkSize) {\n      yield bl.slice(0, maxChunkSize);\n      emitted = true;\n      if (maxChunkSize === bl.length) {\n        bl = new BufferList();\n        currentLength = 0;\n      } else {\n        const newBl = new BufferList();\n        newBl.append(bl.shallowSlice(maxChunkSize));\n        bl = newBl;\n        currentLength -= maxChunkSize;\n      }\n    }\n  }\n  if (!emitted || currentLength) {\n    yield bl.slice(0, currentLength);\n  }\n}\nexport default fixedSizeChunker;"]},"metadata":{},"sourceType":"module"}