{"ast":null,"code":"'use strict';\n\nvar _awaitAsyncGenerator = require(\"/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\").default;\n\nvar _wrapAsyncGenerator = require(\"/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nconst {\n  Buffer\n} = require('buffer');\n\nconst BufferList = require('bl/BufferList');\n\nmodule.exports = /*#__PURE__*/function () {\n  var _ref = _wrapAsyncGenerator(function* (source) {\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n\n    var _iteratorError;\n\n    try {\n      for (var _iterator = _asyncIterator(source), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n        const b = _value;\n\n        if (Buffer.isBuffer(b)) {\n          yield b;\n        } else if (BufferList.isBufferList(b)) {\n          yield b.slice();\n        } else {\n          yield Buffer.from(b);\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          yield _awaitAsyncGenerator(_iterator.return());\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  });\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nmodule.exports.toBuffer = module.exports;\n\nmodule.exports.toList = /*#__PURE__*/function () {\n  var _ref2 = _wrapAsyncGenerator(function* (source) {\n    var _iteratorNormalCompletion2 = true;\n    var _didIteratorError2 = false;\n\n    var _iteratorError2;\n\n    try {\n      for (var _iterator2 = _asyncIterator(source), _step2, _value2; _step2 = yield _awaitAsyncGenerator(_iterator2.next()), _iteratorNormalCompletion2 = _step2.done, _value2 = yield _awaitAsyncGenerator(_step2.value), !_iteratorNormalCompletion2; _iteratorNormalCompletion2 = true) {\n        const b = _value2;\n\n        if (Buffer.isBuffer(b)) {\n          yield new BufferList().append(b);\n        } else if (BufferList.isBufferList(b)) {\n          yield b;\n        } else {\n          yield new BufferList().append(Buffer.from(b));\n        }\n      }\n    } catch (err) {\n      _didIteratorError2 = true;\n      _iteratorError2 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n          yield _awaitAsyncGenerator(_iterator2.return());\n        }\n      } finally {\n        if (_didIteratorError2) {\n          throw _iteratorError2;\n        }\n      }\n    }\n  });\n\n  return function (_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/it-buffer/index.js"],"names":["Buffer","require","BufferList","module","exports","source","b","isBuffer","isBufferList","slice","from","toBuffer","toList","append"],"mappings":"AAAA;;;;;;;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAaC,OAAO,CAAC,QAAD,CAA1B;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,eAAD,CAA1B;;AAEAE,MAAM,CAACC,OAAP;AAAA,iCAAiB,WAAkBC,MAAlB,EAA0B;AAAA;AAAA;;AAAA;;AAAA;AACzC,0CAAsBA,MAAtB,gOAA8B;AAAA,cAAbC,CAAa;;AAC5B,YAAIN,MAAM,CAACO,QAAP,CAAgBD,CAAhB,CAAJ,EAAwB;AACtB,gBAAMA,CAAN;AACD,SAFD,MAEO,IAAIJ,UAAU,CAACM,YAAX,CAAwBF,CAAxB,CAAJ,EAAgC;AACrC,gBAAMA,CAAC,CAACG,KAAF,EAAN;AACD,SAFM,MAEA;AACL,gBAAMT,MAAM,CAACU,IAAP,CAAYJ,CAAZ,CAAN;AACD;AACF;AATwC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAU1C,GAVD;;AAAA;AAAA;AAAA;AAAA;;AAYAH,MAAM,CAACC,OAAP,CAAeO,QAAf,GAA0BR,MAAM,CAACC,OAAjC;;AAEAD,MAAM,CAACC,OAAP,CAAeQ,MAAf;AAAA,kCAAwB,WAAkBP,MAAlB,EAA0B;AAAA;AAAA;;AAAA;;AAAA;AAChD,2CAAsBA,MAAtB,0OAA8B;AAAA,cAAbC,CAAa;;AAC5B,YAAIN,MAAM,CAACO,QAAP,CAAgBD,CAAhB,CAAJ,EAAwB;AACtB,gBAAM,IAAIJ,UAAJ,GAAiBW,MAAjB,CAAwBP,CAAxB,CAAN;AACD,SAFD,MAEO,IAAIJ,UAAU,CAACM,YAAX,CAAwBF,CAAxB,CAAJ,EAAgC;AACrC,gBAAMA,CAAN;AACD,SAFM,MAEA;AACL,gBAAM,IAAIJ,UAAJ,GAAiBW,MAAjB,CAAwBb,MAAM,CAACU,IAAP,CAAYJ,CAAZ,CAAxB,CAAN;AACD;AACF;AAT+C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUjD,GAVD;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["'use strict'\n\nconst { Buffer } = require('buffer')\nconst BufferList = require('bl/BufferList')\n\nmodule.exports = async function * (source) {\n  for await (const b of source) {\n    if (Buffer.isBuffer(b)) {\n      yield b\n    } else if (BufferList.isBufferList(b)) {\n      yield b.slice()\n    } else {\n      yield Buffer.from(b)\n    }\n  }\n}\n\nmodule.exports.toBuffer = module.exports\n\nmodule.exports.toList = async function * (source) {\n  for await (const b of source) {\n    if (Buffer.isBuffer(b)) {\n      yield new BufferList().append(b)\n    } else if (BufferList.isBufferList(b)) {\n      yield b\n    } else {\n      yield new BufferList().append(Buffer.from(b))\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}