{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/web3.service\";\nimport * as i2 from \"../services/contracts.service\";\nimport * as i3 from \"@angular/forms\";\nexport class MintComponent {\n  _ngZone;\n  web3Service;\n  contractService;\n  window;\n  title = 'NFT Minter'; //metamask info\n\n  account;\n  accounts;\n  balance;\n  tokenID;\n  ownerAddr;\n  recipientAddress;\n  status; //ngOnInit(): void {}\n\n  constructor(_ngZone, web3Service, contractService) {\n    this._ngZone = _ngZone;\n    this.web3Service = web3Service;\n    this.contractService = contractService;\n    this.onReady();\n  }\n\n  onReady = () => {\n    // Get the initial account balance so it can be displayed.\n    this.web3Service.getAccounts().subscribe(accs => {\n      this.accounts = accs;\n      this.account = this.accounts[0];\n      console.log(\"Your account is: \", this.account); // This is run from window:load and ZoneJS is not aware of it we\n      // need to use _ngZone.run() so that the UI updates on promise resolution\n      //  this._ngZone.run(() =>\n      //    this.refreshBalance()\n      //  );\n    }, err => alert(err));\n  };\n\n  ngOnInit() {}\n\n  refreshBalance = () => {\n    this.contractService.getBalance(this.account).subscribe(value => {\n      this.balance = value;\n    }, e => {\n      this.setStatus('Error getting balance; see log.');\n    });\n  };\n  setStatus = message => {\n    this.status = message;\n  };\n  getOwner = () => {\n    this.contractService.getOwner(this.tokenID).subscribe(value => {\n      this.ownerAddr = value;\n      console.log(\"owner is \", this.ownerAddr);\n    }, e => {\n      this.setStatus('Error getting Owner; see log');\n    });\n  };\n  mintCoin = () => {\n    this.setStatus('Initiating transaction... (please wait)');\n    console.log(this.account);\n    console.log(\"acct input is:\", typeof this.account);\n    this.contractService.mintCoin(this.account).subscribe(() => {\n      this.setStatus('Transaction complete!');\n      this.refreshBalance();\n    }, e => this.setStatus('Error sending coin; see log.'));\n  };\n  static ɵfac = function MintComponent_Factory(t) {\n    return new (t || MintComponent)(i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i1.Web3Service), i0.ɵɵdirectiveInject(i2.ContractsService));\n  };\n  static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MintComponent,\n    selectors: [[\"app-mint\"]],\n    decls: 23,\n    vars: 2,\n    consts: [[1, \"minter\"], [1, \"label\"], [1, \"control\"], [\"name\", \"recipientAddress\", \"type\", \"text\", \"placeholder\", \"0x93e66d9baea28c17d9fc393b53e3fbdd76899dae\", \"name\", \"recipientAddress\", \"required\", \"\", 1, \"input\", 3, \"ngModel\", \"ngModelChange\"], [\"recipientAddressModel\", \"ngModel\"], [3, \"click\"], [\"name\", \"tokenID\", \"type\", \"text\", \"placeholder\", \"1\", \"name\", \"tokenID\", \"required\", \"\", 1, \"input\", 3, \"ngModel\", \"ngModelChange\"], [\"tokenIDModel\", \"ngModel\"]],\n    template: function MintComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"h1\");\n        i0.ɵɵtext(2, \" Mint a Coint \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"label\", 1);\n        i0.ɵɵtext(4, \"To Address\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"p\", 2);\n        i0.ɵɵelementStart(6, \"input\", 3, 4);\n        i0.ɵɵlistener(\"ngModelChange\", function MintComponent_Template_input_ngModelChange_6_listener($event) {\n          return ctx.recipientAddress = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"button\", 5);\n        i0.ɵɵlistener(\"click\", function MintComponent_Template_button_click_8_listener() {\n          return ctx.mintCoin();\n        });\n        i0.ɵɵtext(9, \" Mint \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"div\", 0);\n        i0.ɵɵelementStart(11, \"h1\");\n        i0.ɵɵtext(12, \" Check Owner \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"label\", 1);\n        i0.ɵɵtext(14, \"Token ID\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"p\", 2);\n        i0.ɵɵelementStart(16, \"input\", 6, 7);\n        i0.ɵɵlistener(\"ngModelChange\", function MintComponent_Template_input_ngModelChange_16_listener($event) {\n          return ctx.tokenID = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"button\", 5);\n        i0.ɵɵlistener(\"click\", function MintComponent_Template_button_click_18_listener() {\n          return ctx.getOwner();\n        });\n        i0.ɵɵtext(19, \" Check \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"strong\");\n        i0.ɵɵtext(21, \"Hint:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(22, \" open the browser developer console to view any errors and warnings.\\n\");\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngModel\", ctx.recipientAddress);\n        i0.ɵɵadvance(10);\n        i0.ɵɵproperty(\"ngModel\", ctx.tokenID);\n      }\n    },\n    directives: [i3.DefaultValueAccessor, i3.RequiredValidator, i3.NgControlStatus, i3.NgModel],\n    styles: [\"\"]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}