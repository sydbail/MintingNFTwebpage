{"ast":null,"code":"'use strict';\n\nconst WantlistEntry = require('../wantlist').Entry;\n\nconst {\n  base58btc\n} = require('multiformats/bases/base58');\n\nmodule.exports = class BitswapMessageEntry {\n  /**\n   * @param {import('multiformats').CID} cid\n   * @param {number} priority\n   * @param {import('./message').Message.Wantlist.WantType} wantType\n   * @param {boolean} [cancel]\n   * @param {boolean} [sendDontHave]\n   */\n  constructor(cid, priority, wantType, cancel, sendDontHave) {\n    this.entry = new WantlistEntry(cid, priority, wantType);\n    this.cancel = Boolean(cancel);\n    this.sendDontHave = Boolean(sendDontHave);\n  }\n\n  get cid() {\n    return this.entry.cid;\n  }\n\n  set cid(cid) {\n    this.entry.cid = cid;\n  }\n\n  get priority() {\n    return this.entry.priority;\n  }\n\n  set priority(val) {\n    this.entry.priority = val;\n  }\n\n  get wantType() {\n    return this.entry.wantType;\n  }\n\n  set wantType(val) {\n    this.entry.wantType = val;\n  }\n\n  get [Symbol.toStringTag]() {\n    const cidStr = this.cid.toString(base58btc);\n    return `BitswapMessageEntry ${cidStr} <cancel: ${this.cancel}, priority: ${this.priority}>`;\n  }\n  /**\n   * @param {this} other\n   */\n\n\n  equals(other) {\n    return this.cancel === other.cancel && this.sendDontHave === other.sendDontHave && this.wantType === other.wantType && this.entry.equals(other.entry);\n  }\n\n};","map":null,"metadata":{},"sourceType":"script"}