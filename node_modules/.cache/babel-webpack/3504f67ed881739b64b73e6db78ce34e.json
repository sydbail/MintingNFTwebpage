{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nvar _awaitAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\").default;\n\nvar _wrapAsyncGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nconst abortable = require('abortable-iterator');\n\nconst toIterable = require('stream-to-it');\n\nconst {\n  CLOSE_TIMEOUT\n} = require('./constants');\n\nconst toMultiaddr = require('libp2p-utils/src/ip-port-to-multiaddr');\n\nconst debug = require('debug');\n\nconst log = debug('libp2p:webrtc-star:socket');\nlog.error = debug('libp2p:webrtc-star:socket:error');\n\nconst toWebrtcMultiaddr = (address, port) => {\n  if (!address || !port) return undefined;\n\n  try {\n    return toMultiaddr(address, port);\n  } catch (err) {\n    log.error(err); // Account for mdns hostnames, just make it a local ip for now\n\n    return toMultiaddr('0.0.0.0', port);\n  }\n}; // Convert a socket into a MultiaddrConnection\n// https://github.com/libp2p/js-libp2p-interfaces/tree/master/src/transport#multiaddrconnection\n\n\nmodule.exports = (socket, options = {}) => {\n  const {\n    sink,\n    source\n  } = toIterable.duplex(socket); // If the remote address was passed, use it - it may have the peer ID encapsulated\n\n  const remoteAddr = options.remoteAddr || toWebrtcMultiaddr(socket.remoteAddress, socket.remotePort);\n  const localAddr = toWebrtcMultiaddr(socket.localAddress, socket.localPort);\n  const maConn = {\n    sink(source) {\n      return _asyncToGenerator(function* () {\n        if (options.signal) {\n          source = abortable(source, options.signal);\n        }\n\n        try {\n          yield sink(_wrapAsyncGenerator(function* () {\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n\n            var _iteratorError;\n\n            try {\n              for (var _iterator = _asyncIterator(source), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n                const chunk = _value;\n                // Convert BufferList to Buffer\n                yield chunk instanceof Uint8Array ? chunk : chunk.slice();\n              }\n            } catch (err) {\n              _didIteratorError = true;\n              _iteratorError = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                  yield _awaitAsyncGenerator(_iterator.return());\n                }\n              } finally {\n                if (_didIteratorError) {\n                  throw _iteratorError;\n                }\n              }\n            }\n          })());\n        } catch (err) {\n          // If aborted we can safely ignore\n          if (err.type !== 'aborted') {\n            // If the source errored the socket will already have been destroyed by\n            // toIterable.duplex(). If the socket errored it will already be\n            // destroyed. There's nothing to do here except log the error & return.\n            log.error(err);\n          }\n        }\n      })();\n    },\n\n    source: options.signal ? abortable(source, options.signal) : source,\n    conn: socket,\n    localAddr,\n    remoteAddr,\n    timeline: {\n      open: Date.now()\n    },\n\n    close() {\n      if (socket.destroyed) return;\n      return new Promise((resolve, reject) => {\n        const start = Date.now(); // Attempt to end the socket. If it takes longer to close than the\n        // timeout, destroy it manually.\n\n        const timeout = setTimeout(() => {\n          if (maConn.remoteAddr) {\n            const {\n              host,\n              port\n            } = maConn.remoteAddr.toOptions();\n            log('timeout closing socket to %s:%s after %dms, destroying it manually', host, port, Date.now() - start);\n          }\n\n          if (!socket.destroyed) {\n            socket.destroy();\n          }\n        }, CLOSE_TIMEOUT);\n        socket.once('close', () => {\n          resolve();\n        });\n        socket.end(err => {\n          clearTimeout(timeout);\n          maConn.timeline.close = Date.now();\n          if (err) return reject(err);\n        });\n      });\n    }\n\n  };\n  socket.once('close', () => {\n    // In instances where `close` was not explicitly called,\n    // such as an iterable stream ending, ensure we have set the close\n    // timeline\n    if (!maConn.timeline.close) {\n      maConn.timeline.close = Date.now();\n    }\n  });\n  return maConn;\n};","map":null,"metadata":{},"sourceType":"script"}