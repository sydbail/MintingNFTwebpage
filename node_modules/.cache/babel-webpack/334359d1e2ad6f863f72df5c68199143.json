{"ast":null,"code":"import _asyncToGenerator from \"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { Observable } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./web3.service\";\n\nconst basicNFTArtifacts = require('../../../build/contracts/basicNFT.json');\n\nconst contract = require('@truffle/contract');\n\nexport class BasicContractService {\n  web3Ser;\n  basicNFT = contract(basicNFTArtifacts);\n\n  constructor(web3Ser) {\n    this.web3Ser = web3Ser; // Bootstrap the MetaCoin abstraction for Use\n\n    this.basicNFT.setProvider(web3Ser.web3.currentProvider);\n  }\n\n  getBalance(account) {\n    let basic;\n    return Observable.create(observer => {\n      this.basicNFT.deployed().then(instance => {\n        basic = instance; //we use call here so the call doesn't try and write, making it free\n\n        return basic.balanceOf.call(account, {\n          from: account\n        });\n      }).then(value => {\n        observer.next(value);\n        observer.complete();\n      }).catch(e => {\n        console.log(e);\n        observer.error(e);\n      });\n    });\n  }\n\n  getOwner(id) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      let basic = yield _this.basicNFT.deployed();\n      const value = yield basic.ownerOf.call(id, {\n        from: _this.web3Ser.web3.eth.defaultAccount\n      });\n      return value;\n      /*\t\treturn Observable.create((observer: any) => {\n                  this.basicNFT\n                      .deployed()\n                      .then((instance: any) => {\n                          basic = instance;\n                          //we use call here so the call doesn't try and write, making it free\n                          return basic.ownerOf.call(id, {\n                              from: this.web3Ser.web3.eth.defaultAccount\n                          });\n                      })\n                      .then((value: any) => {\n                          observer.next(value)\n                          observer.complete()\n                      })\n                      .catch((e: any) => {\n                          console.log(e);\n                          observer.error(e)\n                      });\n              }) */\n    })();\n  }\n\n  mintCoin(to) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      let basic = yield _this2.basicNFT.deployed();\n      const value = yield basic.mint(to, {\n        from: _this2.web3Ser.web3.eth.defaultAccount\n      });\n      return value;\n    })();\n  }\n\n  static ɵfac = function BasicContractService_Factory(t) {\n    return new (t || BasicContractService)(i0.ɵɵinject(i1.Web3Service));\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BasicContractService,\n    factory: BasicContractService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"sources":["/Users/sydneybailey/Internship/contract-testing/src/app/services/basiccontract.service.ts"],"names":[],"mappings":";AACA,SAAS,UAAT,QAA2B,MAA3B;;;;AAIA,MAAM,iBAAiB,GAAG,OAAO,CAAC,wCAAD,CAAjC;;AACA,MAAM,QAAQ,GAAG,OAAO,CAAC,mBAAD,CAAxB;;AAKA,OAAM,MAAO,oBAAP,CAA2B;AAKtB,EAAA,OAAA;AAHT,EAAA,QAAQ,GAAG,QAAQ,CAAC,iBAAD,CAAX;;AAER,EAAA,WAAA,CACS,OADT,EAC6B;AAApB,SAAA,OAAA,GAAA,OAAA,CAAoB,CAE5B;;AACA,SAAK,QAAL,CAAc,WAAd,CAA0B,OAAO,CAAC,IAAR,CAAa,eAAvC;AACA;;AAED,EAAA,UAAU,CAAC,OAAD,EAAa;AACvB,QAAI,KAAJ;AAEA,WAAO,UAAU,CAAC,MAAX,CAAmB,QAAD,IAAkB;AACzC,WAAK,QAAL,CACG,QADH,GAEG,IAFH,CAES,QAAD,IAAkB;AACtB,QAAA,KAAK,GAAG,QAAR,CADsB,CAEtB;;AACA,eAAO,KAAK,CAAC,SAAN,CAAgB,IAAhB,CAAqB,OAArB,EAA8B;AACnC,UAAA,IAAI,EAAE;AAD6B,SAA9B,CAAP;AAGD,OARH,EASG,IATH,CASS,KAAD,IAAe;AACnB,QAAA,QAAQ,CAAC,IAAT,CAAc,KAAd;AACA,QAAA,QAAQ,CAAC,QAAT;AACD,OAZH,EAaG,KAbH,CAaU,CAAD,IAAW;AAChB,QAAA,OAAO,CAAC,GAAR,CAAY,CAAZ;AACA,QAAA,QAAQ,CAAC,KAAT,CAAe,CAAf;AACD,OAhBH;AAiBC,KAlBI,CAAP;AAmBC;;AAEK,EAAA,QAAQ,CAAC,EAAD,EAAQ;AAAA;;AAAA;AACtB,UAAI,KAAK,SAAS,KAAI,CAAC,QAAL,CAAc,QAAd,EAAlB;AACE,YAAM,KAAK,SAAS,KAAK,CAAC,OAAN,CAAc,IAAd,CAAmB,EAAnB,EAAuB;AACzC,QAAA,IAAI,EAAE,KAAI,CAAC,OAAL,CAAa,IAAb,CAAkB,GAAlB,CAAsB;AADa,OAAvB,CAApB;AAEA,aAAO,KAAP;AAEJ;;;;;;;;;;;;;;;;;;AAkBO;AAxBiB;AAyBtB;;AAEK,EAAA,QAAQ,CAAC,EAAD,EAAQ;AAAA;;AAAA;AACnB,UAAI,KAAK,SAAS,MAAI,CAAC,QAAL,CAAc,QAAd,EAAlB;AACA,YAAM,KAAK,SAAS,KAAK,CAAC,IAAN,CAAW,EAAX,EAAe;AACjC,QAAA,IAAI,EAAE,MAAI,CAAC,OAAL,CAAa,IAAb,CAAkB,GAAlB,CAAsB;AADK,OAAf,CAApB;AAEA,aAAO,KAAP;AAJmB;AAKrB;;;qBAnEW,oB,EAAoB,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,WAAA,C;AAAA,G;;WAApB,oB;AAAoB,IAAA,OAAA,EAApB,oBAAoB,CAAA,I;AAAA,IAAA,UAAA,EAFnB;;AAEmB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { from } from 'rxjs';\nimport { Web3Service } from './web3.service'\n\nconst basicNFTArtifacts = require('../../../build/contracts/basicNFT.json');\nconst contract = require('@truffle/contract');\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BasicContractService {\n\n  basicNFT = contract(basicNFTArtifacts);\n\n  constructor(\n  \tprivate web3Ser: Web3Service,\n  \t) {\n  \t// Bootstrap the MetaCoin abstraction for Use\n  \tthis.basicNFT.setProvider(web3Ser.web3.currentProvider);\n  }\n\n  getBalance(account: any): Observable<number> {\n  let basic;\n\n  return Observable.create((observer: any) => {\n    this.basicNFT\n      .deployed()\n      .then((instance: any) => {\n        basic = instance;\n        //we use call here so the call doesn't try and write, making it free\n        return basic.balanceOf.call(account, {\n          from: account\n        });\n      })\n      .then((value: any) => {\n        observer.next(value)\n        observer.complete()\n      })\n      .catch((e: any) => {\n        console.log(e);\n        observer.error(e)\n      });\n    })\n  }\n\n  async getOwner(id: any): Promise<any> {\n\t\tlet basic = await this.basicNFT.deployed();\n    const value = await basic.ownerOf.call(id, {\n      from: this.web3Ser.web3.eth.defaultAccount});\n    return value;\n\n/*\t\treturn Observable.create((observer: any) => {\n\t\t\tthis.basicNFT\n\t\t\t\t.deployed()\n\t\t\t\t.then((instance: any) => {\n\t\t\t\t\tbasic = instance;\n\t\t\t\t\t//we use call here so the call doesn't try and write, making it free\n\t\t\t\t\treturn basic.ownerOf.call(id, {\n\t\t\t\t\t\tfrom: this.web3Ser.web3.eth.defaultAccount\n\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t\t.then((value: any) => {\n\t\t\t\t\tobserver.next(value)\n\t\t\t\t\tobserver.complete()\n\t\t\t\t})\n\t\t\t\t.catch((e: any) => {\n\t\t\t\t\tconsole.log(e);\n\t\t\t\t\tobserver.error(e)\n\t\t\t\t});\n\t\t}) */\n\t}\n\n\tasync mintCoin(to: any): Promise<any>{\n    let basic = await this.basicNFT.deployed();\n    const value = await basic.mint(to, {\n      from: this.web3Ser.web3.eth.defaultAccount});\n    return value;\n\t}\n\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}