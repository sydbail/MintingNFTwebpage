{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n\nconst errCode = require('err-code');\n\nconst {\n  NotEnabledError\n} = require('../errors');\n\nconst get = require('dlv');\n/**\n * @param {Object} config\n * @param {import('../types').NetworkService} config.network\n * @param {import('ipfs-core-types/src/config').Config} [config.config]\n */\n\n\nmodule.exports = ({\n  network,\n  config\n}) => {\n  const isEnabled = get(config || {}, 'Pubsub.Enabled', true);\n  return {\n    subscribe: isEnabled ? withTimeoutOption(subscribe) : notEnabled,\n    unsubscribe: isEnabled ? withTimeoutOption(unsubscribe) : notEnabled,\n    publish: isEnabled ? withTimeoutOption(publish) : notEnabled,\n    ls: isEnabled ? withTimeoutOption(ls) : notEnabled,\n    peers: isEnabled ? withTimeoutOption(peers) : notEnabled\n  };\n  /**\n   * @type {import('ipfs-core-types/src/pubsub').API[\"subscribe\"]}\n   */\n\n  function subscribe(_x, _x2) {\n    return _subscribe.apply(this, arguments);\n  }\n  /**\n   * @type {import('ipfs-core-types/src/pubsub').API[\"unsubscribe\"]}\n   */\n\n\n  function _subscribe() {\n    _subscribe = _asyncToGenerator(function* (topic, handler, options = {}) {\n      const {\n        libp2p\n      } = yield network.use(options); // @ts-ignore Libp2p Pubsub is deprecating the handler, using the EventEmitter\n\n      return libp2p.pubsub.subscribe(topic, handler, options);\n    });\n    return _subscribe.apply(this, arguments);\n  }\n\n  function unsubscribe(_x3, _x4) {\n    return _unsubscribe.apply(this, arguments);\n  }\n  /**\n   * @type {import('ipfs-core-types/src/pubsub').API[\"publish\"]}\n   */\n\n\n  function _unsubscribe() {\n    _unsubscribe = _asyncToGenerator(function* (topic, handler, options = {}) {\n      const {\n        libp2p\n      } = yield network.use(options); // @ts-ignore Libp2p Pubsub is deprecating the handler, using the EventEmitter\n\n      libp2p.pubsub.unsubscribe(topic, handler, options);\n    });\n    return _unsubscribe.apply(this, arguments);\n  }\n\n  function publish(_x5, _x6) {\n    return _publish.apply(this, arguments);\n  }\n  /**\n   * @type {import('ipfs-core-types/src/pubsub').API[\"ls\"]}\n   */\n\n\n  function _publish() {\n    _publish = _asyncToGenerator(function* (topic, data, options = {}) {\n      const {\n        libp2p\n      } = yield network.use(options);\n\n      if (!data) {\n        throw errCode(new Error('argument \"data\" is required'), 'ERR_ARG_REQUIRED');\n      }\n\n      yield libp2p.pubsub.publish(topic, data);\n    });\n    return _publish.apply(this, arguments);\n  }\n\n  function ls() {\n    return _ls.apply(this, arguments);\n  }\n  /**\n   * @type {import('ipfs-core-types/src/pubsub').API[\"peers\"]}\n   */\n\n\n  function _ls() {\n    _ls = _asyncToGenerator(function* (options = {}) {\n      const {\n        libp2p\n      } = yield network.use(options);\n      return libp2p.pubsub.getTopics();\n    });\n    return _ls.apply(this, arguments);\n  }\n\n  function peers(_x7) {\n    return _peers.apply(this, arguments);\n  }\n\n  function _peers() {\n    _peers = _asyncToGenerator(function* (topic, options = {}) {\n      const {\n        libp2p\n      } = yield network.use(options);\n      return libp2p.pubsub.getSubscribers(topic);\n    });\n    return _peers.apply(this, arguments);\n  }\n};\n\nconst notEnabled = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* () {\n    // eslint-disable-line require-await\n    throw new NotEnabledError('pubsub not enabled');\n  });\n\n  return function notEnabled() {\n    return _ref.apply(this, arguments);\n  };\n}();","map":null,"metadata":{},"sourceType":"script"}