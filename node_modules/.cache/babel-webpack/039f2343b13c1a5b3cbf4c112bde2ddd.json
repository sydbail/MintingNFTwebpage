{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nvar _awaitAsyncGenerator = require(\"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\").default;\n\nvar _wrapAsyncGenerator = require(\"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst Client = require('../../lib/core');\n\nconst Service = require('./service');\n\nconst toUrlSearchParams = require('../../lib/to-url-search-params');\n/**\n * @typedef {import('../../types').Options} Options\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n * @typedef {import('ipfs-core-types/src/pin/remote').Pin} Pin\n * @typedef {import('ipfs-core-types/src/pin/remote').AddOptions} AddOptions\n * @typedef {import('ipfs-core-types/src/pin/remote').Query} Query\n * @typedef {import('ipfs-core-types/src/pin/remote').Status} Status\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin/remote').API<HTTPClientExtraOptions>} RemotePiningAPI\n */\n\n\nclass Remote {\n  /**\n   * @param {Options} options\n   */\n  constructor(options) {\n    this.client = new Client(options);\n    /** @readonly */\n\n    this.service = new Service(options);\n  }\n\n}\n/**\n * @type {RemotePiningAPI[\"add\"]}\n */\n\n\nRemote.prototype.add = /*#__PURE__*/function () {\n  var _add = _asyncToGenerator(function* (cid, {\n    timeout,\n    signal,\n    headers,\n    ...query\n  }) {\n    const response = yield this.client.post('pin/remote/add', {\n      timeout,\n      signal,\n      headers,\n      searchParams: encodeAddParams({\n        cid,\n        ...query\n      })\n    });\n    return decodePin(yield response.json());\n  });\n\n  function add(_x2, _x3) {\n    return _add.apply(this, arguments);\n  }\n\n  return add;\n}();\n/**\n * @type {RemotePiningAPI[\"ls\"]}\n */\n\n\nRemote.prototype.ls = /*#__PURE__*/function () {\n  var _ls = _wrapAsyncGenerator(function* ({\n    timeout,\n    signal,\n    headers,\n    ...query\n  }) {\n    const response = yield _awaitAsyncGenerator(this.client.post('pin/remote/ls', {\n      timeout,\n      signal,\n      headers,\n      searchParams: encodeQuery(query)\n    }));\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n\n    var _iteratorError;\n\n    try {\n      for (var _iterator = _asyncIterator(response.ndjson()), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n        const pin = _value;\n        yield decodePin(pin);\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          yield _awaitAsyncGenerator(_iterator.return());\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  });\n\n  function ls(_x) {\n    return _ls.apply(this, arguments);\n  }\n\n  return ls;\n}();\n/**\n * @type {RemotePiningAPI[\"rm\"]}\n */\n\n\nRemote.prototype.rm = /*#__PURE__*/function () {\n  var _rm = _asyncToGenerator(function* ({\n    timeout,\n    signal,\n    headers,\n    ...query\n  }) {\n    yield this.client.post('pin/remote/rm', {\n      timeout,\n      signal,\n      headers,\n      searchParams: encodeQuery({ ...query,\n        all: false\n      })\n    });\n  });\n\n  function rm(_x4) {\n    return _rm.apply(this, arguments);\n  }\n\n  return rm;\n}();\n/**\n * @type {RemotePiningAPI[\"rmAll\"]}\n */\n\n\nRemote.prototype.rmAll = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* ({\n    timeout,\n    signal,\n    headers,\n    ...query\n  }) {\n    yield this.client.post('pin/remote/rm', {\n      timeout,\n      signal,\n      headers,\n      searchParams: encodeQuery({ ...query,\n        all: true\n      })\n    });\n  });\n\n  return function (_x5) {\n    return _ref.apply(this, arguments);\n  };\n}();\n/**\n * @param {Object} json\n * @param {string} json.Name\n * @param {string} json.Cid\n * @param {Status} json.Status\n * @returns {Pin}\n */\n\n\nconst decodePin = ({\n  Name: name,\n  Status: status,\n  Cid: cid\n}) => {\n  return {\n    cid: CID.parse(cid),\n    name,\n    status\n  };\n};\n/**\n * @param {any} service\n * @returns {string}\n */\n\n\nconst encodeService = service => {\n  if (typeof service === 'string' && service !== '') {\n    return service;\n  } else {\n    throw new TypeError('service name must be passed');\n  }\n};\n/**\n * @param {any} cid\n * @returns {string}\n */\n\n\nconst encodeCID = cid => {\n  if (cid instanceof CID) {\n    return cid.toString();\n  } else {\n    throw new TypeError(`CID instance expected instead of ${typeof cid}`);\n  }\n};\n/**\n * @param {Query & { all?: boolean }} query\n * @returns {URLSearchParams}\n */\n\n\nconst encodeQuery = ({\n  service,\n  cid,\n  name,\n  status,\n  all\n}) => {\n  const query = toUrlSearchParams({\n    service: encodeService(service),\n    name,\n    force: all ? true : undefined\n  });\n\n  if (cid) {\n    for (const value of cid) {\n      query.append('cid', encodeCID(value));\n    }\n  }\n\n  if (status) {\n    for (const value of status) {\n      query.append('status', value);\n    }\n  }\n\n  return query;\n};\n/**\n * @param {AddOptions & {cid:CID}} options\n * @returns {URLSearchParams}\n */\n\n\nconst encodeAddParams = ({\n  cid,\n  service,\n  background,\n  name,\n  origins\n}) => {\n  const params = toUrlSearchParams({\n    arg: encodeCID(cid),\n    service: encodeService(service),\n    name,\n    background: background ? true : undefined\n  });\n\n  if (origins) {\n    for (const origin of origins) {\n      params.append('origin', origin.toString());\n    }\n  }\n\n  return params;\n};\n\nmodule.exports = Remote;","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Demo/node_modules/ipfs-http-client/src/pin/remote/index.js"],"names":["CID","require","Client","Service","toUrlSearchParams","Remote","constructor","options","client","service","prototype","add","cid","timeout","signal","headers","query","response","post","searchParams","encodeAddParams","decodePin","json","ls","encodeQuery","ndjson","pin","rm","all","rmAll","Name","name","Status","status","Cid","parse","encodeService","TypeError","encodeCID","toString","force","undefined","value","append","background","origins","params","arg","origin","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst Client = require('../../lib/core')\nconst Service = require('./service')\nconst toUrlSearchParams = require('../../lib/to-url-search-params')\n\n/**\n * @typedef {import('../../types').Options} Options\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n * @typedef {import('ipfs-core-types/src/pin/remote').Pin} Pin\n * @typedef {import('ipfs-core-types/src/pin/remote').AddOptions} AddOptions\n * @typedef {import('ipfs-core-types/src/pin/remote').Query} Query\n * @typedef {import('ipfs-core-types/src/pin/remote').Status} Status\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin/remote').API<HTTPClientExtraOptions>} RemotePiningAPI\n */\n\nclass Remote {\n  /**\n   * @param {Options} options\n   */\n  constructor (options) {\n    this.client = new Client(options)\n    /** @readonly */\n    this.service = new Service(options)\n  }\n}\n\n/**\n * @type {RemotePiningAPI[\"add\"]}\n */\nRemote.prototype.add = async function add (cid, { timeout, signal, headers, ...query }) {\n  const response = await this.client.post('pin/remote/add', {\n    timeout,\n    signal,\n    headers,\n    searchParams: encodeAddParams({ cid, ...query })\n  })\n\n  return decodePin(await response.json())\n}\n\n/**\n * @type {RemotePiningAPI[\"ls\"]}\n */\nRemote.prototype.ls = async function * ls ({ timeout, signal, headers, ...query }) {\n  const response = await this.client.post('pin/remote/ls', {\n    timeout,\n    signal,\n    headers,\n    searchParams: encodeQuery(query)\n  })\n\n  for await (const pin of response.ndjson()) {\n    yield decodePin(pin)\n  }\n}\n\n/**\n * @type {RemotePiningAPI[\"rm\"]}\n */\nRemote.prototype.rm = async function rm ({ timeout, signal, headers, ...query }) {\n  await this.client.post('pin/remote/rm', {\n    timeout,\n    signal,\n    headers,\n    searchParams: encodeQuery({\n      ...query,\n      all: false\n    })\n  })\n}\n\n/**\n * @type {RemotePiningAPI[\"rmAll\"]}\n */\nRemote.prototype.rmAll = async function ({ timeout, signal, headers, ...query }) {\n  await this.client.post('pin/remote/rm', {\n    timeout,\n    signal,\n    headers,\n    searchParams: encodeQuery({\n      ...query,\n      all: true\n    })\n  })\n}\n\n/**\n * @param {Object} json\n * @param {string} json.Name\n * @param {string} json.Cid\n * @param {Status} json.Status\n * @returns {Pin}\n */\nconst decodePin = ({ Name: name, Status: status, Cid: cid }) => {\n  return {\n    cid: CID.parse(cid),\n    name,\n    status\n  }\n}\n\n/**\n * @param {any} service\n * @returns {string}\n */\nconst encodeService = (service) => {\n  if (typeof service === 'string' && service !== '') {\n    return service\n  } else {\n    throw new TypeError('service name must be passed')\n  }\n}\n\n/**\n * @param {any} cid\n * @returns {string}\n */\nconst encodeCID = (cid) => {\n  if (cid instanceof CID) {\n    return cid.toString()\n  } else {\n    throw new TypeError(`CID instance expected instead of ${typeof cid}`)\n  }\n}\n\n/**\n * @param {Query & { all?: boolean }} query\n * @returns {URLSearchParams}\n */\nconst encodeQuery = ({ service, cid, name, status, all }) => {\n  const query = toUrlSearchParams({\n    service: encodeService(service),\n    name,\n    force: all ? true : undefined\n  })\n\n  if (cid) {\n    for (const value of cid) {\n      query.append('cid', encodeCID(value))\n    }\n  }\n\n  if (status) {\n    for (const value of status) {\n      query.append('status', value)\n    }\n  }\n\n  return query\n}\n\n/**\n * @param {AddOptions & {cid:CID}} options\n * @returns {URLSearchParams}\n */\nconst encodeAddParams = ({ cid, service, background, name, origins }) => {\n  const params = toUrlSearchParams({\n    arg: encodeCID(cid),\n    service: encodeService(service),\n    name,\n    background: background ? true : undefined\n  })\n\n  if (origins) {\n    for (const origin of origins) {\n      params.append('origin', origin.toString())\n    }\n  }\n\n  return params\n}\n\nmodule.exports = Remote\n"]},"metadata":{},"sourceType":"script"}