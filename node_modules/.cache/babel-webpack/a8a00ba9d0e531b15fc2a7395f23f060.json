{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst {\n  Record\n} = require('libp2p-record');\n\nconst errcode = require('err-code');\n\nconst Message = require('../../message');\n\nconst utils = require('../../utils');\n/**\n * @typedef {import('peer-id')} PeerId\n */\n\n/**\n * @param {import('../../index')} dht\n */\n\n\nmodule.exports = dht => {\n  const log = utils.logger(dht.peerId, 'rpc:get-value');\n  /**\n   * Process `GetValue` DHT messages.\n   *\n   * @param {PeerId} peerId\n   * @param {Message} msg\n   * @returns {Promise<Message>}\n   */\n\n  function getValue(_x, _x2) {\n    return _getValue.apply(this, arguments);\n  }\n\n  function _getValue() {\n    _getValue = _asyncToGenerator(function* (peerId, msg) {\n      const key = msg.key;\n      log('key: %b', key);\n\n      if (!key || key.length === 0) {\n        throw errcode(new Error('Invalid key'), 'ERR_INVALID_KEY');\n      }\n\n      const response = new Message(Message.TYPES.GET_VALUE, key, msg.clusterLevel);\n\n      if (utils.isPublicKeyKey(key)) {\n        log('is public key');\n        const idFromKey = utils.fromPublicKeyKey(key);\n        let id;\n\n        if (dht._isSelf(idFromKey)) {\n          id = dht.peerId;\n        } else {\n          const peerData = dht.peerStore.get(idFromKey);\n          id = peerData && peerData.id;\n        }\n\n        if (id && id.pubKey) {\n          log('returning found public key');\n          response.record = new Record(key, id.pubKey.bytes);\n          return response;\n        }\n      }\n\n      const [record, closer] = yield Promise.all([dht._checkLocalDatastore(key), dht._betterPeersToQuery(msg, peerId)]);\n\n      if (record) {\n        log('got record');\n        response.record = record;\n      }\n\n      if (closer.length > 0) {\n        log('got closer %s', closer.length);\n        response.closerPeers = closer;\n      }\n\n      return response;\n    });\n    return _getValue.apply(this, arguments);\n  }\n\n  return getValue;\n};","map":null,"metadata":{},"sourceType":"script"}