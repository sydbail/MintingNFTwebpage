{"ast":null,"code":"'use strict';\n\nvar _wrapAsyncGenerator = require(\"/Users/sydneybailey/Internship/Dapp/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\").default;\n\nvar _awaitAsyncGenerator = require(\"/Users/sydneybailey/Internship/Dapp/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\").default;\n\nvar _asyncIterator = require(\"/Users/sydneybailey/Internship/Dapp/node_modules/@babel/runtime/helpers/asyncIterator\").default;\n\nvar _asyncGeneratorDelegate = require(\"/Users/sydneybailey/Internship/Dapp/node_modules/@babel/runtime/helpers/asyncGeneratorDelegate\").default;\n\nconst {\n  Adapter\n} = require('interface-datastore');\n\nconst map = require('it-map');\n\nconst {\n  pipe\n} = require('it-pipe');\n/**\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-datastore').Options} Options\n * @typedef {import('interface-datastore').Batch} Batch\n * @typedef {import('interface-datastore').Query} Query\n * @typedef {import('interface-datastore').KeyQuery} KeyQuery\n * @typedef {import('interface-datastore').Key} Key\n * @typedef {import('interface-datastore').Pair} Pair\n * @typedef {import('./types').KeyTransform} KeyTransform\n */\n\n/**\n * @template TEntry\n * @typedef {import('interface-store').AwaitIterable<TEntry>} AwaitIterable\n */\n\n/**\n * A datastore shim, that wraps around a given datastore, changing\n * the way keys look to the user, for example namespacing\n * keys, reversing them, etc.\n *\n * @implements {Datastore}\n */\n\n\nclass KeyTransformDatastore extends Adapter {\n  /**\n   * @param {Datastore} child\n   * @param {KeyTransform} transform\n   */\n  constructor(child, transform) {\n    super();\n    this.child = child;\n    this.transform = transform;\n  }\n\n  open() {\n    return this.child.open();\n  }\n  /**\n   * @param {Key} key\n   * @param {Uint8Array} val\n   * @param {Options} [options]\n   */\n\n\n  put(key, val, options) {\n    return this.child.put(this.transform.convert(key), val, options);\n  }\n  /**\n   * @param {Key} key\n   * @param {Options} [options]\n   */\n\n\n  get(key, options) {\n    return this.child.get(this.transform.convert(key), options);\n  }\n  /**\n   * @param {Key} key\n   * @param {Options} [options]\n   */\n\n\n  has(key, options) {\n    return this.child.has(this.transform.convert(key), options);\n  }\n  /**\n   * @param {Key} key\n   * @param {Options} [options]\n   */\n\n\n  delete(key, options) {\n    return this.child.delete(this.transform.convert(key), options);\n  }\n  /**\n   * @param {AwaitIterable<Pair>} source\n   * @param {Options} [options]\n   * @returns {AsyncIterable<Pair>}\n   */\n\n\n  putMany(source, options = {}) {\n    var _this = this;\n\n    return _wrapAsyncGenerator(function* () {\n      const transform = _this.transform;\n      const child = _this.child;\n      yield* _asyncGeneratorDelegate(_asyncIterator(pipe(source, /*#__PURE__*/function () {\n        var _ref = _wrapAsyncGenerator(function* (source) {\n          yield* _asyncGeneratorDelegate(_asyncIterator(map(source, ({\n            key,\n            value\n          }) => ({\n            key: transform.convert(key),\n            value\n          }))), _awaitAsyncGenerator);\n        });\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }(), /*#__PURE__*/function () {\n        var _ref2 = _wrapAsyncGenerator(function* (source) {\n          yield* _asyncGeneratorDelegate(_asyncIterator(child.putMany(source, options)), _awaitAsyncGenerator);\n        });\n\n        return function (_x2) {\n          return _ref2.apply(this, arguments);\n        };\n      }(), /*#__PURE__*/function () {\n        var _ref3 = _wrapAsyncGenerator(function* (source) {\n          yield* _asyncGeneratorDelegate(_asyncIterator(map(source, ({\n            key,\n            value\n          }) => ({\n            key: transform.invert(key),\n            value\n          }))), _awaitAsyncGenerator);\n        });\n\n        return function (_x3) {\n          return _ref3.apply(this, arguments);\n        };\n      }())), _awaitAsyncGenerator);\n    })();\n  }\n  /**\n   * @param {AwaitIterable<Key>} source\n   * @param {Options} [options]\n   * @returns {AsyncIterable<Uint8Array>}\n   */\n\n\n  getMany(source, options = {}) {\n    var _this2 = this;\n\n    return _wrapAsyncGenerator(function* () {\n      const transform = _this2.transform;\n      const child = _this2.child;\n      yield* _asyncGeneratorDelegate(_asyncIterator(pipe(source, /*#__PURE__*/function () {\n        var _ref4 = _wrapAsyncGenerator(function* (source) {\n          yield* _asyncGeneratorDelegate(_asyncIterator(map(source, key => transform.convert(key))), _awaitAsyncGenerator);\n        });\n\n        return function (_x4) {\n          return _ref4.apply(this, arguments);\n        };\n      }(), /*#__PURE__*/function () {\n        var _ref5 = _wrapAsyncGenerator(function* (source) {\n          yield* _asyncGeneratorDelegate(_asyncIterator(child.getMany(source, options)), _awaitAsyncGenerator);\n        });\n\n        return function (_x5) {\n          return _ref5.apply(this, arguments);\n        };\n      }())), _awaitAsyncGenerator);\n    })();\n  }\n  /**\n   * @param {AwaitIterable<Key>} source\n   * @param {Options} [options]\n   * @returns {AsyncIterable<Key>}\n   */\n\n\n  deleteMany(source, options = {}) {\n    var _this3 = this;\n\n    return _wrapAsyncGenerator(function* () {\n      const transform = _this3.transform;\n      const child = _this3.child;\n      yield* _asyncGeneratorDelegate(_asyncIterator(pipe(source, /*#__PURE__*/function () {\n        var _ref6 = _wrapAsyncGenerator(function* (source) {\n          yield* _asyncGeneratorDelegate(_asyncIterator(map(source, key => transform.convert(key))), _awaitAsyncGenerator);\n        });\n\n        return function (_x6) {\n          return _ref6.apply(this, arguments);\n        };\n      }(), /*#__PURE__*/function () {\n        var _ref7 = _wrapAsyncGenerator(function* (source) {\n          yield* _asyncGeneratorDelegate(_asyncIterator(child.deleteMany(source, options)), _awaitAsyncGenerator);\n        });\n\n        return function (_x7) {\n          return _ref7.apply(this, arguments);\n        };\n      }(), /*#__PURE__*/function () {\n        var _ref8 = _wrapAsyncGenerator(function* (source) {\n          yield* _asyncGeneratorDelegate(_asyncIterator(map(source, key => transform.invert(key))), _awaitAsyncGenerator);\n        });\n\n        return function (_x8) {\n          return _ref8.apply(this, arguments);\n        };\n      }())), _awaitAsyncGenerator);\n    })();\n  }\n  /**\n   * @returns {Batch}\n   */\n\n\n  batch() {\n    const b = this.child.batch();\n    return {\n      put: (key, value) => {\n        b.put(this.transform.convert(key), value);\n      },\n      delete: key => {\n        b.delete(this.transform.convert(key));\n      },\n      commit: options => {\n        return b.commit(options);\n      }\n    };\n  }\n  /**\n   * @param {Query} q\n   * @param {Options} [options]\n   */\n\n\n  query(q, options) {\n    return map(this.child.query(q, options), ({\n      key,\n      value\n    }) => {\n      return {\n        key: this.transform.invert(key),\n        value\n      };\n    });\n  }\n  /**\n   * @param {KeyQuery} q\n   * @param {Options} [options]\n   */\n\n\n  queryKeys(q, options) {\n    return map(this.child.queryKeys(q, options), key => {\n      return this.transform.invert(key);\n    });\n  }\n\n  close() {\n    return this.child.close();\n  }\n\n}\n\nmodule.exports = KeyTransformDatastore;","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Dapp/node_modules/datastore-core/src/keytransform.js"],"names":["Adapter","require","map","pipe","KeyTransformDatastore","constructor","child","transform","open","put","key","val","options","convert","get","has","delete","putMany","source","value","invert","getMany","deleteMany","batch","b","commit","query","q","queryKeys","close","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst { Adapter } = require('interface-datastore')\nconst map = require('it-map')\nconst { pipe } = require('it-pipe')\n\n/**\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-datastore').Options} Options\n * @typedef {import('interface-datastore').Batch} Batch\n * @typedef {import('interface-datastore').Query} Query\n * @typedef {import('interface-datastore').KeyQuery} KeyQuery\n * @typedef {import('interface-datastore').Key} Key\n * @typedef {import('interface-datastore').Pair} Pair\n * @typedef {import('./types').KeyTransform} KeyTransform\n */\n\n/**\n * @template TEntry\n * @typedef {import('interface-store').AwaitIterable<TEntry>} AwaitIterable\n */\n\n/**\n * A datastore shim, that wraps around a given datastore, changing\n * the way keys look to the user, for example namespacing\n * keys, reversing them, etc.\n *\n * @implements {Datastore}\n */\nclass KeyTransformDatastore extends Adapter {\n  /**\n   * @param {Datastore} child\n   * @param {KeyTransform} transform\n   */\n  constructor (child, transform) {\n    super()\n\n    this.child = child\n    this.transform = transform\n  }\n\n  open () {\n    return this.child.open()\n  }\n\n  /**\n   * @param {Key} key\n   * @param {Uint8Array} val\n   * @param {Options} [options]\n   */\n  put (key, val, options) {\n    return this.child.put(this.transform.convert(key), val, options)\n  }\n\n  /**\n   * @param {Key} key\n   * @param {Options} [options]\n   */\n  get (key, options) {\n    return this.child.get(this.transform.convert(key), options)\n  }\n\n  /**\n   * @param {Key} key\n   * @param {Options} [options]\n   */\n  has (key, options) {\n    return this.child.has(this.transform.convert(key), options)\n  }\n\n  /**\n   * @param {Key} key\n   * @param {Options} [options]\n   */\n  delete (key, options) {\n    return this.child.delete(this.transform.convert(key), options)\n  }\n\n  /**\n   * @param {AwaitIterable<Pair>} source\n   * @param {Options} [options]\n   * @returns {AsyncIterable<Pair>}\n   */\n  async * putMany (source, options = {}) {\n    const transform = this.transform\n    const child = this.child\n\n    yield * pipe(\n      source,\n      async function * (source) {\n        yield * map(source, ({ key, value }) => ({\n          key: transform.convert(key),\n          value\n        }))\n      },\n      async function * (source) {\n        yield * child.putMany(source, options)\n      },\n      async function * (source) {\n        yield * map(source, ({ key, value }) => ({\n          key: transform.invert(key),\n          value\n        }))\n      }\n    )\n  }\n\n  /**\n   * @param {AwaitIterable<Key>} source\n   * @param {Options} [options]\n   * @returns {AsyncIterable<Uint8Array>}\n   */\n  async * getMany (source, options = {}) {\n    const transform = this.transform\n    const child = this.child\n\n    yield * pipe(\n      source,\n      async function * (source) {\n        yield * map(source, key => transform.convert(key))\n      },\n      async function * (source) {\n        yield * child.getMany(source, options)\n      }\n    )\n  }\n\n  /**\n   * @param {AwaitIterable<Key>} source\n   * @param {Options} [options]\n   * @returns {AsyncIterable<Key>}\n   */\n  async * deleteMany (source, options = {}) {\n    const transform = this.transform\n    const child = this.child\n\n    yield * pipe(\n      source,\n      async function * (source) {\n        yield * map(source, key => transform.convert(key))\n      },\n      async function * (source) {\n        yield * child.deleteMany(source, options)\n      },\n      async function * (source) {\n        yield * map(source, key => transform.invert(key))\n      }\n    )\n  }\n\n  /**\n   * @returns {Batch}\n   */\n  batch () {\n    const b = this.child.batch()\n    return {\n      put: (key, value) => {\n        b.put(this.transform.convert(key), value)\n      },\n      delete: (key) => {\n        b.delete(this.transform.convert(key))\n      },\n      commit: (options) => {\n        return b.commit(options)\n      }\n    }\n  }\n\n  /**\n   * @param {Query} q\n   * @param {Options} [options]\n   */\n  query (q, options) {\n    return map(this.child.query(q, options), ({ key, value }) => {\n      return {\n        key: this.transform.invert(key),\n        value\n      }\n    })\n  }\n\n  /**\n   * @param {KeyQuery} q\n   * @param {Options} [options]\n   */\n  queryKeys (q, options) {\n    return map(this.child.queryKeys(q, options), key => {\n      return this.transform.invert(key)\n    })\n  }\n\n  close () {\n    return this.child.close()\n  }\n}\n\nmodule.exports = KeyTransformDatastore\n"]},"metadata":{},"sourceType":"script"}