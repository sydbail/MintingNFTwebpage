{"ast":null,"code":"var _asyncToGenerator = require(\"/Users/sydneybailey/Internship/contract-testing/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst debug = require(\"debug\")(\"contract:promievent\");\n\nconst DebugUtils = require(\"@truffle/debug-utils\");\n\nconst Web3PromiEvent = require(\"web3-core-promievent\");\n\nfunction PromiEvent(justPromise, bugger = undefined, isDeploy = false) {\n  const {\n    resolve,\n    reject,\n    eventEmitter\n  } = new Web3PromiEvent(justPromise);\n  const originalStackTrace = new Error().stack;\n\n  function rejectHijacker(e) {\n    var _this = this;\n\n    debug(\"hijacking!\");\n    debug(\"hash: %s\", this.txHash);\n    let getSolidityStackTrace;\n\n    if (bugger && this.txHash) {\n      debug(\"debugging time!\");\n\n      getSolidityStackTrace = /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* () {\n          try {\n            yield bugger.load(_this.txHash);\n            yield bugger.continueUntilBreakpoint();\n            const report = bugger.stacktrace();\n            yield bugger.unload();\n            return DebugUtils.formatStacktrace(report, 4); //indent 4 to match node's stacktraces\n          } catch (_) {\n            //ignore errors\n            return undefined;\n          }\n        });\n\n        return function getSolidityStackTrace() {\n          return _ref.apply(this, arguments);\n        };\n      }();\n    } else {\n      getSolidityStackTrace = /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator(function* () {\n          return undefined;\n        });\n\n        return function getSolidityStackTrace() {\n          return _ref2.apply(this, arguments);\n        };\n      }();\n    }\n\n    getSolidityStackTrace().then(solidityStackTrace => {\n      debug(\"e.stack: %s\", e.stack);\n      debug(\"originalStackTrace: %s\", originalStackTrace);\n      debug(\"solidityStackTrace: %s\", solidityStackTrace);\n      const initialLinesRegexp = isDeploy ? /^.*\\n.*\\n.*\\n.*/ //first 4 lines (note . does not include \\n)\n      : /^.*\\n.*\\n.*/; //first 3 lines\n      //we replace not just the first line but also the next 2 as they contain\n      //useless stuff users shouldn't see; in case of deployments there's one\n      //additional to remove\n\n      try {\n        let stackTrace = originalStackTrace.replace(initialLinesRegexp, e.stack.split(\"\\n\")[0]);\n\n        if (solidityStackTrace) {\n          //let's split the solidity stack trace into first line & rest\n          let [_, solidityFirstLine, solidityRemaining] = solidityStackTrace.match(/^(.*?)\\r?\\n((.|\\r|\\n)*)$/);\n          stackTrace = stackTrace.replace(/^.*/, //note that . does not include \\n\n          solidityRemaining //note: this does not end in \\n, so no modification needed\n          );\n          e.hijackedMessage = e.message;\n          e.message = solidityFirstLine;\n        }\n\n        e.hijackedStack = e.stack;\n        e.stack = stackTrace;\n      } catch (_) {//again, ignore errors\n        //(not sure how this can happen here but I'll leave this block here)\n      }\n\n      reject(e);\n    });\n  }\n\n  this.resolve = resolve;\n  this.reject = rejectHijacker.bind(this);\n  this.eventEmitter = eventEmitter;\n\n  if (bugger) {\n    this.debug = true;\n  }\n}\n\nPromiEvent.resolve = Web3PromiEvent.resolve;\n\nPromiEvent.prototype.setTransactionHash = function (txHash) {\n  debug(\"setting!\");\n  debug(\"hash: %s\", txHash);\n  this.txHash = txHash;\n};\n\nmodule.exports = PromiEvent;","map":null,"metadata":{},"sourceType":"script"}