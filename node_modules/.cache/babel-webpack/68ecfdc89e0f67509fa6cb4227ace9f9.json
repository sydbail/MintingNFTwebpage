{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/Demo/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst webcrypto = require('../webcrypto');\n\nconst lengths = require('./lengths');\n\nconst hashTypes = {\n  SHA1: 'SHA-1',\n  SHA256: 'SHA-256',\n  SHA512: 'SHA-512'\n};\n\nconst sign = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (key, data) {\n    const buf = yield webcrypto.get().subtle.sign({\n      name: 'HMAC'\n    }, key, data);\n    return new Uint8Array(buf, buf.byteOffset, buf.byteLength);\n  });\n\n  return function sign(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexports.create = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator(function* (hashType, secret) {\n    const hash = hashTypes[hashType];\n    const key = yield webcrypto.get().subtle.importKey('raw', secret, {\n      name: 'HMAC',\n      hash: {\n        name: hash\n      }\n    }, false, ['sign']);\n    return {\n      digest(data) {\n        return _asyncToGenerator(function* () {\n          // eslint-disable-line require-await\n          return sign(key, data);\n        })();\n      },\n\n      length: lengths[hashType]\n    };\n  });\n\n  return function (_x3, _x4) {\n    return _ref2.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/sydneybailey/Internship/Demo/node_modules/libp2p-crypto/src/hmac/index-browser.js"],"names":["webcrypto","require","lengths","hashTypes","SHA1","SHA256","SHA512","sign","key","data","buf","get","subtle","name","Uint8Array","byteOffset","byteLength","exports","create","hashType","secret","hash","importKey","digest","length"],"mappings":"AAAA;;;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,cAAD,CAAzB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,WAAD,CAAvB;;AAEA,MAAME,SAAS,GAAG;AAChBC,EAAAA,IAAI,EAAE,OADU;AAEhBC,EAAAA,MAAM,EAAE,SAFQ;AAGhBC,EAAAA,MAAM,EAAE;AAHQ,CAAlB;;AAMA,MAAMC,IAAI;AAAA,+BAAG,WAAOC,GAAP,EAAYC,IAAZ,EAAqB;AAChC,UAAMC,GAAG,SAASV,SAAS,CAACW,GAAV,GAAgBC,MAAhB,CAAuBL,IAAvB,CAA4B;AAAEM,MAAAA,IAAI,EAAE;AAAR,KAA5B,EAA8CL,GAA9C,EAAmDC,IAAnD,CAAlB;AACA,WAAO,IAAIK,UAAJ,CAAeJ,GAAf,EAAoBA,GAAG,CAACK,UAAxB,EAAoCL,GAAG,CAACM,UAAxC,CAAP;AACD,GAHS;;AAAA,kBAAJT,IAAI;AAAA;AAAA;AAAA,GAAV;;AAKAU,OAAO,CAACC,MAAR;AAAA,gCAAiB,WAAgBC,QAAhB,EAA0BC,MAA1B,EAAkC;AACjD,UAAMC,IAAI,GAAGlB,SAAS,CAACgB,QAAD,CAAtB;AAEA,UAAMX,GAAG,SAASR,SAAS,CAACW,GAAV,GAAgBC,MAAhB,CAAuBU,SAAvB,CAChB,KADgB,EAEhBF,MAFgB,EAGhB;AACEP,MAAAA,IAAI,EAAE,MADR;AAEEQ,MAAAA,IAAI,EAAE;AAAER,QAAAA,IAAI,EAAEQ;AAAR;AAFR,KAHgB,EAOhB,KAPgB,EAQhB,CAAC,MAAD,CARgB,CAAlB;AAWA,WAAO;AACCE,MAAAA,MAAN,CAAcd,IAAd,EAAoB;AAAA;AAAE;AACpB,iBAAOF,IAAI,CAACC,GAAD,EAAMC,IAAN,CAAX;AADkB;AAEnB,OAHI;;AAILe,MAAAA,MAAM,EAAEtB,OAAO,CAACiB,QAAD;AAJV,KAAP;AAMD,GApBD;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["'use strict'\n\nconst webcrypto = require('../webcrypto')\nconst lengths = require('./lengths')\n\nconst hashTypes = {\n  SHA1: 'SHA-1',\n  SHA256: 'SHA-256',\n  SHA512: 'SHA-512'\n}\n\nconst sign = async (key, data) => {\n  const buf = await webcrypto.get().subtle.sign({ name: 'HMAC' }, key, data)\n  return new Uint8Array(buf, buf.byteOffset, buf.byteLength)\n}\n\nexports.create = async function (hashType, secret) {\n  const hash = hashTypes[hashType]\n\n  const key = await webcrypto.get().subtle.importKey(\n    'raw',\n    secret,\n    {\n      name: 'HMAC',\n      hash: { name: hash }\n    },\n    false,\n    ['sign']\n  )\n\n  return {\n    async digest (data) { // eslint-disable-line require-await\n      return sign(key, data)\n    },\n    length: lengths[hashType]\n  }\n}\n"]},"metadata":{},"sourceType":"script"}