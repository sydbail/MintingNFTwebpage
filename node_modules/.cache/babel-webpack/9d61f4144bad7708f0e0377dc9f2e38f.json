{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst addAll = require('./add-all');\n\nconst last = require('it-last');\n\nconst configure = require('./lib/configure');\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\n/**\n * @param {import('./types').Options} options\n */\n\n\nmodule.exports = options => {\n  const all = addAll(options);\n  return configure(() => {\n    /**\n     * @type {RootAPI[\"add\"]}\n     */\n    function add(_x) {\n      return _add.apply(this, arguments);\n    }\n\n    function _add() {\n      _add = _asyncToGenerator(function* (input, options = {}) {\n        // @ts-ignore - last may return undefined if source is empty\n        return yield last(all(input, options));\n      });\n      return _add.apply(this, arguments);\n    }\n\n    return add;\n  })(options);\n};","map":{"version":3,"sources":["/Users/sydneybailey/Internship/js-ipfs-examples/examples/browser-angular/node_modules/ipfs-http-client/src/add.js"],"names":["addAll","require","last","configure","module","exports","options","all","add","input"],"mappings":"AAAA;;;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,WAAD,CAAtB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,SAAD,CAApB;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,iBAAD,CAAzB;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AACAG,MAAM,CAACC,OAAP,GAAkBC,OAAD,IAAa;AAC5B,QAAMC,GAAG,GAAGP,MAAM,CAACM,OAAD,CAAlB;AACA,SAAOH,SAAS,CAAC,MAAM;AACrB;AACJ;AACA;AAHyB,aAINK,GAJM;AAAA;AAAA;;AAAA;AAAA,+BAIrB,WAAoBC,KAApB,EAA2BH,OAAO,GAAG,EAArC,EAAyC;AACvC;AACA,qBAAaJ,IAAI,CAACK,GAAG,CAACE,KAAD,EAAQH,OAAR,CAAJ,CAAjB;AACD,OAPoB;AAAA;AAAA;;AAQrB,WAAOE,GAAP;AACD,GATe,CAAT,CASJF,OATI,CAAP;AAUD,CAZD","sourcesContent":["'use strict'\n\nconst addAll = require('./add-all')\nconst last = require('it-last')\nconst configure = require('./lib/configure')\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\n/**\n * @param {import('./types').Options} options\n */\nmodule.exports = (options) => {\n  const all = addAll(options)\n  return configure(() => {\n    /**\n     * @type {RootAPI[\"add\"]}\n     */\n    async function add (input, options = {}) {\n      // @ts-ignore - last may return undefined if source is empty\n      return await last(all(input, options))\n    }\n    return add\n  })(options)\n}\n"]},"metadata":{},"sourceType":"script"}